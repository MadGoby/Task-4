/*! For license information please see slider.js.LICENSE.txt */
(self.webpackChunktest=self.webpackChunktest||[]).push([["slider"],{"./node_modules/autobind-decorator/lib/esm/index.js":(e,A,n)=>{"use strict";function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function l(e,A,n){var l=n.value;if("function"!=typeof l)throw new TypeError("@boundMethod decorator can only be applied to methods not: ".concat(t(l)));var i=!1;return{configurable:!0,get:function(){if(i||this===e.prototype||this.hasOwnProperty(A)||"function"!=typeof l)return l;var n=l.bind(this);return i=!0,Object.defineProperty(this,A,{configurable:!0,get:function(){return n},set:function(e){l=e,delete this[A]}}),i=!1,n},set:function(e){l=e}}}function i(e){var A;return"undefined"!=typeof Reflect&&"function"==typeof Reflect.ownKeys?A=Reflect.ownKeys(e.prototype):(A=Object.getOwnPropertyNames(e.prototype),"function"==typeof Object.getOwnPropertySymbols&&(A=A.concat(Object.getOwnPropertySymbols(e.prototype)))),A.forEach((function(A){if("constructor"!==A){var n=Object.getOwnPropertyDescriptor(e.prototype,A);"function"==typeof n.value&&Object.defineProperty(e.prototype,A,l(e,A,n))}})),e}function s(){return 1===arguments.length?i.apply(void 0,arguments):l.apply(void 0,arguments)}n.r(A),n.d(A,{boundClass:()=>i,boundMethod:()=>l,default:()=>s})},"./src/plugin/Model/Model.ts":(e,A)=>{"use strict";var n,t,l,i,s,o,a=(n="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Model\\Model.ts",t="da86794e236fe876db2f89fa02fe7207c28142f7",l=new(0,function(){}.constructor)("return this")(),s={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Model\\Model.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:0},end:{line:3,column:23}},2:{start:{line:6,column:8},end:{line:11,column:10}},3:{start:{line:14,column:8},end:{line:14,column:46}},4:{start:{line:17,column:27},end:{line:17,column:94}},5:{start:{line:18,column:31},end:{line:18,column:71}},6:{start:{line:19,column:26},end:{line:19,column:67}},7:{start:{line:20,column:8},end:{line:27,column:9}},8:{start:{line:22,column:16},end:{line:22,column:40}},9:{start:{line:24,column:16},end:{line:24,column:40}},10:{start:{line:26,column:16},end:{line:26,column:40}},11:{start:{line:30,column:31},end:{line:33,column:9}},12:{start:{line:31,column:30},end:{line:31,column:184}},13:{start:{line:32,column:12},end:{line:32,column:59}},14:{start:{line:34,column:8},end:{line:34,column:92}},15:{start:{line:37,column:34},end:{line:37,column:134}},16:{start:{line:37,column:46},end:{line:37,column:133}},17:{start:{line:38,column:8},end:{line:45,column:10}},18:{start:{line:48,column:31},end:{line:48,column:81}},19:{start:{line:49,column:29},end:{line:49,column:77}},20:{start:{line:50,column:37},end:{line:50,column:79}},21:{start:{line:51,column:35},end:{line:53,column:37}},22:{start:{line:54,column:8},end:{line:54,column:50}},23:{start:{line:55,column:8},end:{line:60,column:10}},24:{start:{line:63,column:45},end:{line:63,column:53}},25:{start:{line:64,column:24},end:{line:64,column:28}},26:{start:{line:65,column:25},end:{line:65,column:33}},27:{start:{line:66,column:24},end:{line:66,column:55}},28:{start:{line:67,column:26},end:{line:67,column:127}},29:{start:{line:68,column:8},end:{line:68,column:72}},30:{start:{line:71,column:8},end:{line:71,column:55}},31:{start:{line:74,column:8},end:{line:74,column:55}},32:{start:{line:77,column:8},end:{line:77,column:108}},33:{start:{line:80,column:8},end:{line:80,column:108}},34:{start:{line:83,column:29},end:{line:84,column:83}},35:{start:{line:85,column:8},end:{line:92,column:9}},36:{start:{line:87,column:16},end:{line:87,column:100}},37:{start:{line:89,column:16},end:{line:89,column:102}},38:{start:{line:91,column:16},end:{line:91,column:26}},39:{start:{line:95,column:25},end:{line:99,column:10}},40:{start:{line:100,column:40},end:{line:100,column:146}},41:{start:{line:101,column:41},end:{line:101,column:148}},42:{start:{line:102,column:8},end:{line:109,column:9}},43:{start:{line:104,column:16},end:{line:104,column:59}},44:{start:{line:106,column:16},end:{line:106,column:61}},45:{start:{line:108,column:16},end:{line:108,column:38}},46:{start:{line:112,column:8},end:{line:113,column:45}},47:{start:{line:113,column:12},end:{line:113,column:45}},48:{start:{line:114,column:8},end:{line:115,column:45}},49:{start:{line:115,column:12},end:{line:115,column:45}},50:{start:{line:116,column:8},end:{line:117,column:60}},51:{start:{line:117,column:12},end:{line:117,column:60}},52:{start:{line:118,column:8},end:{line:118,column:80}},53:{start:{line:119,column:8},end:{line:124,column:10}},54:{start:{line:127,column:37},end:{line:127,column:61}},55:{start:{line:128,column:8},end:{line:128,column:82}},56:{start:{line:131,column:35},end:{line:131,column:59}},57:{start:{line:132,column:8},end:{line:132,column:80}},58:{start:{line:135,column:32},end:{line:135,column:40}},59:{start:{line:136,column:8},end:{line:145,column:9}},60:{start:{line:138,column:16},end:{line:138,column:107}},61:{start:{line:139,column:16},end:{line:139,column:22}},62:{start:{line:141,column:16},end:{line:141,column:105}},63:{start:{line:142,column:16},end:{line:142,column:22}},64:{start:{line:144,column:16},end:{line:144,column:22}},65:{start:{line:146,column:8},end:{line:147,column:47}},66:{start:{line:147,column:12},end:{line:147,column:47}},67:{start:{line:148,column:8},end:{line:149,column:45}},68:{start:{line:149,column:12},end:{line:149,column:45}},69:{start:{line:152,column:0},end:{line:152,column:22}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:26},end:{line:12,column:5}},line:5},1:{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:27},end:{line:15,column:5}},line:13},2:{name:"(anonymous_2)",decl:{start:{line:16,column:4},end:{line:16,column:5}},loc:{start:{line:16,column:42},end:{line:28,column:5}},line:16},3:{name:"(anonymous_3)",decl:{start:{line:29,column:4},end:{line:29,column:5}},loc:{start:{line:29,column:39},end:{line:35,column:5}},line:29},4:{name:"(anonymous_4)",decl:{start:{line:30,column:31},end:{line:30,column:32}},loc:{start:{line:30,column:52},end:{line:33,column:9}},line:30},5:{name:"(anonymous_5)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:33},end:{line:46,column:5}},line:36},6:{name:"(anonymous_6)",decl:{start:{line:37,column:34},end:{line:37,column:35}},loc:{start:{line:37,column:46},end:{line:37,column:133}},line:37},7:{name:"(anonymous_7)",decl:{start:{line:47,column:4},end:{line:47,column:5}},loc:{start:{line:47,column:42},end:{line:61,column:5}},line:47},8:{name:"(anonymous_8)",decl:{start:{line:62,column:4},end:{line:62,column:5}},loc:{start:{line:62,column:33},end:{line:69,column:5}},line:62},9:{name:"(anonymous_9)",decl:{start:{line:70,column:4},end:{line:70,column:5}},loc:{start:{line:70,column:38},end:{line:72,column:5}},line:70},10:{name:"(anonymous_10)",decl:{start:{line:73,column:4},end:{line:73,column:5}},loc:{start:{line:73,column:37},end:{line:75,column:5}},line:73},11:{name:"(anonymous_11)",decl:{start:{line:76,column:4},end:{line:76,column:5}},loc:{start:{line:76,column:65},end:{line:78,column:5}},line:76},12:{name:"(anonymous_12)",decl:{start:{line:79,column:4},end:{line:79,column:5}},loc:{start:{line:79,column:66},end:{line:81,column:5}},line:79},13:{name:"(anonymous_13)",decl:{start:{line:82,column:4},end:{line:82,column:5}},loc:{start:{line:82,column:37},end:{line:93,column:5}},line:82},14:{name:"(anonymous_14)",decl:{start:{line:94,column:4},end:{line:94,column:5}},loc:{start:{line:94,column:30},end:{line:110,column:5}},line:94},15:{name:"(anonymous_15)",decl:{start:{line:111,column:4},end:{line:111,column:5}},loc:{start:{line:111,column:41},end:{line:125,column:5}},line:111},16:{name:"(anonymous_16)",decl:{start:{line:126,column:4},end:{line:126,column:5}},loc:{start:{line:126,column:33},end:{line:129,column:5}},line:126},17:{name:"(anonymous_17)",decl:{start:{line:130,column:4},end:{line:130,column:5}},loc:{start:{line:130,column:31},end:{line:133,column:5}},line:130},18:{name:"(anonymous_18)",decl:{start:{line:134,column:4},end:{line:134,column:5}},loc:{start:{line:134,column:38},end:{line:150,column:5}},line:134}},branchMap:{0:{loc:{start:{line:17,column:27},end:{line:17,column:94}},type:"binary-expr",locations:[{start:{line:17,column:27},end:{line:17,column:51}},{start:{line:17,column:55},end:{line:17,column:94}}],line:17},1:{loc:{start:{line:19,column:26},end:{line:19,column:67}},type:"binary-expr",locations:[{start:{line:19,column:26},end:{line:19,column:49}},{start:{line:19,column:53},end:{line:19,column:67}}],line:19},2:{loc:{start:{line:20,column:8},end:{line:27,column:9}},type:"switch",locations:[{start:{line:21,column:12},end:{line:22,column:40}},{start:{line:23,column:12},end:{line:24,column:40}},{start:{line:25,column:12},end:{line:26,column:40}}],line:20},3:{loc:{start:{line:50,column:37},end:{line:50,column:79}},type:"binary-expr",locations:[{start:{line:50,column:37},end:{line:50,column:66}},{start:{line:50,column:70},end:{line:50,column:79}}],line:50},4:{loc:{start:{line:51,column:35},end:{line:53,column:37}},type:"cond-expr",locations:[{start:{line:52,column:14},end:{line:52,column:39}},{start:{line:53,column:14},end:{line:53,column:37}}],line:51},5:{loc:{start:{line:66,column:24},end:{line:66,column:55}},type:"cond-expr",locations:[{start:{line:66,column:41},end:{line:66,column:48}},{start:{line:66,column:51},end:{line:66,column:55}}],line:66},6:{loc:{start:{line:77,column:15},end:{line:77,column:107}},type:"binary-expr",locations:[{start:{line:77,column:16},end:{line:77,column:31}},{start:{line:77,column:37},end:{line:77,column:106}}],line:77},7:{loc:{start:{line:80,column:15},end:{line:80,column:107}},type:"binary-expr",locations:[{start:{line:80,column:16},end:{line:80,column:29}},{start:{line:80,column:35},end:{line:80,column:106}}],line:80},8:{loc:{start:{line:85,column:8},end:{line:92,column:9}},type:"switch",locations:[{start:{line:86,column:12},end:{line:87,column:100}},{start:{line:88,column:12},end:{line:89,column:102}},{start:{line:90,column:12},end:{line:91,column:26}}],line:85},9:{loc:{start:{line:102,column:8},end:{line:109,column:9}},type:"switch",locations:[{start:{line:103,column:12},end:{line:104,column:59}},{start:{line:105,column:12},end:{line:106,column:61}},{start:{line:107,column:12},end:{line:108,column:38}}],line:102},10:{loc:{start:{line:112,column:8},end:{line:113,column:45}},type:"if",locations:[{start:{line:112,column:8},end:{line:113,column:45}},{start:{line:112,column:8},end:{line:113,column:45}}],line:112},11:{loc:{start:{line:114,column:8},end:{line:115,column:45}},type:"if",locations:[{start:{line:114,column:8},end:{line:115,column:45}},{start:{line:114,column:8},end:{line:115,column:45}}],line:114},12:{loc:{start:{line:116,column:8},end:{line:117,column:60}},type:"if",locations:[{start:{line:116,column:8},end:{line:117,column:60}},{start:{line:116,column:8},end:{line:117,column:60}}],line:116},13:{loc:{start:{line:128,column:15},end:{line:128,column:81}},type:"cond-expr",locations:[{start:{line:128,column:38},end:{line:128,column:73}},{start:{line:128,column:76},end:{line:128,column:81}}],line:128},14:{loc:{start:{line:132,column:15},end:{line:132,column:79}},type:"cond-expr",locations:[{start:{line:132,column:36},end:{line:132,column:71}},{start:{line:132,column:74},end:{line:132,column:79}}],line:132},15:{loc:{start:{line:136,column:8},end:{line:145,column:9}},type:"switch",locations:[{start:{line:137,column:12},end:{line:139,column:22}},{start:{line:140,column:12},end:{line:142,column:22}},{start:{line:143,column:12},end:{line:144,column:22}}],line:136},16:{loc:{start:{line:146,column:8},end:{line:147,column:47}},type:"if",locations:[{start:{line:146,column:8},end:{line:147,column:47}},{start:{line:146,column:8},end:{line:147,column:47}}],line:146},17:{loc:{start:{line:148,column:8},end:{line:149,column:45}},type:"if",locations:[{start:{line:148,column:8},end:{line:149,column:45}},{start:{line:148,column:8},end:{line:149,column:45}}],line:148}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0},b:{0:[0,0],1:[0,0],2:[0,0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0,0],9:[0,0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0,0],16:[0,0],17:[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Model\\Model.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Model\\Model.ts"],names:[],mappings:";;;AAYA,MAAM,KAAK;IAGT,YAAY,QAA4B;QACtC,IAAI,CAAC,MAAM,GAAG;YACZ,GAAG,EAAE,KAAK,CAAC,uBAAuB,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACxD,GAAG,EAAE,KAAK,CAAC,uBAAuB,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACxD,IAAI,EAAE,KAAK,CAAC,uBAAuB,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC1D,EAAE,EAAE,KAAK,CAAC,uBAAuB,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;SACvD,CAAC;IACJ,CAAC;IAEO,gBAAgB,CAAC,IAA4B;QACnD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;IACxC,CAAC;IAEM,MAAM,CAAC,uBAAuB,CAAC,KAAa;QACjD,MAAM,UAAU,GAAY,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC;QAChG,MAAM,cAAc,GAAY,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC;QACzE,MAAM,SAAS,GAAY,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,cAAc,CAAC;QAErE,QAAQ,IAAI,EAAE;YACZ,KAAK,SAAS;gBACZ,OAAO,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC1B,KAAK,UAAU;gBACb,OAAO,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC1B;gBACE,OAAO,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;SAC3B;IACH,CAAC;IAEM,wBAAwB,CAAC,QAAyB;QACvD,MAAM,cAAc,GAAG,CAAC,eAAgC,EAAU,EAAE;YAClE,MAAM,QAAQ,GAAW,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,CACtF,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAC3F,CAAC,CAAC;YACH,OAAO,KAAK,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACjD,CAAC,CAAC;QAEF,IAAI,CAAC,gBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,cAAc,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IACtF,CAAC;IAEM,0BAA0B;QAC/B,MAAM,iBAAiB,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,CAC3C,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CACxF,CAAC;QAEF,OAAO;YACL,GAAG,EAAE,KAAK,CAAC,uBAAuB,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC3D,GAAG,EAAE,KAAK,CAAC,uBAAuB,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC3D,EAAE,EAAE,KAAK,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;YACzD,EAAE,EAAE,KAAK,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;YACzD,EAAE,EAAE,KAAK,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;YACzD,EAAE,EAAE,KAAK,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;SAC1D,CAAC;IACJ,CAAC;IAEM,oBAAoB,CAAC,KAAa,EAAE,QAAiB;QAC1D,MAAM,cAAc,GAAW,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAClF,MAAM,YAAY,GAAW,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAC9E,MAAM,oBAAoB,GAAY,cAAc,GAAG,YAAY,IAAI,CAAC,QAAQ,CAAC;QACjF,MAAM,kBAAkB,GAA+B,oBAAoB;YACzE,CAAC,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE;YAC3B,CAAC,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;QAE5B,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC;QAC1C,OAAO;YACL,MAAM,EAAE,kBAAkB,CAAC,MAAM;YACjC,KAAK,EAAE,kBAAkB,CAAC,KAAK;YAC/B,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;YAC9D,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG;SAC1B,CAAC;IACJ,CAAC;IAEM,kBAAkB,CAAC,QAA2B;QACnD,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,GAAG,QAAQ,CAAC;QAC9C,MAAM,OAAO,GAAW,IAAI,CAAC;QAC7B,MAAM,EAAE,IAAI,EAAE,GAAG,QAAQ,CAAC;QAE1B,MAAM,OAAO,GAAW,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;QACxD,MAAM,SAAS,GAAW,CACxB,CAAC,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAClF,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;QAEpB,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;IAClE,CAAC;IAEO,0BAA0B,CAAC,KAAa;QAC9C,OAAO,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACjD,CAAC;IAEO,yBAAyB,CAAC,KAAa;QAC7C,OAAO,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACjD,CAAC;IAEO,4BAA4B,CAAC,IAAY,EAAE,KAAa,EAAE,IAAY,EAAE,WAAmB;QACjG,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACtG,CAAC;IAEO,6BAA6B,CAAC,IAAY,EAAE,KAAa,EAAE,IAAY,EAAE,WAAmB;QAClG,OAAO,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACtG,CAAC;IAEO,cAAc,CAAC,QAA6B,EAAE,MAAc;QAClE,MAAM,YAAY,GAAW,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;cAC7E,CAAC,QAAQ,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC,GAAG,QAAQ,CAAC,WAAW,CAAC;QAE1E,QAAQ,MAAM,EAAE;YACd,KAAK,IAAI;gBACP,OAAO,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;YACtF,KAAK,MAAM;gBACT,OAAO,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;YACxF;gBACE,OAAO,EAAE,CAAC;SACb;IACH,CAAC;IAEO,eAAe,CAAC,QAA6B;QACnD,MAAM,QAAQ,GAAsB,IAAI,CAAC,kBAAkB,CAAC;YAC1D,IAAI,EAAE,CAAC;YACP,WAAW,EAAE,QAAQ,CAAC,WAAW;YACjC,WAAW,EAAE,QAAQ,CAAC,WAAW;SAClC,CAAC,CAAC;QACH,MAAM,uBAAuB,GAAY,IAAI,CAAC,4BAA4B,CACxE,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,WAAW,CACxE,CAAC;QACF,MAAM,wBAAwB,GAAY,IAAI,CAAC,6BAA6B,CAC1E,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,WAAW,CACxE,CAAC;QAEF,QAAQ,IAAI,EAAE;YACZ,KAAK,uBAAuB;gBAC1B,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YAC7C,KAAK,wBAAwB;gBAC3B,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YAC/C;gBACE,OAAO,QAAQ,CAAC,KAAK,CAAC;SACzB;IACH,CAAC;IAEM,0BAA0B,CAAC,QAA6B;QAC7D,IAAI,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,KAAK,CAAC;YAAE,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QACtF,IAAI,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,KAAK,CAAC;YAAE,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QACrF,IAAI,QAAQ,CAAC,QAAQ;YAAE,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QAEvE,IAAI,CAAC,gBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;QACxE,OAAO;YACL,MAAM,EAAE,QAAQ,CAAC,IAAI;YACrB,KAAK,EAAE,QAAQ,CAAC,KAAK;YACrB,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;YAC9D,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG;SAC1B,CAAC;IACJ,CAAC;IAEO,qBAAqB,CAAC,KAAa;QACzC,MAAM,oBAAoB,GAAY,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QAE/D,OAAO,oBAAoB,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IAC5E,CAAC;IAEO,mBAAmB,CAAC,KAAa;QACvC,MAAM,kBAAkB,GAAY,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QAE7D,OAAO,kBAAkB,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IAC1E,CAAC;IAEM,uBAAuB,CAAC,QAAyB;QACtD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,QAAQ,CAAC;QAEjC,QAAQ,IAAI,EAAE;YACZ,KAAK,KAAK;gBACR,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC,uBAAuB,CAAC,MAAM,CACpD,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAClC,CAAC,CAAC;gBACH,MAAM;YACR,KAAK,KAAK;gBACR,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC,uBAAuB,CAAC,MAAM,CACpD,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAChC,CAAC,CAAC;gBACH,MAAM;YACR;gBACE,MAAM;SACT;QAED,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;YAAE,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QAC3F,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;YAAE,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;IACzF,CAAC;CACF;AAEQ,sBAAK",sourcesContent:["import { DataForAdjustPosition, DataForAdjustPositionBasic } from '../View/Handles/types';\nimport {\n  BasicModelSettings,\n  CalculationData,\n  DataForPrepareValue,\n  DataForRefreshingModel,\n  DataForValueScale,\n  StepCalculateData,\n  StepDataFromModel,\n  ValuesRangeData,\n} from './types';\n\nclass Model {\n  public values: BasicModelSettings;\n\n  constructor(settings: BasicModelSettings) {\n    this.values = {\n      min: Model.truncateNumbersAfterDot(Number(settings.min)),\n      max: Model.truncateNumbersAfterDot(Number(settings.max)),\n      from: Model.truncateNumbersAfterDot(Number(settings.from)),\n      to: Model.truncateNumbersAfterDot(Number(settings.to)),\n    };\n  }\n\n  private writeDataToModel(data: DataForRefreshingModel): void {\n    this.values[data.target] = data.value;\n  }\n\n  public static truncateNumbersAfterDot(value: number): string {\n    const isLastZero: boolean = !Number.isInteger(value) && `${value.toFixed(2)}`.slice(-1) === '0';\n    const areLastTwoZero: boolean = `${value.toFixed(2)}`.slice(-2) === '00';\n    const isInteger: boolean = Number.isInteger(value) || areLastTwoZero;\n\n    switch (true) {\n      case isInteger:\n        return value.toFixed(0);\n      case isLastZero:\n        return value.toFixed(1);\n      default:\n        return value.toFixed(2);\n    }\n  }\n\n  public calculateValueByPosition(settings: CalculationData): void {\n    const calculateValue = (calculationData: CalculationData): string => {\n      const newValue: number = (Number(this.values.min) + (Number(calculationData.position) / (\n        Number(calculationData.sliderWidth) / (Number(this.values.max) - Number(this.values.min)))\n      ));\n      return Model.truncateNumbersAfterDot(newValue);\n    };\n\n    this.writeDataToModel({ target: settings.target, value: calculateValue(settings) });\n  }\n\n  public calculateDataForValueScale(): DataForValueScale {\n    const calculatePosition = (ratio: number) => (\n      ((Number(this.values.max) - Number(this.values.min)) * ratio) + Number(this.values.min)\n    );\n\n    return {\n      min: Model.truncateNumbersAfterDot(Number(this.values.min)),\n      max: Model.truncateNumbersAfterDot(Number(this.values.max)),\n      20: Model.truncateNumbersAfterDot(calculatePosition(0.2)),\n      40: Model.truncateNumbersAfterDot(calculatePosition(0.4)),\n      60: Model.truncateNumbersAfterDot(calculatePosition(0.6)),\n      80: Model.truncateNumbersAfterDot(calculatePosition(0.8)),\n    };\n  }\n\n  public assignValueFromScale(value: string, isDouble: boolean): DataForAdjustPosition {\n    const fromDifference: number = Math.abs(Number(this.values.from) - Number(value));\n    const toDifference: number = Math.abs(Number(this.values.to) - Number(value));\n    const isFromDifferenceLess: boolean = fromDifference < toDifference || !isDouble;\n    const adjustPositionData: DataForAdjustPositionBasic = isFromDifferenceLess\n      ? { target: 'from', value }\n      : { target: 'to', value };\n\n    this.writeDataToModel(adjustPositionData);\n    return {\n      target: adjustPositionData.target,\n      value: adjustPositionData.value,\n      totalValues: Number(this.values.max) - Number(this.values.min),\n      minValue: this.values.min,\n    };\n  }\n\n  public calculateStepWidth(settings: StepCalculateData): StepDataFromModel {\n    const { sliderWidth, handleWidth } = settings;\n    const minStep: number = 0.01;\n    const { step } = settings;\n\n    const newStep: number = step < minStep ? minStep : step;\n    const stepWidth: number = (\n      (sliderWidth - handleWidth) / (Number(this.values.max) - Number(this.values.min))\n    ) * Number(newStep);\n\n    return { minStep, stepWidth: String(stepWidth), step: newStep };\n  }\n\n  private checkIsValueSmallerThanMin(value: string): boolean {\n    return Number(value) < Number(this.values.min);\n  }\n\n  private checkIsValueBiggerThanMax(value: string): boolean {\n    return Number(value) > Number(this.values.max);\n  }\n\n  private checkIsFromValueBiggerThanTo(name: string, value: string, step: string, handleWidth: number): boolean {\n    return (name === 'from') && (Number(value) > Number(this.values.to) - (handleWidth / Number(step)));\n  }\n\n  private checkIsToValueSmallerThanFrom(name: string, value: string, step: string, handleWidth: number): boolean {\n    return (name === 'to') && (Number(value) < Number(this.values.from) + (handleWidth / Number(step)));\n  }\n\n  private fixWrongValues(settings: DataForPrepareValue, target: string): string {\n    const adjustOffset: number = ((Number(this.values.max) - Number(this.values.min))\n      / (settings.sliderWidth - settings.handleWidth)) * settings.handleWidth;\n\n    switch (target) {\n      case 'to':\n        return String(Model.truncateNumbersAfterDot(Number(this.values.to) - adjustOffset));\n      case 'from':\n        return String(Model.truncateNumbersAfterDot(Number(this.values.from) + adjustOffset));\n      default:\n        return '';\n    }\n  }\n\n  private fixDoubleValues(settings: DataForPrepareValue): string {\n    const stepData: StepDataFromModel = this.calculateStepWidth({\n      step: 1,\n      sliderWidth: settings.sliderWidth,\n      handleWidth: settings.handleWidth,\n    });\n    const isFromValueBiggerThanTo: boolean = this.checkIsFromValueBiggerThanTo(\n      settings.name, settings.value, stepData.stepWidth, settings.handleWidth,\n    );\n    const isToValueSmallerThanFrom: boolean = this.checkIsToValueSmallerThanFrom(\n      settings.name, settings.value, stepData.stepWidth, settings.handleWidth,\n    );\n\n    switch (true) {\n      case isFromValueBiggerThanTo:\n        return this.fixWrongValues(settings, 'to');\n      case isToValueSmallerThanFrom:\n        return this.fixWrongValues(settings, 'from');\n      default:\n        return settings.value;\n    }\n  }\n\n  public prepareInputValueForRecord(settings: DataForPrepareValue): DataForAdjustPosition {\n    if (this.checkIsValueSmallerThanMin(settings.value)) settings.value = this.values.min;\n    if (this.checkIsValueBiggerThanMax(settings.value)) settings.value = this.values.max;\n    if (settings.isDouble) settings.value = this.fixDoubleValues(settings);\n\n    this.writeDataToModel({ target: settings.name, value: settings.value });\n    return {\n      target: settings.name,\n      value: settings.value,\n      totalValues: Number(this.values.max) - Number(this.values.min),\n      minValue: this.values.min,\n    };\n  }\n\n  private fixValueBiggerThanMax(value: string): string {\n    const isValueBiggerThenMax: boolean = value >= this.values.max;\n\n    return isValueBiggerThenMax ? String(Number(this.values.max) - 1) : value;\n  }\n\n  private fixValueLessThanMin(value: string): string {\n    const isValueLessThenMin: boolean = value <= this.values.min;\n\n    return isValueLessThenMin ? String(Number(this.values.min) + 1) : value;\n  }\n\n  public changeSliderRangeValues(settings: ValuesRangeData) {\n    const { name, value } = settings;\n\n    switch (name) {\n      case 'min':\n        this.values.min = Model.truncateNumbersAfterDot(Number(\n          this.fixValueBiggerThanMax(value),\n        ));\n        break;\n      case 'max':\n        this.values.max = Model.truncateNumbersAfterDot(Number(\n          this.fixValueLessThanMin(value),\n        ));\n        break;\n      default:\n        break;\n    }\n\n    if (Number(this.values.from) < Number(this.values.min)) this.values.from = this.values.min;\n    if (Number(this.values.to) > Number(this.values.max)) this.values.to = this.values.max;\n  }\n}\n\nexport { Model };\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(o=l[i="__coverage__"]||(l[i]={}))[n]&&o[n].hash===t?o[n]:(s.hash=t,o[n]=s));a.s[0]++,Object.defineProperty(A,"__esModule",{value:!0}),a.s[1]++,A.Model=void 0;class r{constructor(e){a.f[0]++,a.s[2]++,this.values={min:r.truncateNumbersAfterDot(Number(e.min)),max:r.truncateNumbersAfterDot(Number(e.max)),from:r.truncateNumbersAfterDot(Number(e.from)),to:r.truncateNumbersAfterDot(Number(e.to))}}writeDataToModel(e){a.f[1]++,a.s[3]++,this.values[e.target]=e.value}static truncateNumbersAfterDot(e){a.f[2]++;const A=(a.s[4]++,a.b[0][0]++,!Number.isInteger(e)&&(a.b[0][1]++,"0"===`${e.toFixed(2)}`.slice(-1))),n=(a.s[5]++,"00"===`${e.toFixed(2)}`.slice(-2)),t=(a.s[6]++,a.b[1][0]++,Number.isInteger(e)||(a.b[1][1]++,n));switch(a.s[7]++,!0){case t:return a.b[2][0]++,a.s[8]++,e.toFixed(0);case A:return a.b[2][1]++,a.s[9]++,e.toFixed(1);default:return a.b[2][2]++,a.s[10]++,e.toFixed(2)}}calculateValueByPosition(e){a.f[3]++,a.s[11]++;a.s[14]++,this.writeDataToModel({target:e.target,value:(e=>{a.f[4]++;const A=(a.s[12]++,Number(this.values.min)+Number(e.position)/(Number(e.sliderWidth)/(Number(this.values.max)-Number(this.values.min))));return a.s[13]++,r.truncateNumbersAfterDot(A)})(e)})}calculateDataForValueScale(){a.f[5]++,a.s[15]++;const e=e=>(a.f[6]++,a.s[16]++,(Number(this.values.max)-Number(this.values.min))*e+Number(this.values.min));return a.s[17]++,{min:r.truncateNumbersAfterDot(Number(this.values.min)),max:r.truncateNumbersAfterDot(Number(this.values.max)),20:r.truncateNumbersAfterDot(e(.2)),40:r.truncateNumbersAfterDot(e(.4)),60:r.truncateNumbersAfterDot(e(.6)),80:r.truncateNumbersAfterDot(e(.8))}}assignValueFromScale(e,A){a.f[7]++;const n=(a.s[18]++,Math.abs(Number(this.values.from)-Number(e))),t=(a.s[19]++,Math.abs(Number(this.values.to)-Number(e))),l=(a.s[20]++,a.b[3][0]++,n<t||(a.b[3][1]++,!A)),i=(a.s[21]++,l?(a.b[4][0]++,{target:"from",value:e}):(a.b[4][1]++,{target:"to",value:e}));return a.s[22]++,this.writeDataToModel(i),a.s[23]++,{target:i.target,value:i.value,totalValues:Number(this.values.max)-Number(this.values.min),minValue:this.values.min}}calculateStepWidth(e){a.f[8]++;const{sliderWidth:A,handleWidth:n}=(a.s[24]++,e),t=(a.s[25]++,.01),{step:l}=(a.s[26]++,e),i=(a.s[27]++,l<t?(a.b[5][0]++,t):(a.b[5][1]++,l)),s=(a.s[28]++,(A-n)/(Number(this.values.max)-Number(this.values.min))*Number(i));return a.s[29]++,{minStep:t,stepWidth:String(s),step:i}}checkIsValueSmallerThanMin(e){return a.f[9]++,a.s[30]++,Number(e)<Number(this.values.min)}checkIsValueBiggerThanMax(e){return a.f[10]++,a.s[31]++,Number(e)>Number(this.values.max)}checkIsFromValueBiggerThanTo(e,A,n,t){return a.f[11]++,a.s[32]++,a.b[6][0]++,"from"===e&&(a.b[6][1]++,Number(A)>Number(this.values.to)-t/Number(n))}checkIsToValueSmallerThanFrom(e,A,n,t){return a.f[12]++,a.s[33]++,a.b[7][0]++,"to"===e&&(a.b[7][1]++,Number(A)<Number(this.values.from)+t/Number(n))}fixWrongValues(e,A){a.f[13]++;const n=(a.s[34]++,(Number(this.values.max)-Number(this.values.min))/(e.sliderWidth-e.handleWidth)*e.handleWidth);switch(a.s[35]++,A){case"to":return a.b[8][0]++,a.s[36]++,String(r.truncateNumbersAfterDot(Number(this.values.to)-n));case"from":return a.b[8][1]++,a.s[37]++,String(r.truncateNumbersAfterDot(Number(this.values.from)+n));default:return a.b[8][2]++,a.s[38]++,""}}fixDoubleValues(e){a.f[14]++;const A=(a.s[39]++,this.calculateStepWidth({step:1,sliderWidth:e.sliderWidth,handleWidth:e.handleWidth})),n=(a.s[40]++,this.checkIsFromValueBiggerThanTo(e.name,e.value,A.stepWidth,e.handleWidth)),t=(a.s[41]++,this.checkIsToValueSmallerThanFrom(e.name,e.value,A.stepWidth,e.handleWidth));switch(a.s[42]++,!0){case n:return a.b[9][0]++,a.s[43]++,this.fixWrongValues(e,"to");case t:return a.b[9][1]++,a.s[44]++,this.fixWrongValues(e,"from");default:return a.b[9][2]++,a.s[45]++,e.value}}prepareInputValueForRecord(e){return a.f[15]++,a.s[46]++,this.checkIsValueSmallerThanMin(e.value)?(a.b[10][0]++,a.s[47]++,e.value=this.values.min):a.b[10][1]++,a.s[48]++,this.checkIsValueBiggerThanMax(e.value)?(a.b[11][0]++,a.s[49]++,e.value=this.values.max):a.b[11][1]++,a.s[50]++,e.isDouble?(a.b[12][0]++,a.s[51]++,e.value=this.fixDoubleValues(e)):a.b[12][1]++,a.s[52]++,this.writeDataToModel({target:e.name,value:e.value}),a.s[53]++,{target:e.name,value:e.value,totalValues:Number(this.values.max)-Number(this.values.min),minValue:this.values.min}}fixValueBiggerThanMax(e){a.f[16]++;const A=(a.s[54]++,e>=this.values.max);return a.s[55]++,A?(a.b[13][0]++,String(Number(this.values.max)-1)):(a.b[13][1]++,e)}fixValueLessThanMin(e){a.f[17]++;const A=(a.s[56]++,e<=this.values.min);return a.s[57]++,A?(a.b[14][0]++,String(Number(this.values.min)+1)):(a.b[14][1]++,e)}changeSliderRangeValues(e){a.f[18]++;const{name:A,value:n}=(a.s[58]++,e);switch(a.s[59]++,A){case"min":a.b[15][0]++,a.s[60]++,this.values.min=r.truncateNumbersAfterDot(Number(this.fixValueBiggerThanMax(n))),a.s[61]++;break;case"max":a.b[15][1]++,a.s[62]++,this.values.max=r.truncateNumbersAfterDot(Number(this.fixValueLessThanMin(n))),a.s[63]++;break;default:a.b[15][2]++,a.s[64]++}a.s[65]++,Number(this.values.from)<Number(this.values.min)?(a.b[16][0]++,a.s[66]++,this.values.from=this.values.min):a.b[16][1]++,a.s[67]++,Number(this.values.to)>Number(this.values.max)?(a.b[17][0]++,a.s[68]++,this.values.to=this.values.max):a.b[17][1]++}}a.s[69]++,A.Model=r},"./src/plugin/Presenter/Presenter.ts":function(e,A,n){"use strict";var t,l,i,s,o,a,r,C=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Presenter\\Presenter.ts",l="39ac27d3c51f7f8c4cfbb65a7dffe1236ef8f9db",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Presenter\\Presenter.ts",statementMap:{0:{start:{line:2,column:17},end:{line:7,column:1}},1:{start:{line:3,column:12},end:{line:3,column:28}},2:{start:{line:3,column:34},end:{line:3,column:125}},3:{start:{line:4,column:4},end:{line:5,column:150}},4:{start:{line:4,column:79},end:{line:4,column:131}},5:{start:{line:5,column:9},end:{line:5,column:150}},6:{start:{line:5,column:58},end:{line:5,column:150}},7:{start:{line:5,column:81},end:{line:5,column:150}},8:{start:{line:6,column:4},end:{line:6,column:66}},9:{start:{line:9,column:0},end:{line:9,column:62}},10:{start:{line:10,column:0},end:{line:10,column:27}},11:{start:{line:11,column:29},end:{line:11,column:58}},12:{start:{line:12,column:16},end:{line:197,column:1}},13:{start:{line:14,column:8},end:{line:14,column:29}},14:{start:{line:15,column:8},end:{line:15,column:31}},15:{start:{line:18,column:8},end:{line:35,column:11}},16:{start:{line:20,column:37},end:{line:21,column:99}},17:{start:{line:22,column:33},end:{line:26,column:17}},18:{start:{line:27,column:16},end:{line:30,column:17}},19:{start:{line:28,column:20},end:{line:28,column:55}},20:{start:{line:29,column:20},end:{line:29,column:56}},21:{start:{line:31,column:16},end:{line:31,column:35}},22:{start:{line:32,column:16},end:{line:32,column:57}},23:{start:{line:33,column:16},end:{line:33,column:28}},24:{start:{line:38,column:23},end:{line:38,column:62}},25:{start:{line:39,column:8},end:{line:39,column:56}},26:{start:{line:40,column:8},end:{line:40,column:165}},27:{start:{line:43,column:8},end:{line:48,column:10}},28:{start:{line:51,column:8},end:{line:51,column:98}},29:{start:{line:54,column:28},end:{line:54,column:93}},30:{start:{line:55,column:26},end:{line:55,column:87}},31:{start:{line:56,column:26},end:{line:56,column:74}},32:{start:{line:57,column:24},end:{line:57,column:70}},33:{start:{line:58,column:32},end:{line:58,column:80}},34:{start:{line:59,column:8},end:{line:59,column:35}},35:{start:{line:60,column:8},end:{line:60,column:33}},36:{start:{line:61,column:8},end:{line:61,column:71}},37:{start:{line:62,column:8},end:{line:62,column:67}},38:{start:{line:63,column:8},end:{line:67,column:11}},39:{start:{line:68,column:8},end:{line:72,column:11}},40:{start:{line:75,column:35},end:{line:87,column:9}},41:{start:{line:76,column:40},end:{line:80,column:14}},42:{start:{line:81,column:12},end:{line:81,column:53}},43:{start:{line:82,column:12},end:{line:82,column:69}},44:{start:{line:83,column:12},end:{line:86,column:13}},45:{start:{line:84,column:16},end:{line:84,column:83}},46:{start:{line:85,column:16},end:{line:85,column:99}},47:{start:{line:88,column:8},end:{line:89,column:33}},48:{start:{line:89,column:12},end:{line:89,column:33}},49:{start:{line:92,column:8},end:{line:99,column:9}},50:{start:{line:94,column:16},end:{line:94,column:30}},51:{start:{line:96,column:16},end:{line:96,column:28}},52:{start:{line:98,column:16},end:{line:98,column:29}},53:{start:{line:102,column:28},end:{line:102,column:64}},54:{start:{line:103,column:8},end:{line:104,column:19}},55:{start:{line:104,column:12},end:{line:104,column:19}},56:{start:{line:105,column:23},end:{line:116,column:10}},57:{start:{line:117,column:28},end:{line:117,column:106}},58:{start:{line:118,column:8},end:{line:118,column:48}},59:{start:{line:119,column:8},end:{line:119,column:49}},60:{start:{line:120,column:8},end:{line:120,column:70}},61:{start:{line:121,column:8},end:{line:121,column:88}},62:{start:{line:124,column:23},end:{line:124,column:93}},63:{start:{line:125,column:28},end:{line:125,column:106}},64:{start:{line:126,column:8},end:{line:126,column:48}},65:{start:{line:127,column:8},end:{line:127,column:49}},66:{start:{line:128,column:8},end:{line:128,column:70}},67:{start:{line:129,column:8},end:{line:130,column:77}},68:{start:{line:130,column:12},end:{line:130,column:77}},69:{start:{line:131,column:8},end:{line:132,column:75}},70:{start:{line:132,column:12},end:{line:132,column:75}},71:{start:{line:135,column:8},end:{line:138,column:11}},72:{start:{line:139,column:8},end:{line:139,column:82}},73:{start:{line:140,column:8},end:{line:140,column:74}},74:{start:{line:141,column:8},end:{line:141,column:71}},75:{start:{line:144,column:8},end:{line:165,column:9}},76:{start:{line:146,column:16},end:{line:146,column:47}},77:{start:{line:147,column:16},end:{line:147,column:22}},78:{start:{line:149,column:16},end:{line:149,column:54}},79:{start:{line:150,column:16},end:{line:150,column:22}},80:{start:{line:152,column:16},end:{line:152,column:43}},81:{start:{line:153,column:16},end:{line:153,column:22}},82:{start:{line:155,column:16},end:{line:155,column:74}},83:{start:{line:156,column:16},end:{line:156,column:22}},84:{start:{line:158,column:16},end:{line:158,column:66}},85:{start:{line:159,column:16},end:{line:159,column:22}},86:{start:{line:161,column:16},end:{line:161,column:63}},87:{start:{line:162,column:16},end:{line:162,column:22}},88:{start:{line:164,column:16},end:{line:164,column:22}},89:{start:{line:168,column:21},end:{line:168,column:25}},90:{start:{line:169,column:8},end:{line:176,column:11}},91:{start:{line:171,column:16},end:{line:172,column:33}},92:{start:{line:172,column:20},end:{line:172,column:33}},93:{start:{line:173,column:16},end:{line:173,column:62}},94:{start:{line:174,column:16},end:{line:174,column:28}},95:{start:{line:179,column:8},end:{line:189,column:11}},96:{start:{line:181,column:16},end:{line:181,column:41}},97:{start:{line:182,column:16},end:{line:186,column:19}},98:{start:{line:187,column:16},end:{line:187,column:28}},99:{start:{line:192,column:32},end:{line:192,column:36}},100:{start:{line:193,column:8},end:{line:193,column:79}},101:{start:{line:194,column:8},end:{line:194,column:55}},102:{start:{line:195,column:8},end:{line:195,column:57}},103:{start:{line:198,column:0},end:{line:200,column:14}},104:{start:{line:201,column:0},end:{line:201,column:30}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:46},end:{line:2,column:47}},loc:{start:{line:2,column:87},end:{line:7,column:1}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:37},end:{line:16,column:5}},line:13},2:{name:"(anonymous_2)",decl:{start:{line:17,column:4},end:{line:17,column:5}},loc:{start:{line:17,column:44},end:{line:36,column:5}},line:17},3:{name:"(anonymous_3)",decl:{start:{line:37,column:4},end:{line:37,column:5}},loc:{start:{line:37,column:30},end:{line:41,column:5}},line:37},4:{name:"(anonymous_4)",decl:{start:{line:42,column:4},end:{line:42,column:5}},loc:{start:{line:42,column:48},end:{line:49,column:5}},line:42},5:{name:"(anonymous_5)",decl:{start:{line:50,column:4},end:{line:50,column:5}},loc:{start:{line:50,column:47},end:{line:52,column:5}},line:50},6:{name:"(anonymous_6)",decl:{start:{line:53,column:4},end:{line:53,column:5}},loc:{start:{line:53,column:37},end:{line:73,column:5}},line:53},7:{name:"(anonymous_7)",decl:{start:{line:74,column:4},end:{line:74,column:5}},loc:{start:{line:74,column:26},end:{line:90,column:5}},line:74},8:{name:"(anonymous_8)",decl:{start:{line:75,column:35},end:{line:75,column:36}},loc:{start:{line:75,column:41},end:{line:87,column:9}},line:75},9:{name:"(anonymous_9)",decl:{start:{line:91,column:4},end:{line:91,column:5}},loc:{start:{line:91,column:36},end:{line:100,column:5}},line:91},10:{name:"(anonymous_10)",decl:{start:{line:101,column:4},end:{line:101,column:5}},loc:{start:{line:101,column:45},end:{line:122,column:5}},line:101},11:{name:"(anonymous_11)",decl:{start:{line:123,column:4},end:{line:123,column:5}},loc:{start:{line:123,column:43},end:{line:133,column:5}},line:123},12:{name:"(anonymous_12)",decl:{start:{line:134,column:4},end:{line:134,column:5}},loc:{start:{line:134,column:46},end:{line:142,column:5}},line:134},13:{name:"(anonymous_13)",decl:{start:{line:143,column:4},end:{line:143,column:5}},loc:{start:{line:143,column:45},end:{line:166,column:5}},line:143},14:{name:"(anonymous_14)",decl:{start:{line:167,column:4},end:{line:167,column:5}},loc:{start:{line:167,column:30},end:{line:177,column:5}},line:167},15:{name:"(anonymous_15)",decl:{start:{line:178,column:4},end:{line:178,column:5}},loc:{start:{line:178,column:33},end:{line:190,column:5}},line:178},16:{name:"(anonymous_16)",decl:{start:{line:191,column:4},end:{line:191,column:5}},loc:{start:{line:191,column:17},end:{line:196,column:5}},line:191}},branchMap:{0:{loc:{start:{line:2,column:17},end:{line:7,column:1}},type:"binary-expr",locations:[{start:{line:2,column:18},end:{line:2,column:22}},{start:{line:2,column:26},end:{line:2,column:41}},{start:{line:2,column:46},end:{line:7,column:1}}],line:2},1:{loc:{start:{line:3,column:34},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:42},end:{line:3,column:48}},{start:{line:3,column:51},end:{line:3,column:125}}],line:3},2:{loc:{start:{line:3,column:51},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:67},end:{line:3,column:118}},{start:{line:3,column:121},end:{line:3,column:125}}],line:3},3:{loc:{start:{line:4,column:4},end:{line:5,column:150}},type:"if",locations:[{start:{line:4,column:4},end:{line:5,column:150}},{start:{line:4,column:4},end:{line:5,column:150}}],line:4},4:{loc:{start:{line:4,column:8},end:{line:4,column:77}},type:"binary-expr",locations:[{start:{line:4,column:8},end:{line:4,column:35}},{start:{line:4,column:39},end:{line:4,column:77}}],line:4},5:{loc:{start:{line:5,column:58},end:{line:5,column:150}},type:"if",locations:[{start:{line:5,column:58},end:{line:5,column:150}},{start:{line:5,column:58},end:{line:5,column:150}}],line:5},6:{loc:{start:{line:5,column:85},end:{line:5,column:149}},type:"binary-expr",locations:[{start:{line:5,column:86},end:{line:5,column:143}},{start:{line:5,column:148},end:{line:5,column:149}}],line:5},7:{loc:{start:{line:5,column:86},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:94},end:{line:5,column:98}},{start:{line:5,column:101},end:{line:5,column:143}}],line:5},8:{loc:{start:{line:5,column:101},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:109},end:{line:5,column:126}},{start:{line:5,column:129},end:{line:5,column:143}}],line:5},9:{loc:{start:{line:6,column:11},end:{line:6,column:62}},type:"binary-expr",locations:[{start:{line:6,column:11},end:{line:6,column:16}},{start:{line:6,column:20},end:{line:6,column:21}},{start:{line:6,column:25},end:{line:6,column:62}}],line:6},10:{loc:{start:{line:20,column:37},end:{line:21,column:99}},type:"binary-expr",locations:[{start:{line:20,column:37},end:{line:20,column:46}},{start:{line:21,column:23},end:{line:21,column:99}}],line:20},11:{loc:{start:{line:27,column:16},end:{line:30,column:17}},type:"if",locations:[{start:{line:27,column:16},end:{line:30,column:17}},{start:{line:27,column:16},end:{line:30,column:17}}],line:27},12:{loc:{start:{line:83,column:12},end:{line:86,column:13}},type:"if",locations:[{start:{line:83,column:12},end:{line:86,column:13}},{start:{line:83,column:12},end:{line:86,column:13}}],line:83},13:{loc:{start:{line:88,column:8},end:{line:89,column:33}},type:"if",locations:[{start:{line:88,column:8},end:{line:89,column:33}},{start:{line:88,column:8},end:{line:89,column:33}}],line:88},14:{loc:{start:{line:92,column:8},end:{line:99,column:9}},type:"switch",locations:[{start:{line:93,column:12},end:{line:94,column:30}},{start:{line:95,column:12},end:{line:96,column:28}},{start:{line:97,column:12},end:{line:98,column:29}}],line:92},15:{loc:{start:{line:103,column:8},end:{line:104,column:19}},type:"if",locations:[{start:{line:103,column:8},end:{line:104,column:19}},{start:{line:103,column:8},end:{line:104,column:19}}],line:103},16:{loc:{start:{line:129,column:8},end:{line:130,column:77}},type:"if",locations:[{start:{line:129,column:8},end:{line:130,column:77}},{start:{line:129,column:8},end:{line:130,column:77}}],line:129},17:{loc:{start:{line:131,column:8},end:{line:132,column:75}},type:"if",locations:[{start:{line:131,column:8},end:{line:132,column:75}},{start:{line:131,column:8},end:{line:132,column:75}}],line:131},18:{loc:{start:{line:136,column:18},end:{line:136,column:74}},type:"cond-expr",locations:[{start:{line:136,column:55},end:{line:136,column:61}},{start:{line:136,column:64},end:{line:136,column:74}}],line:136},19:{loc:{start:{line:136,column:18},end:{line:136,column:52}},type:"binary-expr",locations:[{start:{line:136,column:18},end:{line:136,column:32}},{start:{line:136,column:36},end:{line:136,column:52}}],line:136},20:{loc:{start:{line:144,column:8},end:{line:165,column:9}},type:"switch",locations:[{start:{line:145,column:12},end:{line:147,column:22}},{start:{line:148,column:12},end:{line:150,column:22}},{start:{line:151,column:12},end:{line:153,column:22}},{start:{line:154,column:12},end:{line:156,column:22}},{start:{line:157,column:12},end:{line:159,column:22}},{start:{line:160,column:12},end:{line:162,column:22}},{start:{line:163,column:12},end:{line:164,column:22}}],line:144},21:{loc:{start:{line:171,column:16},end:{line:172,column:33}},type:"if",locations:[{start:{line:171,column:16},end:{line:172,column:33}},{start:{line:171,column:16},end:{line:172,column:33}}],line:171}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0,87:0,88:0,89:0,90:0,91:0,92:0,93:0,94:0,95:0,96:0,97:0,98:0,99:0,100:0,101:0,102:0,103:0,104:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0},b:{0:[0,0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0,0],15:[0,0],16:[0,0],17:[0,0],18:[0,0],19:[0,0],20:[0,0,0,0,0,0,0],21:[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Presenter\\Presenter.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Presenter\\Presenter.ts"],names:[],mappings:";;;;;;;;;;AAAA,2DAA0C;AAU1C,IAAa,SAAS,iBAAtB,MAAa,SAAS;IAKpB,YAAY,QAAc,EAAE,SAAgB;QAC1C,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;IACzB,CAAC;IAEO,0BAA0B,CAAC,IAAU,EAAE,KAAY;QACzD,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;YAC7C,GAAG,CAAC,MAAM,EAAE,IAAmB,EAAE,GAAG;gBAClC,MAAM,YAAY,GAAY,GAAG,KAAK,CAAC;uBAClC,GAAG,KAAK,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,CAAC;gBAClF,MAAM,QAAQ,GAAoB;oBAChC,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC;oBACrB,MAAM,EAAE,IAAI;oBACZ,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW;iBAClF,CAAC;gBAEF,IAAI,YAAY,EAAE;oBAChB,IAAI,CAAC,OAAO,CAAC,cAAc,GAAG,IAAI,CAAC;oBACnC,IAAI,CAAC,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC;iBACrC;gBAED,MAAM,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;gBACnB,KAAK,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;gBAEzC,OAAO,IAAI,CAAC;YACd,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IAEO,uBAAuB;QAC7B,MAAM,MAAM,GAAsB,IAAI,CAAC,KAAK,CAAC,0BAA0B,EAAE,CAAC;QAC1E,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAChD,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,CAChC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,EAC9E,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,CACzC,CAAC;IACJ,CAAC;IAEO,4BAA4B,CAAC,MAAqB,EAAE,KAAa;QACvE,OAAO;YACL,MAAM;YACN,KAAK;YACL,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC;YAC1E,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG;SAChC,CAAC;IACJ,CAAC;IAEO,8BAA8B,CAAC,UAAiC;QACtE,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CACtC,UAAU,EACV,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CACpC,CAAC;IACJ,CAAC;IAEO,8BAA8B;QACpC,MAAM,WAAW,GAA0B,IAAI,CAAC,4BAA4B,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC7G,MAAM,SAAS,GAA0B,IAAI,CAAC,4BAA4B,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACvG,MAAM,SAAS,GAA6B,IAAI,CAAC,8BAA8B,CAAC,WAAW,CAAC,CAAC;QAC7F,MAAM,OAAO,GAA6B,IAAI,CAAC,8BAA8B,CAAC,SAAS,CAAC,CAAC;QACzF,MAAM,eAAe,GACgC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,6BAA6B,CAAC;QACtG,eAAe,CAAC,SAAS,CAAC,CAAC;QAC3B,eAAe,CAAC,OAAO,CAAC,CAAC;QACzB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC/D,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,GAAG,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC3D,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;YACtB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG;YAC5B,MAAM,EAAE,KAAK;YACb,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO;SAC3C,CAAC,CAAC;QACH,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;YACtB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG;YAC5B,MAAM,EAAE,KAAK;YACb,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO;SAC3C,CAAC,CAAC;IACL,CAAC;IAEO,mBAAmB;QACzB,MAAM,kBAAkB,GAAG,GAAS,EAAE;YACpC,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC;gBACxD,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;gBAC1C,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW;gBAChD,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW;aACtD,CAAC,CAAC;YACH,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;YAEzC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAEzD,IAAI,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;gBACnC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,SAA8B,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;gBACxF,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,aAAkC,CAAC,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;aAC1G;QACH,CAAC,CAAC;QAEF,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,KAAK,QAAQ;YAAE,kBAAkB,EAAE,CAAC;IAC7E,CAAC;IAEO,MAAM,CAAC,kBAAkB,CAAC,IAAY;QAC5C,QAAQ,IAAI,EAAE;YACZ,KAAK,MAAM;gBACT,OAAO,MAAM,CAAC;YAChB,KAAK,IAAI;gBACP,OAAO,IAAI,CAAC;YACd;gBACE,OAAO,KAAK,CAAC;SAChB;IACH,CAAC;IAEO,2BAA2B,CAAC,IAAY,EAAE,KAAa;QAC7D,MAAM,WAAW,GAA0B,WAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAC9E,IAAI,CAAC,WAAW;YAAE,OAAO;QAEzB,MAAM,MAAM,GAA0B,IAAI,CAAC,KAAK,CAAC,0BAA0B,CAAC;YAC1E,IAAI,EAAE,WAAW;YACjB,KAAK;YACL,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI;YAClC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM;YACxC,SAAS,EAAE;gBACT,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI;gBACvC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;aACpC;YACD,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW;YACnD,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW;SACjD,CAAC,CAAC;QACH,MAAM,WAAW,GAA6B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAC7E,MAAM,EACN,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CACpC,CAAC;QAEF,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,GAAG,IAAI,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC;QACzC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,6BAA6B,CAAC,WAAW,CAAC,CAAC;QAC9D,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IAClF,CAAC;IAEO,+BAA+B,CAAC,KAAa;QACnD,MAAM,MAAM,GAA0B,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC7G,MAAM,WAAW,GAA6B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAC7E,MAAM,EACN,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CACpC,CAAC;QACF,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,GAAG,IAAI,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC;QACzC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,6BAA6B,CAAC,WAAW,CAAC,CAAC;QAC9D,IAAI,WAAW,CAAC,MAAM,KAAK,MAAM;YAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QACpG,IAAI,WAAW,CAAC,MAAM,KAAK,IAAI;YAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,GAAG,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IAClG,CAAC;IAEO,kCAAkC,CAAC,KAAuB;QAChE,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC;YACjC,IAAI,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI;YACjB,KAAK,EAAE,KAAK,CAAC,KAAK;SACnB,CAAC,CAAC;QACH,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,wBAAwB,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;QAC1E,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;QAClE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;IACjE,CAAC;IAEO,uBAAuB,CAAC,QAAgB,EAAE,KAAuB;QACvE,QAAQ,QAAQ,EAAE;YAChB,KAAK,kBAAkB;gBACrB,IAAI,CAAC,uBAAuB,EAAE,CAAC;gBAC/B,MAAM;YACR,KAAK,0BAA0B;gBAC7B,IAAI,CAAC,8BAA8B,EAAE,CAAC;gBACtC,MAAM;YACR,KAAK,eAAe;gBAClB,IAAI,CAAC,mBAAmB,EAAE,CAAC;gBAC3B,MAAM;YACR,KAAK,mBAAmB;gBACtB,IAAI,CAAC,2BAA2B,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC1D,MAAM;YACR,KAAK,yBAAyB;gBAC5B,IAAI,CAAC,+BAA+B,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAClD,MAAM;YACR,KAAK,6BAA6B;gBAChC,IAAI,CAAC,kCAAkC,CAAC,KAAK,CAAC,CAAC;gBAC/C,MAAM;YACR;gBACE,MAAM;SACT;IACH,CAAC;IAEO,uBAAuB;QAC7B,MAAM,IAAI,GAAS,IAAI,CAAC;QACxB,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YACnC,GAAG,CAAC,MAAwB,EAAE,QAAgB,EAAE,KAAuB;gBACrE,IAAI,CAAC,KAAK;oBAAE,OAAO,KAAK,CAAC;gBACzB,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;gBAC9C,OAAO,IAAI,CAAC;YACd,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IAEO,sBAAsB,CAAC,IAAU;QACvC,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YAClC,GAAG,CAAC,MAA0B,EAAE,QAAuC,EAAE,KAAa;gBACpF,MAAM,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;gBAEzB,IAAI,CAAC,aAAa,CAAC;oBACjB,KAAK;oBACL,MAAM,EAAE,QAAQ;oBAChB,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,OAAO;iBACtC,CAAC,CAAC;gBAEH,OAAO,IAAI,CAAC;YACd,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IAEM,UAAU;QACf,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QAE7B,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC,0BAA0B,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACvE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC/C,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC;CACF,CAAA;AA9NY,SAAS;IADrB,4BAAQ;GACI,SAAS,CA8NrB;AA9NY,8BAAS",sourcesContent:["import autobind from 'autobind-decorator';\nimport { BasicModelSettings, CalculationData, DataForValueScale } from '../Model/types';\nimport { Model } from '../Model/Model';\nimport { DataForAdjustPosition } from '../View/Handles/types';\nimport { RefreshIntervalPositions } from '../View/SelectedInterval/types';\nimport { View } from '../View/View';\nimport { HandlesPosition } from '../View/Movement/types';\nimport { ViewRequestsData, DataRequestValue } from '../View/types';\n\n@autobind\nexport class Presenter {\n  private readonly view: View;\n\n  private readonly model: Model;\n\n  constructor(viewLink: View, modelLink: Model) {\n    this.view = viewLink;\n    this.model = modelLink;\n  }\n\n  private bindProxyToHandlesMovement(view: View, model: Model): HandlesPosition {\n    return new Proxy(this.view.movement.positions, {\n      set(target, prop: 'from' | 'to', val) {\n        const isExtraRange: boolean = val === 0\n          || val === view.slider.slider.offsetWidth - view.handles.fromHandle.offsetWidth;\n        const settings: CalculationData = {\n          position: String(val),\n          target: prop,\n          sliderWidth: view.slider.slider.offsetWidth - view.handles.fromHandle.offsetWidth,\n        };\n\n        if (isExtraRange) {\n          view.handles.isInputChanges = true;\n          view.sideMenu.isInputChanges = true;\n        }\n\n        target[prop] = val;\n        model.calculateValueByPosition(settings);\n\n        return true;\n      },\n    });\n  }\n\n  private distributesDataForScale(): void {\n    const values: DataForValueScale = this.model.calculateDataForValueScale();\n    this.view.valuesScale.refreshValueScale(values);\n    this.view.valuesScale.centerValues(\n      this.view.slider.slider.offsetWidth - this.view.handles.fromHandle.offsetWidth,\n      this.view.handles.fromHandle.offsetWidth,\n    );\n  }\n\n  private prepareDataForAdjustPosition(target: 'from' | 'to', value: string): DataForAdjustPosition {\n    return {\n      target,\n      value,\n      totalValues: Number(this.model.values.max) - Number(this.model.values.min),\n      minValue: this.model.values.min,\n    };\n  }\n\n  private prepareNewHandlesPositionsData(handleData: DataForAdjustPosition): RefreshIntervalPositions {\n    return this.view.handles.adjustPositions(\n      handleData,\n      this.view.slider.slider.offsetWidth,\n    );\n  }\n\n  private distributeDataForStartPosition(): void {\n    const dataForFrom: DataForAdjustPosition = this.prepareDataForAdjustPosition('from', this.model.values.from);\n    const dataForTo: DataForAdjustPosition = this.prepareDataForAdjustPosition('to', this.model.values.to);\n    const startFrom: RefreshIntervalPositions = this.prepareNewHandlesPositionsData(dataForFrom);\n    const startTo: RefreshIntervalPositions = this.prepareNewHandlesPositionsData(dataForTo);\n    const adjustPositions: (\n      dataToRefresh: RefreshIntervalPositions) => void = this.view.interval.adjustPositionRelativeToValue;\n    adjustPositions(startFrom);\n    adjustPositions(startTo);\n    this.view.movement.positions.from = Number(startFrom.position);\n    this.view.movement.positions.to = Number(startTo.position);\n    this.view.refreshValues({\n      value: this.model.values.min,\n      target: 'min',\n      isToFixed: this.view.basicSettings.integer,\n    });\n    this.view.refreshValues({\n      value: this.model.values.max,\n      target: 'max',\n      isToFixed: this.view.basicSettings.integer,\n    });\n  }\n\n  private distributeStepWidth(): void {\n    const writesNewStepWidth = (): void => {\n      const { stepWidth, step } = this.model.calculateStepWidth({\n        step: Number(this.view.basicSettings.step),\n        sliderWidth: this.view.slider.slider.offsetWidth,\n        handleWidth: this.view.handles.fromHandle.offsetWidth,\n      });\n      this.view.movement.stepWidth = stepWidth;\n\n      this.view.basicSettings.integer = Number.isInteger(step);\n\n      if (this.view.basicSettings.sideMenu) {\n        (this.view.sideMenu.sideMenuElements.stepInput as HTMLInputElement).value = String(step);\n        (this.view.sideMenu.sideMenuElements.integerToggle as HTMLInputElement).checked = Number.isInteger(step);\n      }\n    };\n\n    if (typeof this.view.basicSettings.step === 'number') writesNewStepWidth();\n  }\n\n  private static checkCorrectTarget(name: string): 'from' | 'to' | false {\n    switch (name) {\n      case 'from':\n        return 'from';\n      case 'to':\n        return 'to';\n      default:\n        return false;\n    }\n  }\n\n  private distributeNewValuesForApply(name: string, value: string): void {\n    const correctName: 'from' | 'to' | false = Presenter.checkCorrectTarget(name);\n    if (!correctName) return;\n\n    const result: DataForAdjustPosition = this.model.prepareInputValueForRecord({\n      name: correctName,\n      value,\n      step: this.view.basicSettings.step,\n      isDouble: this.view.basicSettings.double,\n      positions: {\n        from: this.view.movement.positions.from,\n        to: this.view.movement.positions.to,\n      },\n      handleWidth: this.view.handles.toHandle.offsetWidth,\n      sliderWidth: this.view.slider.slider.offsetWidth,\n    });\n    const newPosition: RefreshIntervalPositions = this.view.handles.adjustPositions(\n      result,\n      this.view.slider.slider.offsetWidth,\n    );\n\n    this.view.handles.isInputChanges = true;\n    this.view.sideMenu.isInputChanges = true;\n    this.view.interval.adjustPositionRelativeToValue(newPosition);\n    this.view.movement.positions[newPosition.target] = Number(newPosition.position);\n  }\n\n  private distributeValueFromScaleToApply(value: string): void {\n    const result: DataForAdjustPosition = this.model.assignValueFromScale(value, this.view.basicSettings.double);\n    const newPosition: RefreshIntervalPositions = this.view.handles.adjustPositions(\n      result,\n      this.view.slider.slider.offsetWidth,\n    );\n    this.view.handles.isInputChanges = true;\n    this.view.sideMenu.isInputChanges = true;\n    this.view.interval.adjustPositionRelativeToValue(newPosition);\n    if (newPosition.target === 'from') this.view.movement.positions.from = Number(newPosition.position);\n    if (newPosition.target === 'to') this.view.movement.positions.to = Number(newPosition.position);\n  }\n\n  private distributeSliderValuesRangeToApply(value: DataRequestValue): void {\n    this.model.changeSliderRangeValues({\n      name: value?.name,\n      value: value.value,\n    });\n    this.view.requests.needDataForStartPosition = { name: '', value: 'true' };\n    this.view.requests.needDataForScale = { name: '', value: 'true' };\n    this.view.requests.needStepWidth = { name: '', value: 'true' };\n  }\n\n  private handlesRequestsFromView(property: string, value: DataRequestValue): void {\n    switch (property) {\n      case 'needDataForScale':\n        this.distributesDataForScale();\n        break;\n      case 'needDataForStartPosition':\n        this.distributeDataForStartPosition();\n        break;\n      case 'needStepWidth':\n        this.distributeStepWidth();\n        break;\n      case 'needApplyNewValue':\n        this.distributeNewValuesForApply(value.name, value.value);\n        break;\n      case 'needApplyValueFromScale':\n        this.distributeValueFromScaleToApply(value.value);\n        break;\n      case 'needChangeSliderValuesRange':\n        this.distributeSliderValuesRangeToApply(value);\n        break;\n      default:\n        break;\n    }\n  }\n\n  private bindProxyToViewRequests(): ViewRequestsData {\n    const that: this = this;\n    return new Proxy(this.view.requests, {\n      set(target: ViewRequestsData, property: string, value: DataRequestValue) {\n        if (!value) return false;\n        that.handlesRequestsFromView(property, value);\n        return true;\n      },\n    });\n  }\n\n  private bindProxyToModelValues(view: View): BasicModelSettings {\n    return new Proxy(this.model.values, {\n      set(target: BasicModelSettings, property: 'min' | 'max' | 'from' | 'to', value: string) {\n        target[property] = value;\n\n        view.refreshValues({\n          value,\n          target: property,\n          isToFixed: view.basicSettings.integer,\n        });\n\n        return true;\n      },\n    });\n  }\n\n  public initialize(): void {\n    const { view, model } = this;\n\n    view.movement.positions = this.bindProxyToHandlesMovement(view, model);\n    view.requests = this.bindProxyToViewRequests();\n    model.values = this.bindProxyToModelValues(view);\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[s="__coverage__"]||(i[s]={}))[t]&&a[t].hash===l?a[t]:(o.hash=l,a[t]=o)),u=(C.s[0]++,C.b[0][0]++,this&&(C.b[0][1]++,this.__decorate)||(C.b[0][2]++,function(e,A,n,t){C.f[0]++;var l,i=(C.s[1]++,arguments.length),s=(C.s[2]++,i<3?(C.b[1][0]++,A):(C.b[1][1]++,null===t?(C.b[2][0]++,t=Object.getOwnPropertyDescriptor(A,n)):(C.b[2][1]++,t)));if(C.s[3]++,C.b[4][0]++,"object"==typeof Reflect&&(C.b[4][1]++,"function"==typeof Reflect.decorate))C.b[3][0]++,C.s[4]++,s=Reflect.decorate(e,A,n,t);else{C.b[3][1]++,C.s[5]++;for(var o=e.length-1;o>=0;o--)C.s[6]++,(l=e[o])?(C.b[5][0]++,C.s[7]++,C.b[6][0]++,s=(i<3?(C.b[7][0]++,l(s)):(C.b[7][1]++,i>3?(C.b[8][0]++,l(A,n,s)):(C.b[8][1]++,l(A,n))))||(C.b[6][1]++,s)):C.b[5][1]++}return C.s[8]++,C.b[9][0]++,i>3&&(C.b[9][1]++,s)&&(C.b[9][2]++,Object.defineProperty(A,n,s)),s}));C.s[9]++,Object.defineProperty(A,"__esModule",{value:!0}),C.s[10]++,A.Presenter=void 0;const c=(C.s[11]++,n("./node_modules/autobind-decorator/lib/esm/index.js"));let m=(C.s[12]++,r=class{constructor(e,A){C.f[1]++,C.s[13]++,this.view=e,C.s[14]++,this.model=A}bindProxyToHandlesMovement(e,A){return C.f[2]++,C.s[15]++,new Proxy(this.view.movement.positions,{set(n,t,l){const i=(C.s[16]++,C.b[10][0]++,0===l||(C.b[10][1]++,l===e.slider.slider.offsetWidth-e.handles.fromHandle.offsetWidth)),s=(C.s[17]++,{position:String(l),target:t,sliderWidth:e.slider.slider.offsetWidth-e.handles.fromHandle.offsetWidth});return C.s[18]++,i?(C.b[11][0]++,C.s[19]++,e.handles.isInputChanges=!0,C.s[20]++,e.sideMenu.isInputChanges=!0):C.b[11][1]++,C.s[21]++,n[t]=l,C.s[22]++,A.calculateValueByPosition(s),C.s[23]++,!0}})}distributesDataForScale(){C.f[3]++;const e=(C.s[24]++,this.model.calculateDataForValueScale());C.s[25]++,this.view.valuesScale.refreshValueScale(e),C.s[26]++,this.view.valuesScale.centerValues(this.view.slider.slider.offsetWidth-this.view.handles.fromHandle.offsetWidth,this.view.handles.fromHandle.offsetWidth)}prepareDataForAdjustPosition(e,A){return C.f[4]++,C.s[27]++,{target:e,value:A,totalValues:Number(this.model.values.max)-Number(this.model.values.min),minValue:this.model.values.min}}prepareNewHandlesPositionsData(e){return C.f[5]++,C.s[28]++,this.view.handles.adjustPositions(e,this.view.slider.slider.offsetWidth)}distributeDataForStartPosition(){C.f[6]++;const e=(C.s[29]++,this.prepareDataForAdjustPosition("from",this.model.values.from)),A=(C.s[30]++,this.prepareDataForAdjustPosition("to",this.model.values.to)),n=(C.s[31]++,this.prepareNewHandlesPositionsData(e)),t=(C.s[32]++,this.prepareNewHandlesPositionsData(A)),l=(C.s[33]++,this.view.interval.adjustPositionRelativeToValue);C.s[34]++,l(n),C.s[35]++,l(t),C.s[36]++,this.view.movement.positions.from=Number(n.position),C.s[37]++,this.view.movement.positions.to=Number(t.position),C.s[38]++,this.view.refreshValues({value:this.model.values.min,target:"min",isToFixed:this.view.basicSettings.integer}),C.s[39]++,this.view.refreshValues({value:this.model.values.max,target:"max",isToFixed:this.view.basicSettings.integer})}distributeStepWidth(){C.f[7]++,C.s[40]++;const e=()=>{C.f[8]++;const{stepWidth:e,step:A}=(C.s[41]++,this.model.calculateStepWidth({step:Number(this.view.basicSettings.step),sliderWidth:this.view.slider.slider.offsetWidth,handleWidth:this.view.handles.fromHandle.offsetWidth}));C.s[42]++,this.view.movement.stepWidth=e,C.s[43]++,this.view.basicSettings.integer=Number.isInteger(A),C.s[44]++,this.view.basicSettings.sideMenu?(C.b[12][0]++,C.s[45]++,this.view.sideMenu.sideMenuElements.stepInput.value=String(A),C.s[46]++,this.view.sideMenu.sideMenuElements.integerToggle.checked=Number.isInteger(A)):C.b[12][1]++};C.s[47]++,"number"==typeof this.view.basicSettings.step?(C.b[13][0]++,C.s[48]++,e()):C.b[13][1]++}static checkCorrectTarget(e){switch(C.f[9]++,C.s[49]++,e){case"from":return C.b[14][0]++,C.s[50]++,"from";case"to":return C.b[14][1]++,C.s[51]++,"to";default:return C.b[14][2]++,C.s[52]++,!1}}distributeNewValuesForApply(e,A){C.f[10]++;const n=(C.s[53]++,r.checkCorrectTarget(e));if(C.s[54]++,!n)return C.b[15][0]++,void C.s[55]++;C.b[15][1]++;const t=(C.s[56]++,this.model.prepareInputValueForRecord({name:n,value:A,step:this.view.basicSettings.step,isDouble:this.view.basicSettings.double,positions:{from:this.view.movement.positions.from,to:this.view.movement.positions.to},handleWidth:this.view.handles.toHandle.offsetWidth,sliderWidth:this.view.slider.slider.offsetWidth})),l=(C.s[57]++,this.view.handles.adjustPositions(t,this.view.slider.slider.offsetWidth));C.s[58]++,this.view.handles.isInputChanges=!0,C.s[59]++,this.view.sideMenu.isInputChanges=!0,C.s[60]++,this.view.interval.adjustPositionRelativeToValue(l),C.s[61]++,this.view.movement.positions[l.target]=Number(l.position)}distributeValueFromScaleToApply(e){C.f[11]++;const A=(C.s[62]++,this.model.assignValueFromScale(e,this.view.basicSettings.double)),n=(C.s[63]++,this.view.handles.adjustPositions(A,this.view.slider.slider.offsetWidth));C.s[64]++,this.view.handles.isInputChanges=!0,C.s[65]++,this.view.sideMenu.isInputChanges=!0,C.s[66]++,this.view.interval.adjustPositionRelativeToValue(n),C.s[67]++,"from"===n.target?(C.b[16][0]++,C.s[68]++,this.view.movement.positions.from=Number(n.position)):C.b[16][1]++,C.s[69]++,"to"===n.target?(C.b[17][0]++,C.s[70]++,this.view.movement.positions.to=Number(n.position)):C.b[17][1]++}distributeSliderValuesRangeToApply(e){C.f[12]++,C.s[71]++,this.model.changeSliderRangeValues({name:(C.b[19][0]++,null===e||(C.b[19][1]++,void 0===e)?void C.b[18][0]++:(C.b[18][1]++,e.name)),value:e.value}),C.s[72]++,this.view.requests.needDataForStartPosition={name:"",value:"true"},C.s[73]++,this.view.requests.needDataForScale={name:"",value:"true"},C.s[74]++,this.view.requests.needStepWidth={name:"",value:"true"}}handlesRequestsFromView(e,A){switch(C.f[13]++,C.s[75]++,e){case"needDataForScale":C.b[20][0]++,C.s[76]++,this.distributesDataForScale(),C.s[77]++;break;case"needDataForStartPosition":C.b[20][1]++,C.s[78]++,this.distributeDataForStartPosition(),C.s[79]++;break;case"needStepWidth":C.b[20][2]++,C.s[80]++,this.distributeStepWidth(),C.s[81]++;break;case"needApplyNewValue":C.b[20][3]++,C.s[82]++,this.distributeNewValuesForApply(A.name,A.value),C.s[83]++;break;case"needApplyValueFromScale":C.b[20][4]++,C.s[84]++,this.distributeValueFromScaleToApply(A.value),C.s[85]++;break;case"needChangeSliderValuesRange":C.b[20][5]++,C.s[86]++,this.distributeSliderValuesRangeToApply(A),C.s[87]++;break;default:C.b[20][6]++,C.s[88]++}}bindProxyToViewRequests(){C.f[14]++;const e=(C.s[89]++,this);return C.s[90]++,new Proxy(this.view.requests,{set:(A,n,t)=>(C.s[91]++,t?(C.b[21][1]++,C.s[93]++,e.handlesRequestsFromView(n,t),C.s[94]++,!0):(C.b[21][0]++,C.s[92]++,!1))})}bindProxyToModelValues(e){return C.f[15]++,C.s[95]++,new Proxy(this.model.values,{set:(A,n,t)=>(C.s[96]++,A[n]=t,C.s[97]++,e.refreshValues({value:t,target:n,isToFixed:e.basicSettings.integer}),C.s[98]++,!0)})}initialize(){C.f[16]++;const{view:e,model:A}=(C.s[99]++,this);C.s[100]++,e.movement.positions=this.bindProxyToHandlesMovement(e,A),C.s[101]++,e.requests=this.bindProxyToViewRequests(),C.s[102]++,A.values=this.bindProxyToModelValues(e)}});C.s[103]++,m=r=u([c.default],m),C.s[104]++,A.Presenter=m},"./src/plugin/View/Handles/Handles.ts":(e,A)=>{"use strict";var n,t,l,i,s,o,a=(n="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Handles\\Handles.ts",t="f5f06c653792fa279b91ddde2364cb12f4d838ad",l=new(0,function(){}.constructor)("return this")(),s={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Handles\\Handles.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:0},end:{line:3,column:25}},2:{start:{line:6,column:8},end:{line:6,column:36}},3:{start:{line:7,column:8},end:{line:28,column:10}},4:{start:{line:29,column:8},end:{line:29,column:83}},5:{start:{line:30,column:8},end:{line:30,column:81}},6:{start:{line:31,column:8},end:{line:31,column:82}},7:{start:{line:32,column:8},end:{line:32,column:80}},8:{start:{line:33,column:8},end:{line:33,column:36}},9:{start:{line:36,column:8},end:{line:36,column:47}},10:{start:{line:37,column:8},end:{line:37,column:43}},11:{start:{line:43,column:58},end:{line:43,column:66}},12:{start:{line:44,column:24},end:{line:44,column:54}},13:{start:{line:45,column:8},end:{line:47,column:11}},14:{start:{line:46,column:12},end:{line:46,column:44}},15:{start:{line:48,column:35},end:{line:48,column:66}},16:{start:{line:49,column:8},end:{line:50,column:46}},17:{start:{line:50,column:12},end:{line:50,column:46}},18:{start:{line:51,column:8},end:{line:51,column:23}},19:{start:{line:54,column:43},end:{line:54,column:51}},20:{start:{line:55,column:31},end:{line:55,column:85}},21:{start:{line:56,column:8},end:{line:63,column:9}},22:{start:{line:57,column:12},end:{line:57,column:91}},23:{start:{line:58,column:12},end:{line:58,column:72}},24:{start:{line:61,column:12},end:{line:61,column:91}},25:{start:{line:62,column:12},end:{line:62,column:72}},26:{start:{line:66,column:35},end:{line:66,column:39}},27:{start:{line:67,column:23},end:{line:67,column:58}},28:{start:{line:68,column:30},end:{line:68,column:68}},29:{start:{line:69,column:43},end:{line:69,column:92}},30:{start:{line:70,column:32},end:{line:71,column:93}},31:{start:{line:72,column:34},end:{line:73,column:71}},32:{start:{line:74,column:8},end:{line:77,column:9}},33:{start:{line:75,column:12},end:{line:75,column:46}},34:{start:{line:76,column:12},end:{line:76,column:25}},35:{start:{line:78,column:8},end:{line:78,column:98}},36:{start:{line:79,column:8},end:{line:80,column:40}},37:{start:{line:80,column:12},end:{line:80,column:40}},38:{start:{line:81,column:8},end:{line:81,column:20}},39:{start:{line:84,column:27},end:{line:84,column:58}},40:{start:{line:85,column:29},end:{line:85,column:45}},41:{start:{line:87,column:12},end:{line:88,column:82}},42:{start:{line:90,column:28},end:{line:90,column:50}},43:{start:{line:91,column:8},end:{line:91,column:53}},44:{start:{line:92,column:8},end:{line:97,column:10}},45:{start:{line:100,column:8},end:{line:101,column:110}},46:{start:{line:104,column:8},end:{line:105,column:110}},47:{start:{line:108,column:8},end:{line:108,column:71}},48:{start:{line:111,column:8},end:{line:111,column:70}},49:{start:{line:115,column:12},end:{line:115,column:78}},50:{start:{line:116,column:12},end:{line:116,column:76}},51:{start:{line:118,column:8},end:{line:127,column:9}},52:{start:{line:120,column:16},end:{line:120,column:66}},53:{start:{line:121,column:16},end:{line:121,column:22}},54:{start:{line:123,column:16},end:{line:123,column:66}},55:{start:{line:124,column:16},end:{line:124,column:22}},56:{start:{line:126,column:16},end:{line:126,column:22}},57:{start:{line:130,column:43},end:{line:130,column:51}},58:{start:{line:131,column:28},end:{line:131,column:67}},59:{start:{line:132,column:8},end:{line:132,column:54}},60:{start:{line:133,column:8},end:{line:133,column:35}},61:{start:{line:134,column:40},end:{line:134,column:128}},62:{start:{line:135,column:8},end:{line:139,column:9}},63:{start:{line:136,column:40},end:{line:136,column:117}},64:{start:{line:137,column:12},end:{line:137,column:68}},65:{start:{line:138,column:12},end:{line:138,column:57}},66:{start:{line:142,column:29},end:{line:142,column:37}},67:{start:{line:143,column:8},end:{line:149,column:9}},68:{start:{line:144,column:12},end:{line:144,column:49}},69:{start:{line:146,column:13},end:{line:149,column:9}},70:{start:{line:147,column:12},end:{line:147,column:49}},71:{start:{line:148,column:12},end:{line:148,column:49}},72:{start:{line:152,column:8},end:{line:159,column:9}},73:{start:{line:153,column:12},end:{line:153,column:48}},74:{start:{line:154,column:12},end:{line:154,column:50}},75:{start:{line:157,column:12},end:{line:157,column:48}},76:{start:{line:158,column:12},end:{line:158,column:50}},77:{start:{line:162,column:56},end:{line:162,column:64}},78:{start:{line:163,column:31},end:{line:163,column:88}},79:{start:{line:164,column:29},end:{line:164,column:84}},80:{start:{line:165,column:37},end:{line:165,column:79}},81:{start:{line:166,column:8},end:{line:167,column:35}},82:{start:{line:167,column:12},end:{line:167,column:35}},83:{start:{line:168,column:8},end:{line:168,column:29}},84:{start:{line:171,column:45},end:{line:171,column:53}},85:{start:{line:172,column:8},end:{line:179,column:9}},86:{start:{line:173,column:12},end:{line:173,column:54}},87:{start:{line:174,column:12},end:{line:174,column:35}},88:{start:{line:177,column:12},end:{line:177,column:52}},89:{start:{line:178,column:12},end:{line:178,column:33}},90:{start:{line:182,column:0},end:{line:182,column:26}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:18},end:{line:34,column:5}},line:5},1:{name:"(anonymous_1)",decl:{start:{line:35,column:4},end:{line:35,column:5}},loc:{start:{line:35,column:27},end:{line:38,column:5}},line:35},2:{name:"(anonymous_2)",decl:{start:{line:39,column:4},end:{line:39,column:5}},loc:{start:{line:39,column:35},end:{line:52,column:5}},line:39},3:{name:"(anonymous_3)",decl:{start:{line:45,column:27},end:{line:45,column:28}},loc:{start:{line:45,column:41},end:{line:47,column:9}},line:45},4:{name:"(anonymous_4)",decl:{start:{line:53,column:4},end:{line:53,column:5}},loc:{start:{line:53,column:32},end:{line:64,column:5}},line:53},5:{name:"(anonymous_5)",decl:{start:{line:65,column:4},end:{line:65,column:5}},loc:{start:{line:65,column:35},end:{line:82,column:5}},line:65},6:{name:"(anonymous_6)",decl:{start:{line:83,column:4},end:{line:83,column:5}},loc:{start:{line:83,column:48},end:{line:98,column:5}},line:83},7:{name:"calculateNewPosition",decl:{start:{line:86,column:17},end:{line:86,column:37}},loc:{start:{line:86,column:40},end:{line:89,column:9}},line:86},8:{name:"(anonymous_8)",decl:{start:{line:99,column:4},end:{line:99,column:5}},loc:{start:{line:99,column:42},end:{line:102,column:5}},line:99},9:{name:"(anonymous_9)",decl:{start:{line:103,column:4},end:{line:103,column:5}},loc:{start:{line:103,column:46},end:{line:106,column:5}},line:103},10:{name:"(anonymous_10)",decl:{start:{line:107,column:4},end:{line:107,column:5}},loc:{start:{line:107,column:32},end:{line:109,column:5}},line:107},11:{name:"(anonymous_11)",decl:{start:{line:110,column:4},end:{line:110,column:5}},loc:{start:{line:110,column:32},end:{line:112,column:5}},line:110},12:{name:"(anonymous_12)",decl:{start:{line:113,column:4},end:{line:113,column:5}},loc:{start:{line:113,column:28},end:{line:128,column:5}},line:113},13:{name:"changeVerticalClass",decl:{start:{line:114,column:17},end:{line:114,column:36}},loc:{start:{line:114,column:47},end:{line:117,column:9}},line:114},14:{name:"(anonymous_14)",decl:{start:{line:129,column:4},end:{line:129,column:5}},loc:{start:{line:129,column:36},end:{line:140,column:5}},line:129},15:{name:"(anonymous_15)",decl:{start:{line:141,column:4},end:{line:141,column:5}},loc:{start:{line:141,column:35},end:{line:150,column:5}},line:141},16:{name:"(anonymous_16)",decl:{start:{line:151,column:4},end:{line:151,column:5}},loc:{start:{line:151,column:39},end:{line:160,column:5}},line:151},17:{name:"(anonymous_17)",decl:{start:{line:161,column:4},end:{line:161,column:5}},loc:{start:{line:161,column:33},end:{line:169,column:5}},line:161},18:{name:"(anonymous_18)",decl:{start:{line:170,column:4},end:{line:170,column:5}},loc:{start:{line:170,column:32},end:{line:180,column:5}},line:170}},branchMap:{0:{loc:{start:{line:40,column:16},end:{line:43,column:9}},type:"default-arg",locations:[{start:{line:40,column:29},end:{line:43,column:9}}],line:40},1:{loc:{start:{line:43,column:11},end:{line:43,column:30}},type:"default-arg",locations:[{start:{line:43,column:18},end:{line:43,column:30}}],line:43},2:{loc:{start:{line:43,column:32},end:{line:43,column:52}},type:"default-arg",locations:[{start:{line:43,column:40},end:{line:43,column:52}}],line:43},3:{loc:{start:{line:48,column:35},end:{line:48,column:66}},type:"binary-expr",locations:[{start:{line:48,column:35},end:{line:48,column:48}},{start:{line:48,column:52},end:{line:48,column:66}}],line:48},4:{loc:{start:{line:49,column:8},end:{line:50,column:46}},type:"if",locations:[{start:{line:49,column:8},end:{line:50,column:46}},{start:{line:49,column:8},end:{line:50,column:46}}],line:49},5:{loc:{start:{line:56,column:8},end:{line:63,column:9}},type:"if",locations:[{start:{line:56,column:8},end:{line:63,column:9}},{start:{line:56,column:8},end:{line:63,column:9}}],line:56},6:{loc:{start:{line:68,column:30},end:{line:68,column:68}},type:"binary-expr",locations:[{start:{line:68,column:30},end:{line:68,column:44}},{start:{line:68,column:48},end:{line:68,column:68}}],line:68},7:{loc:{start:{line:70,column:32},end:{line:71,column:93}},type:"binary-expr",locations:[{start:{line:70,column:32},end:{line:70,column:62}},{start:{line:71,column:15},end:{line:71,column:93}}],line:70},8:{loc:{start:{line:72,column:34},end:{line:73,column:71}},type:"binary-expr",locations:[{start:{line:72,column:34},end:{line:72,column:49}},{start:{line:72,column:53},end:{line:72,column:71}},{start:{line:73,column:15},end:{line:73,column:71}}],line:72},9:{loc:{start:{line:74,column:8},end:{line:77,column:9}},type:"if",locations:[{start:{line:74,column:8},end:{line:77,column:9}},{start:{line:74,column:8},end:{line:77,column:9}}],line:74},10:{loc:{start:{line:78,column:33},end:{line:78,column:97}},type:"cond-expr",locations:[{start:{line:78,column:49},end:{line:78,column:84}},{start:{line:78,column:87},end:{line:78,column:97}}],line:78},11:{loc:{start:{line:79,column:8},end:{line:80,column:40}},type:"if",locations:[{start:{line:79,column:8},end:{line:80,column:40}},{start:{line:79,column:8},end:{line:80,column:40}}],line:79},12:{loc:{start:{line:100,column:15},end:{line:101,column:109}},type:"binary-expr",locations:[{start:{line:100,column:16},end:{line:100,column:94}},{start:{line:101,column:16},end:{line:101,column:92}},{start:{line:101,column:98},end:{line:101,column:108}}],line:100},13:{loc:{start:{line:104,column:15},end:{line:105,column:109}},type:"binary-expr",locations:[{start:{line:104,column:16},end:{line:104,column:93}},{start:{line:105,column:16},end:{line:105,column:91}},{start:{line:105,column:97},end:{line:105,column:108}}],line:104},14:{loc:{start:{line:108,column:15},end:{line:108,column:70}},type:"binary-expr",locations:[{start:{line:108,column:16},end:{line:108,column:25}},{start:{line:108,column:31},end:{line:108,column:69}}],line:108},15:{loc:{start:{line:111,column:15},end:{line:111,column:69}},type:"binary-expr",locations:[{start:{line:111,column:16},end:{line:111,column:24}},{start:{line:111,column:30},end:{line:111,column:68}}],line:111},16:{loc:{start:{line:118,column:8},end:{line:127,column:9}},type:"switch",locations:[{start:{line:119,column:12},end:{line:121,column:22}},{start:{line:122,column:12},end:{line:124,column:22}},{start:{line:125,column:12},end:{line:126,column:22}}],line:118},17:{loc:{start:{line:135,column:8},end:{line:139,column:9}},type:"if",locations:[{start:{line:135,column:8},end:{line:139,column:9}},{start:{line:135,column:8},end:{line:139,column:9}}],line:135},18:{loc:{start:{line:143,column:8},end:{line:149,column:9}},type:"if",locations:[{start:{line:143,column:8},end:{line:149,column:9}},{start:{line:143,column:8},end:{line:149,column:9}}],line:143},19:{loc:{start:{line:146,column:13},end:{line:149,column:9}},type:"if",locations:[{start:{line:146,column:13},end:{line:149,column:9}},{start:{line:146,column:13},end:{line:149,column:9}}],line:146},20:{loc:{start:{line:152,column:8},end:{line:159,column:9}},type:"if",locations:[{start:{line:152,column:8},end:{line:159,column:9}},{start:{line:152,column:8},end:{line:159,column:9}}],line:152},21:{loc:{start:{line:165,column:37},end:{line:165,column:79}},type:"binary-expr",locations:[{start:{line:165,column:37},end:{line:165,column:66}},{start:{line:165,column:70},end:{line:165,column:79}}],line:165},22:{loc:{start:{line:166,column:8},end:{line:167,column:35}},type:"if",locations:[{start:{line:166,column:8},end:{line:167,column:35}},{start:{line:166,column:8},end:{line:167,column:35}}],line:166},23:{loc:{start:{line:172,column:8},end:{line:179,column:9}},type:"if",locations:[{start:{line:172,column:8},end:{line:179,column:9}},{start:{line:172,column:8},end:{line:179,column:9}}],line:172}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0,87:0,88:0,89:0,90:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0},b:{0:[0],1:[0],2:[0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0,0],9:[0,0],10:[0,0],11:[0,0],12:[0,0,0],13:[0,0,0],14:[0,0],15:[0,0],16:[0,0,0],17:[0,0],18:[0,0],19:[0,0],20:[0,0],21:[0,0],22:[0,0],23:[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Handles\\Handles.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Handles\\Handles.ts"],names:[],mappings:"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",sourcesContent:["import { RefreshIntervalPositions } from '../SelectedInterval/types';\nimport {\n  DataForAdjustPosition,\n  HandlesElementsInfo,\n  StaticElementsDescription,\n  HandleHideData,\n  RefreshHandlesData,\n  HandlesOverlaps,\n  DataToHandlesMove,\n  NewPositionData,\n} from './types';\nimport { RefreshData } from '../types';\n\nexport class Handles {\n  readonly fromHandle: HTMLSpanElement;\n\n  readonly toHandle: HTMLSpanElement;\n\n  readonly fromValue: HTMLSpanElement;\n\n  readonly toValue: HTMLSpanElement;\n\n  public isInputChanges = false;\n\n  readonly staticElementsDescription: StaticElementsDescription = [\n    {\n      cssClasses: ['goby-slider__handle', 'goby-slider__handle_type_from'],\n      name: 'style',\n      value: 'display: flex',\n    },\n    {\n      cssClasses: ['goby-slider__handle', 'goby-slider__handle_type_to'],\n      name: 'style',\n      value: 'display: flex',\n    },\n    {\n      cssClasses: ['goby-slider__handle-value', 'goby-slider__handle-value_type_from'],\n      name: 'style',\n      value: 'display: flex',\n    },\n    {\n      cssClasses: ['goby-slider__handle-value', 'goby-slider__handle-value_type_to'],\n      name: 'style',\n      value: 'display: flex',\n    },\n  ];\n\n  constructor() {\n    this.fromHandle = Handles.createElement(this.staticElementsDescription[0]);\n    this.toHandle = Handles.createElement(this.staticElementsDescription[1]);\n    this.fromValue = Handles.createElement(this.staticElementsDescription[2]);\n    this.toValue = Handles.createElement(this.staticElementsDescription[3]);\n\n    this.collectClassElements();\n  }\n\n  private collectClassElements(): void {\n    this.fromHandle.append(this.fromValue);\n    this.toHandle.append(this.toValue);\n  }\n\n  static createElement(settings: HandlesElementsInfo): HTMLSpanElement {\n    const {\n      cssClasses = [\n        'for-change',\n        'for-change',\n      ],\n      name = 'for-change',\n      value = 'for-change',\n    } = settings;\n    const element: HTMLSpanElement = document.createElement('span');\n\n    cssClasses.forEach((cssClass: string) => {\n      element.classList.add(cssClass);\n    });\n\n    const isAssignValuesNeed: boolean = Boolean(name) && Boolean(value);\n    if (isAssignValuesNeed) element.setAttribute(name, value);\n\n    return element;\n  }\n\n  private fixHandlesOverlap(settings: HandlesOverlaps) {\n    const { positions, sliderWidth } = settings;\n    const isToNotInExtra: boolean = positions.to < sliderWidth - this.toHandle.offsetWidth;\n\n    if (isToNotInExtra) {\n      this.toHandle.style.left = `${positions.from + this.fromHandle.offsetWidth}px`;\n      positions.to = positions.from + this.fromHandle.offsetWidth;\n    } else {\n      this.fromHandle.style.left = `${positions.to - this.fromHandle.offsetWidth}px`;\n      positions.from = positions.to - this.fromHandle.offsetWidth;\n    }\n  }\n\n  public refreshValues(data: RefreshData, positions: HandlesOverlaps): boolean {\n    const refreshHandlesData: RefreshHandlesData = data as RefreshHandlesData;\n    const target: 'fromValue' | 'toValue' = `${refreshHandlesData.target}Value`;\n    const isRoundUpNeed: boolean = data.isToFixed && !this.isInputChanges;\n    const differenceBetweenPositions: number = positions.positions.to - positions.positions.from;\n    const isExtraPosition: boolean = positions.positions.from === 0\n      || positions.positions.to === positions.sliderWidth - this.fromHandle.offsetWidth;\n    const isHandlesOverlaps: boolean = isExtraPosition && positions.isDouble\n      && differenceBetweenPositions < this.fromHandle.offsetWidth;\n\n    if (isHandlesOverlaps) {\n      this.fixHandlesOverlap(positions);\n      return false;\n    }\n\n    this[target].innerText = isRoundUpNeed ? `${Math.round(Number(data.value))}` : data.value;\n    if (this.isInputChanges) this.isInputChanges = false;\n\n    return true;\n  }\n\n  public adjustPositions(dataToRefresh: DataForAdjustPosition, sliderWidth: number): RefreshIntervalPositions {\n    const handleName: 'fromHandle' | 'toHandle' = `${dataToRefresh.target}Handle`;\n    const handleTarget: HTMLSpanElement = this[handleName];\n\n    function calculateNewPosition(): string {\n      return String(((sliderWidth - handleTarget.offsetWidth) / dataToRefresh.totalValues)\n        * (Number(dataToRefresh.value) - Number(dataToRefresh.minValue)));\n    }\n\n    const newPosition: string = calculateNewPosition();\n    handleTarget.style.left = `${newPosition}px`;\n\n    return {\n      target: dataToRefresh.target,\n      position: newPosition,\n      sliderWidth: sliderWidth - handleTarget.offsetWidth,\n      handleWidth: handleTarget.offsetWidth,\n    };\n  }\n\n  private checkIsNeedToMakeVertical(isVertical: boolean): boolean {\n    return (!this.fromValue.classList.contains('goby-slider__handle-value_state_vertical'))\n      && (!this.toValue.classList.contains('goby-slider__handle-value_state_vertical')) && (isVertical);\n  }\n\n  private checkIsNeedToMakeHorizontally(isVertical: boolean): boolean {\n    return (this.fromValue.classList.contains('goby-slider__handle-value_state_vertical'))\n      && (this.toValue.classList.contains('goby-slider__handle-value_state_vertical')) && (!isVertical);\n  }\n\n  private checkIsToNeedHide(isDouble: boolean): boolean {\n    return (!isDouble) && (this.toHandle.style.display === 'flex');\n  }\n\n  private checkIsToNeedShow(isDouble: boolean): boolean {\n    return (isDouble) && (this.toHandle.style.display === 'none');\n  }\n\n  public changePlane(isVertical: boolean): void {\n    function changeVerticalClass(from: HTMLSpanElement, to: HTMLSpanElement) {\n      from.classList.toggle('goby-slider__handle-value_state_vertical');\n      to.classList.toggle('goby-slider__handle-value_state_vertical');\n    }\n\n    switch (true) {\n      case this.checkIsNeedToMakeVertical(isVertical):\n        changeVerticalClass(this.fromValue, this.toValue);\n        break;\n      case this.checkIsNeedToMakeHorizontally(isVertical):\n        changeVerticalClass(this.fromValue, this.toValue);\n        break;\n      default:\n        break;\n    }\n  }\n\n  private changeHandlesPosition(settings: HandleHideData) {\n    const { sliderWidth, positions } = settings;\n    const newPosition: number = sliderWidth - this.toHandle.offsetWidth;\n\n    this.toHandle.style.left = `${newPosition}px`;\n    positions.to = newPosition;\n    const isFromPositionIncorrect: boolean = positions.from > (\n      sliderWidth - this.toHandle.offsetWidth - this.fromHandle.offsetWidth\n    );\n\n    if (isFromPositionIncorrect) {\n      const extremeFromPosition = String(sliderWidth - this.toHandle.offsetWidth - this.fromHandle.offsetWidth);\n      this.fromHandle.style.left = `${extremeFromPosition}px`;\n      positions.from = Number(extremeFromPosition);\n    }\n  }\n\n  public changeHandlesDisplay(settings: HandleHideData): void {\n    const { isDouble } = settings;\n\n    if (this.checkIsToNeedHide(isDouble)) {\n      this.toHandle.style.display = 'none';\n    } else if (this.checkIsToNeedShow(isDouble)) {\n      this.toHandle.style.display = 'flex';\n      this.changeHandlesPosition(settings);\n    }\n  }\n\n  public hideHandlesValues(isHandlesValues: boolean): void {\n    if (!isHandlesValues) {\n      this.toValue.style.display = 'none';\n      this.fromValue.style.display = 'none';\n    } else {\n      this.toValue.style.display = 'flex';\n      this.fromValue.style.display = 'flex';\n    }\n  }\n\n  public defineHandleToMove(settings: DataToHandlesMove): HTMLSpanElement {\n    const { targetPosition, positions, isDouble } = settings;\n    const fromDifference: number = Math.abs(Number(positions.from) - Number(targetPosition));\n    const toDifference: number = Math.abs(Number(positions.to) - Number(targetPosition));\n    const isFromDifferenceLess: boolean = fromDifference < toDifference || !isDouble;\n\n    if (isFromDifferenceLess) return this.fromHandle;\n    return this.toHandle;\n  }\n\n  public acceptNewPosition(settings: NewPositionData): void {\n    const { target, value, positions } = settings;\n\n    if (target === this.fromHandle) {\n      this.fromHandle.style.left = `${value}px`;\n      positions.from = value;\n    } else {\n      this.toHandle.style.left = `${value}px`;\n      positions.to = value;\n    }\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(o=l[i="__coverage__"]||(l[i]={}))[n]&&o[n].hash===t?o[n]:(s.hash=t,o[n]=s));a.s[0]++,Object.defineProperty(A,"__esModule",{value:!0}),a.s[1]++,A.Handles=void 0;class r{constructor(){a.f[0]++,a.s[2]++,this.isInputChanges=!1,a.s[3]++,this.staticElementsDescription=[{cssClasses:["goby-slider__handle","goby-slider__handle_type_from"],name:"style",value:"display: flex"},{cssClasses:["goby-slider__handle","goby-slider__handle_type_to"],name:"style",value:"display: flex"},{cssClasses:["goby-slider__handle-value","goby-slider__handle-value_type_from"],name:"style",value:"display: flex"},{cssClasses:["goby-slider__handle-value","goby-slider__handle-value_type_to"],name:"style",value:"display: flex"}],a.s[4]++,this.fromHandle=r.createElement(this.staticElementsDescription[0]),a.s[5]++,this.toHandle=r.createElement(this.staticElementsDescription[1]),a.s[6]++,this.fromValue=r.createElement(this.staticElementsDescription[2]),a.s[7]++,this.toValue=r.createElement(this.staticElementsDescription[3]),a.s[8]++,this.collectClassElements()}collectClassElements(){a.f[1]++,a.s[9]++,this.fromHandle.append(this.fromValue),a.s[10]++,this.toHandle.append(this.toValue)}static createElement(e){a.f[2]++;const{cssClasses:A=(a.b[0][0]++,["for-change","for-change"]),name:n=(a.b[1][0]++,"for-change"),value:t=(a.b[2][0]++,"for-change")}=(a.s[11]++,e),l=(a.s[12]++,document.createElement("span"));a.s[13]++,A.forEach((e=>{a.f[3]++,a.s[14]++,l.classList.add(e)}));const i=(a.s[15]++,a.b[3][0]++,Boolean(n)&&(a.b[3][1]++,Boolean(t)));return a.s[16]++,i?(a.b[4][0]++,a.s[17]++,l.setAttribute(n,t)):a.b[4][1]++,a.s[18]++,l}fixHandlesOverlap(e){a.f[4]++;const{positions:A,sliderWidth:n}=(a.s[19]++,e),t=(a.s[20]++,A.to<n-this.toHandle.offsetWidth);a.s[21]++,t?(a.b[5][0]++,a.s[22]++,this.toHandle.style.left=`${A.from+this.fromHandle.offsetWidth}px`,a.s[23]++,A.to=A.from+this.fromHandle.offsetWidth):(a.b[5][1]++,a.s[24]++,this.fromHandle.style.left=A.to-this.fromHandle.offsetWidth+"px",a.s[25]++,A.from=A.to-this.fromHandle.offsetWidth)}refreshValues(e,A){a.f[5]++;const n=(a.s[26]++,e),t=(a.s[27]++,`${n.target}Value`),l=(a.s[28]++,a.b[6][0]++,e.isToFixed&&(a.b[6][1]++,!this.isInputChanges)),i=(a.s[29]++,A.positions.to-A.positions.from),s=(a.s[30]++,a.b[7][0]++,0===A.positions.from||(a.b[7][1]++,A.positions.to===A.sliderWidth-this.fromHandle.offsetWidth)),o=(a.s[31]++,a.b[8][0]++,s&&(a.b[8][1]++,A.isDouble)&&(a.b[8][2]++,i<this.fromHandle.offsetWidth));return a.s[32]++,o?(a.b[9][0]++,a.s[33]++,this.fixHandlesOverlap(A),a.s[34]++,!1):(a.b[9][1]++,a.s[35]++,this[t].innerText=l?(a.b[10][0]++,`${Math.round(Number(e.value))}`):(a.b[10][1]++,e.value),a.s[36]++,this.isInputChanges?(a.b[11][0]++,a.s[37]++,this.isInputChanges=!1):a.b[11][1]++,a.s[38]++,!0)}adjustPositions(e,A){a.f[6]++;const n=(a.s[39]++,`${e.target}Handle`),t=(a.s[40]++,this[n]);const l=(a.s[42]++,a.f[7]++,a.s[41]++,String((A-t.offsetWidth)/e.totalValues*(Number(e.value)-Number(e.minValue))));return a.s[43]++,t.style.left=`${l}px`,a.s[44]++,{target:e.target,position:l,sliderWidth:A-t.offsetWidth,handleWidth:t.offsetWidth}}checkIsNeedToMakeVertical(e){return a.f[8]++,a.s[45]++,a.b[12][0]++,!this.fromValue.classList.contains("goby-slider__handle-value_state_vertical")&&(a.b[12][1]++,!this.toValue.classList.contains("goby-slider__handle-value_state_vertical"))&&(a.b[12][2]++,e)}checkIsNeedToMakeHorizontally(e){return a.f[9]++,a.s[46]++,a.b[13][0]++,this.fromValue.classList.contains("goby-slider__handle-value_state_vertical")&&(a.b[13][1]++,this.toValue.classList.contains("goby-slider__handle-value_state_vertical"))&&(a.b[13][2]++,!e)}checkIsToNeedHide(e){return a.f[10]++,a.s[47]++,a.b[14][0]++,!e&&(a.b[14][1]++,"flex"===this.toHandle.style.display)}checkIsToNeedShow(e){return a.f[11]++,a.s[48]++,a.b[15][0]++,e&&(a.b[15][1]++,"none"===this.toHandle.style.display)}changePlane(e){function A(e,A){a.f[13]++,a.s[49]++,e.classList.toggle("goby-slider__handle-value_state_vertical"),a.s[50]++,A.classList.toggle("goby-slider__handle-value_state_vertical")}switch(a.f[12]++,a.s[51]++,!0){case this.checkIsNeedToMakeVertical(e):a.b[16][0]++,a.s[52]++,A(this.fromValue,this.toValue),a.s[53]++;break;case this.checkIsNeedToMakeHorizontally(e):a.b[16][1]++,a.s[54]++,A(this.fromValue,this.toValue),a.s[55]++;break;default:a.b[16][2]++,a.s[56]++}}changeHandlesPosition(e){a.f[14]++;const{sliderWidth:A,positions:n}=(a.s[57]++,e),t=(a.s[58]++,A-this.toHandle.offsetWidth);a.s[59]++,this.toHandle.style.left=`${t}px`,a.s[60]++,n.to=t;const l=(a.s[61]++,n.from>A-this.toHandle.offsetWidth-this.fromHandle.offsetWidth);if(a.s[62]++,l){a.b[17][0]++;const e=(a.s[63]++,String(A-this.toHandle.offsetWidth-this.fromHandle.offsetWidth));a.s[64]++,this.fromHandle.style.left=`${e}px`,a.s[65]++,n.from=Number(e)}else a.b[17][1]++}changeHandlesDisplay(e){a.f[15]++;const{isDouble:A}=(a.s[66]++,e);a.s[67]++,this.checkIsToNeedHide(A)?(a.b[18][0]++,a.s[68]++,this.toHandle.style.display="none"):(a.b[18][1]++,a.s[69]++,this.checkIsToNeedShow(A)?(a.b[19][0]++,a.s[70]++,this.toHandle.style.display="flex",a.s[71]++,this.changeHandlesPosition(e)):a.b[19][1]++)}hideHandlesValues(e){a.f[16]++,a.s[72]++,e?(a.b[20][1]++,a.s[75]++,this.toValue.style.display="flex",a.s[76]++,this.fromValue.style.display="flex"):(a.b[20][0]++,a.s[73]++,this.toValue.style.display="none",a.s[74]++,this.fromValue.style.display="none")}defineHandleToMove(e){a.f[17]++;const{targetPosition:A,positions:n,isDouble:t}=(a.s[77]++,e),l=(a.s[78]++,Math.abs(Number(n.from)-Number(A))),i=(a.s[79]++,Math.abs(Number(n.to)-Number(A))),s=(a.s[80]++,a.b[21][0]++,l<i||(a.b[21][1]++,!t));return a.s[81]++,s?(a.b[22][0]++,a.s[82]++,this.fromHandle):(a.b[22][1]++,a.s[83]++,this.toHandle)}acceptNewPosition(e){a.f[18]++;const{target:A,value:n,positions:t}=(a.s[84]++,e);a.s[85]++,A===this.fromHandle?(a.b[23][0]++,a.s[86]++,this.fromHandle.style.left=`${n}px`,a.s[87]++,t.from=n):(a.b[23][1]++,a.s[88]++,this.toHandle.style.left=`${n}px`,a.s[89]++,t.to=n)}}a.s[90]++,A.Handles=r},"./src/plugin/View/Movement/Movement.ts":function(e,A,n){"use strict";var t,l,i,s,o,a,r=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Movement\\Movement.ts",l="4f8d51d09f42b411f1a9a21eca4d585b29ecbd21",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Movement\\Movement.ts",statementMap:{0:{start:{line:2,column:17},end:{line:7,column:1}},1:{start:{line:3,column:12},end:{line:3,column:28}},2:{start:{line:3,column:34},end:{line:3,column:125}},3:{start:{line:4,column:4},end:{line:5,column:150}},4:{start:{line:4,column:79},end:{line:4,column:131}},5:{start:{line:5,column:9},end:{line:5,column:150}},6:{start:{line:5,column:58},end:{line:5,column:150}},7:{start:{line:5,column:81},end:{line:5,column:150}},8:{start:{line:6,column:4},end:{line:6,column:66}},9:{start:{line:8,column:0},end:{line:8,column:62}},10:{start:{line:9,column:0},end:{line:9,column:26}},11:{start:{line:10,column:29},end:{line:10,column:58}},12:{start:{line:11,column:15},end:{line:169,column:1}},13:{start:{line:13,column:8},end:{line:13,column:38}},14:{start:{line:14,column:8},end:{line:14,column:40}},15:{start:{line:15,column:8},end:{line:15,column:36}},16:{start:{line:16,column:8},end:{line:16,column:52}},17:{start:{line:17,column:8},end:{line:17,column:42}},18:{start:{line:18,column:8},end:{line:18,column:46}},19:{start:{line:19,column:8},end:{line:24,column:9}},20:{start:{line:20,column:12},end:{line:20,column:35}},21:{start:{line:23,column:12},end:{line:23,column:32}},22:{start:{line:25,column:8},end:{line:28,column:10}},23:{start:{line:31,column:8},end:{line:31,column:88}},24:{start:{line:34,column:8},end:{line:34,column:90}},25:{start:{line:37,column:8},end:{line:37,column:41}},26:{start:{line:40,column:8},end:{line:41,column:91}},27:{start:{line:44,column:8},end:{line:45,column:93}},28:{start:{line:48,column:29},end:{line:48,column:33}},29:{start:{line:49,column:8},end:{line:50,column:96}},30:{start:{line:53,column:34},end:{line:53,column:102}},31:{start:{line:54,column:25},end:{line:54,column:65}},32:{start:{line:55,column:33},end:{line:55,column:60}},33:{start:{line:56,column:34},end:{line:57,column:76}},34:{start:{line:58,column:8},end:{line:58,column:76}},35:{start:{line:61,column:35},end:{line:71,column:9}},36:{start:{line:62,column:12},end:{line:64,column:13}},37:{start:{line:63,column:16},end:{line:63,column:87}},38:{start:{line:65,column:12},end:{line:67,column:13}},39:{start:{line:66,column:16},end:{line:66,column:89}},40:{start:{line:68,column:12},end:{line:69,column:43}},41:{start:{line:69,column:16},end:{line:69,column:43}},42:{start:{line:70,column:12},end:{line:70,column:28}},43:{start:{line:72,column:28},end:{line:80,column:9}},44:{start:{line:73,column:12},end:{line:74,column:29}},45:{start:{line:74,column:16},end:{line:74,column:29}},46:{start:{line:75,column:12},end:{line:76,column:43}},47:{start:{line:76,column:16},end:{line:76,column:43}},48:{start:{line:77,column:12},end:{line:78,column:52}},49:{start:{line:78,column:16},end:{line:78,column:52}},50:{start:{line:79,column:12},end:{line:79,column:28}},51:{start:{line:81,column:8},end:{line:81,column:40}},52:{start:{line:84,column:8},end:{line:84,column:112}},53:{start:{line:85,column:8},end:{line:86,column:64}},54:{start:{line:89,column:41},end:{line:89,column:61}},55:{start:{line:90,column:8},end:{line:90,column:53}},56:{start:{line:91,column:8},end:{line:96,column:9}},57:{start:{line:92,column:12},end:{line:92,column:46}},58:{start:{line:95,column:12},end:{line:95,column:44}},59:{start:{line:97,column:8},end:{line:97,column:35}},60:{start:{line:100,column:8},end:{line:100,column:122}},61:{start:{line:103,column:33},end:{line:103,column:61}},62:{start:{line:104,column:34},end:{line:105,column:69}},63:{start:{line:106,column:8},end:{line:115,column:9}},64:{start:{line:108,column:16},end:{line:108,column:51}},65:{start:{line:109,column:16},end:{line:109,column:22}},66:{start:{line:111,column:16},end:{line:111,column:119}},67:{start:{line:112,column:16},end:{line:112,column:22}},68:{start:{line:114,column:16},end:{line:114,column:22}},69:{start:{line:118,column:18},end:{line:118,column:31}},70:{start:{line:119,column:18},end:{line:119,column:31}},71:{start:{line:120,column:32},end:{line:120,column:97}},72:{start:{line:121,column:29},end:{line:121,column:70}},73:{start:{line:122,column:37},end:{line:122,column:91}},74:{start:{line:123,column:28},end:{line:125,column:98}},75:{start:{line:126,column:30},end:{line:126,column:86}},76:{start:{line:127,column:8},end:{line:132,column:9}},77:{start:{line:128,column:12},end:{line:128,column:74}},78:{start:{line:131,column:12},end:{line:131,column:49}},79:{start:{line:139,column:29},end:{line:139,column:36}},80:{start:{line:140,column:29},end:{line:140,column:59}},81:{start:{line:141,column:27},end:{line:141,column:54}},82:{start:{line:142,column:29},end:{line:142,column:63}},83:{start:{line:143,column:33},end:{line:145,column:69}},84:{start:{line:146,column:8},end:{line:151,column:9}},85:{start:{line:147,column:12},end:{line:150,column:15}},86:{start:{line:152,column:8},end:{line:155,column:10}},87:{start:{line:156,column:8},end:{line:156,column:42}},88:{start:{line:159,column:8},end:{line:159,column:80}},89:{start:{line:160,column:8},end:{line:160,column:76}},90:{start:{line:163,column:8},end:{line:163,column:44}},91:{start:{line:166,column:8},end:{line:166,column:77}},92:{start:{line:167,column:8},end:{line:167,column:73}},93:{start:{line:170,column:0},end:{line:172,column:13}},94:{start:{line:173,column:0},end:{line:173,column:28}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:46},end:{line:2,column:47}},loc:{start:{line:2,column:87},end:{line:7,column:1}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:26},end:{line:29,column:5}},line:12},2:{name:"(anonymous_2)",decl:{start:{line:30,column:4},end:{line:30,column:5}},loc:{start:{line:30,column:63},end:{line:32,column:5}},line:30},3:{name:"(anonymous_3)",decl:{start:{line:33,column:4},end:{line:33,column:5}},loc:{start:{line:33,column:65},end:{line:35,column:5}},line:33},4:{name:"(anonymous_4)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:20},end:{line:38,column:5}},line:36},5:{name:"(anonymous_5)",decl:{start:{line:39,column:4},end:{line:39,column:5}},loc:{start:{line:39,column:41},end:{line:42,column:5}},line:39},6:{name:"(anonymous_6)",decl:{start:{line:43,column:4},end:{line:43,column:5}},loc:{start:{line:43,column:42},end:{line:46,column:5}},line:43},7:{name:"(anonymous_7)",decl:{start:{line:47,column:4},end:{line:47,column:5}},loc:{start:{line:47,column:30},end:{line:51,column:5}},line:47},8:{name:"(anonymous_8)",decl:{start:{line:52,column:4},end:{line:52,column:5}},loc:{start:{line:52,column:60},end:{line:59,column:5}},line:52},9:{name:"(anonymous_9)",decl:{start:{line:60,column:4},end:{line:60,column:5}},loc:{start:{line:60,column:56},end:{line:82,column:5}},line:60},10:{name:"(anonymous_10)",decl:{start:{line:61,column:35},end:{line:61,column:36}},loc:{start:{line:61,column:49},end:{line:71,column:9}},line:61},11:{name:"(anonymous_11)",decl:{start:{line:72,column:28},end:{line:72,column:29}},loc:{start:{line:72,column:42},end:{line:80,column:9}},line:72},12:{name:"(anonymous_12)",decl:{start:{line:83,column:4},end:{line:83,column:5}},loc:{start:{line:83,column:26},end:{line:87,column:5}},line:83},13:{name:"(anonymous_13)",decl:{start:{line:88,column:4},end:{line:88,column:5}},loc:{start:{line:88,column:34},end:{line:98,column:5}},line:88},14:{name:"(anonymous_14)",decl:{start:{line:99,column:4},end:{line:99,column:5}},loc:{start:{line:99,column:40},end:{line:101,column:5}},line:99},15:{name:"(anonymous_15)",decl:{start:{line:102,column:4},end:{line:102,column:5}},loc:{start:{line:102,column:53},end:{line:116,column:5}},line:102},16:{name:"(anonymous_16)",decl:{start:{line:117,column:4},end:{line:117,column:5}},loc:{start:{line:117,column:35},end:{line:133,column:5}},line:117},17:{name:"(anonymous_17)",decl:{start:{line:134,column:4},end:{line:134,column:5}},loc:{start:{line:134,column:28},end:{line:157,column:5}},line:134},18:{name:"(anonymous_18)",decl:{start:{line:158,column:4},end:{line:158,column:5}},loc:{start:{line:158,column:35},end:{line:161,column:5}},line:158},19:{name:"(anonymous_19)",decl:{start:{line:162,column:4},end:{line:162,column:5}},loc:{start:{line:162,column:28},end:{line:164,column:5}},line:162},20:{name:"(anonymous_20)",decl:{start:{line:165,column:4},end:{line:165,column:5}},loc:{start:{line:165,column:33},end:{line:168,column:5}},line:165}},branchMap:{0:{loc:{start:{line:2,column:17},end:{line:7,column:1}},type:"binary-expr",locations:[{start:{line:2,column:18},end:{line:2,column:22}},{start:{line:2,column:26},end:{line:2,column:41}},{start:{line:2,column:46},end:{line:7,column:1}}],line:2},1:{loc:{start:{line:3,column:34},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:42},end:{line:3,column:48}},{start:{line:3,column:51},end:{line:3,column:125}}],line:3},2:{loc:{start:{line:3,column:51},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:67},end:{line:3,column:118}},{start:{line:3,column:121},end:{line:3,column:125}}],line:3},3:{loc:{start:{line:4,column:4},end:{line:5,column:150}},type:"if",locations:[{start:{line:4,column:4},end:{line:5,column:150}},{start:{line:4,column:4},end:{line:5,column:150}}],line:4},4:{loc:{start:{line:4,column:8},end:{line:4,column:77}},type:"binary-expr",locations:[{start:{line:4,column:8},end:{line:4,column:35}},{start:{line:4,column:39},end:{line:4,column:77}}],line:4},5:{loc:{start:{line:5,column:58},end:{line:5,column:150}},type:"if",locations:[{start:{line:5,column:58},end:{line:5,column:150}},{start:{line:5,column:58},end:{line:5,column:150}}],line:5},6:{loc:{start:{line:5,column:85},end:{line:5,column:149}},type:"binary-expr",locations:[{start:{line:5,column:86},end:{line:5,column:143}},{start:{line:5,column:148},end:{line:5,column:149}}],line:5},7:{loc:{start:{line:5,column:86},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:94},end:{line:5,column:98}},{start:{line:5,column:101},end:{line:5,column:143}}],line:5},8:{loc:{start:{line:5,column:101},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:109},end:{line:5,column:126}},{start:{line:5,column:129},end:{line:5,column:143}}],line:5},9:{loc:{start:{line:6,column:11},end:{line:6,column:62}},type:"binary-expr",locations:[{start:{line:6,column:11},end:{line:6,column:16}},{start:{line:6,column:20},end:{line:6,column:21}},{start:{line:6,column:25},end:{line:6,column:62}}],line:6},10:{loc:{start:{line:19,column:8},end:{line:24,column:9}},type:"if",locations:[{start:{line:19,column:8},end:{line:24,column:9}},{start:{line:19,column:8},end:{line:24,column:9}}],line:19},11:{loc:{start:{line:31,column:15},end:{line:31,column:87}},type:"binary-expr",locations:[{start:{line:31,column:15},end:{line:31,column:44}},{start:{line:31,column:48},end:{line:31,column:87}}],line:31},12:{loc:{start:{line:34,column:15},end:{line:34,column:89}},type:"binary-expr",locations:[{start:{line:34,column:15},end:{line:34,column:44}},{start:{line:34,column:48},end:{line:34,column:89}}],line:34},13:{loc:{start:{line:40,column:15},end:{line:41,column:90}},type:"binary-expr",locations:[{start:{line:40,column:16},end:{line:40,column:57}},{start:{line:41,column:16},end:{line:41,column:89}}],line:40},14:{loc:{start:{line:44,column:15},end:{line:45,column:92}},type:"binary-expr",locations:[{start:{line:44,column:16},end:{line:44,column:55}},{start:{line:45,column:16},end:{line:45,column:91}}],line:44},15:{loc:{start:{line:49,column:15},end:{line:50,column:95}},type:"binary-expr",locations:[{start:{line:49,column:16},end:{line:49,column:49}},{start:{line:50,column:16},end:{line:50,column:50}},{start:{line:50,column:56},end:{line:50,column:94}}],line:49},16:{loc:{start:{line:56,column:34},end:{line:57,column:76}},type:"binary-expr",locations:[{start:{line:56,column:34},end:{line:56,column:96}},{start:{line:57,column:15},end:{line:57,column:76}}],line:56},17:{loc:{start:{line:58,column:15},end:{line:58,column:75}},type:"binary-expr",locations:[{start:{line:58,column:15},end:{line:58,column:32}},{start:{line:58,column:37},end:{line:58,column:53}},{start:{line:58,column:57},end:{line:58,column:74}}],line:58},18:{loc:{start:{line:62,column:12},end:{line:64,column:13}},type:"if",locations:[{start:{line:62,column:12},end:{line:64,column:13}},{start:{line:62,column:12},end:{line:64,column:13}}],line:62},19:{loc:{start:{line:65,column:12},end:{line:67,column:13}},type:"if",locations:[{start:{line:65,column:12},end:{line:67,column:13}},{start:{line:65,column:12},end:{line:67,column:13}}],line:65},20:{loc:{start:{line:68,column:12},end:{line:69,column:43}},type:"if",locations:[{start:{line:68,column:12},end:{line:69,column:43}},{start:{line:68,column:12},end:{line:69,column:43}}],line:68},21:{loc:{start:{line:73,column:12},end:{line:74,column:29}},type:"if",locations:[{start:{line:73,column:12},end:{line:74,column:29}},{start:{line:73,column:12},end:{line:74,column:29}}],line:73},22:{loc:{start:{line:75,column:12},end:{line:76,column:43}},type:"if",locations:[{start:{line:75,column:12},end:{line:76,column:43}},{start:{line:75,column:12},end:{line:76,column:43}}],line:75},23:{loc:{start:{line:77,column:12},end:{line:78,column:52}},type:"if",locations:[{start:{line:77,column:12},end:{line:78,column:52}},{start:{line:77,column:12},end:{line:78,column:52}}],line:77},24:{loc:{start:{line:91,column:8},end:{line:96,column:9}},type:"if",locations:[{start:{line:91,column:8},end:{line:96,column:9}},{start:{line:91,column:8},end:{line:96,column:9}}],line:91},25:{loc:{start:{line:100,column:15},end:{line:100,column:121}},type:"binary-expr",locations:[{start:{line:100,column:16},end:{line:100,column:33}},{start:{line:100,column:39},end:{line:100,column:120}}],line:100},26:{loc:{start:{line:106,column:8},end:{line:115,column:9}},type:"switch",locations:[{start:{line:107,column:12},end:{line:109,column:22}},{start:{line:110,column:12},end:{line:112,column:22}},{start:{line:113,column:12},end:{line:114,column:22}}],line:106},27:{loc:{start:{line:122,column:37},end:{line:122,column:91}},type:"cond-expr",locations:[{start:{line:122,column:52},end:{line:122,column:71}},{start:{line:122,column:74},end:{line:122,column:91}}],line:122},28:{loc:{start:{line:123,column:28},end:{line:125,column:98}},type:"cond-expr",locations:[{start:{line:124,column:14},end:{line:124,column:125}},{start:{line:125,column:14},end:{line:125,column:98}}],line:123},29:{loc:{start:{line:127,column:8},end:{line:132,column:9}},type:"if",locations:[{start:{line:127,column:8},end:{line:132,column:9}},{start:{line:127,column:8},end:{line:132,column:9}}],line:127},30:{loc:{start:{line:135,column:16},end:{line:139,column:9}},type:"default-arg",locations:[{start:{line:135,column:28},end:{line:139,column:9}}],line:135},31:{loc:{start:{line:139,column:11},end:{line:139,column:23}},type:"default-arg",locations:[{start:{line:139,column:18},end:{line:139,column:23}}],line:139},32:{loc:{start:{line:142,column:29},end:{line:142,column:63}},type:"cond-expr",locations:[{start:{line:142,column:44},end:{line:142,column:53}},{start:{line:142,column:56},end:{line:142,column:63}}],line:142},33:{loc:{start:{line:143,column:33},end:{line:145,column:69}},type:"cond-expr",locations:[{start:{line:144,column:14},end:{line:144,column:97}},{start:{line:145,column:14},end:{line:145,column:69}}],line:143},34:{loc:{start:{line:146,column:8},end:{line:151,column:9}},type:"if",locations:[{start:{line:146,column:8},end:{line:151,column:9}},{start:{line:146,column:8},end:{line:151,column:9}}],line:146}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0,87:0,88:0,89:0,90:0,91:0,92:0,93:0,94:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0},b:{0:[0,0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0,0],16:[0,0],17:[0,0,0],18:[0,0],19:[0,0],20:[0,0],21:[0,0],22:[0,0],23:[0,0],24:[0,0],25:[0,0],26:[0,0,0],27:[0,0],28:[0,0],29:[0,0],30:[0],31:[0],32:[0,0],33:[0,0],34:[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Movement\\Movement.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Movement\\Movement.ts"],names:[],mappings:";;;;;;;;;AAAA,2DAA0C;AAW1C,IAAa,QAAQ,GAArB,MAAa,QAAQ;IAiBnB,YAAY,QAA0B;QACpC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;QAC9B,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,UAAU,CAAC;QAChC,IAAI,CAAC,EAAE,GAAG,QAAQ,CAAC,QAAQ,CAAC;QAC5B,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC;QAC5C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;QAClC,IAAI,CAAC,SAAS,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC;QACtC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE;YAC5B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;SACxB;aAAM;YACL,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;SACrB;QACD,IAAI,CAAC,eAAe,GAAG;YACrB,gBAAgB,EAAE,CAAC;YACnB,MAAM,EAAE,IAAI,CAAC,IAAI;SAClB,CAAC;IACJ,CAAC;IAEO,4BAA4B,CAAC,eAAuB,EAAE,WAAmB;QAC/E,OAAO,WAAW,GAAG,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,KAAK,IAAI,CAAC,EAAE,CAAC;IAClF,CAAC;IAEO,8BAA8B,CAAC,eAAuB,EAAE,WAAmB;QACjF,OAAO,WAAW,GAAG,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC;IACpF,CAAC;IAEO,aAAa;QACnB,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;IACnC,CAAC;IAEO,uBAAuB,CAAC,WAAmB;QACjD,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC;eAC7C,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IACnF,CAAC;IAEO,wBAAwB,CAAC,WAAmB;QAClD,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,KAAK,IAAI,CAAC,EAAE,CAAC;eAC3C,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IACrF,CAAC;IAEO,uBAAuB;QAC7B,MAAM,YAAY,GAAW,IAAI,CAAC;QAClC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,KAAK,KAAK,CAAC;eACrC,CAAC,OAAO,IAAI,CAAC,SAAS,KAAK,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,YAAY,CAAC,CAAC;IACxF,CAAC;IAEO,sBAAsB,CAAC,cAAsB,EAAE,eAAuB;QAC5E,MAAM,iBAAiB,GAAY,IAAI,CAAC,GAAG,CAAC,cAAc,GAAG,eAAe,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACxG,MAAM,QAAQ,GAAW,eAAe,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAClE,MAAM,gBAAgB,GAAY,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC9D,MAAM,iBAAiB,GAAY,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,cAAc;eAC5F,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,cAAc,CAAC;QAEnE,OAAO,iBAAiB,IAAI,CAAC,gBAAgB,IAAI,iBAAiB,CAAC,CAAC;IACtE,CAAC;IAEM,qBAAqB,CAAC,eAAuB,EAAE,WAAmB;QACvE,MAAM,kBAAkB,GAAG,CAAC,QAAgB,EAAU,EAAE;YACtD,IAAI,IAAI,CAAC,uBAAuB,CAAC,WAAW,CAAC,EAAE;gBAC7C,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,WAAW,CAAC;aACxE;YACD,IAAI,IAAI,CAAC,wBAAwB,CAAC,WAAW,CAAC,EAAE;gBAC9C,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,WAAW,CAAC;aAC1E;YACD,IAAI,IAAI,CAAC,4BAA4B,CAAC,eAAe,EAAE,WAAW,CAAC;gBAAE,QAAQ,GAAG,eAAe,CAAC;YAEhG,OAAO,QAAQ,CAAC;QAClB,CAAC,CAAC;QAEF,MAAM,WAAW,GAAG,CAAC,QAAgB,EAAU,EAAE;YAC/C,IAAI,WAAW,GAAG,CAAC;gBAAE,QAAQ,GAAG,CAAC,CAAC;YAClC,IAAI,IAAI,CAAC,8BAA8B,CAAC,eAAe,EAAE,WAAW,CAAC;gBAAE,QAAQ,GAAG,eAAe,CAAC;YAClG,IAAI,IAAI,CAAC,aAAa,EAAE;gBAAE,OAAO,kBAAkB,CAAC,QAAQ,CAAC,CAAC;YAE9D,OAAO,QAAQ,CAAC;QAClB,CAAC,CAAC;QAEF,OAAO,WAAW,CAAC,WAAW,CAAC,CAAC;IAClC,CAAC;IAEM,mBAAmB;QACxB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;QACxG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;cAC1E,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC;IACtD,CAAC;IAEO,gBAAgB,CAAC,WAAmB;QAC1C,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC;QACtD,YAAY,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,WAAW,IAAI,CAAC;QAE7C,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,KAAK,IAAI,CAAC,IAAI,EAAE;YAC7C,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,WAAW,CAAC;SACnC;aAAM;YACL,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,WAAW,CAAC;SACjC;QAED,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAC7B,CAAC;IAEO,sBAAsB,CAAC,WAAmB;QAChD,OAAO,CAAC,WAAW,KAAK,CAAC,CAAC,IAAI,CAAC,WAAW,KAAK,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IACpH,CAAC;IAEO,mBAAmB,CAAC,WAAmB,EAAE,cAAsB;QACrE,MAAM,gBAAgB,GAAW,WAAW,GAAG,cAAc,CAAC;QAC9D,MAAM,iBAAiB,GAAW,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;cACrE,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAE5D,QAAQ,IAAI,EAAE;YACZ,KAAK,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC;gBAC3C,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;gBACnC,MAAM;YACR,KAAK,IAAI,CAAC,sBAAsB,CAAC,WAAW,EAAE,cAAc,CAAC;gBAC3D,IAAI,CAAC,gBAAgB,CACnB,IAAI,CAAC,KAAK,CAAC,iBAAiB,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAChF,CAAC;gBACF,MAAM;YACR;gBACE,MAAM;SACT;IACH,CAAC;IAEO,uBAAuB,CAAC,KAAkC;QAChE,MAAM,CAAC,GAAW,KAAK,CAAC,OAAO,CAAC;QAChC,MAAM,CAAC,GAAW,KAAK,CAAC,OAAO,CAAC;QAChC,MAAM,eAAe,GAAW,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,WAAW,CAAC;QAClG,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC;QAC/D,MAAM,oBAAoB,GAAW,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;QAC5F,MAAM,WAAW,GAAW,IAAI,CAAC,aAAa,CAAC,QAAQ;YACrD,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,CAC1B,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC,GAAG,CAAC;YACtF,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC,IAAI,CAAC;QACzF,MAAM,aAAa,GAAW,IAAI,CAAC,qBAAqB,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;QAEvF,IAAI,IAAI,CAAC,uBAAuB,EAAE,EAAE;YAClC,IAAI,CAAC,mBAAmB,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;SAC/D;aAAM;YACL,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;SACtC;IACH,CAAC;IAEM,cAAc,CAAC,OAAsB;QAC1C,MAAM,EACJ,SAAS,GAAG;YACV,CAAC,EAAE,CAAC;YACJ,CAAC,EAAE,CAAC;YACJ,MAAM,EAAE,KAAK;SACd,EACD,IAAI,GAAG,KAAK,GACb,GAAG,OAAO,CAAC;QACZ,MAAM,YAAY,GAAY,SAAS,CAAC,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC;QAC7D,MAAM,UAAU,GAAY,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;QACxD,MAAM,YAAY,GAAoB,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;QACzE,MAAM,gBAAgB,GAAW,UAAU;YACzC,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,YAAY,CAAC,qBAAqB,EAAE,CAAC,GAAG,GAAG,CAAC,YAAY,CAAC,WAAW,CAAC;YACrF,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,YAAY,CAAC,qBAAqB,EAAE,CAAC,IAAI,CAAC;QAE5D,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,uBAAuB,CAAC;gBAC3B,OAAO,EAAE,IAAI,CAAC,CAAC;gBACf,OAAO,EAAE,IAAI,CAAC,CAAC;aAChB,CAAC,CAAC;SACJ;QAED,IAAI,CAAC,eAAe,GAAG;YACrB,MAAM,EAAE,YAAY;YACpB,gBAAgB;SACjB,CAAC;QAEF,IAAI,CAAC,0BAA0B,EAAE,CAAC;IACpC,CAAC;IAEO,4BAA4B;QAClC,QAAQ,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,uBAAuB,CAAC,CAAC;QACxE,QAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;IACtE,CAAC;IAEO,qBAAqB;QAC3B,IAAI,CAAC,4BAA4B,EAAE,CAAC;IACtC,CAAC;IAEO,0BAA0B;QAChC,QAAQ,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,uBAAuB,CAAC,CAAC;QACrE,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;IACnE,CAAC;CACF,CAAA;AA1MY,QAAQ;IADpB,4BAAQ;GACI,QAAQ,CA0MpB;AA1MY,4BAAQ",sourcesContent:["import autobind from 'autobind-decorator';\nimport { BasicViewSettings } from '../types';\nimport {\n  HandleClickData,\n  HandlesPosition,\n  MovementEvent,\n  MovementSettings,\n  TestMouseEvent,\n} from './types';\n\n@autobind\nexport class Movement {\n  readonly slider: HTMLDivElement;\n\n  readonly from: HTMLSpanElement;\n\n  readonly to: HTMLSpanElement;\n\n  readonly basicSettings: BasicViewSettings;\n\n  readonly interval: HTMLDivElement;\n\n  public stepWidth: string | boolean;\n\n  public positions: HandlesPosition;\n\n  public dataForMovement: HandleClickData;\n\n  constructor(settings: MovementSettings) {\n    this.slider = settings.slider;\n    this.from = settings.fromHandle;\n    this.to = settings.toHandle;\n    this.basicSettings = settings.basicSettings;\n    this.interval = settings.interval;\n    this.positions = { from: 0, to: 100 };\n    if (!this.basicSettings.step) {\n      this.stepWidth = false;\n    } else {\n      this.stepWidth = '';\n    }\n    this.dataForMovement = {\n      distanceToCursor: 0,\n      target: this.from,\n    };\n  }\n\n  private checkIsToBiggerThanRightEdge(rightSliderEdge: number, newPosition: number): boolean {\n    return newPosition > rightSliderEdge && this.dataForMovement.target === this.to;\n  }\n\n  private checkIsFromBiggerThanRightEdge(rightSliderEdge: number, newPosition: number): boolean {\n    return newPosition > rightSliderEdge && this.dataForMovement.target === this.from;\n  }\n\n  private checkIsDouble(): boolean {\n    return this.basicSettings.double;\n  }\n\n  private checkIsFromBiggerThanTo(newPosition: number): boolean {\n    return (this.dataForMovement.target === this.from)\n      && (newPosition > this.positions.to - this.dataForMovement.target.offsetWidth);\n  }\n\n  private checkIsToSmallerThanFrom(newPosition: number): boolean {\n    return (this.dataForMovement.target === this.to)\n      && (newPosition < this.positions.from + this.dataForMovement.target.offsetWidth);\n  }\n\n  private checkIsStepSetCorrectly(): boolean {\n    const minStepWidth: number = 0.01;\n    return (this.basicSettings.step !== false)\n      && (typeof this.stepWidth === 'string') && (Number(this.stepWidth) >= minStepWidth);\n  }\n\n  private checkIsStepWidthPassed(targetPosition: number, currentPosition: number): boolean {\n    const isStepWidthPassed: boolean = Math.abs(targetPosition - currentPosition) >= Number(this.stepWidth);\n    const stepRate: number = currentPosition / Number(this.stepWidth);\n    const isNotInStepRange: boolean = !Number.isInteger(stepRate);\n    const isStepRangePassed: boolean = Math.floor(stepRate) * Number(this.stepWidth) > targetPosition\n      || Math.ceil(stepRate) * Number(this.stepWidth) < targetPosition;\n\n    return isStepWidthPassed || (isNotInStepRange && isStepRangePassed);\n  }\n\n  public fixImpossiblePosition(rightSliderEdge: number, newPosition: number): number {\n    const fixDoublePositions = (position: number): number => {\n      if (this.checkIsFromBiggerThanTo(newPosition)) {\n        position = this.positions.to - this.dataForMovement.target.offsetWidth;\n      }\n      if (this.checkIsToSmallerThanFrom(newPosition)) {\n        position = this.positions.from + this.dataForMovement.target.offsetWidth;\n      }\n      if (this.checkIsToBiggerThanRightEdge(rightSliderEdge, newPosition)) position = rightSliderEdge;\n\n      return position;\n    };\n\n    const fixPosition = (position: number): number => {\n      if (newPosition < 0) position = 0;\n      if (this.checkIsFromBiggerThanRightEdge(rightSliderEdge, newPosition)) position = rightSliderEdge;\n      if (this.checkIsDouble()) return fixDoublePositions(position);\n\n      return position;\n    };\n\n    return fixPosition(newPosition);\n  }\n\n  public fixIntervalPosition(): void {\n    this.interval.style.left = `${(this.positions.from + (this.dataForMovement.target.offsetWidth / 2))}px`;\n    this.interval.style.right = `${(this.slider.offsetWidth - this.positions.to)\n    - (this.dataForMovement.target.offsetWidth / 2)}px`;\n  }\n\n  private applyNewPosition(newPosition: number): void {\n    const { target: targetHandle } = this.dataForMovement;\n    targetHandle.style.left = `${newPosition}px`;\n\n    if (this.dataForMovement.target === this.from) {\n      this.positions.from = newPosition;\n    } else {\n      this.positions.to = newPosition;\n    }\n\n    this.fixIntervalPosition();\n  }\n\n  private checkIsExtremePosition(newPosition: number): boolean {\n    return (newPosition === 0) || (newPosition === this.slider.offsetWidth - this.dataForMovement.target.offsetWidth);\n  }\n\n  private performStepMovement(newPosition: number, targetPosition: number): void {\n    const currentStepWidth: number = newPosition - targetPosition;\n    const newTargetPosition: number = targetPosition + Number(this.stepWidth)\n      * (Math.trunc(currentStepWidth / Number(this.stepWidth)));\n\n    switch (true) {\n      case this.checkIsExtremePosition(newPosition):\n        this.applyNewPosition(newPosition);\n        break;\n      case this.checkIsStepWidthPassed(newPosition, targetPosition):\n        this.applyNewPosition(\n          Math.round(newTargetPosition / Number(this.stepWidth)) * Number(this.stepWidth),\n        );\n        break;\n      default:\n        break;\n    }\n  }\n\n  private handleDocumentMouseMove(event: MouseEvent | TestMouseEvent): void {\n    const x: number = event.clientX;\n    const y: number = event.clientY;\n    const rightSliderEdge: number = this.slider.offsetWidth - this.dataForMovement.target.offsetWidth;\n    const isFromTarget = this.dataForMovement.target === this.from;\n    const targetHandlePosition: number = isFromTarget ? this.positions.from : this.positions.to;\n    const newPosition: number = this.basicSettings.vertical\n      ? this.slider.offsetWidth - (\n        y - this.dataForMovement.distanceToCursor - this.slider.getBoundingClientRect().top)\n      : x - this.dataForMovement.distanceToCursor - this.slider.getBoundingClientRect().left;\n    const fixedPosition: number = this.fixImpossiblePosition(rightSliderEdge, newPosition);\n\n    if (this.checkIsStepSetCorrectly()) {\n      this.performStepMovement(fixedPosition, targetHandlePosition);\n    } else {\n      this.applyNewPosition(fixedPosition);\n    }\n  }\n\n  public handleListener(setting: MovementEvent): void {\n    const {\n      eventInfo = {\n        x: 0,\n        y: 0,\n        target: false,\n      },\n      test = false,\n    } = setting;\n    const isFromHandle: boolean = eventInfo.target === this.from;\n    const isVertical: boolean = this.basicSettings.vertical;\n    const targetHandle: HTMLSpanElement = isFromHandle ? this.from : this.to;\n    const distanceToCursor: number = isVertical\n      ? eventInfo.y - targetHandle.getBoundingClientRect().top - (targetHandle.offsetWidth)\n      : eventInfo.x - targetHandle.getBoundingClientRect().left;\n\n    if (test) {\n      this.handleDocumentMouseMove({\n        clientX: test.x,\n        clientY: test.y,\n      });\n    }\n\n    this.dataForMovement = {\n      target: targetHandle,\n      distanceToCursor,\n    };\n\n    this.bindDocumentEventListeners();\n  }\n\n  private removeDocumentEventListeners(): void {\n    document.removeEventListener('mousemove', this.handleDocumentMouseMove);\n    document.removeEventListener('mouseup', this.handleDocumentMouseUp);\n  }\n\n  private handleDocumentMouseUp(): void {\n    this.removeDocumentEventListeners();\n  }\n\n  private bindDocumentEventListeners(): void {\n    document.addEventListener('mousemove', this.handleDocumentMouseMove);\n    document.addEventListener('mouseup', this.handleDocumentMouseUp);\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[s="__coverage__"]||(i[s]={}))[t]&&a[t].hash===l?a[t]:(o.hash=l,a[t]=o)),C=(r.s[0]++,r.b[0][0]++,this&&(r.b[0][1]++,this.__decorate)||(r.b[0][2]++,function(e,A,n,t){r.f[0]++;var l,i=(r.s[1]++,arguments.length),s=(r.s[2]++,i<3?(r.b[1][0]++,A):(r.b[1][1]++,null===t?(r.b[2][0]++,t=Object.getOwnPropertyDescriptor(A,n)):(r.b[2][1]++,t)));if(r.s[3]++,r.b[4][0]++,"object"==typeof Reflect&&(r.b[4][1]++,"function"==typeof Reflect.decorate))r.b[3][0]++,r.s[4]++,s=Reflect.decorate(e,A,n,t);else{r.b[3][1]++,r.s[5]++;for(var o=e.length-1;o>=0;o--)r.s[6]++,(l=e[o])?(r.b[5][0]++,r.s[7]++,r.b[6][0]++,s=(i<3?(r.b[7][0]++,l(s)):(r.b[7][1]++,i>3?(r.b[8][0]++,l(A,n,s)):(r.b[8][1]++,l(A,n))))||(r.b[6][1]++,s)):r.b[5][1]++}return r.s[8]++,r.b[9][0]++,i>3&&(r.b[9][1]++,s)&&(r.b[9][2]++,Object.defineProperty(A,n,s)),s}));r.s[9]++,Object.defineProperty(A,"__esModule",{value:!0}),r.s[10]++,A.Movement=void 0;const u=(r.s[11]++,n("./node_modules/autobind-decorator/lib/esm/index.js"));r.s[12]++;let c=class{constructor(e){r.f[1]++,r.s[13]++,this.slider=e.slider,r.s[14]++,this.from=e.fromHandle,r.s[15]++,this.to=e.toHandle,r.s[16]++,this.basicSettings=e.basicSettings,r.s[17]++,this.interval=e.interval,r.s[18]++,this.positions={from:0,to:100},r.s[19]++,this.basicSettings.step?(r.b[10][1]++,r.s[21]++,this.stepWidth=""):(r.b[10][0]++,r.s[20]++,this.stepWidth=!1),r.s[22]++,this.dataForMovement={distanceToCursor:0,target:this.from}}checkIsToBiggerThanRightEdge(e,A){return r.f[2]++,r.s[23]++,r.b[11][0]++,A>e&&(r.b[11][1]++,this.dataForMovement.target===this.to)}checkIsFromBiggerThanRightEdge(e,A){return r.f[3]++,r.s[24]++,r.b[12][0]++,A>e&&(r.b[12][1]++,this.dataForMovement.target===this.from)}checkIsDouble(){return r.f[4]++,r.s[25]++,this.basicSettings.double}checkIsFromBiggerThanTo(e){return r.f[5]++,r.s[26]++,r.b[13][0]++,this.dataForMovement.target===this.from&&(r.b[13][1]++,e>this.positions.to-this.dataForMovement.target.offsetWidth)}checkIsToSmallerThanFrom(e){return r.f[6]++,r.s[27]++,r.b[14][0]++,this.dataForMovement.target===this.to&&(r.b[14][1]++,e<this.positions.from+this.dataForMovement.target.offsetWidth)}checkIsStepSetCorrectly(){r.f[7]++;const e=(r.s[28]++,.01);return r.s[29]++,r.b[15][0]++,!1!==this.basicSettings.step&&(r.b[15][1]++,"string"==typeof this.stepWidth)&&(r.b[15][2]++,Number(this.stepWidth)>=e)}checkIsStepWidthPassed(e,A){r.f[8]++;const n=(r.s[30]++,Math.abs(e-A)>=Number(this.stepWidth)),t=(r.s[31]++,A/Number(this.stepWidth)),l=(r.s[32]++,!Number.isInteger(t)),i=(r.s[33]++,r.b[16][0]++,Math.floor(t)*Number(this.stepWidth)>e||(r.b[16][1]++,Math.ceil(t)*Number(this.stepWidth)<e));return r.s[34]++,r.b[17][0]++,n||(r.b[17][1]++,l&&(r.b[17][2]++,i))}fixImpossiblePosition(e,A){r.f[9]++,r.s[35]++;const n=n=>(r.f[10]++,r.s[36]++,this.checkIsFromBiggerThanTo(A)?(r.b[18][0]++,r.s[37]++,n=this.positions.to-this.dataForMovement.target.offsetWidth):r.b[18][1]++,r.s[38]++,this.checkIsToSmallerThanFrom(A)?(r.b[19][0]++,r.s[39]++,n=this.positions.from+this.dataForMovement.target.offsetWidth):r.b[19][1]++,r.s[40]++,this.checkIsToBiggerThanRightEdge(e,A)?(r.b[20][0]++,r.s[41]++,n=e):r.b[20][1]++,r.s[42]++,n);r.s[43]++;return r.s[51]++,(t=>(r.f[11]++,r.s[44]++,A<0?(r.b[21][0]++,r.s[45]++,t=0):r.b[21][1]++,r.s[46]++,this.checkIsFromBiggerThanRightEdge(e,A)?(r.b[22][0]++,r.s[47]++,t=e):r.b[22][1]++,r.s[48]++,this.checkIsDouble()?(r.b[23][0]++,r.s[49]++,n(t)):(r.b[23][1]++,r.s[50]++,t)))(A)}fixIntervalPosition(){r.f[12]++,r.s[52]++,this.interval.style.left=`${this.positions.from+this.dataForMovement.target.offsetWidth/2}px`,r.s[53]++,this.interval.style.right=this.slider.offsetWidth-this.positions.to-this.dataForMovement.target.offsetWidth/2+"px"}applyNewPosition(e){r.f[13]++;const{target:A}=(r.s[54]++,this.dataForMovement);r.s[55]++,A.style.left=`${e}px`,r.s[56]++,this.dataForMovement.target===this.from?(r.b[24][0]++,r.s[57]++,this.positions.from=e):(r.b[24][1]++,r.s[58]++,this.positions.to=e),r.s[59]++,this.fixIntervalPosition()}checkIsExtremePosition(e){return r.f[14]++,r.s[60]++,r.b[25][0]++,0===e||(r.b[25][1]++,e===this.slider.offsetWidth-this.dataForMovement.target.offsetWidth)}performStepMovement(e,A){r.f[15]++;const n=(r.s[61]++,e-A),t=(r.s[62]++,A+Number(this.stepWidth)*Math.trunc(n/Number(this.stepWidth)));switch(r.s[63]++,!0){case this.checkIsExtremePosition(e):r.b[26][0]++,r.s[64]++,this.applyNewPosition(e),r.s[65]++;break;case this.checkIsStepWidthPassed(e,A):r.b[26][1]++,r.s[66]++,this.applyNewPosition(Math.round(t/Number(this.stepWidth))*Number(this.stepWidth)),r.s[67]++;break;default:r.b[26][2]++,r.s[68]++}}handleDocumentMouseMove(e){r.f[16]++;const A=(r.s[69]++,e.clientX),n=(r.s[70]++,e.clientY),t=(r.s[71]++,this.slider.offsetWidth-this.dataForMovement.target.offsetWidth),l=(r.s[72]++,this.dataForMovement.target===this.from),i=(r.s[73]++,l?(r.b[27][0]++,this.positions.from):(r.b[27][1]++,this.positions.to)),s=(r.s[74]++,this.basicSettings.vertical?(r.b[28][0]++,this.slider.offsetWidth-(n-this.dataForMovement.distanceToCursor-this.slider.getBoundingClientRect().top)):(r.b[28][1]++,A-this.dataForMovement.distanceToCursor-this.slider.getBoundingClientRect().left)),o=(r.s[75]++,this.fixImpossiblePosition(t,s));r.s[76]++,this.checkIsStepSetCorrectly()?(r.b[29][0]++,r.s[77]++,this.performStepMovement(o,i)):(r.b[29][1]++,r.s[78]++,this.applyNewPosition(o))}handleListener(e){r.f[17]++;const{eventInfo:A=(r.b[30][0]++,{x:0,y:0,target:!1}),test:n=(r.b[31][0]++,!1)}=(r.s[79]++,e),t=(r.s[80]++,A.target===this.from),l=(r.s[81]++,this.basicSettings.vertical),i=(r.s[82]++,t?(r.b[32][0]++,this.from):(r.b[32][1]++,this.to)),s=(r.s[83]++,l?(r.b[33][0]++,A.y-i.getBoundingClientRect().top-i.offsetWidth):(r.b[33][1]++,A.x-i.getBoundingClientRect().left));r.s[84]++,n?(r.b[34][0]++,r.s[85]++,this.handleDocumentMouseMove({clientX:n.x,clientY:n.y})):r.b[34][1]++,r.s[86]++,this.dataForMovement={target:i,distanceToCursor:s},r.s[87]++,this.bindDocumentEventListeners()}removeDocumentEventListeners(){r.f[18]++,r.s[88]++,document.removeEventListener("mousemove",this.handleDocumentMouseMove),r.s[89]++,document.removeEventListener("mouseup",this.handleDocumentMouseUp)}handleDocumentMouseUp(){r.f[19]++,r.s[90]++,this.removeDocumentEventListeners()}bindDocumentEventListeners(){r.f[20]++,r.s[91]++,document.addEventListener("mousemove",this.handleDocumentMouseMove),r.s[92]++,document.addEventListener("mouseup",this.handleDocumentMouseUp)}};r.s[93]++,c=C([u.default],c),r.s[94]++,A.Movement=c},"./src/plugin/View/SelectedInterval/SelectedInterval.ts":function(e,A,n){"use strict";var t,l,i,s,o,a,r=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SelectedInterval\\SelectedInterval.ts",l="a9328d3ca6001ca93c3d149c0916182a3e1646b2",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SelectedInterval\\SelectedInterval.ts",statementMap:{0:{start:{line:2,column:17},end:{line:7,column:1}},1:{start:{line:3,column:12},end:{line:3,column:28}},2:{start:{line:3,column:34},end:{line:3,column:125}},3:{start:{line:4,column:4},end:{line:5,column:150}},4:{start:{line:4,column:79},end:{line:4,column:131}},5:{start:{line:5,column:9},end:{line:5,column:150}},6:{start:{line:5,column:58},end:{line:5,column:150}},7:{start:{line:5,column:81},end:{line:5,column:150}},8:{start:{line:6,column:4},end:{line:6,column:66}},9:{start:{line:8,column:0},end:{line:8,column:62}},10:{start:{line:9,column:0},end:{line:9,column:34}},11:{start:{line:10,column:29},end:{line:10,column:58}},12:{start:{line:11,column:23},end:{line:49,column:1}},13:{start:{line:13,column:8},end:{line:13,column:54}},14:{start:{line:14,column:8},end:{line:14,column:37}},15:{start:{line:17,column:8},end:{line:17,column:61}},16:{start:{line:18,column:8},end:{line:18,column:62}},17:{start:{line:21,column:8},end:{line:27,column:9}},18:{start:{line:22,column:12},end:{line:22,column:111}},19:{start:{line:25,column:12},end:{line:26,column:54}},20:{start:{line:30,column:8},end:{line:30,column:72}},21:{start:{line:33,column:8},end:{line:33,column:70}},22:{start:{line:36,column:42},end:{line:36,column:50}},23:{start:{line:37,column:8},end:{line:47,column:9}},24:{start:{line:39,column:16},end:{line:39,column:53}},25:{start:{line:40,column:16},end:{line:40,column:22}},26:{start:{line:42,column:16},end:{line:42,column:54}},27:{start:{line:43,column:16},end:{line:43,column:67}},28:{start:{line:44,column:16},end:{line:44,column:22}},29:{start:{line:46,column:16},end:{line:46,column:22}},30:{start:{line:50,column:0},end:{line:52,column:21}},31:{start:{line:53,column:0},end:{line:53,column:44}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:46},end:{line:2,column:47}},loc:{start:{line:2,column:87},end:{line:7,column:1}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:18},end:{line:15,column:5}},line:12},2:{name:"(anonymous_2)",decl:{start:{line:16,column:4},end:{line:16,column:5}},loc:{start:{line:16,column:28},end:{line:19,column:5}},line:16},3:{name:"(anonymous_3)",decl:{start:{line:20,column:4},end:{line:20,column:5}},loc:{start:{line:20,column:49},end:{line:28,column:5}},line:20},4:{name:"(anonymous_4)",decl:{start:{line:29,column:4},end:{line:29,column:5}},loc:{start:{line:29,column:43},end:{line:31,column:5}},line:29},5:{name:"(anonymous_5)",decl:{start:{line:32,column:4},end:{line:32,column:5}},loc:{start:{line:32,column:43},end:{line:34,column:5}},line:32},6:{name:"(anonymous_6)",decl:{start:{line:35,column:4},end:{line:35,column:5}},loc:{start:{line:35,column:35},end:{line:48,column:5}},line:35}},branchMap:{0:{loc:{start:{line:2,column:17},end:{line:7,column:1}},type:"binary-expr",locations:[{start:{line:2,column:18},end:{line:2,column:22}},{start:{line:2,column:26},end:{line:2,column:41}},{start:{line:2,column:46},end:{line:7,column:1}}],line:2},1:{loc:{start:{line:3,column:34},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:42},end:{line:3,column:48}},{start:{line:3,column:51},end:{line:3,column:125}}],line:3},2:{loc:{start:{line:3,column:51},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:67},end:{line:3,column:118}},{start:{line:3,column:121},end:{line:3,column:125}}],line:3},3:{loc:{start:{line:4,column:4},end:{line:5,column:150}},type:"if",locations:[{start:{line:4,column:4},end:{line:5,column:150}},{start:{line:4,column:4},end:{line:5,column:150}}],line:4},4:{loc:{start:{line:4,column:8},end:{line:4,column:77}},type:"binary-expr",locations:[{start:{line:4,column:8},end:{line:4,column:35}},{start:{line:4,column:39},end:{line:4,column:77}}],line:4},5:{loc:{start:{line:5,column:58},end:{line:5,column:150}},type:"if",locations:[{start:{line:5,column:58},end:{line:5,column:150}},{start:{line:5,column:58},end:{line:5,column:150}}],line:5},6:{loc:{start:{line:5,column:85},end:{line:5,column:149}},type:"binary-expr",locations:[{start:{line:5,column:86},end:{line:5,column:143}},{start:{line:5,column:148},end:{line:5,column:149}}],line:5},7:{loc:{start:{line:5,column:86},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:94},end:{line:5,column:98}},{start:{line:5,column:101},end:{line:5,column:143}}],line:5},8:{loc:{start:{line:5,column:101},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:109},end:{line:5,column:126}},{start:{line:5,column:129},end:{line:5,column:143}}],line:5},9:{loc:{start:{line:6,column:11},end:{line:6,column:62}},type:"binary-expr",locations:[{start:{line:6,column:11},end:{line:6,column:16}},{start:{line:6,column:20},end:{line:6,column:21}},{start:{line:6,column:25},end:{line:6,column:62}}],line:6},10:{loc:{start:{line:21,column:8},end:{line:27,column:9}},type:"if",locations:[{start:{line:21,column:8},end:{line:27,column:9}},{start:{line:21,column:8},end:{line:27,column:9}}],line:21},11:{loc:{start:{line:30,column:15},end:{line:30,column:71}},type:"binary-expr",locations:[{start:{line:30,column:16},end:{line:30,column:25}},{start:{line:30,column:31},end:{line:30,column:70}}],line:30},12:{loc:{start:{line:33,column:15},end:{line:33,column:69}},type:"binary-expr",locations:[{start:{line:33,column:16},end:{line:33,column:24}},{start:{line:33,column:30},end:{line:33,column:68}}],line:33},13:{loc:{start:{line:37,column:8},end:{line:47,column:9}},type:"switch",locations:[{start:{line:38,column:12},end:{line:40,column:22}},{start:{line:41,column:12},end:{line:44,column:22}},{start:{line:45,column:12},end:{line:46,column:22}}],line:37}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0},b:{0:[0,0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SelectedInterval\\SelectedInterval.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SelectedInterval\\SelectedInterval.ts"],names:[],mappings:";;;;;;;;;AAAA,2DAA0C;AAI1C,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;IAG3B;QACE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC/B,CAAC;IAEO,qBAAqB;QAC3B,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;QACrD,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;IACxD,CAAC;IAEM,6BAA6B,CAAC,aAAuC;QAC1E,IAAI,aAAa,CAAC,MAAM,KAAK,MAAM,EAAE;YACnC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC;SACpG;aAAM;YACL,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,aAAa,CAAC,WAAW,GAAG,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;kBACrF,CAAC,aAAa,CAAC,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC;SACzC;IACH,CAAC;IAEO,4BAA4B,CAAC,QAAiB;QACpD,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,KAAK,OAAO,CAAC,CAAC;IAClE,CAAC;IAEO,4BAA4B,CAAC,QAAiB;QACpD,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,KAAK,MAAM,CAAC,CAAC;IAChE,CAAC;IAEM,oBAAoB,CAAC,QAA6B;QACvD,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,QAAQ,CAAC;QAE3C,QAAQ,IAAI,EAAE;YACZ,KAAK,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC;gBAC9C,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;gBACrC,MAAM;YACR,KAAK,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC;gBAC9C,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;gBACtC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,WAAW,GAAG,CAAC,IAAI,CAAC;gBACnD,MAAM;YACR;gBACE,MAAM;SACT;IACH,CAAC;CACF,CAAA;AA7CY,gBAAgB;IAD5B,4BAAQ;GACI,gBAAgB,CA6C5B;AA7CY,4CAAgB",sourcesContent:["import autobind from 'autobind-decorator';\nimport { IntervalDisplayData, RefreshIntervalPositions } from './types';\n\n@autobind\nexport class SelectedInterval {\n  readonly interval: HTMLDivElement;\n\n  constructor() {\n    this.interval = document.createElement('div');\n    this.initializeHTMLElement();\n  }\n\n  private initializeHTMLElement(): void {\n    this.interval.classList.add('goby-slider__interval');\n    this.interval.setAttribute('style', 'display: block');\n  }\n\n  public adjustPositionRelativeToValue(dataToRefresh: RefreshIntervalPositions): void {\n    if (dataToRefresh.target === 'from') {\n      this.interval.style.left = `${Number(dataToRefresh.position) + (dataToRefresh.handleWidth / 2)}px`;\n    } else {\n      this.interval.style.right = `${dataToRefresh.sliderWidth - Number(dataToRefresh.position)\n        + (dataToRefresh.handleWidth / 2)}px`;\n    }\n  }\n\n  private checkIsIntervalShouldBeHided(isDouble: boolean): boolean {\n    return (!isDouble) && (this.interval.style.display === 'block');\n  }\n\n  private checkIsIntervalShouldBeShown(isDouble: boolean): boolean {\n    return (isDouble) && (this.interval.style.display === 'none');\n  }\n\n  public hideSelectedInterval(settings: IntervalDisplayData): void {\n    const { isDouble, handleWidth } = settings;\n\n    switch (true) {\n      case this.checkIsIntervalShouldBeHided(isDouble):\n        this.interval.style.display = 'none';\n        break;\n      case this.checkIsIntervalShouldBeShown(isDouble):\n        this.interval.style.display = 'block';\n        this.interval.style.right = `${handleWidth / 2}px`;\n        break;\n      default:\n        break;\n    }\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[s="__coverage__"]||(i[s]={}))[t]&&a[t].hash===l?a[t]:(o.hash=l,a[t]=o)),C=(r.s[0]++,r.b[0][0]++,this&&(r.b[0][1]++,this.__decorate)||(r.b[0][2]++,function(e,A,n,t){r.f[0]++;var l,i=(r.s[1]++,arguments.length),s=(r.s[2]++,i<3?(r.b[1][0]++,A):(r.b[1][1]++,null===t?(r.b[2][0]++,t=Object.getOwnPropertyDescriptor(A,n)):(r.b[2][1]++,t)));if(r.s[3]++,r.b[4][0]++,"object"==typeof Reflect&&(r.b[4][1]++,"function"==typeof Reflect.decorate))r.b[3][0]++,r.s[4]++,s=Reflect.decorate(e,A,n,t);else{r.b[3][1]++,r.s[5]++;for(var o=e.length-1;o>=0;o--)r.s[6]++,(l=e[o])?(r.b[5][0]++,r.s[7]++,r.b[6][0]++,s=(i<3?(r.b[7][0]++,l(s)):(r.b[7][1]++,i>3?(r.b[8][0]++,l(A,n,s)):(r.b[8][1]++,l(A,n))))||(r.b[6][1]++,s)):r.b[5][1]++}return r.s[8]++,r.b[9][0]++,i>3&&(r.b[9][1]++,s)&&(r.b[9][2]++,Object.defineProperty(A,n,s)),s}));r.s[9]++,Object.defineProperty(A,"__esModule",{value:!0}),r.s[10]++,A.SelectedInterval=void 0;const u=(r.s[11]++,n("./node_modules/autobind-decorator/lib/esm/index.js"));r.s[12]++;let c=class{constructor(){r.f[1]++,r.s[13]++,this.interval=document.createElement("div"),r.s[14]++,this.initializeHTMLElement()}initializeHTMLElement(){r.f[2]++,r.s[15]++,this.interval.classList.add("goby-slider__interval"),r.s[16]++,this.interval.setAttribute("style","display: block")}adjustPositionRelativeToValue(e){r.f[3]++,r.s[17]++,"from"===e.target?(r.b[10][0]++,r.s[18]++,this.interval.style.left=`${Number(e.position)+e.handleWidth/2}px`):(r.b[10][1]++,r.s[19]++,this.interval.style.right=e.sliderWidth-Number(e.position)+e.handleWidth/2+"px")}checkIsIntervalShouldBeHided(e){return r.f[4]++,r.s[20]++,r.b[11][0]++,!e&&(r.b[11][1]++,"block"===this.interval.style.display)}checkIsIntervalShouldBeShown(e){return r.f[5]++,r.s[21]++,r.b[12][0]++,e&&(r.b[12][1]++,"none"===this.interval.style.display)}hideSelectedInterval(e){r.f[6]++;const{isDouble:A,handleWidth:n}=(r.s[22]++,e);switch(r.s[23]++,!0){case this.checkIsIntervalShouldBeHided(A):r.b[13][0]++,r.s[24]++,this.interval.style.display="none",r.s[25]++;break;case this.checkIsIntervalShouldBeShown(A):r.b[13][1]++,r.s[26]++,this.interval.style.display="block",r.s[27]++,this.interval.style.right=n/2+"px",r.s[28]++;break;default:r.b[13][2]++,r.s[29]++}}};r.s[30]++,c=C([u.default],c),r.s[31]++,A.SelectedInterval=c},"./src/plugin/View/SideMenu/SideMenu.ts":(e,A,n)=>{"use strict";var t,l,i,s,o,a,r=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SideMenu\\SideMenu.ts",l="afbd99924204bfb3031719d58271b7cbff21b4f7",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SideMenu\\SideMenu.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:0},end:{line:3,column:26}},2:{start:{line:4,column:23},end:{line:4,column:48}},3:{start:{line:7,column:8},end:{line:7,column:36}},4:{start:{line:8,column:8},end:{line:8,column:35}},5:{start:{line:9,column:8},end:{line:9,column:42}},6:{start:{line:10,column:8},end:{line:10,column:36}},7:{start:{line:13,column:8},end:{line:23,column:11}},8:{start:{line:14,column:59},end:{line:14,column:70}},9:{start:{line:15,column:12},end:{line:15,column:70}},10:{start:{line:16,column:12},end:{line:18,column:15}},11:{start:{line:17,column:16},end:{line:17,column:70}},12:{start:{line:19,column:12},end:{line:20,column:79}},13:{start:{line:20,column:16},end:{line:20,column:79}},14:{start:{line:21,column:12},end:{line:22,column:62}},15:{start:{line:22,column:16},end:{line:22,column:62}},16:{start:{line:26,column:8},end:{line:31,column:11}},17:{start:{line:27,column:36},end:{line:27,column:62}},18:{start:{line:28,column:12},end:{line:30,column:15}},19:{start:{line:29,column:16},end:{line:29,column:79}},20:{start:{line:34,column:8},end:{line:39,column:11}},21:{start:{line:35,column:30},end:{line:35,column:56}},22:{start:{line:36,column:12},end:{line:38,column:15}},23:{start:{line:37,column:16},end:{line:37,column:68}},24:{start:{line:42,column:30},end:{line:42,column:75}},25:{start:{line:43,column:30},end:{line:43,column:97}},26:{start:{line:43,column:42},end:{line:43,column:96}},27:{start:{line:44,column:8},end:{line:61,column:9}},28:{start:{line:46,column:16},end:{line:46,column:90}},29:{start:{line:47,column:16},end:{line:47,column:89}},30:{start:{line:48,column:16},end:{line:48,column:22}},31:{start:{line:50,column:16},end:{line:50,column:96}},32:{start:{line:51,column:16},end:{line:51,column:87}},33:{start:{line:52,column:16},end:{line:52,column:22}},34:{start:{line:54,column:16},end:{line:54,column:77}},35:{start:{line:55,column:16},end:{line:55,column:22}},36:{start:{line:57,column:16},end:{line:57,column:77}},37:{start:{line:58,column:16},end:{line:58,column:22}},38:{start:{line:60,column:16},end:{line:60,column:22}},39:{start:{line:62,column:8},end:{line:62,column:36}},40:{start:{line:65,column:30},end:{line:68,column:9}},41:{start:{line:66,column:12},end:{line:66,column:76}},42:{start:{line:67,column:12},end:{line:67,column:71}},43:{start:{line:69,column:8},end:{line:74,column:9}},44:{start:{line:70,column:12},end:{line:70,column:45}},45:{start:{line:73,column:12},end:{line:73,column:42}},46:{start:{line:77,column:0},end:{line:77,column:28}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:6,column:4},end:{line:6,column:5}},loc:{start:{line:6,column:18},end:{line:11,column:5}},line:6},1:{name:"(anonymous_1)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:33},end:{line:24,column:5}},line:12},2:{name:"(anonymous_2)",decl:{start:{line:13,column:53},end:{line:13,column:54}},loc:{start:{line:13,column:70},end:{line:23,column:9}},line:13},3:{name:"(anonymous_3)",decl:{start:{line:16,column:31},end:{line:16,column:32}},loc:{start:{line:16,column:48},end:{line:18,column:13}},line:16},4:{name:"(anonymous_4)",decl:{start:{line:25,column:4},end:{line:25,column:5}},loc:{start:{line:25,column:27},end:{line:32,column:5}},line:25},5:{name:"(anonymous_5)",decl:{start:{line:26,column:67},end:{line:26,column:68}},loc:{start:{line:26,column:76},end:{line:31,column:9}},line:26},6:{name:"(anonymous_6)",decl:{start:{line:28,column:63},end:{line:28,column:64}},loc:{start:{line:28,column:78},end:{line:30,column:13}},line:28},7:{name:"(anonymous_7)",decl:{start:{line:33,column:4},end:{line:33,column:5}},loc:{start:{line:33,column:22},end:{line:40,column:5}},line:33},8:{name:"(anonymous_8)",decl:{start:{line:34,column:68},end:{line:34,column:69}},loc:{start:{line:34,column:77},end:{line:39,column:9}},line:34},9:{name:"(anonymous_9)",decl:{start:{line:36,column:64},end:{line:36,column:65}},loc:{start:{line:36,column:80},end:{line:38,column:13}},line:36},10:{name:"(anonymous_10)",decl:{start:{line:41,column:4},end:{line:41,column:5}},loc:{start:{line:41,column:31},end:{line:63,column:5}},line:41},11:{name:"(anonymous_11)",decl:{start:{line:43,column:30},end:{line:43,column:31}},loc:{start:{line:43,column:42},end:{line:43,column:96}},line:43},12:{name:"(anonymous_12)",decl:{start:{line:64,column:4},end:{line:64,column:5}},loc:{start:{line:64,column:51},end:{line:75,column:5}},line:64},13:{name:"(anonymous_13)",decl:{start:{line:65,column:30},end:{line:65,column:31}},loc:{start:{line:65,column:59},end:{line:68,column:9}},line:65}},branchMap:{0:{loc:{start:{line:19,column:12},end:{line:20,column:79}},type:"if",locations:[{start:{line:19,column:12},end:{line:20,column:79}},{start:{line:19,column:12},end:{line:20,column:79}}],line:19},1:{loc:{start:{line:21,column:12},end:{line:22,column:62}},type:"if",locations:[{start:{line:21,column:12},end:{line:22,column:62}},{start:{line:21,column:12},end:{line:22,column:62}}],line:21},2:{loc:{start:{line:42,column:30},end:{line:42,column:75}},type:"binary-expr",locations:[{start:{line:42,column:30},end:{line:42,column:51}},{start:{line:42,column:55},end:{line:42,column:75}}],line:42},3:{loc:{start:{line:43,column:42},end:{line:43,column:96}},type:"cond-expr",locations:[{start:{line:43,column:58},end:{line:43,column:88}},{start:{line:43,column:91},end:{line:43,column:96}}],line:43},4:{loc:{start:{line:44,column:8},end:{line:61,column:9}},type:"switch",locations:[{start:{line:45,column:12},end:{line:48,column:22}},{start:{line:49,column:12},end:{line:52,column:22}},{start:{line:53,column:12},end:{line:55,column:22}},{start:{line:56,column:12},end:{line:58,column:22}},{start:{line:59,column:12},end:{line:60,column:22}}],line:44},5:{loc:{start:{line:69,column:8},end:{line:74,column:9}},type:"if",locations:[{start:{line:69,column:8},end:{line:74,column:9}},{start:{line:69,column:8},end:{line:74,column:9}}],line:69}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0,0,0,0],5:[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SideMenu\\SideMenu.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SideMenu\\SideMenu.ts"],names:[],mappings:"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",sourcesContent:["import { RefreshData } from '../types';\nimport { sideMenuData } from './sideMenuData';\nimport {\n  SideMenuBaseData,\n  SideMenuElements,\n} from './types';\n\nexport class SideMenu {\n  readonly sideMenuElements: SideMenuElements;\n\n  public isInputChanges = false;\n\n  constructor() {\n    this.sideMenuElements = {};\n    this.initializeSideMenuElements();\n    this.cloneSimilarElements();\n  }\n\n  private initializeSideMenuElements(): void {\n    sideMenuData.elements.forEach((elementData: SideMenuBaseData): void => {\n      const {\n        key,\n        attr,\n        cssClasses,\n        name,\n        text,\n      } = elementData;\n\n      this.sideMenuElements[key] = document.createElement(name) as HTMLInputElement;\n      cssClasses.forEach((targetClass: string): void => {\n        this.sideMenuElements[key].classList.add(targetClass);\n      });\n      if (attr) this.sideMenuElements[key].setAttribute(attr.name, attr.value);\n      if (text) this.sideMenuElements[key].textContent = text;\n    });\n  }\n\n  private cloneSimilarElements():void {\n    Object.keys(sideMenuData.cloneList).forEach((key: string): void => {\n      const originalElement: HTMLElement = this.sideMenuElements[key];\n\n      sideMenuData.cloneList[key].forEach((cloneName: string): void => {\n        this.sideMenuElements[cloneName] = originalElement.cloneNode() as HTMLElement;\n      });\n    });\n  }\n\n  public collectSideMenu(): void {\n    Object.keys(sideMenuData.appendList).forEach((key: string): void => {\n      const container: HTMLElement = this.sideMenuElements[key];\n\n      sideMenuData.appendList[key].forEach((targetName: string): void => {\n        container.append(this.sideMenuElements[targetName]);\n      });\n    });\n  }\n\n  public refreshValues(refreshData: RefreshData): void {\n    const isRoundUpNeed: boolean = refreshData.isToFixed && !this.isInputChanges;\n    const roundUpValues = (value: string): string => (isRoundUpNeed ? `${Math.round(Number(value))}` : value);\n\n    switch (refreshData.target) {\n      case 'from':\n        (this.sideMenuElements.fromOutput as HTMLOutputElement).value = roundUpValues(refreshData.value);\n        (this.sideMenuElements.fromInput as HTMLInputElement).value = roundUpValues(refreshData.value);\n        break;\n      case 'to':\n        (this.sideMenuElements.toOutput as HTMLOutputElement).value = ` - ${roundUpValues(refreshData.value)}`;\n        (this.sideMenuElements.toInput as HTMLInputElement).value = roundUpValues(refreshData.value);\n        break;\n      case 'min':\n        (this.sideMenuElements.minimumInput as HTMLInputElement).value = refreshData.value;\n        break;\n      case 'max':\n        (this.sideMenuElements.maximumInput as HTMLInputElement).value = refreshData.value;\n        break;\n      default:\n        break;\n    }\n\n    this.isInputChanges = false;\n  }\n\n  public changeToValuesDisplay(isToValuesShouldBeShown: boolean): void {\n    const changeDisplay = (inputState: string, outputState: string): void => {\n      this.sideMenuElements.toInputWrapper!.style.display = inputState;\n      this.sideMenuElements.toOutput!.style.display = outputState;\n    };\n\n    if (isToValuesShouldBeShown) {\n      changeDisplay('block', 'inline');\n    } else {\n      changeDisplay('none', 'none');\n    }\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[s="__coverage__"]||(i[s]={}))[t]&&a[t].hash===l?a[t]:(o.hash=l,a[t]=o));r.s[0]++,Object.defineProperty(A,"__esModule",{value:!0}),r.s[1]++,A.SideMenu=void 0;const C=(r.s[2]++,n("./src/plugin/View/SideMenu/sideMenuData.ts"));r.s[46]++,A.SideMenu=class{constructor(){r.f[0]++,r.s[3]++,this.isInputChanges=!1,r.s[4]++,this.sideMenuElements={},r.s[5]++,this.initializeSideMenuElements(),r.s[6]++,this.cloneSimilarElements()}initializeSideMenuElements(){r.f[1]++,r.s[7]++,C.sideMenuData.elements.forEach((e=>{r.f[2]++;const{key:A,attr:n,cssClasses:t,name:l,text:i}=(r.s[8]++,e);r.s[9]++,this.sideMenuElements[A]=document.createElement(l),r.s[10]++,t.forEach((e=>{r.f[3]++,r.s[11]++,this.sideMenuElements[A].classList.add(e)})),r.s[12]++,n?(r.b[0][0]++,r.s[13]++,this.sideMenuElements[A].setAttribute(n.name,n.value)):r.b[0][1]++,r.s[14]++,i?(r.b[1][0]++,r.s[15]++,this.sideMenuElements[A].textContent=i):r.b[1][1]++}))}cloneSimilarElements(){r.f[4]++,r.s[16]++,Object.keys(C.sideMenuData.cloneList).forEach((e=>{r.f[5]++;const A=(r.s[17]++,this.sideMenuElements[e]);r.s[18]++,C.sideMenuData.cloneList[e].forEach((e=>{r.f[6]++,r.s[19]++,this.sideMenuElements[e]=A.cloneNode()}))}))}collectSideMenu(){r.f[7]++,r.s[20]++,Object.keys(C.sideMenuData.appendList).forEach((e=>{r.f[8]++;const A=(r.s[21]++,this.sideMenuElements[e]);r.s[22]++,C.sideMenuData.appendList[e].forEach((e=>{r.f[9]++,r.s[23]++,A.append(this.sideMenuElements[e])}))}))}refreshValues(e){r.f[10]++;const A=(r.s[24]++,r.b[2][0]++,e.isToFixed&&(r.b[2][1]++,!this.isInputChanges));r.s[25]++;const n=e=>(r.f[11]++,r.s[26]++,A?(r.b[3][0]++,`${Math.round(Number(e))}`):(r.b[3][1]++,e));switch(r.s[27]++,e.target){case"from":r.b[4][0]++,r.s[28]++,this.sideMenuElements.fromOutput.value=n(e.value),r.s[29]++,this.sideMenuElements.fromInput.value=n(e.value),r.s[30]++;break;case"to":r.b[4][1]++,r.s[31]++,this.sideMenuElements.toOutput.value=` - ${n(e.value)}`,r.s[32]++,this.sideMenuElements.toInput.value=n(e.value),r.s[33]++;break;case"min":r.b[4][2]++,r.s[34]++,this.sideMenuElements.minimumInput.value=e.value,r.s[35]++;break;case"max":r.b[4][3]++,r.s[36]++,this.sideMenuElements.maximumInput.value=e.value,r.s[37]++;break;default:r.b[4][4]++,r.s[38]++}r.s[39]++,this.isInputChanges=!1}changeToValuesDisplay(e){r.f[12]++,r.s[40]++;const A=(e,A)=>{r.f[13]++,r.s[41]++,this.sideMenuElements.toInputWrapper.style.display=e,r.s[42]++,this.sideMenuElements.toOutput.style.display=A};r.s[43]++,e?(r.b[5][0]++,r.s[44]++,A("block","inline")):(r.b[5][1]++,r.s[45]++,A("none","none"))}}},"./src/plugin/View/SideMenu/sideMenuData.ts":(e,A)=>{"use strict";var n,t,l,i,s,o,a=(n="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SideMenu\\sideMenuData.ts",t="b4adc1a006bf8d774087a3e5e1cef0983c9b0134",l=new(0,function(){}.constructor)("return this")(),s={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SideMenu\\sideMenuData.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:0},end:{line:3,column:30}},2:{start:{line:4,column:21},end:{line:259,column:1}},3:{start:{line:260,column:0},end:{line:260,column:36}}},fnMap:{},branchMap:{},s:{0:0,1:0,2:0,3:0},f:{},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SideMenu\\sideMenuData.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SideMenu\\sideMenuData.ts"],names:[],mappings:"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",sourcesContent:["import {\n  SideMenuData,\n} from './types';\n\nconst sideMenuData: SideMenuData = {\n  elements: [\n    {\n      key: 'currentValuesWrapper',\n      name: 'div',\n      cssClasses: ['goby-slider__outputs'],\n    },\n    {\n      key: 'currentValuesObjective',\n      name: 'span',\n      cssClasses: ['goby-slider__output-objective'],\n      text: 'Текущее занчение:',\n    },\n    {\n      key: 'fromOutput',\n      name: 'output',\n      cssClasses: ['goby-slider__output-value', 'goby-slider__output-value_type_from'],\n    },\n    {\n      key: 'toOutput',\n      name: 'output',\n      cssClasses: ['goby-slider__output-value', 'goby-slider__output-value_type_to'],\n    },\n    {\n      key: 'outputsWrapper',\n      name: 'div',\n      cssClasses: ['goby-slider__outputs-wrapper'],\n    },\n    {\n      key: 'toWrapper',\n      name: 'div',\n      cssClasses: ['goby-slider__toggle-item'],\n    },\n    {\n      key: 'toToggleWrapper',\n      name: 'label',\n      cssClasses: ['goby-slider__toggle-wrapper'],\n    },\n    {\n      key: 'inputWrapper',\n      name: 'div',\n      cssClasses: ['goby-slider__inputs'],\n    },\n    {\n      key: 'fromInputWrapper',\n      name: 'label',\n      cssClasses: ['goby-slider__input-wrapper'],\n    },\n    {\n      key: 'fromInputDescription',\n      name: 'span',\n      cssClasses: ['goby-slider__input-description'],\n      text: 'От:',\n    },\n    {\n      key: 'stepInputWrapper',\n      name: 'label',\n      cssClasses: ['goby-slider__input-wrapper'],\n    },\n    {\n      key: 'stepInputDescription',\n      name: 'span',\n      cssClasses: ['goby-slider__input-description'],\n      text: 'Шаг:',\n    },\n    {\n      key: 'minInputWrapper',\n      name: 'label',\n      cssClasses: ['goby-slider__input-wrapper'],\n    },\n    {\n      key: 'minInputDescription',\n      name: 'span',\n      cssClasses: ['goby-slider__input-description'],\n      text: 'Мин:',\n    },\n    {\n      key: 'maxInputWrapper',\n      name: 'label',\n      cssClasses: ['goby-slider__input-wrapper'],\n    },\n    {\n      key: 'maxInputDescription',\n      name: 'span',\n      cssClasses: ['goby-slider__input-description'],\n      text: 'Макс:',\n    },\n    {\n      key: 'toInputWrapper',\n      name: 'label',\n      cssClasses: ['goby-slider__input-wrapper'],\n    },\n    {\n      key: 'toInputDescription',\n      name: 'span',\n      cssClasses: ['goby-slider__input-description'],\n      text: 'До:',\n    },\n    {\n      key: 'handleValuesWrapper',\n      name: 'div',\n      cssClasses: ['goby-slider__toggle-item'],\n    },\n    {\n      key: 'valueScaleWrapper',\n      name: 'div',\n      cssClasses: ['goby-slider__toggle-item'],\n    },\n    {\n      key: 'planeWrapper',\n      name: 'div',\n      cssClasses: ['goby-slider__toggle-item'],\n    },\n    {\n      key: 'integerWrapper',\n      name: 'div',\n      cssClasses: ['goby-slider__toggle-item'],\n    },\n    {\n      key: 'inputObjective',\n      name: 'span',\n      cssClasses: ['goby-slider__item-objective'],\n      text: 'Изменить значение: ',\n    },\n    {\n      key: 'fromInput',\n      name: 'input',\n      cssClasses: ['goby-slider__input'],\n      attr: { name: 'type', value: 'number' },\n    },\n    {\n      key: 'toInput',\n      name: 'input',\n      cssClasses: ['goby-slider__input'],\n      attr: { name: 'type', value: 'number' },\n    },\n    {\n      key: 'stepInput',\n      name: 'input',\n      cssClasses: ['goby-slider__input'],\n      attr: { name: 'type', value: 'number' },\n    },\n    {\n      key: 'minimumInput',\n      name: 'input',\n      cssClasses: ['goby-slider__input'],\n      attr: { name: 'type', value: 'number' },\n    },\n    {\n      key: 'maximumInput',\n      name: 'input',\n      cssClasses: ['goby-slider__input'],\n      attr: { name: 'type', value: 'number' },\n    },\n    {\n      key: 'toToggleObjective',\n      name: 'span',\n      cssClasses: ['goby-slider__toggle-description'],\n      text: 'Включить второй ползунок: ',\n    },\n    {\n      key: 'toToggle',\n      name: 'input',\n      cssClasses: ['goby-slider__toggle'],\n      attr: { name: 'type', value: 'checkbox' },\n    },\n    {\n      key: 'toToggleBorder',\n      name: 'span',\n      cssClasses: ['goby-slider__toggle-border'],\n    },\n    {\n      key: 'handleValuesToggleBorder',\n      name: 'span',\n      cssClasses: ['goby-slider__toggle-border'],\n    },\n    {\n      key: 'valueScaleToggleBorder',\n      name: 'span',\n      cssClasses: ['goby-slider__toggle-border'],\n    },\n    {\n      key: 'integerToggleBorder',\n      name: 'span',\n      cssClasses: ['goby-slider__toggle-border'],\n    },\n    {\n      key: 'planeToggle',\n      name: 'input',\n      cssClasses: ['goby-slider__toggle'],\n      attr: { name: 'type', value: 'checkbox' },\n    },\n    {\n      key: 'planeToggleBorder',\n      name: 'span',\n      cssClasses: ['goby-slider__toggle-border'],\n    },\n    {\n      key: 'handleValuesObjective',\n      name: 'span',\n      cssClasses: ['goby-slider__toggle-description'],\n      text: 'Включить значения под ползунками: ',\n    },\n    {\n      key: 'valueScaleObjective',\n      name: 'span',\n      cssClasses: ['goby-slider__toggle-description'],\n      text: 'Включить шкалу значений: ',\n    },\n    {\n      key: 'planeObjective',\n      name: 'span',\n      cssClasses: ['goby-slider__toggle-description'],\n      text: 'Изменить плоскость: ',\n    },\n    {\n      key: 'integerObjective',\n      name: 'span',\n      cssClasses: ['goby-slider__toggle-description'],\n      text: 'Только целые числа: ',\n    },\n    {\n      key: 'sideMenuContainer',\n      name: 'div',\n      cssClasses: ['goby-slider__side-menu'],\n    },\n  ],\n  appendList: {\n    currentValuesWrapper: ['currentValuesObjective', 'outputsWrapper'],\n    outputsWrapper: ['fromOutput', 'toOutput'],\n    fromInputWrapper: ['fromInputDescription', 'fromInput'],\n    toInputWrapper: ['toInputDescription', 'toInput'],\n    stepInputWrapper: ['stepInputDescription', 'stepInput'],\n    minInputWrapper: ['minInputDescription', 'minimumInput'],\n    maxInputWrapper: ['maxInputDescription', 'maximumInput'],\n    inputWrapper: ['inputObjective', 'fromInputWrapper', 'toInputWrapper', 'stepInputWrapper',\n      'minInputWrapper', 'maxInputWrapper'],\n    toToggleWrapper: ['toToggle', 'toToggleObjective', 'toToggleBorder'],\n    toWrapper: ['toToggleWrapper'],\n    handleValuesToggleWrapper: ['handleValuesToggle', 'handleValuesObjective', 'handleValuesToggleBorder'],\n    handleValuesWrapper: ['handleValuesToggleWrapper'],\n    valueScaleToggleWrapper: ['valueScaleToggle', 'valueScaleObjective', 'valueScaleToggleBorder'],\n    valueScaleWrapper: ['valueScaleToggleWrapper'],\n    planeToggleWrapper: ['planeToggle', 'planeObjective', 'planeToggleBorder'],\n    planeWrapper: ['planeToggleWrapper'],\n    integerToggleWrapper: ['integerToggle', 'integerObjective', 'integerToggleBorder'],\n    integerWrapper: ['integerToggleWrapper'],\n    sideMenuContainer: ['currentValuesWrapper', 'inputWrapper', 'toWrapper', 'handleValuesWrapper',\n      'valueScaleWrapper', 'planeWrapper', 'integerWrapper'],\n  },\n  cloneList: {\n    toToggle: ['handleValuesToggle', 'valueScaleToggle', 'integerToggle'],\n    toToggleWrapper: ['handleValuesToggleWrapper', 'valueScaleToggleWrapper', 'planeToggleWrapper',\n      'integerToggleWrapper'],\n  },\n};\n\nexport {\n  sideMenuData,\n};\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(o=l[i="__coverage__"]||(l[i]={}))[n]&&o[n].hash===t?o[n]:(s.hash=t,o[n]=s));a.s[0]++,Object.defineProperty(A,"__esModule",{value:!0}),a.s[1]++,A.sideMenuData=void 0;const r=(a.s[2]++,{elements:[{key:"currentValuesWrapper",name:"div",cssClasses:["goby-slider__outputs"]},{key:"currentValuesObjective",name:"span",cssClasses:["goby-slider__output-objective"],text:"Текущее занчение:"},{key:"fromOutput",name:"output",cssClasses:["goby-slider__output-value","goby-slider__output-value_type_from"]},{key:"toOutput",name:"output",cssClasses:["goby-slider__output-value","goby-slider__output-value_type_to"]},{key:"outputsWrapper",name:"div",cssClasses:["goby-slider__outputs-wrapper"]},{key:"toWrapper",name:"div",cssClasses:["goby-slider__toggle-item"]},{key:"toToggleWrapper",name:"label",cssClasses:["goby-slider__toggle-wrapper"]},{key:"inputWrapper",name:"div",cssClasses:["goby-slider__inputs"]},{key:"fromInputWrapper",name:"label",cssClasses:["goby-slider__input-wrapper"]},{key:"fromInputDescription",name:"span",cssClasses:["goby-slider__input-description"],text:"От:"},{key:"stepInputWrapper",name:"label",cssClasses:["goby-slider__input-wrapper"]},{key:"stepInputDescription",name:"span",cssClasses:["goby-slider__input-description"],text:"Шаг:"},{key:"minInputWrapper",name:"label",cssClasses:["goby-slider__input-wrapper"]},{key:"minInputDescription",name:"span",cssClasses:["goby-slider__input-description"],text:"Мин:"},{key:"maxInputWrapper",name:"label",cssClasses:["goby-slider__input-wrapper"]},{key:"maxInputDescription",name:"span",cssClasses:["goby-slider__input-description"],text:"Макс:"},{key:"toInputWrapper",name:"label",cssClasses:["goby-slider__input-wrapper"]},{key:"toInputDescription",name:"span",cssClasses:["goby-slider__input-description"],text:"До:"},{key:"handleValuesWrapper",name:"div",cssClasses:["goby-slider__toggle-item"]},{key:"valueScaleWrapper",name:"div",cssClasses:["goby-slider__toggle-item"]},{key:"planeWrapper",name:"div",cssClasses:["goby-slider__toggle-item"]},{key:"integerWrapper",name:"div",cssClasses:["goby-slider__toggle-item"]},{key:"inputObjective",name:"span",cssClasses:["goby-slider__item-objective"],text:"Изменить значение: "},{key:"fromInput",name:"input",cssClasses:["goby-slider__input"],attr:{name:"type",value:"number"}},{key:"toInput",name:"input",cssClasses:["goby-slider__input"],attr:{name:"type",value:"number"}},{key:"stepInput",name:"input",cssClasses:["goby-slider__input"],attr:{name:"type",value:"number"}},{key:"minimumInput",name:"input",cssClasses:["goby-slider__input"],attr:{name:"type",value:"number"}},{key:"maximumInput",name:"input",cssClasses:["goby-slider__input"],attr:{name:"type",value:"number"}},{key:"toToggleObjective",name:"span",cssClasses:["goby-slider__toggle-description"],text:"Включить второй ползунок: "},{key:"toToggle",name:"input",cssClasses:["goby-slider__toggle"],attr:{name:"type",value:"checkbox"}},{key:"toToggleBorder",name:"span",cssClasses:["goby-slider__toggle-border"]},{key:"handleValuesToggleBorder",name:"span",cssClasses:["goby-slider__toggle-border"]},{key:"valueScaleToggleBorder",name:"span",cssClasses:["goby-slider__toggle-border"]},{key:"integerToggleBorder",name:"span",cssClasses:["goby-slider__toggle-border"]},{key:"planeToggle",name:"input",cssClasses:["goby-slider__toggle"],attr:{name:"type",value:"checkbox"}},{key:"planeToggleBorder",name:"span",cssClasses:["goby-slider__toggle-border"]},{key:"handleValuesObjective",name:"span",cssClasses:["goby-slider__toggle-description"],text:"Включить значения под ползунками: "},{key:"valueScaleObjective",name:"span",cssClasses:["goby-slider__toggle-description"],text:"Включить шкалу значений: "},{key:"planeObjective",name:"span",cssClasses:["goby-slider__toggle-description"],text:"Изменить плоскость: "},{key:"integerObjective",name:"span",cssClasses:["goby-slider__toggle-description"],text:"Только целые числа: "},{key:"sideMenuContainer",name:"div",cssClasses:["goby-slider__side-menu"]}],appendList:{currentValuesWrapper:["currentValuesObjective","outputsWrapper"],outputsWrapper:["fromOutput","toOutput"],fromInputWrapper:["fromInputDescription","fromInput"],toInputWrapper:["toInputDescription","toInput"],stepInputWrapper:["stepInputDescription","stepInput"],minInputWrapper:["minInputDescription","minimumInput"],maxInputWrapper:["maxInputDescription","maximumInput"],inputWrapper:["inputObjective","fromInputWrapper","toInputWrapper","stepInputWrapper","minInputWrapper","maxInputWrapper"],toToggleWrapper:["toToggle","toToggleObjective","toToggleBorder"],toWrapper:["toToggleWrapper"],handleValuesToggleWrapper:["handleValuesToggle","handleValuesObjective","handleValuesToggleBorder"],handleValuesWrapper:["handleValuesToggleWrapper"],valueScaleToggleWrapper:["valueScaleToggle","valueScaleObjective","valueScaleToggleBorder"],valueScaleWrapper:["valueScaleToggleWrapper"],planeToggleWrapper:["planeToggle","planeObjective","planeToggleBorder"],planeWrapper:["planeToggleWrapper"],integerToggleWrapper:["integerToggle","integerObjective","integerToggleBorder"],integerWrapper:["integerToggleWrapper"],sideMenuContainer:["currentValuesWrapper","inputWrapper","toWrapper","handleValuesWrapper","valueScaleWrapper","planeWrapper","integerWrapper"]},cloneList:{toToggle:["handleValuesToggle","valueScaleToggle","integerToggle"],toToggleWrapper:["handleValuesToggleWrapper","valueScaleToggleWrapper","planeToggleWrapper","integerToggleWrapper"]}});a.s[3]++,A.sideMenuData=r},"./src/plugin/View/Slider/Slider.ts":(e,A)=>{"use strict";var n,t,l,i,s,o,a=(n="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Slider\\Slider.ts",t="7b0eb0e42a2bd3fd1f8abe5f0793fe7e443ce3d5",l=new(0,function(){}.constructor)("return this")(),s={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Slider\\Slider.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:0},end:{line:3,column:24}},2:{start:{line:6,column:8},end:{line:6,column:57}},3:{start:{line:7,column:8},end:{line:7,column:52}},4:{start:{line:8,column:8},end:{line:8,column:59}},5:{start:{line:9,column:8},end:{line:9,column:34}},6:{start:{line:12,column:8},end:{line:12,column:55}},7:{start:{line:13,column:8},end:{line:13,column:64}},8:{start:{line:14,column:8},end:{line:14,column:54}},9:{start:{line:15,column:8},end:{line:15,column:47}},10:{start:{line:16,column:8},end:{line:16,column:52}},11:{start:{line:19,column:8},end:{line:19,column:292}},12:{start:{line:22,column:8},end:{line:22,column:103}},13:{start:{line:25,column:8},end:{line:25,column:103}},14:{start:{line:28,column:49},end:{line:28,column:57}},15:{start:{line:30,column:12},end:{line:30,column:68}},16:{start:{line:31,column:12},end:{line:31,column:76}},17:{start:{line:32,column:12},end:{line:33,column:69}},18:{start:{line:33,column:16},end:{line:33,column:69}},19:{start:{line:35,column:8},end:{line:48,column:9}},20:{start:{line:37,column:16},end:{line:37,column:81}},21:{start:{line:38,column:16},end:{line:38,column:75}},22:{start:{line:39,column:16},end:{line:39,column:81}},23:{start:{line:40,column:16},end:{line:40,column:22}},24:{start:{line:42,column:16},end:{line:42,column:81}},25:{start:{line:43,column:16},end:{line:43,column:43}},26:{start:{line:44,column:16},end:{line:44,column:53}},27:{start:{line:45,column:16},end:{line:45,column:22}},28:{start:{line:47,column:16},end:{line:47,column:22}},29:{start:{line:49,column:8},end:{line:49,column:29}},30:{start:{line:52,column:0},end:{line:52,column:24}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:18},end:{line:10,column:5}},line:5},1:{name:"(anonymous_1)",decl:{start:{line:11,column:4},end:{line:11,column:5}},loc:{start:{line:11,column:25},end:{line:17,column:5}},line:11},2:{name:"(anonymous_2)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:39},end:{line:20,column:5}},line:18},3:{name:"(anonymous_3)",decl:{start:{line:21,column:4},end:{line:21,column:5}},loc:{start:{line:21,column:49},end:{line:23,column:5}},line:21},4:{name:"(anonymous_4)",decl:{start:{line:24,column:4},end:{line:24,column:5}},loc:{start:{line:24,column:45},end:{line:26,column:5}},line:24},5:{name:"(anonymous_5)",decl:{start:{line:27,column:4},end:{line:27,column:5}},loc:{start:{line:27,column:26},end:{line:50,column:5}},line:27},6:{name:"refreshAfterResize",decl:{start:{line:29,column:17},end:{line:29,column:35}},loc:{start:{line:29,column:38},end:{line:34,column:9}},line:29}},branchMap:{0:{loc:{start:{line:22,column:16},end:{line:22,column:101}},type:"binary-expr",locations:[{start:{line:22,column:17},end:{line:22,column:83}},{start:{line:22,column:89},end:{line:22,column:100}}],line:22},1:{loc:{start:{line:25,column:16},end:{line:25,column:101}},type:"binary-expr",locations:[{start:{line:25,column:17},end:{line:25,column:84}},{start:{line:25,column:90},end:{line:25,column:100}}],line:25},2:{loc:{start:{line:32,column:12},end:{line:33,column:69}},type:"if",locations:[{start:{line:32,column:12},end:{line:33,column:69}},{start:{line:32,column:12},end:{line:33,column:69}}],line:32},3:{loc:{start:{line:35,column:8},end:{line:48,column:9}},type:"switch",locations:[{start:{line:36,column:12},end:{line:40,column:22}},{start:{line:41,column:12},end:{line:45,column:22}},{start:{line:46,column:12},end:{line:47,column:22}}],line:35}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Slider\\Slider.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Slider\\Slider.ts"],names:[],mappings:"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",sourcesContent:["import { SliderAssemblerSettings, SliderPlaneSettings } from './types';\n\nexport class Slider {\n  readonly slider: HTMLDivElement;\n\n  readonly sliderWrapper: HTMLDivElement;\n\n  readonly mainWrapper: HTMLDivElement;\n\n  constructor() {\n    this.mainWrapper = document.createElement('div');\n    this.slider = document.createElement('div');\n    this.sliderWrapper = document.createElement('div');\n\n    this.createHTMLElements();\n  }\n\n  private createHTMLElements(): void {\n    this.slider.classList.add('goby-slider__body');\n    this.sliderWrapper.classList.add('goby-slider__slider');\n    this.mainWrapper.classList.add('goby-slider');\n    this.sliderWrapper.append(this.slider);\n    this.mainWrapper.append(this.sliderWrapper);\n  }\n\n  public initializeSliderElements(settings: SliderAssemblerSettings): void {\n    this.slider.append(\n      settings.from,\n      settings.to,\n      settings.interval,\n      settings.valueScale.minValue,\n      settings.valueScale.maxValue,\n      settings.valueScale.twentyPercentValue,\n      settings.valueScale.fortyPercentValue,\n      settings.valueScale.sixtyPercentValue,\n      settings.valueScale.eightyPercentValue,\n    );\n  }\n\n  private checkIsNeedToDisplayHorizontally(isVertical: boolean): boolean {\n    return ((this.slider.classList.contains('goby-slider__body_state_vertical')) && (!isVertical));\n  }\n\n  private checkIsNeedToDisplayVertical(isVertical: boolean): boolean {\n    return ((!this.slider.classList.contains('goby-slider__body_state_vertical')) && (isVertical));\n  }\n\n  public changePlane(settings: SliderPlaneSettings): void {\n    const { isStep, isVertical, requests } = settings;\n\n    function refreshAfterResize(): void {\n      requests.needDataForScale = { name: '', value: 'true' };\n      requests.needDataForStartPosition = { name: '', value: 'true' };\n      if (isStep) requests.needStepWidth = { name: '', value: 'true' };\n    }\n\n    switch (true) {\n      case this.checkIsNeedToDisplayVertical(isVertical):\n        this.slider.classList.toggle('goby-slider__body_state_vertical');\n        this.slider.style.top = `${this.slider.offsetWidth / 2}px`;\n        this.sliderWrapper.style.height = `${this.slider.offsetWidth}px`;\n        break;\n      case this.checkIsNeedToDisplayHorizontally(isVertical):\n        this.slider.classList.toggle('goby-slider__body_state_vertical');\n        this.slider.style.top = '';\n        this.sliderWrapper.style.height = '';\n        break;\n      default:\n        break;\n    }\n\n    refreshAfterResize();\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(o=l[i="__coverage__"]||(l[i]={}))[n]&&o[n].hash===t?o[n]:(s.hash=t,o[n]=s));a.s[0]++,Object.defineProperty(A,"__esModule",{value:!0}),a.s[1]++,A.Slider=void 0;a.s[30]++,A.Slider=class{constructor(){a.f[0]++,a.s[2]++,this.mainWrapper=document.createElement("div"),a.s[3]++,this.slider=document.createElement("div"),a.s[4]++,this.sliderWrapper=document.createElement("div"),a.s[5]++,this.createHTMLElements()}createHTMLElements(){a.f[1]++,a.s[6]++,this.slider.classList.add("goby-slider__body"),a.s[7]++,this.sliderWrapper.classList.add("goby-slider__slider"),a.s[8]++,this.mainWrapper.classList.add("goby-slider"),a.s[9]++,this.sliderWrapper.append(this.slider),a.s[10]++,this.mainWrapper.append(this.sliderWrapper)}initializeSliderElements(e){a.f[2]++,a.s[11]++,this.slider.append(e.from,e.to,e.interval,e.valueScale.minValue,e.valueScale.maxValue,e.valueScale.twentyPercentValue,e.valueScale.fortyPercentValue,e.valueScale.sixtyPercentValue,e.valueScale.eightyPercentValue)}checkIsNeedToDisplayHorizontally(e){return a.f[3]++,a.s[12]++,a.b[0][0]++,this.slider.classList.contains("goby-slider__body_state_vertical")&&(a.b[0][1]++,!e)}checkIsNeedToDisplayVertical(e){return a.f[4]++,a.s[13]++,a.b[1][0]++,!this.slider.classList.contains("goby-slider__body_state_vertical")&&(a.b[1][1]++,e)}changePlane(e){a.f[5]++;const{isStep:A,isVertical:n,requests:t}=(a.s[14]++,e);switch(a.s[19]++,!0){case this.checkIsNeedToDisplayVertical(n):a.b[3][0]++,a.s[20]++,this.slider.classList.toggle("goby-slider__body_state_vertical"),a.s[21]++,this.slider.style.top=this.slider.offsetWidth/2+"px",a.s[22]++,this.sliderWrapper.style.height=`${this.slider.offsetWidth}px`,a.s[23]++;break;case this.checkIsNeedToDisplayHorizontally(n):a.b[3][1]++,a.s[24]++,this.slider.classList.toggle("goby-slider__body_state_vertical"),a.s[25]++,this.slider.style.top="",a.s[26]++,this.sliderWrapper.style.height="",a.s[27]++;break;default:a.b[3][2]++,a.s[28]++}a.s[29]++,a.f[6]++,a.s[15]++,t.needDataForScale={name:"",value:"true"},a.s[16]++,t.needDataForStartPosition={name:"",value:"true"},a.s[17]++,A?(a.b[2][0]++,a.s[18]++,t.needStepWidth={name:"",value:"true"}):a.b[2][1]++}}},"./src/plugin/View/ValuesScale/ValuesScale.ts":(e,A)=>{"use strict";var n,t,l,i,s,o,a=(n="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\ValuesScale\\ValuesScale.ts",t="679a24dabb7c1797a08eddd7b03c1c72bdf579b7",l=new(0,function(){}.constructor)("return this")(),s={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\ValuesScale\\ValuesScale.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:0},end:{line:3,column:29}},2:{start:{line:6,column:8},end:{line:6,column:62}},3:{start:{line:7,column:8},end:{line:7,column:62}},4:{start:{line:8,column:8},end:{line:8,column:74}},5:{start:{line:9,column:8},end:{line:9,column:73}},6:{start:{line:10,column:8},end:{line:10,column:73}},7:{start:{line:11,column:8},end:{line:11,column:74}},8:{start:{line:14,column:24},end:{line:14,column:54}},9:{start:{line:15,column:8},end:{line:15,column:91}},10:{start:{line:16,column:8},end:{line:16,column:23}},11:{start:{line:19,column:8},end:{line:26,column:20}},12:{start:{line:29,column:46},end:{line:29,column:111}},13:{start:{line:29,column:59},end:{line:29,column:111}},14:{start:{line:30,column:39},end:{line:30,column:141}},15:{start:{line:30,column:65},end:{line:30,column:141}},16:{start:{line:31,column:8},end:{line:31,column:80}},17:{start:{line:32,column:8},end:{line:32,column:81}},18:{start:{line:33,column:8},end:{line:33,column:98}},19:{start:{line:34,column:8},end:{line:34,column:96}},20:{start:{line:35,column:8},end:{line:35,column:96}},21:{start:{line:36,column:8},end:{line:36,column:98}},22:{start:{line:39,column:8},end:{line:44,column:97}},23:{start:{line:47,column:8},end:{line:47,column:65}},24:{start:{line:50,column:8},end:{line:50,column:65}},25:{start:{line:53,column:30},end:{line:60,column:9}},26:{start:{line:54,column:12},end:{line:54,column:80}},27:{start:{line:55,column:12},end:{line:55,column:80}},28:{start:{line:56,column:12},end:{line:56,column:90}},29:{start:{line:57,column:12},end:{line:57,column:89}},30:{start:{line:58,column:12},end:{line:58,column:89}},31:{start:{line:59,column:12},end:{line:59,column:90}},32:{start:{line:61,column:38},end:{line:62,column:61}},33:{start:{line:63,column:8},end:{line:64,column:28}},34:{start:{line:64,column:12},end:{line:64,column:28}},35:{start:{line:67,column:30},end:{line:74,column:9}},36:{start:{line:68,column:12},end:{line:68,column:48}},37:{start:{line:69,column:12},end:{line:69,column:48}},38:{start:{line:70,column:12},end:{line:70,column:58}},39:{start:{line:71,column:12},end:{line:71,column:57}},40:{start:{line:72,column:12},end:{line:72,column:57}},41:{start:{line:73,column:12},end:{line:73,column:58}},42:{start:{line:75,column:8},end:{line:80,column:9}},43:{start:{line:76,column:12},end:{line:76,column:34}},44:{start:{line:79,column:12},end:{line:79,column:42}},45:{start:{line:83,column:0},end:{line:83,column:34}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:18},end:{line:12,column:5}},line:5},1:{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:40},end:{line:17,column:5}},line:13},2:{name:"(anonymous_2)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:30},end:{line:27,column:5}},line:18},3:{name:"(anonymous_3)",decl:{start:{line:28,column:4},end:{line:28,column:5}},loc:{start:{line:28,column:43},end:{line:37,column:5}},line:28},4:{name:"(anonymous_4)",decl:{start:{line:29,column:46},end:{line:29,column:47}},loc:{start:{line:29,column:59},end:{line:29,column:111}},line:29},5:{name:"(anonymous_5)",decl:{start:{line:30,column:39},end:{line:30,column:40}},loc:{start:{line:30,column:65},end:{line:30,column:141}},line:30},6:{name:"(anonymous_6)",decl:{start:{line:38,column:4},end:{line:38,column:5}},loc:{start:{line:38,column:34},end:{line:45,column:5}},line:38},7:{name:"(anonymous_7)",decl:{start:{line:46,column:4},end:{line:46,column:5}},loc:{start:{line:46,column:46},end:{line:48,column:5}},line:46},8:{name:"(anonymous_8)",decl:{start:{line:49,column:4},end:{line:49,column:5}},loc:{start:{line:49,column:42},end:{line:51,column:5}},line:49},9:{name:"(anonymous_9)",decl:{start:{line:52,column:4},end:{line:52,column:5}},loc:{start:{line:52,column:28},end:{line:65,column:5}},line:52},10:{name:"(anonymous_10)",decl:{start:{line:53,column:30},end:{line:53,column:31}},loc:{start:{line:53,column:36},end:{line:60,column:9}},line:53},11:{name:"(anonymous_11)",decl:{start:{line:66,column:4},end:{line:66,column:5}},loc:{start:{line:66,column:42},end:{line:81,column:5}},line:66},12:{name:"(anonymous_12)",decl:{start:{line:67,column:30},end:{line:67,column:31}},loc:{start:{line:67,column:41},end:{line:74,column:9}},line:67}},branchMap:{0:{loc:{start:{line:39,column:15},end:{line:44,column:96}},type:"binary-expr",locations:[{start:{line:39,column:16},end:{line:39,column:85}},{start:{line:40,column:16},end:{line:40,column:85}},{start:{line:41,column:16},end:{line:41,column:95}},{start:{line:42,column:16},end:{line:42,column:94}},{start:{line:43,column:16},end:{line:43,column:94}},{start:{line:44,column:16},end:{line:44,column:95}}],line:39},1:{loc:{start:{line:47,column:15},end:{line:47,column:64}},type:"binary-expr",locations:[{start:{line:47,column:15},end:{line:47,column:49}},{start:{line:47,column:53},end:{line:47,column:64}}],line:47},2:{loc:{start:{line:50,column:15},end:{line:50,column:64}},type:"binary-expr",locations:[{start:{line:50,column:15},end:{line:50,column:50}},{start:{line:50,column:54},end:{line:50,column:64}}],line:50},3:{loc:{start:{line:61,column:38},end:{line:62,column:61}},type:"binary-expr",locations:[{start:{line:61,column:38},end:{line:61,column:80}},{start:{line:62,column:15},end:{line:62,column:61}}],line:61},4:{loc:{start:{line:63,column:8},end:{line:64,column:28}},type:"if",locations:[{start:{line:63,column:8},end:{line:64,column:28}},{start:{line:63,column:8},end:{line:64,column:28}}],line:63},5:{loc:{start:{line:75,column:8},end:{line:80,column:9}},type:"if",locations:[{start:{line:75,column:8},end:{line:80,column:9}},{start:{line:75,column:8},end:{line:80,column:9}}],line:75}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0},b:{0:[0,0,0,0,0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\ValuesScale\\ValuesScale.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\ValuesScale\\ValuesScale.ts"],names:[],mappings:";;;AAGA,MAAa,WAAW;IAatB;QACE,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QACtD,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QACtD,IAAI,CAAC,kBAAkB,GAAG,WAAW,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QAClE,IAAI,CAAC,iBAAiB,GAAG,WAAW,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QACjE,IAAI,CAAC,iBAAiB,GAAG,WAAW,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QACjE,IAAI,CAAC,kBAAkB,GAAG,WAAW,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;IACpE,CAAC;IAEO,MAAM,CAAC,aAAa,CAAC,aAAqB;QAChD,MAAM,OAAO,GAAoB,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAEhE,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,EAAE,sBAAsB,aAAa,EAAE,CAAC,CAAC;QAEnF,OAAO,OAAO,CAAC;IACjB,CAAC;IAEM,iBAAiB,CAAC,MAAyB;QAChD,CAAC;YACC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS;YAC5B,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS;YAC5B,EAAE,EAAE,IAAI,CAAC,kBAAkB,CAAC,SAAS;YACrC,EAAE,EAAE,IAAI,CAAC,iBAAiB,CAAC,SAAS;YACpC,EAAE,EAAE,IAAI,CAAC,iBAAiB,CAAC,SAAS;YACpC,EAAE,EAAE,IAAI,CAAC,kBAAkB,CAAC,SAAS;SACtC,GAAG,MAAM,CAAC,CAAC;IACd,CAAC;IAEM,YAAY,CAAC,WAAmB,EAAE,WAAmB;QAC1D,MAAM,6BAA6B,GAAG,CAAC,OAAwB,EAAU,EAAE,CAAC,GAC1E,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,CAC9C,IAAI,CAAC;QACL,MAAM,sBAAsB,GAAG,CAAC,WAAmB,EAAE,OAAwB,EAAU,EAAE,CAAC,GACxF,WAAW,GAAG,WAAW,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,CACtE,IAAI,CAAC;QAEL,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,GAAG,6BAA6B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACxE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG,6BAA6B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACzE,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,IAAI,GAAG,sBAAsB,CAAC,GAAG,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAC1F,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,IAAI,GAAG,sBAAsB,CAAC,GAAG,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACxF,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,IAAI,GAAG,sBAAsB,CAAC,GAAG,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACxF,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,IAAI,GAAG,sBAAsB,CAAC,GAAG,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAC5F,CAAC;IAEO,2BAA2B;QACjC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,mCAAmC,CAAC,CAAC;eACzE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,mCAAmC,CAAC,CAAC;eACvE,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,QAAQ,CAAC,mCAAmC,CAAC,CAAC;eACjF,CAAC,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,QAAQ,CAAC,mCAAmC,CAAC,CAAC;eAChF,CAAC,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,QAAQ,CAAC,mCAAmC,CAAC,CAAC;eAChF,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,QAAQ,CAAC,mCAAmC,CAAC,CAAC,CAAC;IACzF,CAAC;IAEO,6BAA6B,CAAC,UAAmB;QACvD,OAAO,IAAI,CAAC,2BAA2B,EAAE,IAAI,CAAC,UAAU,CAAC;IAC3D,CAAC;IAEO,yBAAyB,CAAC,UAAmB;QACnD,OAAO,CAAC,IAAI,CAAC,2BAA2B,EAAE,IAAI,UAAU,CAAC;IAC3D,CAAC;IAEM,WAAW,CAAC,UAAmB;QACpC,MAAM,aAAa,GAAG,GAAS,EAAE;YAC/B,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,mCAAmC,CAAC,CAAC;YACpE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,mCAAmC,CAAC,CAAC;YACpE,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,MAAM,CAAC,mCAAmC,CAAC,CAAC;YAC9E,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,MAAM,CAAC,mCAAmC,CAAC,CAAC;YAC7E,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,MAAM,CAAC,mCAAmC,CAAC,CAAC;YAC7E,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,MAAM,CAAC,mCAAmC,CAAC,CAAC;QAChF,CAAC,CAAC;QAEF,MAAM,qBAAqB,GAAG,IAAI,CAAC,yBAAyB,CAAC,UAAU,CAAC;eACnE,IAAI,CAAC,6BAA6B,CAAC,UAAU,CAAC,CAAC;QAEpD,IAAI,qBAAqB;YAAE,aAAa,EAAE,CAAC;IAC7C,CAAC;IAEM,uBAAuB,CAAC,YAAqB;QAClD,MAAM,aAAa,GAAG,CAAC,KAAa,EAAQ,EAAE;YAC5C,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;YACpC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;YACpC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;YAC9C,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;YAC7C,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;YAC7C,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;QAChD,CAAC,CAAC;QAEF,IAAI,CAAC,YAAY,EAAE;YACjB,aAAa,CAAC,MAAM,CAAC,CAAC;SACvB;aAAM;YACL,aAAa,CAAC,cAAc,CAAC,CAAC;SAC/B;IACH,CAAC;CACF;AA1GD,kCA0GC",sourcesContent:["import { DataForValueScale } from '../../Model/types';\nimport { IValuesScale } from './interfaces';\n\nexport class ValuesScale implements IValuesScale {\n  readonly minValue: HTMLSpanElement;\n\n  readonly maxValue: HTMLSpanElement;\n\n  readonly twentyPercentValue: HTMLSpanElement;\n\n  readonly fortyPercentValue: HTMLSpanElement;\n\n  readonly sixtyPercentValue: HTMLSpanElement;\n\n  readonly eightyPercentValue: HTMLSpanElement;\n\n  constructor() {\n    this.minValue = ValuesScale.createElement('type_min');\n    this.maxValue = ValuesScale.createElement('type_max');\n    this.twentyPercentValue = ValuesScale.createElement('percent_20');\n    this.fortyPercentValue = ValuesScale.createElement('percent_40');\n    this.sixtyPercentValue = ValuesScale.createElement('percent_60');\n    this.eightyPercentValue = ValuesScale.createElement('percent_80');\n  }\n\n  private static createElement(classModifier: string): HTMLSpanElement {\n    const element: HTMLSpanElement = document.createElement('span');\n\n    element.classList.add('goby-slider__value', `goby-slider__value_${classModifier}`);\n\n    return element;\n  }\n\n  public refreshValueScale(values: DataForValueScale): void {\n    ({\n      min: this.minValue.innerText,\n      max: this.maxValue.innerText,\n      20: this.twentyPercentValue.innerText,\n      40: this.fortyPercentValue.innerText,\n      60: this.sixtyPercentValue.innerText,\n      80: this.eightyPercentValue.innerText,\n    } = values);\n  }\n\n  public centerValues(sliderWidth: number, handleWidth: number): void {\n    const calculateExtremeValuePosition = (element: HTMLSpanElement): string => `${\n      0 - ((element.offsetWidth - handleWidth) / 2)\n    }px`;\n    const calculateValuePosition = (coefficient: number, element: HTMLSpanElement): string => `${\n      sliderWidth * coefficient - ((element.offsetWidth - handleWidth) / 2)\n    }px`;\n\n    this.minValue.style.left = calculateExtremeValuePosition(this.minValue);\n    this.maxValue.style.right = calculateExtremeValuePosition(this.maxValue);\n    this.twentyPercentValue.style.left = calculateValuePosition(0.2, this.twentyPercentValue);\n    this.fortyPercentValue.style.left = calculateValuePosition(0.4, this.fortyPercentValue);\n    this.sixtyPercentValue.style.left = calculateValuePosition(0.6, this.sixtyPercentValue);\n    this.eightyPercentValue.style.left = calculateValuePosition(0.8, this.eightyPercentValue);\n  }\n\n  private checkIsContainVerticalClass(): boolean {\n    return (this.minValue.classList.contains('goby-slider__value_state_vertical'))\n      && (this.maxValue.classList.contains('goby-slider__value_state_vertical'))\n      && (this.twentyPercentValue.classList.contains('goby-slider__value_state_vertical'))\n      && (this.fortyPercentValue.classList.contains('goby-slider__value_state_vertical'))\n      && (this.sixtyPercentValue.classList.contains('goby-slider__value_state_vertical'))\n      && (this.eightyPercentValue.classList.contains('goby-slider__value_state_vertical'));\n  }\n\n  private checkIsNeedToMakeHorizontally(isVertical: boolean): boolean {\n    return this.checkIsContainVerticalClass() && !isVertical;\n  }\n\n  private checkIsNeedToMakeVertical(isVertical: boolean): boolean {\n    return !this.checkIsContainVerticalClass() && isVertical;\n  }\n\n  public changePlane(isVertical: boolean): void {\n    const changeClasses = (): void => {\n      this.minValue.classList.toggle('goby-slider__value_state_vertical');\n      this.maxValue.classList.toggle('goby-slider__value_state_vertical');\n      this.twentyPercentValue.classList.toggle('goby-slider__value_state_vertical');\n      this.fortyPercentValue.classList.toggle('goby-slider__value_state_vertical');\n      this.sixtyPercentValue.classList.toggle('goby-slider__value_state_vertical');\n      this.eightyPercentValue.classList.toggle('goby-slider__value_state_vertical');\n    };\n\n    const isNeedToChangeClasses = this.checkIsNeedToMakeVertical(isVertical)\n      || this.checkIsNeedToMakeHorizontally(isVertical);\n\n    if (isNeedToChangeClasses) changeClasses();\n  }\n\n  public changeValueScaleDisplay(isValueScale: boolean): void {\n    const changeDisplay = (value: string): void => {\n      this.minValue.style.display = value;\n      this.maxValue.style.display = value;\n      this.twentyPercentValue.style.display = value;\n      this.fortyPercentValue.style.display = value;\n      this.sixtyPercentValue.style.display = value;\n      this.eightyPercentValue.style.display = value;\n    };\n\n    if (!isValueScale) {\n      changeDisplay('none');\n    } else {\n      changeDisplay('inline-block');\n    }\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(o=l[i="__coverage__"]||(l[i]={}))[n]&&o[n].hash===t?o[n]:(s.hash=t,o[n]=s));a.s[0]++,Object.defineProperty(A,"__esModule",{value:!0}),a.s[1]++,A.ValuesScale=void 0;class r{constructor(){a.f[0]++,a.s[2]++,this.minValue=r.createElement("type_min"),a.s[3]++,this.maxValue=r.createElement("type_max"),a.s[4]++,this.twentyPercentValue=r.createElement("percent_20"),a.s[5]++,this.fortyPercentValue=r.createElement("percent_40"),a.s[6]++,this.sixtyPercentValue=r.createElement("percent_60"),a.s[7]++,this.eightyPercentValue=r.createElement("percent_80")}static createElement(e){a.f[1]++;const A=(a.s[8]++,document.createElement("span"));return a.s[9]++,A.classList.add("goby-slider__value",`goby-slider__value_${e}`),a.s[10]++,A}refreshValueScale(e){a.f[2]++,a.s[11]++,({min:this.minValue.innerText,max:this.maxValue.innerText,20:this.twentyPercentValue.innerText,40:this.fortyPercentValue.innerText,60:this.sixtyPercentValue.innerText,80:this.eightyPercentValue.innerText}=e)}centerValues(e,A){a.f[3]++,a.s[12]++;const n=e=>(a.f[4]++,a.s[13]++,0-(e.offsetWidth-A)/2+"px");a.s[14]++;const t=(n,t)=>(a.f[5]++,a.s[15]++,e*n-(t.offsetWidth-A)/2+"px");a.s[16]++,this.minValue.style.left=n(this.minValue),a.s[17]++,this.maxValue.style.right=n(this.maxValue),a.s[18]++,this.twentyPercentValue.style.left=t(.2,this.twentyPercentValue),a.s[19]++,this.fortyPercentValue.style.left=t(.4,this.fortyPercentValue),a.s[20]++,this.sixtyPercentValue.style.left=t(.6,this.sixtyPercentValue),a.s[21]++,this.eightyPercentValue.style.left=t(.8,this.eightyPercentValue)}checkIsContainVerticalClass(){return a.f[6]++,a.s[22]++,a.b[0][0]++,this.minValue.classList.contains("goby-slider__value_state_vertical")&&(a.b[0][1]++,this.maxValue.classList.contains("goby-slider__value_state_vertical"))&&(a.b[0][2]++,this.twentyPercentValue.classList.contains("goby-slider__value_state_vertical"))&&(a.b[0][3]++,this.fortyPercentValue.classList.contains("goby-slider__value_state_vertical"))&&(a.b[0][4]++,this.sixtyPercentValue.classList.contains("goby-slider__value_state_vertical"))&&(a.b[0][5]++,this.eightyPercentValue.classList.contains("goby-slider__value_state_vertical"))}checkIsNeedToMakeHorizontally(e){return a.f[7]++,a.s[23]++,a.b[1][0]++,this.checkIsContainVerticalClass()&&(a.b[1][1]++,!e)}checkIsNeedToMakeVertical(e){return a.f[8]++,a.s[24]++,a.b[2][0]++,!this.checkIsContainVerticalClass()&&(a.b[2][1]++,e)}changePlane(e){a.f[9]++,a.s[25]++;const A=()=>{a.f[10]++,a.s[26]++,this.minValue.classList.toggle("goby-slider__value_state_vertical"),a.s[27]++,this.maxValue.classList.toggle("goby-slider__value_state_vertical"),a.s[28]++,this.twentyPercentValue.classList.toggle("goby-slider__value_state_vertical"),a.s[29]++,this.fortyPercentValue.classList.toggle("goby-slider__value_state_vertical"),a.s[30]++,this.sixtyPercentValue.classList.toggle("goby-slider__value_state_vertical"),a.s[31]++,this.eightyPercentValue.classList.toggle("goby-slider__value_state_vertical")},n=(a.s[32]++,a.b[3][0]++,this.checkIsNeedToMakeVertical(e)||(a.b[3][1]++,this.checkIsNeedToMakeHorizontally(e)));a.s[33]++,n?(a.b[4][0]++,a.s[34]++,A()):a.b[4][1]++}changeValueScaleDisplay(e){a.f[11]++,a.s[35]++;const A=e=>{a.f[12]++,a.s[36]++,this.minValue.style.display=e,a.s[37]++,this.maxValue.style.display=e,a.s[38]++,this.twentyPercentValue.style.display=e,a.s[39]++,this.fortyPercentValue.style.display=e,a.s[40]++,this.sixtyPercentValue.style.display=e,a.s[41]++,this.eightyPercentValue.style.display=e};a.s[42]++,e?(a.b[5][1]++,a.s[44]++,A("inline-block")):(a.b[5][0]++,a.s[43]++,A("none"))}}a.s[45]++,A.ValuesScale=r},"./src/plugin/View/View.ts":function(e,A,n){"use strict";var t,l,i,s,o,a,r=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\View.ts",l="b595a2e82f5b6a0f17990cf5defc6a55b956fd97",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\View.ts",statementMap:{0:{start:{line:2,column:17},end:{line:7,column:1}},1:{start:{line:3,column:12},end:{line:3,column:28}},2:{start:{line:3,column:34},end:{line:3,column:125}},3:{start:{line:4,column:4},end:{line:5,column:150}},4:{start:{line:4,column:79},end:{line:4,column:131}},5:{start:{line:5,column:9},end:{line:5,column:150}},6:{start:{line:5,column:58},end:{line:5,column:150}},7:{start:{line:5,column:81},end:{line:5,column:150}},8:{start:{line:6,column:4},end:{line:6,column:66}},9:{start:{line:8,column:0},end:{line:8,column:62}},10:{start:{line:9,column:0},end:{line:9,column:22}},11:{start:{line:10,column:29},end:{line:10,column:58}},12:{start:{line:11,column:17},end:{line:11,column:43}},13:{start:{line:12,column:18},end:{line:12,column:46}},14:{start:{line:13,column:19},end:{line:13,column:49}},15:{start:{line:14,column:27},end:{line:14,column:73}},16:{start:{line:15,column:22},end:{line:15,column:58}},17:{start:{line:16,column:19},end:{line:16,column:49}},18:{start:{line:17,column:11},end:{line:263,column:1}},19:{start:{line:19,column:8},end:{line:26,column:10}},20:{start:{line:27,column:8},end:{line:27,column:32}},21:{start:{line:28,column:8},end:{line:28,column:44}},22:{start:{line:29,column:8},end:{line:29,column:47}},23:{start:{line:30,column:8},end:{line:30,column:66}},24:{start:{line:31,column:8},end:{line:31,column:59}},25:{start:{line:32,column:8},end:{line:32,column:50}},26:{start:{line:33,column:8},end:{line:33,column:38}},27:{start:{line:34,column:8},end:{line:40,column:11}},28:{start:{line:43,column:8},end:{line:48,column:11}},29:{start:{line:49,column:8},end:{line:49,column:55}},30:{start:{line:53,column:8},end:{line:53,column:40}},31:{start:{line:54,column:8},end:{line:59,column:9}},32:{start:{line:55,column:12},end:{line:55,column:168}},33:{start:{line:58,column:12},end:{line:58,column:93}},34:{start:{line:62,column:8},end:{line:63,column:59}},35:{start:{line:66,column:8},end:{line:66,column:30}},36:{start:{line:67,column:8},end:{line:68,column:36}},37:{start:{line:68,column:12},end:{line:68,column:36}},38:{start:{line:69,column:8},end:{line:69,column:69}},39:{start:{line:70,column:8},end:{line:70,column:77}},40:{start:{line:71,column:8},end:{line:72,column:70}},41:{start:{line:72,column:12},end:{line:72,column:70}},42:{start:{line:73,column:8},end:{line:80,column:11}},43:{start:{line:83,column:8},end:{line:84,column:70}},44:{start:{line:84,column:12},end:{line:84,column:70}},45:{start:{line:85,column:8},end:{line:86,column:67}},46:{start:{line:86,column:12},end:{line:86,column:67}},47:{start:{line:87,column:8},end:{line:88,column:77}},48:{start:{line:88,column:12},end:{line:88,column:77}},49:{start:{line:89,column:8},end:{line:90,column:75}},50:{start:{line:90,column:12},end:{line:90,column:75}},51:{start:{line:91,column:8},end:{line:92,column:72}},52:{start:{line:92,column:12},end:{line:92,column:72}},53:{start:{line:95,column:8},end:{line:103,column:9}},54:{start:{line:96,column:12},end:{line:100,column:15}},55:{start:{line:101,column:12},end:{line:101,column:55}},56:{start:{line:102,column:12},end:{line:102,column:59}},57:{start:{line:104,column:8},end:{line:115,column:9}},58:{start:{line:105,column:12},end:{line:109,column:15}},59:{start:{line:110,column:12},end:{line:113,column:15}},60:{start:{line:114,column:12},end:{line:114,column:75}},61:{start:{line:116,column:8},end:{line:117,column:84}},62:{start:{line:117,column:12},end:{line:117,column:84}},63:{start:{line:118,column:8},end:{line:119,column:77}},64:{start:{line:119,column:12},end:{line:119,column:77}},65:{start:{line:120,column:8},end:{line:121,column:44}},66:{start:{line:121,column:12},end:{line:121,column:44}},67:{start:{line:124,column:33},end:{line:124,column:87}},68:{start:{line:125,column:36},end:{line:129,column:9}},69:{start:{line:130,column:37},end:{line:132,column:18}},70:{start:{line:133,column:37},end:{line:133,column:88}},71:{start:{line:134,column:8},end:{line:135,column:50}},72:{start:{line:135,column:12},end:{line:135,column:50}},73:{start:{line:138,column:8},end:{line:140,column:11}},74:{start:{line:139,column:12},end:{line:139,column:77}},75:{start:{line:141,column:8},end:{line:141,column:102}},76:{start:{line:142,column:8},end:{line:142,column:108}},77:{start:{line:143,column:8},end:{line:143,column:118}},78:{start:{line:144,column:8},end:{line:144,column:116}},79:{start:{line:145,column:8},end:{line:145,column:112}},80:{start:{line:146,column:8},end:{line:148,column:11}},81:{start:{line:147,column:12},end:{line:147,column:79}},82:{start:{line:149,column:8},end:{line:151,column:11}},83:{start:{line:150,column:12},end:{line:150,column:79}},84:{start:{line:152,column:8},end:{line:152,column:104}},85:{start:{line:153,column:8},end:{line:155,column:11}},86:{start:{line:154,column:12},end:{line:154,column:77}},87:{start:{line:156,column:8},end:{line:156,column:85}},88:{start:{line:157,column:8},end:{line:157,column:67}},89:{start:{line:160,column:23},end:{line:160,column:35}},90:{start:{line:161,column:8},end:{line:167,column:11}},91:{start:{line:170,column:24},end:{line:170,column:36}},92:{start:{line:171,column:8},end:{line:171,column:87}},93:{start:{line:174,column:24},end:{line:174,column:36}},94:{start:{line:175,column:8},end:{line:175,column:52}},95:{start:{line:176,column:8},end:{line:180,column:11}},96:{start:{line:181,column:8},end:{line:184,column:11}},97:{start:{line:185,column:8},end:{line:185,column:71}},98:{start:{line:188,column:24},end:{line:188,column:36}},99:{start:{line:189,column:8},end:{line:189,column:54}},100:{start:{line:190,column:8},end:{line:194,column:11}},101:{start:{line:195,column:8},end:{line:195,column:62}},102:{start:{line:196,column:8},end:{line:196,column:66}},103:{start:{line:199,column:24},end:{line:199,column:36}},104:{start:{line:200,column:8},end:{line:200,column:56}},105:{start:{line:201,column:8},end:{line:201,column:80}},106:{start:{line:204,column:24},end:{line:204,column:36}},107:{start:{line:205,column:8},end:{line:205,column:59}},108:{start:{line:206,column:8},end:{line:206,column:73}},109:{start:{line:209,column:24},end:{line:209,column:36}},110:{start:{line:210,column:29},end:{line:210,column:81}},111:{start:{line:211,column:28},end:{line:211,column:56}},112:{start:{line:212,column:8},end:{line:212,column:86}},113:{start:{line:215,column:24},end:{line:215,column:36}},114:{start:{line:216,column:8},end:{line:216,column:56}},115:{start:{line:217,column:8},end:{line:223,column:9}},116:{start:{line:218,column:12},end:{line:218,column:64}},117:{start:{line:219,column:12},end:{line:219,column:44}},118:{start:{line:222,column:12},end:{line:222,column:70}},119:{start:{line:226,column:24},end:{line:226,column:36}},120:{start:{line:227,column:33},end:{line:227,column:88}},121:{start:{line:228,column:28},end:{line:228,column:60}},122:{start:{line:229,column:8},end:{line:229,column:96}},123:{start:{line:232,column:24},end:{line:232,column:36}},124:{start:{line:233,column:8},end:{line:233,column:53}},125:{start:{line:234,column:8},end:{line:234,column:77}},126:{start:{line:237,column:32},end:{line:237,column:110}},127:{start:{line:238,column:36},end:{line:238,column:140}},128:{start:{line:239,column:33},end:{line:239,column:172}},129:{start:{line:240,column:8},end:{line:241,column:19}},130:{start:{line:241,column:12},end:{line:241,column:19}},131:{start:{line:242,column:31},end:{line:242,column:98}},132:{start:{line:243,column:29},end:{line:247,column:10}},133:{start:{line:248,column:8},end:{line:248,column:60}},134:{start:{line:249,column:31},end:{line:249,column:141}},135:{start:{line:250,column:8},end:{line:254,column:11}},136:{start:{line:255,column:8},end:{line:255,column:44}},137:{start:{line:258,column:8},end:{line:258,column:69}},138:{start:{line:259,column:8},end:{line:259,column:77}},139:{start:{line:260,column:8},end:{line:261,column:70}},140:{start:{line:261,column:12},end:{line:261,column:70}},141:{start:{line:264,column:0},end:{line:266,column:9}},142:{start:{line:267,column:0},end:{line:267,column:20}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:46},end:{line:2,column:47}},loc:{start:{line:2,column:87},end:{line:7,column:1}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:34},end:{line:41,column:5}},line:18},2:{name:"(anonymous_2)",decl:{start:{line:42,column:4},end:{line:42,column:5}},loc:{start:{line:42,column:21},end:{line:50,column:5}},line:42},3:{name:"(anonymous_3)",decl:{start:{line:51,column:4},end:{line:51,column:5}},loc:{start:{line:51,column:23},end:{line:60,column:5}},line:51},4:{name:"(anonymous_4)",decl:{start:{line:61,column:4},end:{line:61,column:5}},loc:{start:{line:61,column:26},end:{line:64,column:5}},line:61},5:{name:"(anonymous_5)",decl:{start:{line:65,column:4},end:{line:65,column:5}},loc:{start:{line:65,column:26},end:{line:81,column:5}},line:65},6:{name:"(anonymous_6)",decl:{start:{line:82,column:4},end:{line:82,column:5}},loc:{start:{line:82,column:31},end:{line:93,column:5}},line:82},7:{name:"(anonymous_7)",decl:{start:{line:94,column:4},end:{line:94,column:5}},loc:{start:{line:94,column:24},end:{line:122,column:5}},line:94},8:{name:"(anonymous_8)",decl:{start:{line:123,column:4},end:{line:123,column:5}},loc:{start:{line:123,column:28},end:{line:136,column:5}},line:123},9:{name:"(anonymous_9)",decl:{start:{line:137,column:4},end:{line:137,column:5}},loc:{start:{line:137,column:25},end:{line:158,column:5}},line:137},10:{name:"(anonymous_10)",decl:{start:{line:138,column:48},end:{line:138,column:49}},loc:{start:{line:138,column:64},end:{line:140,column:9}},line:138},11:{name:"(anonymous_11)",decl:{start:{line:146,column:99},end:{line:146,column:100}},loc:{start:{line:146,column:115},end:{line:148,column:9}},line:146},12:{name:"(anonymous_12)",decl:{start:{line:149,column:107},end:{line:149,column:108}},loc:{start:{line:149,column:123},end:{line:151,column:9}},line:149},13:{name:"(anonymous_13)",decl:{start:{line:153,column:65},end:{line:153,column:66}},loc:{start:{line:153,column:77},end:{line:155,column:9}},line:153},14:{name:"(anonymous_14)",decl:{start:{line:159,column:4},end:{line:159,column:5}},loc:{start:{line:159,column:33},end:{line:168,column:5}},line:159},15:{name:"(anonymous_15)",decl:{start:{line:169,column:4},end:{line:169,column:5}},loc:{start:{line:169,column:33},end:{line:172,column:5}},line:169},16:{name:"(anonymous_16)",decl:{start:{line:173,column:4},end:{line:173,column:5}},loc:{start:{line:173,column:32},end:{line:186,column:5}},line:173},17:{name:"(anonymous_17)",decl:{start:{line:187,column:4},end:{line:187,column:5}},loc:{start:{line:187,column:35},end:{line:197,column:5}},line:187},18:{name:"(anonymous_18)",decl:{start:{line:198,column:4},end:{line:198,column:5}},loc:{start:{line:198,column:40},end:{line:202,column:5}},line:198},19:{name:"(anonymous_19)",decl:{start:{line:203,column:4},end:{line:203,column:5}},loc:{start:{line:203,column:36},end:{line:207,column:5}},line:203},20:{name:"(anonymous_20)",decl:{start:{line:208,column:4},end:{line:208,column:5}},loc:{start:{line:208,column:34},end:{line:213,column:5}},line:208},21:{name:"(anonymous_21)",decl:{start:{line:214,column:4},end:{line:214,column:5}},loc:{start:{line:214,column:33},end:{line:224,column:5}},line:214},22:{name:"(anonymous_22)",decl:{start:{line:225,column:4},end:{line:225,column:5}},loc:{start:{line:225,column:34},end:{line:230,column:5}},line:225},23:{name:"(anonymous_23)",decl:{start:{line:231,column:4},end:{line:231,column:5}},loc:{start:{line:231,column:37},end:{line:235,column:5}},line:231},24:{name:"(anonymous_24)",decl:{start:{line:236,column:4},end:{line:236,column:5}},loc:{start:{line:236,column:33},end:{line:256,column:5}},line:236},25:{name:"(anonymous_25)",decl:{start:{line:257,column:4},end:{line:257,column:5}},loc:{start:{line:257,column:25},end:{line:262,column:5}},line:257}},branchMap:{0:{loc:{start:{line:2,column:17},end:{line:7,column:1}},type:"binary-expr",locations:[{start:{line:2,column:18},end:{line:2,column:22}},{start:{line:2,column:26},end:{line:2,column:41}},{start:{line:2,column:46},end:{line:7,column:1}}],line:2},1:{loc:{start:{line:3,column:34},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:42},end:{line:3,column:48}},{start:{line:3,column:51},end:{line:3,column:125}}],line:3},2:{loc:{start:{line:3,column:51},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:67},end:{line:3,column:118}},{start:{line:3,column:121},end:{line:3,column:125}}],line:3},3:{loc:{start:{line:4,column:4},end:{line:5,column:150}},type:"if",locations:[{start:{line:4,column:4},end:{line:5,column:150}},{start:{line:4,column:4},end:{line:5,column:150}}],line:4},4:{loc:{start:{line:4,column:8},end:{line:4,column:77}},type:"binary-expr",locations:[{start:{line:4,column:8},end:{line:4,column:35}},{start:{line:4,column:39},end:{line:4,column:77}}],line:4},5:{loc:{start:{line:5,column:58},end:{line:5,column:150}},type:"if",locations:[{start:{line:5,column:58},end:{line:5,column:150}},{start:{line:5,column:58},end:{line:5,column:150}}],line:5},6:{loc:{start:{line:5,column:85},end:{line:5,column:149}},type:"binary-expr",locations:[{start:{line:5,column:86},end:{line:5,column:143}},{start:{line:5,column:148},end:{line:5,column:149}}],line:5},7:{loc:{start:{line:5,column:86},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:94},end:{line:5,column:98}},{start:{line:5,column:101},end:{line:5,column:143}}],line:5},8:{loc:{start:{line:5,column:101},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:109},end:{line:5,column:126}},{start:{line:5,column:129},end:{line:5,column:143}}],line:5},9:{loc:{start:{line:6,column:11},end:{line:6,column:62}},type:"binary-expr",locations:[{start:{line:6,column:11},end:{line:6,column:16}},{start:{line:6,column:20},end:{line:6,column:21}},{start:{line:6,column:25},end:{line:6,column:62}}],line:6},10:{loc:{start:{line:54,column:8},end:{line:59,column:9}},type:"if",locations:[{start:{line:54,column:8},end:{line:59,column:9}},{start:{line:54,column:8},end:{line:59,column:9}}],line:54},11:{loc:{start:{line:55,column:12},end:{line:55,column:167}},type:"cond-expr",locations:[{start:{line:55,column:99},end:{line:55,column:105}},{start:{line:55,column:108},end:{line:55,column:167}}],line:55},12:{loc:{start:{line:55,column:12},end:{line:55,column:96}},type:"binary-expr",locations:[{start:{line:55,column:12},end:{line:55,column:79}},{start:{line:55,column:83},end:{line:55,column:96}}],line:55},13:{loc:{start:{line:62,column:15},end:{line:63,column:58}},type:"binary-expr",locations:[{start:{line:62,column:15},end:{line:62,column:79}},{start:{line:63,column:15},end:{line:63,column:58}}],line:62},14:{loc:{start:{line:67,column:8},end:{line:68,column:36}},type:"if",locations:[{start:{line:67,column:8},end:{line:68,column:36}},{start:{line:67,column:8},end:{line:68,column:36}}],line:67},15:{loc:{start:{line:71,column:8},end:{line:72,column:70}},type:"if",locations:[{start:{line:71,column:8},end:{line:72,column:70}},{start:{line:71,column:8},end:{line:72,column:70}}],line:71},16:{loc:{start:{line:83,column:8},end:{line:84,column:70}},type:"if",locations:[{start:{line:83,column:8},end:{line:84,column:70}},{start:{line:83,column:8},end:{line:84,column:70}}],line:83},17:{loc:{start:{line:85,column:8},end:{line:86,column:67}},type:"if",locations:[{start:{line:85,column:8},end:{line:86,column:67}},{start:{line:85,column:8},end:{line:86,column:67}}],line:85},18:{loc:{start:{line:87,column:8},end:{line:88,column:77}},type:"if",locations:[{start:{line:87,column:8},end:{line:88,column:77}},{start:{line:87,column:8},end:{line:88,column:77}}],line:87},19:{loc:{start:{line:89,column:8},end:{line:90,column:75}},type:"if",locations:[{start:{line:89,column:8},end:{line:90,column:75}},{start:{line:89,column:8},end:{line:90,column:75}}],line:89},20:{loc:{start:{line:91,column:8},end:{line:92,column:72}},type:"if",locations:[{start:{line:91,column:8},end:{line:92,column:72}},{start:{line:91,column:8},end:{line:92,column:72}}],line:91},21:{loc:{start:{line:95,column:8},end:{line:103,column:9}},type:"if",locations:[{start:{line:95,column:8},end:{line:103,column:9}},{start:{line:95,column:8},end:{line:103,column:9}}],line:95},22:{loc:{start:{line:104,column:8},end:{line:115,column:9}},type:"if",locations:[{start:{line:104,column:8},end:{line:115,column:9}},{start:{line:104,column:8},end:{line:115,column:9}}],line:104},23:{loc:{start:{line:116,column:8},end:{line:117,column:84}},type:"if",locations:[{start:{line:116,column:8},end:{line:117,column:84}},{start:{line:116,column:8},end:{line:117,column:84}}],line:116},24:{loc:{start:{line:118,column:8},end:{line:119,column:77}},type:"if",locations:[{start:{line:118,column:8},end:{line:119,column:77}},{start:{line:118,column:8},end:{line:119,column:77}}],line:118},25:{loc:{start:{line:120,column:8},end:{line:121,column:44}},type:"if",locations:[{start:{line:120,column:8},end:{line:121,column:44}},{start:{line:120,column:8},end:{line:121,column:44}}],line:120},26:{loc:{start:{line:124,column:33},end:{line:124,column:87}},type:"binary-expr",locations:[{start:{line:124,column:33},end:{line:124,column:58}},{start:{line:124,column:62},end:{line:124,column:87}}],line:124},27:{loc:{start:{line:130,column:37},end:{line:132,column:18}},type:"cond-expr",locations:[{start:{line:131,column:14},end:{line:131,column:71}},{start:{line:132,column:14},end:{line:132,column:18}}],line:130},28:{loc:{start:{line:133,column:37},end:{line:133,column:88}},type:"binary-expr",locations:[{start:{line:133,column:37},end:{line:133,column:57}},{start:{line:133,column:61},end:{line:133,column:88}}],line:133},29:{loc:{start:{line:134,column:8},end:{line:135,column:50}},type:"if",locations:[{start:{line:134,column:8},end:{line:135,column:50}},{start:{line:134,column:8},end:{line:135,column:50}}],line:134},30:{loc:{start:{line:211,column:28},end:{line:211,column:56}},type:"cond-expr",locations:[{start:{line:211,column:43},end:{line:211,column:49}},{start:{line:211,column:52},end:{line:211,column:56}}],line:211},31:{loc:{start:{line:217,column:8},end:{line:223,column:9}},type:"if",locations:[{start:{line:217,column:8},end:{line:223,column:9}},{start:{line:217,column:8},end:{line:223,column:9}}],line:217},32:{loc:{start:{line:228,column:28},end:{line:228,column:60}},type:"cond-expr",locations:[{start:{line:228,column:47},end:{line:228,column:52}},{start:{line:228,column:55},end:{line:228,column:60}}],line:228},33:{loc:{start:{line:237,column:32},end:{line:237,column:110}},type:"binary-expr",locations:[{start:{line:237,column:32},end:{line:237,column:71}},{start:{line:237,column:75},end:{line:237,column:110}}],line:237},34:{loc:{start:{line:240,column:8},end:{line:241,column:19}},type:"if",locations:[{start:{line:240,column:8},end:{line:241,column:19}},{start:{line:240,column:8},end:{line:241,column:19}}],line:240},35:{loc:{start:{line:242,column:31},end:{line:242,column:98}},type:"cond-expr",locations:[{start:{line:242,column:61},end:{line:242,column:77}},{start:{line:242,column:80},end:{line:242,column:98}}],line:242},36:{loc:{start:{line:260,column:8},end:{line:261,column:70}},type:"if",locations:[{start:{line:260,column:8},end:{line:261,column:70}},{start:{line:260,column:8},end:{line:261,column:70}}],line:260}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0,87:0,88:0,89:0,90:0,91:0,92:0,93:0,94:0,95:0,96:0,97:0,98:0,99:0,100:0,101:0,102:0,103:0,104:0,105:0,106:0,107:0,108:0,109:0,110:0,111:0,112:0,113:0,114:0,115:0,116:0,117:0,118:0,119:0,120:0,121:0,122:0,123:0,124:0,125:0,126:0,127:0,128:0,129:0,130:0,131:0,132:0,133:0,134:0,135:0,136:0,137:0,138:0,139:0,140:0,141:0,142:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0},b:{0:[0,0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0],16:[0,0],17:[0,0],18:[0,0],19:[0,0],20:[0,0],21:[0,0],22:[0,0],23:[0,0],24:[0,0],25:[0,0],26:[0,0],27:[0,0],28:[0,0],29:[0,0],30:[0,0],31:[0,0],32:[0,0],33:[0,0],34:[0,0],35:[0,0],36:[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\View.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\View.ts"],names:[],mappings:"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",sourcesContent:["import autobind from 'autobind-decorator';\nimport { Slider } from './Slider/Slider';\nimport { Handles } from './Handles/Handles';\nimport { Movement } from './Movement/Movement';\nimport { SelectedInterval } from './SelectedInterval/SelectedInterval';\nimport { ValuesScale } from './ValuesScale/ValuesScale';\nimport { SideMenu } from './SideMenu/SideMenu';\nimport {\n  RefreshData,\n  BasicViewSettings,\n  TargetsForViewUpdate,\n  ViewRequestsData,\n} from './types';\nimport { HandlesOverlaps } from './Handles/types';\n\n@autobind\nexport class View {\n  readonly container: HTMLElement;\n\n  readonly slider: Slider;\n\n  readonly handles: Handles;\n\n  readonly movement: Movement;\n\n  readonly interval: SelectedInterval;\n\n  readonly valuesScale: ValuesScale;\n\n  readonly sideMenu: SideMenu;\n\n  public basicSettings: BasicViewSettings;\n\n  public requests: ViewRequestsData = {\n    needDataForScale: { name: '', value: '' },\n    needDataForStartPosition: { name: '', value: '' },\n    needStepWidth: { name: '', value: '' },\n    needApplyValueFromScale: { name: '', value: '' },\n    needApplyNewValue: { name: '', value: '' },\n    needChangeSliderValuesRange: { name: '', value: '' },\n  };\n\n  constructor(settings: BasicViewSettings, target: HTMLElement) {\n    this.container = target;\n    this.slider = new Slider();\n    this.handles = new Handles();\n    this.interval = new SelectedInterval();\n    this.valuesScale = new ValuesScale();\n    this.sideMenu = new SideMenu();\n    this.basicSettings = settings;\n    this.movement = new Movement({\n      slider: this.slider.slider,\n      fromHandle: this.handles.fromHandle,\n      toHandle: this.handles.toHandle,\n      interval: this.interval.interval,\n      basicSettings: this.basicSettings,\n    });\n  }\n\n  private addSliderToDOM(): void {\n    this.slider.initializeSliderElements({\n      from: this.handles.fromHandle,\n      to: this.handles.toHandle,\n      interval: this.interval.interval,\n      valueScale: this.valuesScale,\n    });\n    this.container.append(this.slider.mainWrapper);\n  }\n\n  private addSideMenuToDOM(): void {\n    this.sideMenu.collectSideMenu();\n\n    if (typeof this.basicSettings.sideMenu === 'string') {\n      document.querySelector(this.basicSettings.sideMenu)?.append(this.sideMenu.sideMenuElements.sideMenuContainer);\n    } else {\n      this.slider.mainWrapper.append(this.sideMenu.sideMenuElements.sideMenuContainer);\n    }\n  }\n\n  private checkIsStepRequired(): boolean {\n    return Object.prototype.hasOwnProperty.call(this.basicSettings, 'step')\n      && typeof this.basicSettings.step === 'number';\n  }\n\n  public prepareSliderForUse(): void {\n    this.addSliderToDOM();\n\n    if (this.basicSettings.sideMenu) this.addSideMenuToDOM();\n\n    this.requests.needDataForScale = { name: '', value: 'true' };\n    this.requests.needDataForStartPosition = { name: '', value: 'true' };\n\n    if (this.checkIsStepRequired()) this.requests.needStepWidth = { name: '', value: 'true' };\n\n    this.updateView({\n      vertical: this.basicSettings.vertical,\n      double: this.basicSettings.double,\n      sideMenu: this.basicSettings.sideMenu,\n      handlesValues: this.basicSettings.handlesValues,\n      valueScale: this.basicSettings.valueScale,\n      integer: this.basicSettings.integer,\n    });\n  }\n\n  private turnOnMenuToggles(targets: TargetsForViewUpdate): void {\n    if (targets.vertical) (this.sideMenu.sideMenuElements.planeToggle as HTMLInputElement).checked = true;\n    if (targets.double) (this.sideMenu.sideMenuElements.toToggle as HTMLInputElement).checked = true;\n    if (targets.handlesValues) (this.sideMenu.sideMenuElements.handleValuesToggle as HTMLInputElement).checked = true;\n    if (targets.valueScale) (this.sideMenu.sideMenuElements.valueScaleToggle as HTMLInputElement).checked = true;\n    if (targets.integer) (this.sideMenu.sideMenuElements.integerToggle as HTMLInputElement).checked = true;\n  }\n\n  public updateView(targets: TargetsForViewUpdate): void {\n    if (targets.vertical) {\n      this.slider.changePlane({\n        isVertical: targets.vertical,\n        isStep: this.checkIsStepRequired(),\n        requests: this.requests,\n      });\n      this.handles.changePlane(targets.vertical);\n      this.valuesScale.changePlane(targets.vertical);\n    }\n    if (!targets.double) {\n      this.handles.changeHandlesDisplay({\n        isDouble: this.basicSettings.double,\n        positions: this.movement.positions,\n        sliderWidth: this.slider.slider.offsetWidth,\n      });\n      this.interval.hideSelectedInterval({\n        isDouble: this.basicSettings.double,\n        handleWidth: this.handles.fromHandle.offsetWidth,\n      });\n      this.sideMenu.changeToValuesDisplay(this.basicSettings.double);\n    }\n    if (!targets.valueScale) this.valuesScale.changeValueScaleDisplay(this.basicSettings.valueScale);\n    if (!targets.handlesValues) this.handles.hideHandlesValues(this.basicSettings.handlesValues);\n    if (targets.sideMenu) this.turnOnMenuToggles(targets);\n  }\n\n  public refreshValues(settings: RefreshData): void {\n    const isTargetNotRange: boolean = settings.target !== 'min' && settings.target !== 'max';\n    const handlesOverlapsData: HandlesOverlaps = {\n      positions: this.movement.positions,\n      isDouble: this.basicSettings.double,\n      sliderWidth: this.slider.slider.offsetWidth,\n    };\n    const handlesRefreshResult: boolean = isTargetNotRange\n      ? this.handles.refreshValues(settings, handlesOverlapsData)\n      : true;\n\n    const isNeedSideMenuUpdate = handlesRefreshResult && this.basicSettings.sideMenu;\n    if (isNeedSideMenuUpdate) this.sideMenu.refreshValues(settings);\n  }\n\n  public bindEventListeners(): void {\n    Object.values(this.valuesScale).forEach((scaleValue: HTMLSpanElement): void => {\n      scaleValue.addEventListener('click', this.handleScaleValueClick);\n    });\n    this.sideMenu.sideMenuElements.toToggle.addEventListener('change', this.handleToToggleChange);\n    this.sideMenu.sideMenuElements.planeToggle.addEventListener('change', this.handlePlaneToggleChange);\n    this.sideMenu.sideMenuElements.valueScaleToggle.addEventListener('change', this.handleValueScaleToggleChange);\n    this.sideMenu.sideMenuElements.handleValuesToggle.addEventListener('change', this.handleHandleValuesChange);\n    this.sideMenu.sideMenuElements.integerToggle.addEventListener('change', this.handleIntegerToggleChange);\n    [this.sideMenu.sideMenuElements.fromInput, this.sideMenu.sideMenuElements.toInput].forEach(\n      (valueInput: HTMLElement): void => {\n        valueInput.addEventListener('change', this.handleValueInputChange);\n      },\n    );\n    [this.sideMenu.sideMenuElements.minimumInput, this.sideMenu.sideMenuElements.maximumInput].forEach(\n      (rangeInput: HTMLElement): void => {\n        rangeInput.addEventListener('change', this.handleRangeInputChange);\n      },\n    );\n    this.sideMenu.sideMenuElements.stepInput.addEventListener('change', this.handleStepInputChange);\n    [this.handles.fromHandle, this.handles.toHandle].forEach((handle: HTMLSpanElement):void => {\n      handle.addEventListener('mousedown', this.handleHandleMouseDown);\n    });\n    this.slider.slider.addEventListener('mousedown', this.handleSliderMouseDown);\n    window.addEventListener('resize', this.handleWindowResize);\n  }\n\n  private handleHandleMouseDown(event: MouseEvent): void {\n    const target: HTMLSpanElement = event.target as HTMLSpanElement;\n    this.movement.handleListener({\n      eventInfo: {\n        target,\n        x: event.clientX,\n        y: event.clientY,\n      },\n    });\n  }\n\n  private handleScaleValueClick(event: Event): void {\n    const element: HTMLSpanElement = event.target as HTMLSpanElement;\n    this.requests.needApplyValueFromScale = { name: '', value: element.innerText };\n  }\n\n  private handleToToggleChange(event: Event): void {\n    const element: HTMLInputElement = event.target as HTMLInputElement;\n\n    this.basicSettings.double = element.checked;\n    this.handles.changeHandlesDisplay({\n      isDouble: this.basicSettings.double,\n      positions: this.movement.positions,\n      sliderWidth: this.slider.slider.offsetWidth,\n    });\n    this.interval.hideSelectedInterval({\n      isDouble: this.basicSettings.double,\n      handleWidth: this.handles.fromHandle.offsetWidth,\n    });\n    this.sideMenu.changeToValuesDisplay(this.basicSettings.double);\n  }\n\n  private handlePlaneToggleChange(event: Event): void {\n    const element: HTMLInputElement = event.target as HTMLInputElement;\n\n    this.basicSettings.vertical = element.checked;\n    this.slider.changePlane({\n      isVertical: this.basicSettings.vertical,\n      isStep: this.checkIsStepRequired(),\n      requests: this.requests,\n    });\n    this.handles.changePlane(this.basicSettings.vertical);\n    this.valuesScale.changePlane(this.basicSettings.vertical);\n  }\n\n  private handleValueScaleToggleChange(event: Event): void {\n    const element: HTMLInputElement = event.target as HTMLInputElement;\n\n    this.basicSettings.valueScale = element.checked;\n    this.valuesScale.changeValueScaleDisplay(this.basicSettings.valueScale);\n  }\n\n  private handleHandleValuesChange(event: Event): void {\n    const element: HTMLInputElement = event.target as HTMLInputElement;\n\n    this.basicSettings.handlesValues = element.checked;\n    this.handles.hideHandlesValues(this.basicSettings.handlesValues);\n  }\n\n  private handleValueInputChange(event: Event): void {\n    const element: HTMLInputElement = event.target as HTMLInputElement;\n    const isTargetFrom: boolean = element === this.sideMenu.sideMenuElements.fromInput;\n    const inputTarget: string = isTargetFrom ? 'from' : 'to';\n\n    this.requests.needApplyNewValue = { name: inputTarget, value: element.value };\n  }\n\n  private handleStepInputChange(event: Event): void {\n    const element: HTMLInputElement = event.target as HTMLInputElement;\n\n    this.basicSettings.step = Number(element.value);\n    if (element.value === '0') {\n      (this.sideMenu.sideMenuElements.stepInput as HTMLInputElement).value = '';\n      this.basicSettings.step = false;\n    } else {\n      this.requests.needStepWidth = { name: '', value: 'true' };\n    }\n  }\n\n  private handleRangeInputChange(event: Event): void {\n    const element: HTMLInputElement = event.target as HTMLInputElement;\n    const inTargetMinInput: boolean = element === this.sideMenu.sideMenuElements.minimumInput;\n    const inputTarget: string = inTargetMinInput ? 'min' : 'max';\n\n    this.requests.needChangeSliderValuesRange = { name: inputTarget, value: element.value };\n  }\n\n  private handleIntegerToggleChange(event: Event): void {\n    const element: HTMLInputElement = event.target as HTMLInputElement;\n\n    this.basicSettings.integer = element.checked;\n    this.requests.needDataForStartPosition = { name: '', value: 'true' };\n  }\n\n  private handleSliderMouseDown(event: MouseEvent): void {\n    const isNotSliderBody = event.target !== this.interval.interval && event.target !== this.slider.slider;\n    const horizontalPosition: number = (\n      event.clientX - this.slider.slider.getBoundingClientRect().x - (this.handles.fromHandle.offsetWidth / 2)\n    );\n    const verticalPosition: number = this.slider.slider.offsetWidth - (\n      event.clientY - this.slider.slider.getBoundingClientRect().y + (this.handles.fromHandle.offsetWidth / 2)\n    );\n    if (isNotSliderBody) return;\n\n    const targetPosition: number = this.basicSettings.vertical ? verticalPosition : horizontalPosition;\n    const targetHandle: HTMLSpanElement = this.handles.defineHandleToMove({\n      targetPosition,\n      positions: this.movement.positions,\n      isDouble: this.basicSettings.double,\n    });\n    this.movement.dataForMovement.target = targetHandle;\n    const correctedValue: number = this.movement.fixImpossiblePosition(\n      this.slider.slider.offsetWidth - targetHandle.offsetWidth,\n      targetPosition,\n    );\n    this.handles.acceptNewPosition({\n      target: targetHandle,\n      value: correctedValue,\n      positions: this.movement.positions,\n    });\n    this.movement.fixIntervalPosition();\n  }\n\n  private handleWindowResize(): void {\n    this.requests.needDataForScale = { name: '', value: 'true' };\n    this.requests.needDataForStartPosition = { name: '', value: 'true' };\n    if (this.checkIsStepRequired()) this.requests.needStepWidth = { name: '', value: 'true' };\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[s="__coverage__"]||(i[s]={}))[t]&&a[t].hash===l?a[t]:(o.hash=l,a[t]=o)),C=(r.s[0]++,r.b[0][0]++,this&&(r.b[0][1]++,this.__decorate)||(r.b[0][2]++,function(e,A,n,t){r.f[0]++;var l,i=(r.s[1]++,arguments.length),s=(r.s[2]++,i<3?(r.b[1][0]++,A):(r.b[1][1]++,null===t?(r.b[2][0]++,t=Object.getOwnPropertyDescriptor(A,n)):(r.b[2][1]++,t)));if(r.s[3]++,r.b[4][0]++,"object"==typeof Reflect&&(r.b[4][1]++,"function"==typeof Reflect.decorate))r.b[3][0]++,r.s[4]++,s=Reflect.decorate(e,A,n,t);else{r.b[3][1]++,r.s[5]++;for(var o=e.length-1;o>=0;o--)r.s[6]++,(l=e[o])?(r.b[5][0]++,r.s[7]++,r.b[6][0]++,s=(i<3?(r.b[7][0]++,l(s)):(r.b[7][1]++,i>3?(r.b[8][0]++,l(A,n,s)):(r.b[8][1]++,l(A,n))))||(r.b[6][1]++,s)):r.b[5][1]++}return r.s[8]++,r.b[9][0]++,i>3&&(r.b[9][1]++,s)&&(r.b[9][2]++,Object.defineProperty(A,n,s)),s}));r.s[9]++,Object.defineProperty(A,"__esModule",{value:!0}),r.s[10]++,A.View=void 0;const u=(r.s[11]++,n("./node_modules/autobind-decorator/lib/esm/index.js")),c=(r.s[12]++,n("./src/plugin/View/Slider/Slider.ts")),m=(r.s[13]++,n("./src/plugin/View/Handles/Handles.ts")),d=(r.s[14]++,n("./src/plugin/View/Movement/Movement.ts")),p=(r.s[15]++,n("./src/plugin/View/SelectedInterval/SelectedInterval.ts")),h=(r.s[16]++,n("./src/plugin/View/ValuesScale/ValuesScale.ts")),f=(r.s[17]++,n("./src/plugin/View/SideMenu/SideMenu.ts"));r.s[18]++;let I=class{constructor(e,A){r.f[1]++,r.s[19]++,this.requests={needDataForScale:{name:"",value:""},needDataForStartPosition:{name:"",value:""},needStepWidth:{name:"",value:""},needApplyValueFromScale:{name:"",value:""},needApplyNewValue:{name:"",value:""},needChangeSliderValuesRange:{name:"",value:""}},r.s[20]++,this.container=A,r.s[21]++,this.slider=new c.Slider,r.s[22]++,this.handles=new m.Handles,r.s[23]++,this.interval=new p.SelectedInterval,r.s[24]++,this.valuesScale=new h.ValuesScale,r.s[25]++,this.sideMenu=new f.SideMenu,r.s[26]++,this.basicSettings=e,r.s[27]++,this.movement=new d.Movement({slider:this.slider.slider,fromHandle:this.handles.fromHandle,toHandle:this.handles.toHandle,interval:this.interval.interval,basicSettings:this.basicSettings})}addSliderToDOM(){r.f[2]++,r.s[28]++,this.slider.initializeSliderElements({from:this.handles.fromHandle,to:this.handles.toHandle,interval:this.interval.interval,valueScale:this.valuesScale}),r.s[29]++,this.container.append(this.slider.mainWrapper)}addSideMenuToDOM(){var e;r.f[3]++,r.s[30]++,this.sideMenu.collectSideMenu(),r.s[31]++,"string"==typeof this.basicSettings.sideMenu?(r.b[10][0]++,r.s[32]++,r.b[12][0]++,null===(e=document.querySelector(this.basicSettings.sideMenu))||(r.b[12][1]++,void 0===e)?r.b[11][0]++:(r.b[11][1]++,e.append(this.sideMenu.sideMenuElements.sideMenuContainer))):(r.b[10][1]++,r.s[33]++,this.slider.mainWrapper.append(this.sideMenu.sideMenuElements.sideMenuContainer))}checkIsStepRequired(){return r.f[4]++,r.s[34]++,r.b[13][0]++,Object.prototype.hasOwnProperty.call(this.basicSettings,"step")&&(r.b[13][1]++,"number"==typeof this.basicSettings.step)}prepareSliderForUse(){r.f[5]++,r.s[35]++,this.addSliderToDOM(),r.s[36]++,this.basicSettings.sideMenu?(r.b[14][0]++,r.s[37]++,this.addSideMenuToDOM()):r.b[14][1]++,r.s[38]++,this.requests.needDataForScale={name:"",value:"true"},r.s[39]++,this.requests.needDataForStartPosition={name:"",value:"true"},r.s[40]++,this.checkIsStepRequired()?(r.b[15][0]++,r.s[41]++,this.requests.needStepWidth={name:"",value:"true"}):r.b[15][1]++,r.s[42]++,this.updateView({vertical:this.basicSettings.vertical,double:this.basicSettings.double,sideMenu:this.basicSettings.sideMenu,handlesValues:this.basicSettings.handlesValues,valueScale:this.basicSettings.valueScale,integer:this.basicSettings.integer})}turnOnMenuToggles(e){r.f[6]++,r.s[43]++,e.vertical?(r.b[16][0]++,r.s[44]++,this.sideMenu.sideMenuElements.planeToggle.checked=!0):r.b[16][1]++,r.s[45]++,e.double?(r.b[17][0]++,r.s[46]++,this.sideMenu.sideMenuElements.toToggle.checked=!0):r.b[17][1]++,r.s[47]++,e.handlesValues?(r.b[18][0]++,r.s[48]++,this.sideMenu.sideMenuElements.handleValuesToggle.checked=!0):r.b[18][1]++,r.s[49]++,e.valueScale?(r.b[19][0]++,r.s[50]++,this.sideMenu.sideMenuElements.valueScaleToggle.checked=!0):r.b[19][1]++,r.s[51]++,e.integer?(r.b[20][0]++,r.s[52]++,this.sideMenu.sideMenuElements.integerToggle.checked=!0):r.b[20][1]++}updateView(e){r.f[7]++,r.s[53]++,e.vertical?(r.b[21][0]++,r.s[54]++,this.slider.changePlane({isVertical:e.vertical,isStep:this.checkIsStepRequired(),requests:this.requests}),r.s[55]++,this.handles.changePlane(e.vertical),r.s[56]++,this.valuesScale.changePlane(e.vertical)):r.b[21][1]++,r.s[57]++,e.double?r.b[22][1]++:(r.b[22][0]++,r.s[58]++,this.handles.changeHandlesDisplay({isDouble:this.basicSettings.double,positions:this.movement.positions,sliderWidth:this.slider.slider.offsetWidth}),r.s[59]++,this.interval.hideSelectedInterval({isDouble:this.basicSettings.double,handleWidth:this.handles.fromHandle.offsetWidth}),r.s[60]++,this.sideMenu.changeToValuesDisplay(this.basicSettings.double)),r.s[61]++,e.valueScale?r.b[23][1]++:(r.b[23][0]++,r.s[62]++,this.valuesScale.changeValueScaleDisplay(this.basicSettings.valueScale)),r.s[63]++,e.handlesValues?r.b[24][1]++:(r.b[24][0]++,r.s[64]++,this.handles.hideHandlesValues(this.basicSettings.handlesValues)),r.s[65]++,e.sideMenu?(r.b[25][0]++,r.s[66]++,this.turnOnMenuToggles(e)):r.b[25][1]++}refreshValues(e){r.f[8]++;const A=(r.s[67]++,r.b[26][0]++,"min"!==e.target&&(r.b[26][1]++,"max"!==e.target)),n=(r.s[68]++,{positions:this.movement.positions,isDouble:this.basicSettings.double,sliderWidth:this.slider.slider.offsetWidth}),t=(r.s[69]++,A?(r.b[27][0]++,this.handles.refreshValues(e,n)):(r.b[27][1]++,!0)),l=(r.s[70]++,r.b[28][0]++,t&&(r.b[28][1]++,this.basicSettings.sideMenu));r.s[71]++,l?(r.b[29][0]++,r.s[72]++,this.sideMenu.refreshValues(e)):r.b[29][1]++}bindEventListeners(){r.f[9]++,r.s[73]++,Object.values(this.valuesScale).forEach((e=>{r.f[10]++,r.s[74]++,e.addEventListener("click",this.handleScaleValueClick)})),r.s[75]++,this.sideMenu.sideMenuElements.toToggle.addEventListener("change",this.handleToToggleChange),r.s[76]++,this.sideMenu.sideMenuElements.planeToggle.addEventListener("change",this.handlePlaneToggleChange),r.s[77]++,this.sideMenu.sideMenuElements.valueScaleToggle.addEventListener("change",this.handleValueScaleToggleChange),r.s[78]++,this.sideMenu.sideMenuElements.handleValuesToggle.addEventListener("change",this.handleHandleValuesChange),r.s[79]++,this.sideMenu.sideMenuElements.integerToggle.addEventListener("change",this.handleIntegerToggleChange),r.s[80]++,[this.sideMenu.sideMenuElements.fromInput,this.sideMenu.sideMenuElements.toInput].forEach((e=>{r.f[11]++,r.s[81]++,e.addEventListener("change",this.handleValueInputChange)})),r.s[82]++,[this.sideMenu.sideMenuElements.minimumInput,this.sideMenu.sideMenuElements.maximumInput].forEach((e=>{r.f[12]++,r.s[83]++,e.addEventListener("change",this.handleRangeInputChange)})),r.s[84]++,this.sideMenu.sideMenuElements.stepInput.addEventListener("change",this.handleStepInputChange),r.s[85]++,[this.handles.fromHandle,this.handles.toHandle].forEach((e=>{r.f[13]++,r.s[86]++,e.addEventListener("mousedown",this.handleHandleMouseDown)})),r.s[87]++,this.slider.slider.addEventListener("mousedown",this.handleSliderMouseDown),r.s[88]++,window.addEventListener("resize",this.handleWindowResize)}handleHandleMouseDown(e){r.f[14]++;const A=(r.s[89]++,e.target);r.s[90]++,this.movement.handleListener({eventInfo:{target:A,x:e.clientX,y:e.clientY}})}handleScaleValueClick(e){r.f[15]++;const A=(r.s[91]++,e.target);r.s[92]++,this.requests.needApplyValueFromScale={name:"",value:A.innerText}}handleToToggleChange(e){r.f[16]++;const A=(r.s[93]++,e.target);r.s[94]++,this.basicSettings.double=A.checked,r.s[95]++,this.handles.changeHandlesDisplay({isDouble:this.basicSettings.double,positions:this.movement.positions,sliderWidth:this.slider.slider.offsetWidth}),r.s[96]++,this.interval.hideSelectedInterval({isDouble:this.basicSettings.double,handleWidth:this.handles.fromHandle.offsetWidth}),r.s[97]++,this.sideMenu.changeToValuesDisplay(this.basicSettings.double)}handlePlaneToggleChange(e){r.f[17]++;const A=(r.s[98]++,e.target);r.s[99]++,this.basicSettings.vertical=A.checked,r.s[100]++,this.slider.changePlane({isVertical:this.basicSettings.vertical,isStep:this.checkIsStepRequired(),requests:this.requests}),r.s[101]++,this.handles.changePlane(this.basicSettings.vertical),r.s[102]++,this.valuesScale.changePlane(this.basicSettings.vertical)}handleValueScaleToggleChange(e){r.f[18]++;const A=(r.s[103]++,e.target);r.s[104]++,this.basicSettings.valueScale=A.checked,r.s[105]++,this.valuesScale.changeValueScaleDisplay(this.basicSettings.valueScale)}handleHandleValuesChange(e){r.f[19]++;const A=(r.s[106]++,e.target);r.s[107]++,this.basicSettings.handlesValues=A.checked,r.s[108]++,this.handles.hideHandlesValues(this.basicSettings.handlesValues)}handleValueInputChange(e){r.f[20]++;const A=(r.s[109]++,e.target),n=(r.s[110]++,A===this.sideMenu.sideMenuElements.fromInput),t=(r.s[111]++,n?(r.b[30][0]++,"from"):(r.b[30][1]++,"to"));r.s[112]++,this.requests.needApplyNewValue={name:t,value:A.value}}handleStepInputChange(e){r.f[21]++;const A=(r.s[113]++,e.target);r.s[114]++,this.basicSettings.step=Number(A.value),r.s[115]++,"0"===A.value?(r.b[31][0]++,r.s[116]++,this.sideMenu.sideMenuElements.stepInput.value="",r.s[117]++,this.basicSettings.step=!1):(r.b[31][1]++,r.s[118]++,this.requests.needStepWidth={name:"",value:"true"})}handleRangeInputChange(e){r.f[22]++;const A=(r.s[119]++,e.target),n=(r.s[120]++,A===this.sideMenu.sideMenuElements.minimumInput),t=(r.s[121]++,n?(r.b[32][0]++,"min"):(r.b[32][1]++,"max"));r.s[122]++,this.requests.needChangeSliderValuesRange={name:t,value:A.value}}handleIntegerToggleChange(e){r.f[23]++;const A=(r.s[123]++,e.target);r.s[124]++,this.basicSettings.integer=A.checked,r.s[125]++,this.requests.needDataForStartPosition={name:"",value:"true"}}handleSliderMouseDown(e){r.f[24]++;const A=(r.s[126]++,r.b[33][0]++,e.target!==this.interval.interval&&(r.b[33][1]++,e.target!==this.slider.slider)),n=(r.s[127]++,e.clientX-this.slider.slider.getBoundingClientRect().x-this.handles.fromHandle.offsetWidth/2),t=(r.s[128]++,this.slider.slider.offsetWidth-(e.clientY-this.slider.slider.getBoundingClientRect().y+this.handles.fromHandle.offsetWidth/2));if(r.s[129]++,A)return r.b[34][0]++,void r.s[130]++;r.b[34][1]++;const l=(r.s[131]++,this.basicSettings.vertical?(r.b[35][0]++,t):(r.b[35][1]++,n)),i=(r.s[132]++,this.handles.defineHandleToMove({targetPosition:l,positions:this.movement.positions,isDouble:this.basicSettings.double}));r.s[133]++,this.movement.dataForMovement.target=i;const s=(r.s[134]++,this.movement.fixImpossiblePosition(this.slider.slider.offsetWidth-i.offsetWidth,l));r.s[135]++,this.handles.acceptNewPosition({target:i,value:s,positions:this.movement.positions}),r.s[136]++,this.movement.fixIntervalPosition()}handleWindowResize(){r.f[25]++,r.s[137]++,this.requests.needDataForScale={name:"",value:"true"},r.s[138]++,this.requests.needDataForStartPosition={name:"",value:"true"},r.s[139]++,this.checkIsStepRequired()?(r.b[36][0]++,r.s[140]++,this.requests.needStepWidth={name:"",value:"true"}):r.b[36][1]++}};r.s[141]++,I=C([u.default],I),r.s[142]++,A.View=I},"./src/plugin/common/defaultSettings.ts":(e,A)=>{"use strict";var n,t,l,i,s,o,a=(n="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\common\\defaultSettings.ts",t="fb93a790a6fd8feb4fcda627846e91361fe8a754",l=new(0,function(){}.constructor)("return this")(),s={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\common\\defaultSettings.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:0},end:{line:3,column:30}},2:{start:{line:4,column:21},end:{line:16,column:1}},3:{start:{line:17,column:0},end:{line:17,column:36}}},fnMap:{},branchMap:{},s:{0:0,1:0,2:0,3:0},f:{},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\common\\defaultSettings.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\common\\defaultSettings.ts"],names:[],mappings:";;;AAEA,MAAM,YAAY,GAAkB;IAClC,QAAQ,EAAE,IAAI;IACd,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,KAAK;IACV,MAAM,EAAE,KAAK;IACb,aAAa,EAAE,KAAK;IACpB,QAAQ,EAAE,KAAK;IACf,IAAI,EAAE,KAAK;IACX,UAAU,EAAE,IAAI;IAChB,IAAI,EAAE,GAAG;IACT,EAAE,EAAE,KAAK;IACT,OAAO,EAAE,IAAI;CACd,CAAC;AAEO,oCAAY",sourcesContent:["import { SliderOptions } from '../types';\n\nconst gobyDefaults: SliderOptions = {\n  sideMenu: true,\n  min: '0',\n  max: '100',\n  double: false,\n  handlesValues: false,\n  vertical: false,\n  step: false,\n  valueScale: true,\n  from: '0',\n  to: '100',\n  integer: true,\n};\n\nexport { gobyDefaults };\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(o=l[i="__coverage__"]||(l[i]={}))[n]&&o[n].hash===t?o[n]:(s.hash=t,o[n]=s));a.s[0]++,Object.defineProperty(A,"__esModule",{value:!0}),a.s[1]++,A.gobyDefaults=void 0;const r=(a.s[2]++,{sideMenu:!0,min:"0",max:"100",double:!1,handlesValues:!1,vertical:!1,step:!1,valueScale:!0,from:"0",to:"100",integer:!0});a.s[3]++,A.gobyDefaults=r},"./src/plugin/slider.ts":(e,A,n)=>{"use strict";var t,l,i,s,o,a,r=n("./node_modules/jquery/dist/jquery.js"),C=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\slider.ts",l="b2b8088a5f796f3e74e73339579a5255327c72c6",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\slider.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:16},end:{line:3,column:40}},2:{start:{line:4,column:15},end:{line:4,column:37}},3:{start:{line:5,column:20},end:{line:5,column:52}},4:{start:{line:6,column:26},end:{line:6,column:61}},5:{start:{line:9,column:8},end:{line:9,column:31}},6:{start:{line:10,column:8},end:{line:10,column:77}},7:{start:{line:11,column:8},end:{line:11,column:54}},8:{start:{line:14,column:22},end:{line:14,column:48}},9:{start:{line:15,column:21},end:{line:15,column:54}},10:{start:{line:16,column:26},end:{line:16,column:64}},11:{start:{line:17,column:8},end:{line:17,column:31}},12:{start:{line:18,column:8},end:{line:18,column:35}},13:{start:{line:19,column:8},end:{line:19,column:34}},14:{start:{line:22,column:0},end:{line:26,column:2}},15:{start:{line:23,column:4},end:{line:25,column:7}},16:{start:{line:24,column:8},end:{line:24,column:76}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:8,column:4},end:{line:8,column:5}},loc:{start:{line:8,column:34},end:{line:12,column:5}},line:8},1:{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:40},end:{line:20,column:5}},line:13},2:{name:"gobySlider",decl:{start:{line:22,column:27},end:{line:22,column:37}},loc:{start:{line:22,column:54},end:{line:26,column:1}},line:22},3:{name:"(anonymous_3)",decl:{start:{line:23,column:21},end:{line:23,column:22}},loc:{start:{line:23,column:27},end:{line:25,column:5}},line:23}},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0},f:{0:0,1:0,2:0,3:0},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\slider.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\slider.ts"],names:[],mappings:";;AAAA,yCAAsC;AACtC,sCAAmC;AACnC,qDAAkD;AAMlD,8DAAwD;AAExD,MAAM,MAAM;IAKV,YAAY,OAAoB,EAAE,OAAsB;QACtD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC,EAAE,EAAE,8BAAY,EAAE,OAAO,CAAC,CAAC;QAEnD,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAChD,CAAC;IAEO,MAAM,CAAC,UAAU,CAAC,OAAoB,EAAE,OAAsB;QACpE,MAAM,KAAK,GAAU,IAAI,aAAK,CAAC,OAAO,CAAC,CAAC;QACxC,MAAM,IAAI,GAAS,IAAI,WAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC9C,MAAM,SAAS,GAAc,IAAI,qBAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAExD,SAAS,CAAC,UAAU,EAAE,CAAC;QACvB,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;CACF;AAED,CAAC,CAAC,EAAE,CAAC,UAAU,GAAG,SAAS,UAAU,CAAC,cAA6B;IACjE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;QACpB,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,mBAAmB,EAAE,IAAI,MAAM,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC,CAAC;IACtE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC",sourcesContent:["import { Model } from './Model/Model';\nimport { View } from './View/View';\nimport { Presenter } from './Presenter/Presenter';\nimport {\n  PluginInfo,\n  SliderOptions,\n} from './types';\nimport { IPlugin } from './interfaces';\nimport { gobyDefaults } from './common/defaultSettings';\n\nclass Plugin implements IPlugin {\n  readonly element: HTMLElement;\n\n  readonly options: SliderOptions;\n\n  constructor(element: HTMLElement, options: SliderOptions) {\n    this.element = element;\n    this.options = $.extend({}, gobyDefaults, options);\n\n    Plugin.initialize(this.element, this.options);\n  }\n\n  private static initialize(element: HTMLElement, options: SliderOptions): void {\n    const model: Model = new Model(options);\n    const view: View = new View(options, element);\n    const presenter: Presenter = new Presenter(view, model);\n\n    presenter.initialize();\n    view.prepareSliderForUse();\n    view.bindEventListeners();\n  }\n}\n\n$.fn.gobySlider = function gobySlider(sliderSettings: SliderOptions): PluginInfo {\n  return this.each(() => {\n    $.data(this, 'plugin_gobySlider', new Plugin(this, sliderSettings));\n  });\n};\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[s="__coverage__"]||(i[s]={}))[t]&&a[t].hash===l?a[t]:(o.hash=l,a[t]=o));C.s[0]++,Object.defineProperty(A,"__esModule",{value:!0});const u=(C.s[1]++,n("./src/plugin/Model/Model.ts")),c=(C.s[2]++,n("./src/plugin/View/View.ts")),m=(C.s[3]++,n("./src/plugin/Presenter/Presenter.ts")),d=(C.s[4]++,n("./src/plugin/common/defaultSettings.ts"));class p{constructor(e,A){C.f[0]++,C.s[5]++,this.element=e,C.s[6]++,this.options=r.extend({},d.gobyDefaults,A),C.s[7]++,p.initialize(this.element,this.options)}static initialize(e,A){C.f[1]++;const n=(C.s[8]++,new u.Model(A)),t=(C.s[9]++,new c.View(A,e)),l=(C.s[10]++,new m.Presenter(t,n));C.s[11]++,l.initialize(),C.s[12]++,t.prepareSliderForUse(),C.s[13]++,t.bindEventListeners()}}C.s[14]++,r.fn.gobySlider=function(e){return C.f[2]++,C.s[15]++,this.each((()=>{C.f[3]++,C.s[16]++,r.data(this,"plugin_gobySlider",new p(this,e))}))}},"./node_modules/jquery/dist/jquery.js":function(e,A){var n;!function(A,n){"use strict";"object"==typeof e.exports?e.exports=A.document?n(A,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(A)}("undefined"!=typeof window?window:this,(function(t,l){"use strict";var i=[],s=Object.getPrototypeOf,o=i.slice,a=i.flat?function(e){return i.flat.call(e)}:function(e){return i.concat.apply([],e)},r=i.push,C=i.indexOf,u={},c=u.toString,m=u.hasOwnProperty,d=m.toString,p=d.call(Object),h={},f=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},I=function(e){return null!=e&&e===e.window},E=t.document,g={type:!0,src:!0,nonce:!0,noModule:!0};function v(e,A,n){var t,l,i=(n=n||E).createElement("script");if(i.text=e,A)for(t in g)(l=A[t]||A.getAttribute&&A.getAttribute(t))&&i.setAttribute(t,l);n.head.appendChild(i).parentNode.removeChild(i)}function b(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?u[c.call(e)]||"object":typeof e}var M="3.6.0",y=function(e,A){return new y.fn.init(e,A)};function B(e){var A=!!e&&"length"in e&&e.length,n=b(e);return!f(e)&&!I(e)&&("array"===n||0===A||"number"==typeof A&&A>0&&A-1 in e)}y.fn=y.prototype={jquery:M,constructor:y,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var A=y.merge(this.constructor(),e);return A.prevObject=this,A},each:function(e){return y.each(this,e)},map:function(e){return this.pushStack(y.map(this,(function(A,n){return e.call(A,n,A)})))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(y.grep(this,(function(e,A){return(A+1)%2})))},odd:function(){return this.pushStack(y.grep(this,(function(e,A){return A%2})))},eq:function(e){var A=this.length,n=+e+(e<0?A:0);return this.pushStack(n>=0&&n<A?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:r,sort:i.sort,splice:i.splice},y.extend=y.fn.extend=function(){var e,A,n,t,l,i,s=arguments[0]||{},o=1,a=arguments.length,r=!1;for("boolean"==typeof s&&(r=s,s=arguments[o]||{},o++),"object"==typeof s||f(s)||(s={}),o===a&&(s=this,o--);o<a;o++)if(null!=(e=arguments[o]))for(A in e)t=e[A],"__proto__"!==A&&s!==t&&(r&&t&&(y.isPlainObject(t)||(l=Array.isArray(t)))?(n=s[A],i=l&&!Array.isArray(n)?[]:l||y.isPlainObject(n)?n:{},l=!1,s[A]=y.extend(r,i,t)):void 0!==t&&(s[A]=t));return s},y.extend({expando:"jQuery"+(M+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var A,n;return!(!e||"[object Object]"!==c.call(e))&&(!(A=s(e))||"function"==typeof(n=m.call(A,"constructor")&&A.constructor)&&d.call(n)===p)},isEmptyObject:function(e){var A;for(A in e)return!1;return!0},globalEval:function(e,A,n){v(e,{nonce:A&&A.nonce},n)},each:function(e,A){var n,t=0;if(B(e))for(n=e.length;t<n&&!1!==A.call(e[t],t,e[t]);t++);else for(t in e)if(!1===A.call(e[t],t,e[t]))break;return e},makeArray:function(e,A){var n=A||[];return null!=e&&(B(Object(e))?y.merge(n,"string"==typeof e?[e]:e):r.call(n,e)),n},inArray:function(e,A,n){return null==A?-1:C.call(A,e,n)},merge:function(e,A){for(var n=+A.length,t=0,l=e.length;t<n;t++)e[l++]=A[t];return e.length=l,e},grep:function(e,A,n){for(var t=[],l=0,i=e.length,s=!n;l<i;l++)!A(e[l],l)!==s&&t.push(e[l]);return t},map:function(e,A,n){var t,l,i=0,s=[];if(B(e))for(t=e.length;i<t;i++)null!=(l=A(e[i],i,n))&&s.push(l);else for(i in e)null!=(l=A(e[i],i,n))&&s.push(l);return a(s)},guid:1,support:h}),"function"==typeof Symbol&&(y.fn[Symbol.iterator]=i[Symbol.iterator]),y.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,A){u["[object "+A+"]"]=A.toLowerCase()}));var S=function(e){var A,n,t,l,i,s,o,a,r,C,u,c,m,d,p,h,f,I,E,g="sizzle"+1*new Date,v=e.document,b=0,M=0,y=ae(),B=ae(),S=ae(),Q=ae(),G=function(e,A){return e===A&&(u=!0),0},x={}.hasOwnProperty,W=[],D=W.pop,O=W.push,w=W.push,T=W.slice,K=function(e,A){for(var n=0,t=e.length;n<t;n++)if(e[n]===A)return n;return-1},k="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",_="[\\x20\\t\\r\\n\\f]",Y="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",V="\\[[\\x20\\t\\r\\n\\f]*("+Y+")(?:"+_+"*([*^$|!~]?=)"+_+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+Y+"))|)"+_+"*\\]",P=":("+Y+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+V+")*)|.*)\\)|)",H=new RegExp(_+"+","g"),N=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),F=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),U=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),L=new RegExp(_+"|>"),j=new RegExp(P),q=new RegExp("^"+Y+"$"),R={ID:new RegExp("^#("+Y+")"),CLASS:new RegExp("^\\.("+Y+")"),TAG:new RegExp("^("+Y+"|[*])"),ATTR:new RegExp("^"+V),PSEUDO:new RegExp("^"+P),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+k+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},z=/HTML$/i,$=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,Ae=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),ne=function(e,A){var n="0x"+e.slice(1)-65536;return A||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,le=function(e,A){return A?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){c()},se=ge((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{w.apply(W=T.call(v.childNodes),v.childNodes),W[v.childNodes.length].nodeType}catch(e){w={apply:W.length?function(e,A){O.apply(e,T.call(A))}:function(e,A){for(var n=e.length,t=0;e[n++]=A[t++];);e.length=n-1}}}function oe(e,A,t,l){var i,o,r,C,u,d,f,I=A&&A.ownerDocument,v=A?A.nodeType:9;if(t=t||[],"string"!=typeof e||!e||1!==v&&9!==v&&11!==v)return t;if(!l&&(c(A),A=A||m,p)){if(11!==v&&(u=J.exec(e)))if(i=u[1]){if(9===v){if(!(r=A.getElementById(i)))return t;if(r.id===i)return t.push(r),t}else if(I&&(r=I.getElementById(i))&&E(A,r)&&r.id===i)return t.push(r),t}else{if(u[2])return w.apply(t,A.getElementsByTagName(e)),t;if((i=u[3])&&n.getElementsByClassName&&A.getElementsByClassName)return w.apply(t,A.getElementsByClassName(i)),t}if(n.qsa&&!Q[e+" "]&&(!h||!h.test(e))&&(1!==v||"object"!==A.nodeName.toLowerCase())){if(f=e,I=A,1===v&&(L.test(e)||U.test(e))){for((I=ee.test(e)&&fe(A.parentNode)||A)===A&&n.scope||((C=A.getAttribute("id"))?C=C.replace(te,le):A.setAttribute("id",C=g)),o=(d=s(e)).length;o--;)d[o]=(C?"#"+C:":scope")+" "+Ee(d[o]);f=d.join(",")}try{return w.apply(t,I.querySelectorAll(f)),t}catch(A){Q(e,!0)}finally{C===g&&A.removeAttribute("id")}}}return a(e.replace(N,"$1"),A,t,l)}function ae(){var e=[];return function A(n,l){return e.push(n+" ")>t.cacheLength&&delete A[e.shift()],A[n+" "]=l}}function re(e){return e[g]=!0,e}function Ce(e){var A=m.createElement("fieldset");try{return!!e(A)}catch(e){return!1}finally{A.parentNode&&A.parentNode.removeChild(A),A=null}}function ue(e,A){for(var n=e.split("|"),l=n.length;l--;)t.attrHandle[n[l]]=A}function ce(e,A){var n=A&&e,t=n&&1===e.nodeType&&1===A.nodeType&&e.sourceIndex-A.sourceIndex;if(t)return t;if(n)for(;n=n.nextSibling;)if(n===A)return-1;return e?1:-1}function me(e){return function(A){return"input"===A.nodeName.toLowerCase()&&A.type===e}}function de(e){return function(A){var n=A.nodeName.toLowerCase();return("input"===n||"button"===n)&&A.type===e}}function pe(e){return function(A){return"form"in A?A.parentNode&&!1===A.disabled?"label"in A?"label"in A.parentNode?A.parentNode.disabled===e:A.disabled===e:A.isDisabled===e||A.isDisabled!==!e&&se(A)===e:A.disabled===e:"label"in A&&A.disabled===e}}function he(e){return re((function(A){return A=+A,re((function(n,t){for(var l,i=e([],n.length,A),s=i.length;s--;)n[l=i[s]]&&(n[l]=!(t[l]=n[l]))}))}))}function fe(e){return e&&void 0!==e.getElementsByTagName&&e}for(A in n=oe.support={},i=oe.isXML=function(e){var A=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!z.test(A||n&&n.nodeName||"HTML")},c=oe.setDocument=function(e){var A,l,s=e?e.ownerDocument||e:v;return s!=m&&9===s.nodeType&&s.documentElement?(d=(m=s).documentElement,p=!i(m),v!=m&&(l=m.defaultView)&&l.top!==l&&(l.addEventListener?l.addEventListener("unload",ie,!1):l.attachEvent&&l.attachEvent("onunload",ie)),n.scope=Ce((function(e){return d.appendChild(e).appendChild(m.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=Ce((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=Ce((function(e){return e.appendChild(m.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=Z.test(m.getElementsByClassName),n.getById=Ce((function(e){return d.appendChild(e).id=g,!m.getElementsByName||!m.getElementsByName(g).length})),n.getById?(t.filter.ID=function(e){var A=e.replace(Ae,ne);return function(e){return e.getAttribute("id")===A}},t.find.ID=function(e,A){if(void 0!==A.getElementById&&p){var n=A.getElementById(e);return n?[n]:[]}}):(t.filter.ID=function(e){var A=e.replace(Ae,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===A}},t.find.ID=function(e,A){if(void 0!==A.getElementById&&p){var n,t,l,i=A.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(l=A.getElementsByName(e),t=0;i=l[t++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),t.find.TAG=n.getElementsByTagName?function(e,A){return void 0!==A.getElementsByTagName?A.getElementsByTagName(e):n.qsa?A.querySelectorAll(e):void 0}:function(e,A){var n,t=[],l=0,i=A.getElementsByTagName(e);if("*"===e){for(;n=i[l++];)1===n.nodeType&&t.push(n);return t}return i},t.find.CLASS=n.getElementsByClassName&&function(e,A){if(void 0!==A.getElementsByClassName&&p)return A.getElementsByClassName(e)},f=[],h=[],(n.qsa=Z.test(m.querySelectorAll))&&(Ce((function(e){var A;d.appendChild(e).innerHTML="<a id='"+g+"'></a><select id='"+g+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&h.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll("[selected]").length||h.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+k+")"),e.querySelectorAll("[id~="+g+"-]").length||h.push("~="),(A=m.createElement("input")).setAttribute("name",""),e.appendChild(A),e.querySelectorAll("[name='']").length||h.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll(":checked").length||h.push(":checked"),e.querySelectorAll("a#"+g+"+*").length||h.push(".#.+[+~]"),e.querySelectorAll("\\\f"),h.push("[\\r\\n\\f]")})),Ce((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var A=m.createElement("input");A.setAttribute("type","hidden"),e.appendChild(A).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&h.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&h.push(":enabled",":disabled"),d.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&h.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),h.push(",.*:")}))),(n.matchesSelector=Z.test(I=d.matches||d.webkitMatchesSelector||d.mozMatchesSelector||d.oMatchesSelector||d.msMatchesSelector))&&Ce((function(e){n.disconnectedMatch=I.call(e,"*"),I.call(e,"[s!='']:x"),f.push("!=",P)})),h=h.length&&new RegExp(h.join("|")),f=f.length&&new RegExp(f.join("|")),A=Z.test(d.compareDocumentPosition),E=A||Z.test(d.contains)?function(e,A){var n=9===e.nodeType?e.documentElement:e,t=A&&A.parentNode;return e===t||!(!t||1!==t.nodeType||!(n.contains?n.contains(t):e.compareDocumentPosition&&16&e.compareDocumentPosition(t)))}:function(e,A){if(A)for(;A=A.parentNode;)if(A===e)return!0;return!1},G=A?function(e,A){if(e===A)return u=!0,0;var t=!e.compareDocumentPosition-!A.compareDocumentPosition;return t||(1&(t=(e.ownerDocument||e)==(A.ownerDocument||A)?e.compareDocumentPosition(A):1)||!n.sortDetached&&A.compareDocumentPosition(e)===t?e==m||e.ownerDocument==v&&E(v,e)?-1:A==m||A.ownerDocument==v&&E(v,A)?1:C?K(C,e)-K(C,A):0:4&t?-1:1)}:function(e,A){if(e===A)return u=!0,0;var n,t=0,l=e.parentNode,i=A.parentNode,s=[e],o=[A];if(!l||!i)return e==m?-1:A==m?1:l?-1:i?1:C?K(C,e)-K(C,A):0;if(l===i)return ce(e,A);for(n=e;n=n.parentNode;)s.unshift(n);for(n=A;n=n.parentNode;)o.unshift(n);for(;s[t]===o[t];)t++;return t?ce(s[t],o[t]):s[t]==v?-1:o[t]==v?1:0},m):m},oe.matches=function(e,A){return oe(e,null,null,A)},oe.matchesSelector=function(e,A){if(c(e),n.matchesSelector&&p&&!Q[A+" "]&&(!f||!f.test(A))&&(!h||!h.test(A)))try{var t=I.call(e,A);if(t||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return t}catch(e){Q(A,!0)}return oe(A,m,null,[e]).length>0},oe.contains=function(e,A){return(e.ownerDocument||e)!=m&&c(e),E(e,A)},oe.attr=function(e,A){(e.ownerDocument||e)!=m&&c(e);var l=t.attrHandle[A.toLowerCase()],i=l&&x.call(t.attrHandle,A.toLowerCase())?l(e,A,!p):void 0;return void 0!==i?i:n.attributes||!p?e.getAttribute(A):(i=e.getAttributeNode(A))&&i.specified?i.value:null},oe.escape=function(e){return(e+"").replace(te,le)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var A,t=[],l=0,i=0;if(u=!n.detectDuplicates,C=!n.sortStable&&e.slice(0),e.sort(G),u){for(;A=e[i++];)A===e[i]&&(l=t.push(i));for(;l--;)e.splice(t[l],1)}return C=null,e},l=oe.getText=function(e){var A,n="",t=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=l(e)}else if(3===i||4===i)return e.nodeValue}else for(;A=e[t++];)n+=l(A);return n},t=oe.selectors={cacheLength:50,createPseudo:re,match:R,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Ae,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(Ae,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var A,n=!e[6]&&e[2];return R.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&j.test(n)&&(A=s(n,!0))&&(A=n.indexOf(")",n.length-A)-n.length)&&(e[0]=e[0].slice(0,A),e[2]=n.slice(0,A)),e.slice(0,3))}},filter:{TAG:function(e){var A=e.replace(Ae,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===A}},CLASS:function(e){var A=y[e+" "];return A||(A=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+e+"("+_+"|$)"))&&y(e,(function(e){return A.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,A,n){return function(t){var l=oe.attr(t,e);return null==l?"!="===A:!A||(l+="","="===A?l===n:"!="===A?l!==n:"^="===A?n&&0===l.indexOf(n):"*="===A?n&&l.indexOf(n)>-1:"$="===A?n&&l.slice(-n.length)===n:"~="===A?(" "+l.replace(H," ")+" ").indexOf(n)>-1:"|="===A&&(l===n||l.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,A,n,t,l){var i="nth"!==e.slice(0,3),s="last"!==e.slice(-4),o="of-type"===A;return 1===t&&0===l?function(e){return!!e.parentNode}:function(A,n,a){var r,C,u,c,m,d,p=i!==s?"nextSibling":"previousSibling",h=A.parentNode,f=o&&A.nodeName.toLowerCase(),I=!a&&!o,E=!1;if(h){if(i){for(;p;){for(c=A;c=c[p];)if(o?c.nodeName.toLowerCase()===f:1===c.nodeType)return!1;d=p="only"===e&&!d&&"nextSibling"}return!0}if(d=[s?h.firstChild:h.lastChild],s&&I){for(E=(m=(r=(C=(u=(c=h)[g]||(c[g]={}))[c.uniqueID]||(u[c.uniqueID]={}))[e]||[])[0]===b&&r[1])&&r[2],c=m&&h.childNodes[m];c=++m&&c&&c[p]||(E=m=0)||d.pop();)if(1===c.nodeType&&++E&&c===A){C[e]=[b,m,E];break}}else if(I&&(E=m=(r=(C=(u=(c=A)[g]||(c[g]={}))[c.uniqueID]||(u[c.uniqueID]={}))[e]||[])[0]===b&&r[1]),!1===E)for(;(c=++m&&c&&c[p]||(E=m=0)||d.pop())&&((o?c.nodeName.toLowerCase()!==f:1!==c.nodeType)||!++E||(I&&((C=(u=c[g]||(c[g]={}))[c.uniqueID]||(u[c.uniqueID]={}))[e]=[b,E]),c!==A)););return(E-=l)===t||E%t==0&&E/t>=0}}},PSEUDO:function(e,A){var n,l=t.pseudos[e]||t.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return l[g]?l(A):l.length>1?(n=[e,e,"",A],t.setFilters.hasOwnProperty(e.toLowerCase())?re((function(e,n){for(var t,i=l(e,A),s=i.length;s--;)e[t=K(e,i[s])]=!(n[t]=i[s])})):function(e){return l(e,0,n)}):l}},pseudos:{not:re((function(e){var A=[],n=[],t=o(e.replace(N,"$1"));return t[g]?re((function(e,A,n,l){for(var i,s=t(e,null,l,[]),o=e.length;o--;)(i=s[o])&&(e[o]=!(A[o]=i))})):function(e,l,i){return A[0]=e,t(A,null,i,n),A[0]=null,!n.pop()}})),has:re((function(e){return function(A){return oe(e,A).length>0}})),contains:re((function(e){return e=e.replace(Ae,ne),function(A){return(A.textContent||l(A)).indexOf(e)>-1}})),lang:re((function(e){return q.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(Ae,ne).toLowerCase(),function(A){var n;do{if(n=p?A.lang:A.getAttribute("xml:lang")||A.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((A=A.parentNode)&&1===A.nodeType);return!1}})),target:function(A){var n=e.location&&e.location.hash;return n&&n.slice(1)===A.id},root:function(e){return e===d},focus:function(e){return e===m.activeElement&&(!m.hasFocus||m.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:pe(!1),disabled:pe(!0),checked:function(e){var A=e.nodeName.toLowerCase();return"input"===A&&!!e.checked||"option"===A&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!t.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return $.test(e.nodeName)},button:function(e){var A=e.nodeName.toLowerCase();return"input"===A&&"button"===e.type||"button"===A},text:function(e){var A;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(A=e.getAttribute("type"))||"text"===A.toLowerCase())},first:he((function(){return[0]})),last:he((function(e,A){return[A-1]})),eq:he((function(e,A,n){return[n<0?n+A:n]})),even:he((function(e,A){for(var n=0;n<A;n+=2)e.push(n);return e})),odd:he((function(e,A){for(var n=1;n<A;n+=2)e.push(n);return e})),lt:he((function(e,A,n){for(var t=n<0?n+A:n>A?A:n;--t>=0;)e.push(t);return e})),gt:he((function(e,A,n){for(var t=n<0?n+A:n;++t<A;)e.push(t);return e}))}},t.pseudos.nth=t.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})t.pseudos[A]=me(A);for(A in{submit:!0,reset:!0})t.pseudos[A]=de(A);function Ie(){}function Ee(e){for(var A=0,n=e.length,t="";A<n;A++)t+=e[A].value;return t}function ge(e,A,n){var t=A.dir,l=A.next,i=l||t,s=n&&"parentNode"===i,o=M++;return A.first?function(A,n,l){for(;A=A[t];)if(1===A.nodeType||s)return e(A,n,l);return!1}:function(A,n,a){var r,C,u,c=[b,o];if(a){for(;A=A[t];)if((1===A.nodeType||s)&&e(A,n,a))return!0}else for(;A=A[t];)if(1===A.nodeType||s)if(C=(u=A[g]||(A[g]={}))[A.uniqueID]||(u[A.uniqueID]={}),l&&l===A.nodeName.toLowerCase())A=A[t]||A;else{if((r=C[i])&&r[0]===b&&r[1]===o)return c[2]=r[2];if(C[i]=c,c[2]=e(A,n,a))return!0}return!1}}function ve(e){return e.length>1?function(A,n,t){for(var l=e.length;l--;)if(!e[l](A,n,t))return!1;return!0}:e[0]}function be(e,A,n,t,l){for(var i,s=[],o=0,a=e.length,r=null!=A;o<a;o++)(i=e[o])&&(n&&!n(i,t,l)||(s.push(i),r&&A.push(o)));return s}function Me(e,A,n,t,l,i){return t&&!t[g]&&(t=Me(t)),l&&!l[g]&&(l=Me(l,i)),re((function(i,s,o,a){var r,C,u,c=[],m=[],d=s.length,p=i||function(e,A,n){for(var t=0,l=A.length;t<l;t++)oe(e,A[t],n);return n}(A||"*",o.nodeType?[o]:o,[]),h=!e||!i&&A?p:be(p,c,e,o,a),f=n?l||(i?e:d||t)?[]:s:h;if(n&&n(h,f,o,a),t)for(r=be(f,m),t(r,[],o,a),C=r.length;C--;)(u=r[C])&&(f[m[C]]=!(h[m[C]]=u));if(i){if(l||e){if(l){for(r=[],C=f.length;C--;)(u=f[C])&&r.push(h[C]=u);l(null,f=[],r,a)}for(C=f.length;C--;)(u=f[C])&&(r=l?K(i,u):c[C])>-1&&(i[r]=!(s[r]=u))}}else f=be(f===s?f.splice(d,f.length):f),l?l(null,s,f,a):w.apply(s,f)}))}function ye(e){for(var A,n,l,i=e.length,s=t.relative[e[0].type],o=s||t.relative[" "],a=s?1:0,C=ge((function(e){return e===A}),o,!0),u=ge((function(e){return K(A,e)>-1}),o,!0),c=[function(e,n,t){var l=!s&&(t||n!==r)||((A=n).nodeType?C(e,n,t):u(e,n,t));return A=null,l}];a<i;a++)if(n=t.relative[e[a].type])c=[ge(ve(c),n)];else{if((n=t.filter[e[a].type].apply(null,e[a].matches))[g]){for(l=++a;l<i&&!t.relative[e[l].type];l++);return Me(a>1&&ve(c),a>1&&Ee(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(N,"$1"),n,a<l&&ye(e.slice(a,l)),l<i&&ye(e=e.slice(l)),l<i&&Ee(e))}c.push(n)}return ve(c)}return Ie.prototype=t.filters=t.pseudos,t.setFilters=new Ie,s=oe.tokenize=function(e,A){var n,l,i,s,o,a,r,C=B[e+" "];if(C)return A?0:C.slice(0);for(o=e,a=[],r=t.preFilter;o;){for(s in n&&!(l=F.exec(o))||(l&&(o=o.slice(l[0].length)||o),a.push(i=[])),n=!1,(l=U.exec(o))&&(n=l.shift(),i.push({value:n,type:l[0].replace(N," ")}),o=o.slice(n.length)),t.filter)!(l=R[s].exec(o))||r[s]&&!(l=r[s](l))||(n=l.shift(),i.push({value:n,type:s,matches:l}),o=o.slice(n.length));if(!n)break}return A?o.length:o?oe.error(e):B(e,a).slice(0)},o=oe.compile=function(e,A){var n,l=[],i=[],o=S[e+" "];if(!o){for(A||(A=s(e)),n=A.length;n--;)(o=ye(A[n]))[g]?l.push(o):i.push(o);o=S(e,function(e,A){var n=A.length>0,l=e.length>0,i=function(i,s,o,a,C){var u,d,h,f=0,I="0",E=i&&[],g=[],v=r,M=i||l&&t.find.TAG("*",C),y=b+=null==v?1:Math.random()||.1,B=M.length;for(C&&(r=s==m||s||C);I!==B&&null!=(u=M[I]);I++){if(l&&u){for(d=0,s||u.ownerDocument==m||(c(u),o=!p);h=e[d++];)if(h(u,s||m,o)){a.push(u);break}C&&(b=y)}n&&((u=!h&&u)&&f--,i&&E.push(u))}if(f+=I,n&&I!==f){for(d=0;h=A[d++];)h(E,g,s,o);if(i){if(f>0)for(;I--;)E[I]||g[I]||(g[I]=D.call(a));g=be(g)}w.apply(a,g),C&&!i&&g.length>0&&f+A.length>1&&oe.uniqueSort(a)}return C&&(b=y,r=v),E};return n?re(i):i}(i,l)),o.selector=e}return o},a=oe.select=function(e,A,n,l){var i,a,r,C,u,c="function"==typeof e&&e,m=!l&&s(e=c.selector||e);if(n=n||[],1===m.length){if((a=m[0]=m[0].slice(0)).length>2&&"ID"===(r=a[0]).type&&9===A.nodeType&&p&&t.relative[a[1].type]){if(!(A=(t.find.ID(r.matches[0].replace(Ae,ne),A)||[])[0]))return n;c&&(A=A.parentNode),e=e.slice(a.shift().value.length)}for(i=R.needsContext.test(e)?0:a.length;i--&&(r=a[i],!t.relative[C=r.type]);)if((u=t.find[C])&&(l=u(r.matches[0].replace(Ae,ne),ee.test(a[0].type)&&fe(A.parentNode)||A))){if(a.splice(i,1),!(e=l.length&&Ee(a)))return w.apply(n,l),n;break}}return(c||o(e,m))(l,A,!p,n,!A||ee.test(e)&&fe(A.parentNode)||A),n},n.sortStable=g.split("").sort(G).join("")===g,n.detectDuplicates=!!u,c(),n.sortDetached=Ce((function(e){return 1&e.compareDocumentPosition(m.createElement("fieldset"))})),Ce((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||ue("type|href|height|width",(function(e,A,n){if(!n)return e.getAttribute(A,"type"===A.toLowerCase()?1:2)})),n.attributes&&Ce((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||ue("value",(function(e,A,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),Ce((function(e){return null==e.getAttribute("disabled")}))||ue(k,(function(e,A,n){var t;if(!n)return!0===e[A]?A.toLowerCase():(t=e.getAttributeNode(A))&&t.specified?t.value:null})),oe}(t);y.find=S,y.expr=S.selectors,y.expr[":"]=y.expr.pseudos,y.uniqueSort=y.unique=S.uniqueSort,y.text=S.getText,y.isXMLDoc=S.isXML,y.contains=S.contains,y.escapeSelector=S.escape;var Q=function(e,A,n){for(var t=[],l=void 0!==n;(e=e[A])&&9!==e.nodeType;)if(1===e.nodeType){if(l&&y(e).is(n))break;t.push(e)}return t},G=function(e,A){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==A&&n.push(e);return n},x=y.expr.match.needsContext;function W(e,A){return e.nodeName&&e.nodeName.toLowerCase()===A.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function O(e,A,n){return f(A)?y.grep(e,(function(e,t){return!!A.call(e,t,e)!==n})):A.nodeType?y.grep(e,(function(e){return e===A!==n})):"string"!=typeof A?y.grep(e,(function(e){return C.call(A,e)>-1!==n})):y.filter(A,e,n)}y.filter=function(e,A,n){var t=A[0];return n&&(e=":not("+e+")"),1===A.length&&1===t.nodeType?y.find.matchesSelector(t,e)?[t]:[]:y.find.matches(e,y.grep(A,(function(e){return 1===e.nodeType})))},y.fn.extend({find:function(e){var A,n,t=this.length,l=this;if("string"!=typeof e)return this.pushStack(y(e).filter((function(){for(A=0;A<t;A++)if(y.contains(l[A],this))return!0})));for(n=this.pushStack([]),A=0;A<t;A++)y.find(e,l[A],n);return t>1?y.uniqueSort(n):n},filter:function(e){return this.pushStack(O(this,e||[],!1))},not:function(e){return this.pushStack(O(this,e||[],!0))},is:function(e){return!!O(this,"string"==typeof e&&x.test(e)?y(e):e||[],!1).length}});var w,T=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(y.fn.init=function(e,A,n){var t,l;if(!e)return this;if(n=n||w,"string"==typeof e){if(!(t="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:T.exec(e))||!t[1]&&A)return!A||A.jquery?(A||n).find(e):this.constructor(A).find(e);if(t[1]){if(A=A instanceof y?A[0]:A,y.merge(this,y.parseHTML(t[1],A&&A.nodeType?A.ownerDocument||A:E,!0)),D.test(t[1])&&y.isPlainObject(A))for(t in A)f(this[t])?this[t](A[t]):this.attr(t,A[t]);return this}return(l=E.getElementById(t[2]))&&(this[0]=l,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):f(e)?void 0!==n.ready?n.ready(e):e(y):y.makeArray(e,this)}).prototype=y.fn,w=y(E);var K=/^(?:parents|prev(?:Until|All))/,k={children:!0,contents:!0,next:!0,prev:!0};function _(e,A){for(;(e=e[A])&&1!==e.nodeType;);return e}y.fn.extend({has:function(e){var A=y(e,this),n=A.length;return this.filter((function(){for(var e=0;e<n;e++)if(y.contains(this,A[e]))return!0}))},closest:function(e,A){var n,t=0,l=this.length,i=[],s="string"!=typeof e&&y(e);if(!x.test(e))for(;t<l;t++)for(n=this[t];n&&n!==A;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&y.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?y.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?C.call(y(e),this[0]):C.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,A){return this.pushStack(y.uniqueSort(y.merge(this.get(),y(e,A))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),y.each({parent:function(e){var A=e.parentNode;return A&&11!==A.nodeType?A:null},parents:function(e){return Q(e,"parentNode")},parentsUntil:function(e,A,n){return Q(e,"parentNode",n)},next:function(e){return _(e,"nextSibling")},prev:function(e){return _(e,"previousSibling")},nextAll:function(e){return Q(e,"nextSibling")},prevAll:function(e){return Q(e,"previousSibling")},nextUntil:function(e,A,n){return Q(e,"nextSibling",n)},prevUntil:function(e,A,n){return Q(e,"previousSibling",n)},siblings:function(e){return G((e.parentNode||{}).firstChild,e)},children:function(e){return G(e.firstChild)},contents:function(e){return null!=e.contentDocument&&s(e.contentDocument)?e.contentDocument:(W(e,"template")&&(e=e.content||e),y.merge([],e.childNodes))}},(function(e,A){y.fn[e]=function(n,t){var l=y.map(this,A,n);return"Until"!==e.slice(-5)&&(t=n),t&&"string"==typeof t&&(l=y.filter(t,l)),this.length>1&&(k[e]||y.uniqueSort(l),K.test(e)&&l.reverse()),this.pushStack(l)}}));var Y=/[^\x20\t\r\n\f]+/g;function V(e){return e}function P(e){throw e}function H(e,A,n,t){var l;try{e&&f(l=e.promise)?l.call(e).done(A).fail(n):e&&f(l=e.then)?l.call(e,A,n):A.apply(void 0,[e].slice(t))}catch(e){n.apply(void 0,[e])}}y.Callbacks=function(e){e="string"==typeof e?function(e){var A={};return y.each(e.match(Y)||[],(function(e,n){A[n]=!0})),A}(e):y.extend({},e);var A,n,t,l,i=[],s=[],o=-1,a=function(){for(l=l||e.once,t=A=!0;s.length;o=-1)for(n=s.shift();++o<i.length;)!1===i[o].apply(n[0],n[1])&&e.stopOnFalse&&(o=i.length,n=!1);e.memory||(n=!1),A=!1,l&&(i=n?[]:"")},r={add:function(){return i&&(n&&!A&&(o=i.length-1,s.push(n)),function A(n){y.each(n,(function(n,t){f(t)?e.unique&&r.has(t)||i.push(t):t&&t.length&&"string"!==b(t)&&A(t)}))}(arguments),n&&!A&&a()),this},remove:function(){return y.each(arguments,(function(e,A){for(var n;(n=y.inArray(A,i,n))>-1;)i.splice(n,1),n<=o&&o--})),this},has:function(e){return e?y.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return l=s=[],i=n="",this},disabled:function(){return!i},lock:function(){return l=s=[],n||A||(i=n=""),this},locked:function(){return!!l},fireWith:function(e,n){return l||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),A||a()),this},fire:function(){return r.fireWith(this,arguments),this},fired:function(){return!!t}};return r},y.extend({Deferred:function(e){var A=[["notify","progress",y.Callbacks("memory"),y.Callbacks("memory"),2],["resolve","done",y.Callbacks("once memory"),y.Callbacks("once memory"),0,"resolved"],["reject","fail",y.Callbacks("once memory"),y.Callbacks("once memory"),1,"rejected"]],n="pending",l={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return l.then(null,e)},pipe:function(){var e=arguments;return y.Deferred((function(n){y.each(A,(function(A,t){var l=f(e[t[4]])&&e[t[4]];i[t[1]]((function(){var e=l&&l.apply(this,arguments);e&&f(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[t[0]+"With"](this,l?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,l){var i=0;function s(e,A,n,l){return function(){var o=this,a=arguments,r=function(){var t,r;if(!(e<i)){if((t=n.apply(o,a))===A.promise())throw new TypeError("Thenable self-resolution");r=t&&("object"==typeof t||"function"==typeof t)&&t.then,f(r)?l?r.call(t,s(i,A,V,l),s(i,A,P,l)):(i++,r.call(t,s(i,A,V,l),s(i,A,P,l),s(i,A,V,A.notifyWith))):(n!==V&&(o=void 0,a=[t]),(l||A.resolveWith)(o,a))}},C=l?r:function(){try{r()}catch(t){y.Deferred.exceptionHook&&y.Deferred.exceptionHook(t,C.stackTrace),e+1>=i&&(n!==P&&(o=void 0,a=[t]),A.rejectWith(o,a))}};e?C():(y.Deferred.getStackHook&&(C.stackTrace=y.Deferred.getStackHook()),t.setTimeout(C))}}return y.Deferred((function(t){A[0][3].add(s(0,t,f(l)?l:V,t.notifyWith)),A[1][3].add(s(0,t,f(e)?e:V)),A[2][3].add(s(0,t,f(n)?n:P))})).promise()},promise:function(e){return null!=e?y.extend(e,l):l}},i={};return y.each(A,(function(e,t){var s=t[2],o=t[5];l[t[1]]=s.add,o&&s.add((function(){n=o}),A[3-e][2].disable,A[3-e][3].disable,A[0][2].lock,A[0][3].lock),s.add(t[3].fire),i[t[0]]=function(){return i[t[0]+"With"](this===i?void 0:this,arguments),this},i[t[0]+"With"]=s.fireWith})),l.promise(i),e&&e.call(i,i),i},when:function(e){var A=arguments.length,n=A,t=Array(n),l=o.call(arguments),i=y.Deferred(),s=function(e){return function(n){t[e]=this,l[e]=arguments.length>1?o.call(arguments):n,--A||i.resolveWith(t,l)}};if(A<=1&&(H(e,i.done(s(n)).resolve,i.reject,!A),"pending"===i.state()||f(l[n]&&l[n].then)))return i.then();for(;n--;)H(l[n],s(n),i.reject);return i.promise()}});var N=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;y.Deferred.exceptionHook=function(e,A){t.console&&t.console.warn&&e&&N.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,A)},y.readyException=function(e){t.setTimeout((function(){throw e}))};var F=y.Deferred();function U(){E.removeEventListener("DOMContentLoaded",U),t.removeEventListener("load",U),y.ready()}y.fn.ready=function(e){return F.then(e).catch((function(e){y.readyException(e)})),this},y.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--y.readyWait:y.isReady)||(y.isReady=!0,!0!==e&&--y.readyWait>0||F.resolveWith(E,[y]))}}),y.ready.then=F.then,"complete"===E.readyState||"loading"!==E.readyState&&!E.documentElement.doScroll?t.setTimeout(y.ready):(E.addEventListener("DOMContentLoaded",U),t.addEventListener("load",U));var L=function(e,A,n,t,l,i,s){var o=0,a=e.length,r=null==n;if("object"===b(n))for(o in l=!0,n)L(e,A,o,n[o],!0,i,s);else if(void 0!==t&&(l=!0,f(t)||(s=!0),r&&(s?(A.call(e,t),A=null):(r=A,A=function(e,A,n){return r.call(y(e),n)})),A))for(;o<a;o++)A(e[o],n,s?t:t.call(e[o],o,A(e[o],n)));return l?e:r?A.call(e):a?A(e[0],n):i},j=/^-ms-/,q=/-([a-z])/g;function R(e,A){return A.toUpperCase()}function z(e){return e.replace(j,"ms-").replace(q,R)}var $=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function X(){this.expando=y.expando+X.uid++}X.uid=1,X.prototype={cache:function(e){var A=e[this.expando];return A||(A={},$(e)&&(e.nodeType?e[this.expando]=A:Object.defineProperty(e,this.expando,{value:A,configurable:!0}))),A},set:function(e,A,n){var t,l=this.cache(e);if("string"==typeof A)l[z(A)]=n;else for(t in A)l[z(t)]=A[t];return l},get:function(e,A){return void 0===A?this.cache(e):e[this.expando]&&e[this.expando][z(A)]},access:function(e,A,n){return void 0===A||A&&"string"==typeof A&&void 0===n?this.get(e,A):(this.set(e,A,n),void 0!==n?n:A)},remove:function(e,A){var n,t=e[this.expando];if(void 0!==t){if(void 0!==A){n=(A=Array.isArray(A)?A.map(z):(A=z(A))in t?[A]:A.match(Y)||[]).length;for(;n--;)delete t[A[n]]}(void 0===A||y.isEmptyObject(t))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var A=e[this.expando];return void 0!==A&&!y.isEmptyObject(A)}};var Z=new X,J=new X,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ae=/[A-Z]/g;function ne(e,A,n){var t;if(void 0===n&&1===e.nodeType)if(t="data-"+A.replace(Ae,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(t))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}J.set(e,A,n)}else n=void 0;return n}y.extend({hasData:function(e){return J.hasData(e)||Z.hasData(e)},data:function(e,A,n){return J.access(e,A,n)},removeData:function(e,A){J.remove(e,A)},_data:function(e,A,n){return Z.access(e,A,n)},_removeData:function(e,A){Z.remove(e,A)}}),y.fn.extend({data:function(e,A){var n,t,l,i=this[0],s=i&&i.attributes;if(void 0===e){if(this.length&&(l=J.get(i),1===i.nodeType&&!Z.get(i,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(t=s[n].name).indexOf("data-")&&(t=z(t.slice(5)),ne(i,t,l[t]));Z.set(i,"hasDataAttrs",!0)}return l}return"object"==typeof e?this.each((function(){J.set(this,e)})):L(this,(function(A){var n;if(i&&void 0===A)return void 0!==(n=J.get(i,e))||void 0!==(n=ne(i,e))?n:void 0;this.each((function(){J.set(this,e,A)}))}),null,A,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){J.remove(this,e)}))}}),y.extend({queue:function(e,A,n){var t;if(e)return A=(A||"fx")+"queue",t=Z.get(e,A),n&&(!t||Array.isArray(n)?t=Z.access(e,A,y.makeArray(n)):t.push(n)),t||[]},dequeue:function(e,A){A=A||"fx";var n=y.queue(e,A),t=n.length,l=n.shift(),i=y._queueHooks(e,A);"inprogress"===l&&(l=n.shift(),t--),l&&("fx"===A&&n.unshift("inprogress"),delete i.stop,l.call(e,(function(){y.dequeue(e,A)}),i)),!t&&i&&i.empty.fire()},_queueHooks:function(e,A){var n=A+"queueHooks";return Z.get(e,n)||Z.access(e,n,{empty:y.Callbacks("once memory").add((function(){Z.remove(e,[A+"queue",n])}))})}}),y.fn.extend({queue:function(e,A){var n=2;return"string"!=typeof e&&(A=e,e="fx",n--),arguments.length<n?y.queue(this[0],e):void 0===A?this:this.each((function(){var n=y.queue(this,e,A);y._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&y.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){y.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,A){var n,t=1,l=y.Deferred(),i=this,s=this.length,o=function(){--t||l.resolveWith(i,[i])};for("string"!=typeof e&&(A=e,e=void 0),e=e||"fx";s--;)(n=Z.get(i[s],e+"queueHooks"))&&n.empty&&(t++,n.empty.add(o));return o(),l.promise(A)}});var te=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,le=new RegExp("^(?:([+-])=|)("+te+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],se=E.documentElement,oe=function(e){return y.contains(e.ownerDocument,e)},ae={composed:!0};se.getRootNode&&(oe=function(e){return y.contains(e.ownerDocument,e)||e.getRootNode(ae)===e.ownerDocument});var re=function(e,A){return"none"===(e=A||e).style.display||""===e.style.display&&oe(e)&&"none"===y.css(e,"display")};function Ce(e,A,n,t){var l,i,s=20,o=t?function(){return t.cur()}:function(){return y.css(e,A,"")},a=o(),r=n&&n[3]||(y.cssNumber[A]?"":"px"),C=e.nodeType&&(y.cssNumber[A]||"px"!==r&&+a)&&le.exec(y.css(e,A));if(C&&C[3]!==r){for(a/=2,r=r||C[3],C=+a||1;s--;)y.style(e,A,C+r),(1-i)*(1-(i=o()/a||.5))<=0&&(s=0),C/=i;C*=2,y.style(e,A,C+r),n=n||[]}return n&&(C=+C||+a||0,l=n[1]?C+(n[1]+1)*n[2]:+n[2],t&&(t.unit=r,t.start=C,t.end=l)),l}var ue={};function ce(e){var A,n=e.ownerDocument,t=e.nodeName,l=ue[t];return l||(A=n.body.appendChild(n.createElement(t)),l=y.css(A,"display"),A.parentNode.removeChild(A),"none"===l&&(l="block"),ue[t]=l,l)}function me(e,A){for(var n,t,l=[],i=0,s=e.length;i<s;i++)(t=e[i]).style&&(n=t.style.display,A?("none"===n&&(l[i]=Z.get(t,"display")||null,l[i]||(t.style.display="")),""===t.style.display&&re(t)&&(l[i]=ce(t))):"none"!==n&&(l[i]="none",Z.set(t,"display",n)));for(i=0;i<s;i++)null!=l[i]&&(e[i].style.display=l[i]);return e}y.fn.extend({show:function(){return me(this,!0)},hide:function(){return me(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){re(this)?y(this).show():y(this).hide()}))}});var de,pe,he=/^(?:checkbox|radio)$/i,fe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Ie=/^$|^module$|\/(?:java|ecma)script/i;de=E.createDocumentFragment().appendChild(E.createElement("div")),(pe=E.createElement("input")).setAttribute("type","radio"),pe.setAttribute("checked","checked"),pe.setAttribute("name","t"),de.appendChild(pe),h.checkClone=de.cloneNode(!0).cloneNode(!0).lastChild.checked,de.innerHTML="<textarea>x</textarea>",h.noCloneChecked=!!de.cloneNode(!0).lastChild.defaultValue,de.innerHTML="<option></option>",h.option=!!de.lastChild;var Ee={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,A){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(A||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(A||"*"):[],void 0===A||A&&W(e,A)?y.merge([e],n):n}function ve(e,A){for(var n=0,t=e.length;n<t;n++)Z.set(e[n],"globalEval",!A||Z.get(A[n],"globalEval"))}Ee.tbody=Ee.tfoot=Ee.colgroup=Ee.caption=Ee.thead,Ee.th=Ee.td,h.option||(Ee.optgroup=Ee.option=[1,"<select multiple='multiple'>","</select>"]);var be=/<|&#?\w+;/;function Me(e,A,n,t,l){for(var i,s,o,a,r,C,u=A.createDocumentFragment(),c=[],m=0,d=e.length;m<d;m++)if((i=e[m])||0===i)if("object"===b(i))y.merge(c,i.nodeType?[i]:i);else if(be.test(i)){for(s=s||u.appendChild(A.createElement("div")),o=(fe.exec(i)||["",""])[1].toLowerCase(),a=Ee[o]||Ee._default,s.innerHTML=a[1]+y.htmlPrefilter(i)+a[2],C=a[0];C--;)s=s.lastChild;y.merge(c,s.childNodes),(s=u.firstChild).textContent=""}else c.push(A.createTextNode(i));for(u.textContent="",m=0;i=c[m++];)if(t&&y.inArray(i,t)>-1)l&&l.push(i);else if(r=oe(i),s=ge(u.appendChild(i),"script"),r&&ve(s),n)for(C=0;i=s[C++];)Ie.test(i.type||"")&&n.push(i);return u}var ye=/^([^.]*)(?:\.(.+)|)/;function Be(){return!0}function Se(){return!1}function Qe(e,A){return e===function(){try{return E.activeElement}catch(e){}}()==("focus"===A)}function Ge(e,A,n,t,l,i){var s,o;if("object"==typeof A){for(o in"string"!=typeof n&&(t=t||n,n=void 0),A)Ge(e,o,n,t,A[o],i);return e}if(null==t&&null==l?(l=n,t=n=void 0):null==l&&("string"==typeof n?(l=t,t=void 0):(l=t,t=n,n=void 0)),!1===l)l=Se;else if(!l)return e;return 1===i&&(s=l,l=function(e){return y().off(e),s.apply(this,arguments)},l.guid=s.guid||(s.guid=y.guid++)),e.each((function(){y.event.add(this,A,l,t,n)}))}function xe(e,A,n){n?(Z.set(e,A,!1),y.event.add(e,A,{namespace:!1,handler:function(e){var t,l,i=Z.get(this,A);if(1&e.isTrigger&&this[A]){if(i.length)(y.event.special[A]||{}).delegateType&&e.stopPropagation();else if(i=o.call(arguments),Z.set(this,A,i),t=n(this,A),this[A](),i!==(l=Z.get(this,A))||t?Z.set(this,A,!1):l={},i!==l)return e.stopImmediatePropagation(),e.preventDefault(),l&&l.value}else i.length&&(Z.set(this,A,{value:y.event.trigger(y.extend(i[0],y.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Z.get(e,A)&&y.event.add(e,A,Be)}y.event={global:{},add:function(e,A,n,t,l){var i,s,o,a,r,C,u,c,m,d,p,h=Z.get(e);if($(e))for(n.handler&&(n=(i=n).handler,l=i.selector),l&&y.find.matchesSelector(se,l),n.guid||(n.guid=y.guid++),(a=h.events)||(a=h.events=Object.create(null)),(s=h.handle)||(s=h.handle=function(A){return void 0!==y&&y.event.triggered!==A.type?y.event.dispatch.apply(e,arguments):void 0}),r=(A=(A||"").match(Y)||[""]).length;r--;)m=p=(o=ye.exec(A[r])||[])[1],d=(o[2]||"").split(".").sort(),m&&(u=y.event.special[m]||{},m=(l?u.delegateType:u.bindType)||m,u=y.event.special[m]||{},C=y.extend({type:m,origType:p,data:t,handler:n,guid:n.guid,selector:l,needsContext:l&&y.expr.match.needsContext.test(l),namespace:d.join(".")},i),(c=a[m])||((c=a[m]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(e,t,d,s)||e.addEventListener&&e.addEventListener(m,s)),u.add&&(u.add.call(e,C),C.handler.guid||(C.handler.guid=n.guid)),l?c.splice(c.delegateCount++,0,C):c.push(C),y.event.global[m]=!0)},remove:function(e,A,n,t,l){var i,s,o,a,r,C,u,c,m,d,p,h=Z.hasData(e)&&Z.get(e);if(h&&(a=h.events)){for(r=(A=(A||"").match(Y)||[""]).length;r--;)if(m=p=(o=ye.exec(A[r])||[])[1],d=(o[2]||"").split(".").sort(),m){for(u=y.event.special[m]||{},c=a[m=(t?u.delegateType:u.bindType)||m]||[],o=o[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=i=c.length;i--;)C=c[i],!l&&p!==C.origType||n&&n.guid!==C.guid||o&&!o.test(C.namespace)||t&&t!==C.selector&&("**"!==t||!C.selector)||(c.splice(i,1),C.selector&&c.delegateCount--,u.remove&&u.remove.call(e,C));s&&!c.length&&(u.teardown&&!1!==u.teardown.call(e,d,h.handle)||y.removeEvent(e,m,h.handle),delete a[m])}else for(m in a)y.event.remove(e,m+A[r],n,t,!0);y.isEmptyObject(a)&&Z.remove(e,"handle events")}},dispatch:function(e){var A,n,t,l,i,s,o=new Array(arguments.length),a=y.event.fix(e),r=(Z.get(this,"events")||Object.create(null))[a.type]||[],C=y.event.special[a.type]||{};for(o[0]=a,A=1;A<arguments.length;A++)o[A]=arguments[A];if(a.delegateTarget=this,!C.preDispatch||!1!==C.preDispatch.call(this,a)){for(s=y.event.handlers.call(this,a,r),A=0;(l=s[A++])&&!a.isPropagationStopped();)for(a.currentTarget=l.elem,n=0;(i=l.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==i.namespace&&!a.rnamespace.test(i.namespace)||(a.handleObj=i,a.data=i.data,void 0!==(t=((y.event.special[i.origType]||{}).handle||i.handler).apply(l.elem,o))&&!1===(a.result=t)&&(a.preventDefault(),a.stopPropagation()));return C.postDispatch&&C.postDispatch.call(this,a),a.result}},handlers:function(e,A){var n,t,l,i,s,o=[],a=A.delegateCount,r=e.target;if(a&&r.nodeType&&!("click"===e.type&&e.button>=1))for(;r!==this;r=r.parentNode||this)if(1===r.nodeType&&("click"!==e.type||!0!==r.disabled)){for(i=[],s={},n=0;n<a;n++)void 0===s[l=(t=A[n]).selector+" "]&&(s[l]=t.needsContext?y(l,this).index(r)>-1:y.find(l,this,null,[r]).length),s[l]&&i.push(t);i.length&&o.push({elem:r,handlers:i})}return r=this,a<A.length&&o.push({elem:r,handlers:A.slice(a)}),o},addProp:function(e,A){Object.defineProperty(y.Event.prototype,e,{enumerable:!0,configurable:!0,get:f(A)?function(){if(this.originalEvent)return A(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(A){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:A})}})},fix:function(e){return e[y.expando]?e:new y.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var A=this||e;return he.test(A.type)&&A.click&&W(A,"input")&&xe(A,"click",Be),!1},trigger:function(e){var A=this||e;return he.test(A.type)&&A.click&&W(A,"input")&&xe(A,"click"),!0},_default:function(e){var A=e.target;return he.test(A.type)&&A.click&&W(A,"input")&&Z.get(A,"click")||W(A,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},y.removeEvent=function(e,A,n){e.removeEventListener&&e.removeEventListener(A,n)},y.Event=function(e,A){if(!(this instanceof y.Event))return new y.Event(e,A);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Be:Se,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,A&&y.extend(this,A),this.timeStamp=e&&e.timeStamp||Date.now(),this[y.expando]=!0},y.Event.prototype={constructor:y.Event,isDefaultPrevented:Se,isPropagationStopped:Se,isImmediatePropagationStopped:Se,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Be,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Be,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Be,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},y.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},y.event.addProp),y.each({focus:"focusin",blur:"focusout"},(function(e,A){y.event.special[e]={setup:function(){return xe(this,e,Qe),!1},trigger:function(){return xe(this,e),!0},_default:function(){return!0},delegateType:A}})),y.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,A){y.event.special[e]={delegateType:A,bindType:A,handle:function(e){var n,t=this,l=e.relatedTarget,i=e.handleObj;return l&&(l===t||y.contains(t,l))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=A),n}}})),y.fn.extend({on:function(e,A,n,t){return Ge(this,e,A,n,t)},one:function(e,A,n,t){return Ge(this,e,A,n,t,1)},off:function(e,A,n){var t,l;if(e&&e.preventDefault&&e.handleObj)return t=e.handleObj,y(e.delegateTarget).off(t.namespace?t.origType+"."+t.namespace:t.origType,t.selector,t.handler),this;if("object"==typeof e){for(l in e)this.off(l,A,e[l]);return this}return!1!==A&&"function"!=typeof A||(n=A,A=void 0),!1===n&&(n=Se),this.each((function(){y.event.remove(this,e,n,A)}))}});var We=/<script|<style|<link/i,De=/checked\s*(?:[^=]|=\s*.checked.)/i,Oe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function we(e,A){return W(e,"table")&&W(11!==A.nodeType?A:A.firstChild,"tr")&&y(e).children("tbody")[0]||e}function Te(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ke(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function ke(e,A){var n,t,l,i,s,o;if(1===A.nodeType){if(Z.hasData(e)&&(o=Z.get(e).events))for(l in Z.remove(A,"handle events"),o)for(n=0,t=o[l].length;n<t;n++)y.event.add(A,l,o[l][n]);J.hasData(e)&&(i=J.access(e),s=y.extend({},i),J.set(A,s))}}function _e(e,A){var n=A.nodeName.toLowerCase();"input"===n&&he.test(e.type)?A.checked=e.checked:"input"!==n&&"textarea"!==n||(A.defaultValue=e.defaultValue)}function Ye(e,A,n,t){A=a(A);var l,i,s,o,r,C,u=0,c=e.length,m=c-1,d=A[0],p=f(d);if(p||c>1&&"string"==typeof d&&!h.checkClone&&De.test(d))return e.each((function(l){var i=e.eq(l);p&&(A[0]=d.call(this,l,i.html())),Ye(i,A,n,t)}));if(c&&(i=(l=Me(A,e[0].ownerDocument,!1,e,t)).firstChild,1===l.childNodes.length&&(l=i),i||t)){for(o=(s=y.map(ge(l,"script"),Te)).length;u<c;u++)r=l,u!==m&&(r=y.clone(r,!0,!0),o&&y.merge(s,ge(r,"script"))),n.call(e[u],r,u);if(o)for(C=s[s.length-1].ownerDocument,y.map(s,Ke),u=0;u<o;u++)r=s[u],Ie.test(r.type||"")&&!Z.access(r,"globalEval")&&y.contains(C,r)&&(r.src&&"module"!==(r.type||"").toLowerCase()?y._evalUrl&&!r.noModule&&y._evalUrl(r.src,{nonce:r.nonce||r.getAttribute("nonce")},C):v(r.textContent.replace(Oe,""),r,C))}return e}function Ve(e,A,n){for(var t,l=A?y.filter(A,e):e,i=0;null!=(t=l[i]);i++)n||1!==t.nodeType||y.cleanData(ge(t)),t.parentNode&&(n&&oe(t)&&ve(ge(t,"script")),t.parentNode.removeChild(t));return e}y.extend({htmlPrefilter:function(e){return e},clone:function(e,A,n){var t,l,i,s,o=e.cloneNode(!0),a=oe(e);if(!(h.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||y.isXMLDoc(e)))for(s=ge(o),t=0,l=(i=ge(e)).length;t<l;t++)_e(i[t],s[t]);if(A)if(n)for(i=i||ge(e),s=s||ge(o),t=0,l=i.length;t<l;t++)ke(i[t],s[t]);else ke(e,o);return(s=ge(o,"script")).length>0&&ve(s,!a&&ge(e,"script")),o},cleanData:function(e){for(var A,n,t,l=y.event.special,i=0;void 0!==(n=e[i]);i++)if($(n)){if(A=n[Z.expando]){if(A.events)for(t in A.events)l[t]?y.event.remove(n,t):y.removeEvent(n,t,A.handle);n[Z.expando]=void 0}n[J.expando]&&(n[J.expando]=void 0)}}}),y.fn.extend({detach:function(e){return Ve(this,e,!0)},remove:function(e){return Ve(this,e)},text:function(e){return L(this,(function(e){return void 0===e?y.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Ye(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||we(this,e).appendChild(e)}))},prepend:function(){return Ye(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var A=we(this,e);A.insertBefore(e,A.firstChild)}}))},before:function(){return Ye(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Ye(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,A=0;null!=(e=this[A]);A++)1===e.nodeType&&(y.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,A){return e=null!=e&&e,A=null==A?e:A,this.map((function(){return y.clone(this,e,A)}))},html:function(e){return L(this,(function(e){var A=this[0]||{},n=0,t=this.length;if(void 0===e&&1===A.nodeType)return A.innerHTML;if("string"==typeof e&&!We.test(e)&&!Ee[(fe.exec(e)||["",""])[1].toLowerCase()]){e=y.htmlPrefilter(e);try{for(;n<t;n++)1===(A=this[n]||{}).nodeType&&(y.cleanData(ge(A,!1)),A.innerHTML=e);A=0}catch(e){}}A&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Ye(this,arguments,(function(A){var n=this.parentNode;y.inArray(this,e)<0&&(y.cleanData(ge(this)),n&&n.replaceChild(A,this))}),e)}}),y.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,A){y.fn[e]=function(e){for(var n,t=[],l=y(e),i=l.length-1,s=0;s<=i;s++)n=s===i?this:this.clone(!0),y(l[s])[A](n),r.apply(t,n.get());return this.pushStack(t)}}));var Pe=new RegExp("^("+te+")(?!px)[a-z%]+$","i"),He=function(e){var A=e.ownerDocument.defaultView;return A&&A.opener||(A=t),A.getComputedStyle(e)},Ne=function(e,A,n){var t,l,i={};for(l in A)i[l]=e.style[l],e.style[l]=A[l];for(l in t=n.call(e),A)e.style[l]=i[l];return t},Fe=new RegExp(ie.join("|"),"i");function Ue(e,A,n){var t,l,i,s,o=e.style;return(n=n||He(e))&&(""!==(s=n.getPropertyValue(A)||n[A])||oe(e)||(s=y.style(e,A)),!h.pixelBoxStyles()&&Pe.test(s)&&Fe.test(A)&&(t=o.width,l=o.minWidth,i=o.maxWidth,o.minWidth=o.maxWidth=o.width=s,s=n.width,o.width=t,o.minWidth=l,o.maxWidth=i)),void 0!==s?s+"":s}function Le(e,A){return{get:function(){if(!e())return(this.get=A).apply(this,arguments);delete this.get}}}!function(){function e(){if(C){r.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",C.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",se.appendChild(r).appendChild(C);var e=t.getComputedStyle(C);n="1%"!==e.top,a=12===A(e.marginLeft),C.style.right="60%",s=36===A(e.right),l=36===A(e.width),C.style.position="absolute",i=12===A(C.offsetWidth/3),se.removeChild(r),C=null}}function A(e){return Math.round(parseFloat(e))}var n,l,i,s,o,a,r=E.createElement("div"),C=E.createElement("div");C.style&&(C.style.backgroundClip="content-box",C.cloneNode(!0).style.backgroundClip="",h.clearCloneStyle="content-box"===C.style.backgroundClip,y.extend(h,{boxSizingReliable:function(){return e(),l},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),a},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,A,n,l;return null==o&&(e=E.createElement("table"),A=E.createElement("tr"),n=E.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",A.style.cssText="border:1px solid",A.style.height="1px",n.style.height="9px",n.style.display="block",se.appendChild(e).appendChild(A).appendChild(n),l=t.getComputedStyle(A),o=parseInt(l.height,10)+parseInt(l.borderTopWidth,10)+parseInt(l.borderBottomWidth,10)===A.offsetHeight,se.removeChild(e)),o}}))}();var je=["Webkit","Moz","ms"],qe=E.createElement("div").style,Re={};function ze(e){var A=y.cssProps[e]||Re[e];return A||(e in qe?e:Re[e]=function(e){for(var A=e[0].toUpperCase()+e.slice(1),n=je.length;n--;)if((e=je[n]+A)in qe)return e}(e)||e)}var $e=/^(none|table(?!-c[ea]).+)/,Xe=/^--/,Ze={position:"absolute",visibility:"hidden",display:"block"},Je={letterSpacing:"0",fontWeight:"400"};function eA(e,A,n){var t=le.exec(A);return t?Math.max(0,t[2]-(n||0))+(t[3]||"px"):A}function AA(e,A,n,t,l,i){var s="width"===A?1:0,o=0,a=0;if(n===(t?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(a+=y.css(e,n+ie[s],!0,l)),t?("content"===n&&(a-=y.css(e,"padding"+ie[s],!0,l)),"margin"!==n&&(a-=y.css(e,"border"+ie[s]+"Width",!0,l))):(a+=y.css(e,"padding"+ie[s],!0,l),"padding"!==n?a+=y.css(e,"border"+ie[s]+"Width",!0,l):o+=y.css(e,"border"+ie[s]+"Width",!0,l));return!t&&i>=0&&(a+=Math.max(0,Math.ceil(e["offset"+A[0].toUpperCase()+A.slice(1)]-i-a-o-.5))||0),a}function nA(e,A,n){var t=He(e),l=(!h.boxSizingReliable()||n)&&"border-box"===y.css(e,"boxSizing",!1,t),i=l,s=Ue(e,A,t),o="offset"+A[0].toUpperCase()+A.slice(1);if(Pe.test(s)){if(!n)return s;s="auto"}return(!h.boxSizingReliable()&&l||!h.reliableTrDimensions()&&W(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===y.css(e,"display",!1,t))&&e.getClientRects().length&&(l="border-box"===y.css(e,"boxSizing",!1,t),(i=o in e)&&(s=e[o])),(s=parseFloat(s)||0)+AA(e,A,n||(l?"border":"content"),i,t,s)+"px"}function tA(e,A,n,t,l){return new tA.prototype.init(e,A,n,t,l)}y.extend({cssHooks:{opacity:{get:function(e,A){if(A){var n=Ue(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,A,n,t){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var l,i,s,o=z(A),a=Xe.test(A),r=e.style;if(a||(A=ze(o)),s=y.cssHooks[A]||y.cssHooks[o],void 0===n)return s&&"get"in s&&void 0!==(l=s.get(e,!1,t))?l:r[A];"string"===(i=typeof n)&&(l=le.exec(n))&&l[1]&&(n=Ce(e,A,l),i="number"),null!=n&&n==n&&("number"!==i||a||(n+=l&&l[3]||(y.cssNumber[o]?"":"px")),h.clearCloneStyle||""!==n||0!==A.indexOf("background")||(r[A]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,t))||(a?r.setProperty(A,n):r[A]=n))}},css:function(e,A,n,t){var l,i,s,o=z(A);return Xe.test(A)||(A=ze(o)),(s=y.cssHooks[A]||y.cssHooks[o])&&"get"in s&&(l=s.get(e,!0,n)),void 0===l&&(l=Ue(e,A,t)),"normal"===l&&A in Je&&(l=Je[A]),""===n||n?(i=parseFloat(l),!0===n||isFinite(i)?i||0:l):l}}),y.each(["height","width"],(function(e,A){y.cssHooks[A]={get:function(e,n,t){if(n)return!$e.test(y.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?nA(e,A,t):Ne(e,Ze,(function(){return nA(e,A,t)}))},set:function(e,n,t){var l,i=He(e),s=!h.scrollboxSize()&&"absolute"===i.position,o=(s||t)&&"border-box"===y.css(e,"boxSizing",!1,i),a=t?AA(e,A,t,o,i):0;return o&&s&&(a-=Math.ceil(e["offset"+A[0].toUpperCase()+A.slice(1)]-parseFloat(i[A])-AA(e,A,"border",!1,i)-.5)),a&&(l=le.exec(n))&&"px"!==(l[3]||"px")&&(e.style[A]=n,n=y.css(e,A)),eA(0,n,a)}}})),y.cssHooks.marginLeft=Le(h.reliableMarginLeft,(function(e,A){if(A)return(parseFloat(Ue(e,"marginLeft"))||e.getBoundingClientRect().left-Ne(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),y.each({margin:"",padding:"",border:"Width"},(function(e,A){y.cssHooks[e+A]={expand:function(n){for(var t=0,l={},i="string"==typeof n?n.split(" "):[n];t<4;t++)l[e+ie[t]+A]=i[t]||i[t-2]||i[0];return l}},"margin"!==e&&(y.cssHooks[e+A].set=eA)})),y.fn.extend({css:function(e,A){return L(this,(function(e,A,n){var t,l,i={},s=0;if(Array.isArray(A)){for(t=He(e),l=A.length;s<l;s++)i[A[s]]=y.css(e,A[s],!1,t);return i}return void 0!==n?y.style(e,A,n):y.css(e,A)}),e,A,arguments.length>1)}}),y.Tween=tA,tA.prototype={constructor:tA,init:function(e,A,n,t,l,i){this.elem=e,this.prop=n,this.easing=l||y.easing._default,this.options=A,this.start=this.now=this.cur(),this.end=t,this.unit=i||(y.cssNumber[n]?"":"px")},cur:function(){var e=tA.propHooks[this.prop];return e&&e.get?e.get(this):tA.propHooks._default.get(this)},run:function(e){var A,n=tA.propHooks[this.prop];return this.options.duration?this.pos=A=y.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=A=e,this.now=(this.end-this.start)*A+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):tA.propHooks._default.set(this),this}},tA.prototype.init.prototype=tA.prototype,tA.propHooks={_default:{get:function(e){var A;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(A=y.css(e.elem,e.prop,""))&&"auto"!==A?A:0},set:function(e){y.fx.step[e.prop]?y.fx.step[e.prop](e):1!==e.elem.nodeType||!y.cssHooks[e.prop]&&null==e.elem.style[ze(e.prop)]?e.elem[e.prop]=e.now:y.style(e.elem,e.prop,e.now+e.unit)}}},tA.propHooks.scrollTop=tA.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},y.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},y.fx=tA.prototype.init,y.fx.step={};var lA,iA,sA=/^(?:toggle|show|hide)$/,oA=/queueHooks$/;function aA(){iA&&(!1===E.hidden&&t.requestAnimationFrame?t.requestAnimationFrame(aA):t.setTimeout(aA,y.fx.interval),y.fx.tick())}function rA(){return t.setTimeout((function(){lA=void 0})),lA=Date.now()}function CA(e,A){var n,t=0,l={height:e};for(A=A?1:0;t<4;t+=2-A)l["margin"+(n=ie[t])]=l["padding"+n]=e;return A&&(l.opacity=l.width=e),l}function uA(e,A,n){for(var t,l=(cA.tweeners[A]||[]).concat(cA.tweeners["*"]),i=0,s=l.length;i<s;i++)if(t=l[i].call(n,A,e))return t}function cA(e,A,n){var t,l,i=0,s=cA.prefilters.length,o=y.Deferred().always((function(){delete a.elem})),a=function(){if(l)return!1;for(var A=lA||rA(),n=Math.max(0,r.startTime+r.duration-A),t=1-(n/r.duration||0),i=0,s=r.tweens.length;i<s;i++)r.tweens[i].run(t);return o.notifyWith(e,[r,t,n]),t<1&&s?n:(s||o.notifyWith(e,[r,1,0]),o.resolveWith(e,[r]),!1)},r=o.promise({elem:e,props:y.extend({},A),opts:y.extend(!0,{specialEasing:{},easing:y.easing._default},n),originalProperties:A,originalOptions:n,startTime:lA||rA(),duration:n.duration,tweens:[],createTween:function(A,n){var t=y.Tween(e,r.opts,A,n,r.opts.specialEasing[A]||r.opts.easing);return r.tweens.push(t),t},stop:function(A){var n=0,t=A?r.tweens.length:0;if(l)return this;for(l=!0;n<t;n++)r.tweens[n].run(1);return A?(o.notifyWith(e,[r,1,0]),o.resolveWith(e,[r,A])):o.rejectWith(e,[r,A]),this}}),C=r.props;for(!function(e,A){var n,t,l,i,s;for(n in e)if(l=A[t=z(n)],i=e[n],Array.isArray(i)&&(l=i[1],i=e[n]=i[0]),n!==t&&(e[t]=i,delete e[n]),(s=y.cssHooks[t])&&"expand"in s)for(n in i=s.expand(i),delete e[t],i)n in e||(e[n]=i[n],A[n]=l);else A[t]=l}(C,r.opts.specialEasing);i<s;i++)if(t=cA.prefilters[i].call(r,e,C,r.opts))return f(t.stop)&&(y._queueHooks(r.elem,r.opts.queue).stop=t.stop.bind(t)),t;return y.map(C,uA,r),f(r.opts.start)&&r.opts.start.call(e,r),r.progress(r.opts.progress).done(r.opts.done,r.opts.complete).fail(r.opts.fail).always(r.opts.always),y.fx.timer(y.extend(a,{elem:e,anim:r,queue:r.opts.queue})),r}y.Animation=y.extend(cA,{tweeners:{"*":[function(e,A){var n=this.createTween(e,A);return Ce(n.elem,e,le.exec(A),n),n}]},tweener:function(e,A){f(e)?(A=e,e=["*"]):e=e.match(Y);for(var n,t=0,l=e.length;t<l;t++)n=e[t],cA.tweeners[n]=cA.tweeners[n]||[],cA.tweeners[n].unshift(A)},prefilters:[function(e,A,n){var t,l,i,s,o,a,r,C,u="width"in A||"height"in A,c=this,m={},d=e.style,p=e.nodeType&&re(e),h=Z.get(e,"fxshow");for(t in n.queue||(null==(s=y._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,o=s.empty.fire,s.empty.fire=function(){s.unqueued||o()}),s.unqueued++,c.always((function(){c.always((function(){s.unqueued--,y.queue(e,"fx").length||s.empty.fire()}))}))),A)if(l=A[t],sA.test(l)){if(delete A[t],i=i||"toggle"===l,l===(p?"hide":"show")){if("show"!==l||!h||void 0===h[t])continue;p=!0}m[t]=h&&h[t]||y.style(e,t)}if((a=!y.isEmptyObject(A))||!y.isEmptyObject(m))for(t in u&&1===e.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],null==(r=h&&h.display)&&(r=Z.get(e,"display")),"none"===(C=y.css(e,"display"))&&(r?C=r:(me([e],!0),r=e.style.display||r,C=y.css(e,"display"),me([e]))),("inline"===C||"inline-block"===C&&null!=r)&&"none"===y.css(e,"float")&&(a||(c.done((function(){d.display=r})),null==r&&(C=d.display,r="none"===C?"":C)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",c.always((function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}))),a=!1,m)a||(h?"hidden"in h&&(p=h.hidden):h=Z.access(e,"fxshow",{display:r}),i&&(h.hidden=!p),p&&me([e],!0),c.done((function(){for(t in p||me([e]),Z.remove(e,"fxshow"),m)y.style(e,t,m[t])}))),a=uA(p?h[t]:0,t,c),t in h||(h[t]=a.start,p&&(a.end=a.start,a.start=0))}],prefilter:function(e,A){A?cA.prefilters.unshift(e):cA.prefilters.push(e)}}),y.speed=function(e,A,n){var t=e&&"object"==typeof e?y.extend({},e):{complete:n||!n&&A||f(e)&&e,duration:e,easing:n&&A||A&&!f(A)&&A};return y.fx.off?t.duration=0:"number"!=typeof t.duration&&(t.duration in y.fx.speeds?t.duration=y.fx.speeds[t.duration]:t.duration=y.fx.speeds._default),null!=t.queue&&!0!==t.queue||(t.queue="fx"),t.old=t.complete,t.complete=function(){f(t.old)&&t.old.call(this),t.queue&&y.dequeue(this,t.queue)},t},y.fn.extend({fadeTo:function(e,A,n,t){return this.filter(re).css("opacity",0).show().end().animate({opacity:A},e,n,t)},animate:function(e,A,n,t){var l=y.isEmptyObject(e),i=y.speed(A,n,t),s=function(){var A=cA(this,y.extend({},e),i);(l||Z.get(this,"finish"))&&A.stop(!0)};return s.finish=s,l||!1===i.queue?this.each(s):this.queue(i.queue,s)},stop:function(e,A,n){var t=function(e){var A=e.stop;delete e.stop,A(n)};return"string"!=typeof e&&(n=A,A=e,e=void 0),A&&this.queue(e||"fx",[]),this.each((function(){var A=!0,l=null!=e&&e+"queueHooks",i=y.timers,s=Z.get(this);if(l)s[l]&&s[l].stop&&t(s[l]);else for(l in s)s[l]&&s[l].stop&&oA.test(l)&&t(s[l]);for(l=i.length;l--;)i[l].elem!==this||null!=e&&i[l].queue!==e||(i[l].anim.stop(n),A=!1,i.splice(l,1));!A&&n||y.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var A,n=Z.get(this),t=n[e+"queue"],l=n[e+"queueHooks"],i=y.timers,s=t?t.length:0;for(n.finish=!0,y.queue(this,e,[]),l&&l.stop&&l.stop.call(this,!0),A=i.length;A--;)i[A].elem===this&&i[A].queue===e&&(i[A].anim.stop(!0),i.splice(A,1));for(A=0;A<s;A++)t[A]&&t[A].finish&&t[A].finish.call(this);delete n.finish}))}}),y.each(["toggle","show","hide"],(function(e,A){var n=y.fn[A];y.fn[A]=function(e,t,l){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(CA(A,!0),e,t,l)}})),y.each({slideDown:CA("show"),slideUp:CA("hide"),slideToggle:CA("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,A){y.fn[e]=function(e,n,t){return this.animate(A,e,n,t)}})),y.timers=[],y.fx.tick=function(){var e,A=0,n=y.timers;for(lA=Date.now();A<n.length;A++)(e=n[A])()||n[A]!==e||n.splice(A--,1);n.length||y.fx.stop(),lA=void 0},y.fx.timer=function(e){y.timers.push(e),y.fx.start()},y.fx.interval=13,y.fx.start=function(){iA||(iA=!0,aA())},y.fx.stop=function(){iA=null},y.fx.speeds={slow:600,fast:200,_default:400},y.fn.delay=function(e,A){return e=y.fx&&y.fx.speeds[e]||e,A=A||"fx",this.queue(A,(function(A,n){var l=t.setTimeout(A,e);n.stop=function(){t.clearTimeout(l)}}))},function(){var e=E.createElement("input"),A=E.createElement("select").appendChild(E.createElement("option"));e.type="checkbox",h.checkOn=""!==e.value,h.optSelected=A.selected,(e=E.createElement("input")).value="t",e.type="radio",h.radioValue="t"===e.value}();var mA,dA=y.expr.attrHandle;y.fn.extend({attr:function(e,A){return L(this,y.attr,e,A,arguments.length>1)},removeAttr:function(e){return this.each((function(){y.removeAttr(this,e)}))}}),y.extend({attr:function(e,A,n){var t,l,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?y.prop(e,A,n):(1===i&&y.isXMLDoc(e)||(l=y.attrHooks[A.toLowerCase()]||(y.expr.match.bool.test(A)?mA:void 0)),void 0!==n?null===n?void y.removeAttr(e,A):l&&"set"in l&&void 0!==(t=l.set(e,n,A))?t:(e.setAttribute(A,n+""),n):l&&"get"in l&&null!==(t=l.get(e,A))?t:null==(t=y.find.attr(e,A))?void 0:t)},attrHooks:{type:{set:function(e,A){if(!h.radioValue&&"radio"===A&&W(e,"input")){var n=e.value;return e.setAttribute("type",A),n&&(e.value=n),A}}}},removeAttr:function(e,A){var n,t=0,l=A&&A.match(Y);if(l&&1===e.nodeType)for(;n=l[t++];)e.removeAttribute(n)}}),mA={set:function(e,A,n){return!1===A?y.removeAttr(e,n):e.setAttribute(n,n),n}},y.each(y.expr.match.bool.source.match(/\w+/g),(function(e,A){var n=dA[A]||y.find.attr;dA[A]=function(e,A,t){var l,i,s=A.toLowerCase();return t||(i=dA[s],dA[s]=l,l=null!=n(e,A,t)?s:null,dA[s]=i),l}}));var pA=/^(?:input|select|textarea|button)$/i,hA=/^(?:a|area)$/i;function fA(e){return(e.match(Y)||[]).join(" ")}function IA(e){return e.getAttribute&&e.getAttribute("class")||""}function EA(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(Y)||[]}y.fn.extend({prop:function(e,A){return L(this,y.prop,e,A,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[y.propFix[e]||e]}))}}),y.extend({prop:function(e,A,n){var t,l,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&y.isXMLDoc(e)||(A=y.propFix[A]||A,l=y.propHooks[A]),void 0!==n?l&&"set"in l&&void 0!==(t=l.set(e,n,A))?t:e[A]=n:l&&"get"in l&&null!==(t=l.get(e,A))?t:e[A]},propHooks:{tabIndex:{get:function(e){var A=y.find.attr(e,"tabindex");return A?parseInt(A,10):pA.test(e.nodeName)||hA.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),h.optSelected||(y.propHooks.selected={get:function(e){var A=e.parentNode;return A&&A.parentNode&&A.parentNode.selectedIndex,null},set:function(e){var A=e.parentNode;A&&(A.selectedIndex,A.parentNode&&A.parentNode.selectedIndex)}}),y.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){y.propFix[this.toLowerCase()]=this})),y.fn.extend({addClass:function(e){var A,n,t,l,i,s,o,a=0;if(f(e))return this.each((function(A){y(this).addClass(e.call(this,A,IA(this)))}));if((A=EA(e)).length)for(;n=this[a++];)if(l=IA(n),t=1===n.nodeType&&" "+fA(l)+" "){for(s=0;i=A[s++];)t.indexOf(" "+i+" ")<0&&(t+=i+" ");l!==(o=fA(t))&&n.setAttribute("class",o)}return this},removeClass:function(e){var A,n,t,l,i,s,o,a=0;if(f(e))return this.each((function(A){y(this).removeClass(e.call(this,A,IA(this)))}));if(!arguments.length)return this.attr("class","");if((A=EA(e)).length)for(;n=this[a++];)if(l=IA(n),t=1===n.nodeType&&" "+fA(l)+" "){for(s=0;i=A[s++];)for(;t.indexOf(" "+i+" ")>-1;)t=t.replace(" "+i+" "," ");l!==(o=fA(t))&&n.setAttribute("class",o)}return this},toggleClass:function(e,A){var n=typeof e,t="string"===n||Array.isArray(e);return"boolean"==typeof A&&t?A?this.addClass(e):this.removeClass(e):f(e)?this.each((function(n){y(this).toggleClass(e.call(this,n,IA(this),A),A)})):this.each((function(){var A,l,i,s;if(t)for(l=0,i=y(this),s=EA(e);A=s[l++];)i.hasClass(A)?i.removeClass(A):i.addClass(A);else void 0!==e&&"boolean"!==n||((A=IA(this))&&Z.set(this,"__className__",A),this.setAttribute&&this.setAttribute("class",A||!1===e?"":Z.get(this,"__className__")||""))}))},hasClass:function(e){var A,n,t=0;for(A=" "+e+" ";n=this[t++];)if(1===n.nodeType&&(" "+fA(IA(n))+" ").indexOf(A)>-1)return!0;return!1}});var gA=/\r/g;y.fn.extend({val:function(e){var A,n,t,l=this[0];return arguments.length?(t=f(e),this.each((function(n){var l;1===this.nodeType&&(null==(l=t?e.call(this,n,y(this).val()):e)?l="":"number"==typeof l?l+="":Array.isArray(l)&&(l=y.map(l,(function(e){return null==e?"":e+""}))),(A=y.valHooks[this.type]||y.valHooks[this.nodeName.toLowerCase()])&&"set"in A&&void 0!==A.set(this,l,"value")||(this.value=l))}))):l?(A=y.valHooks[l.type]||y.valHooks[l.nodeName.toLowerCase()])&&"get"in A&&void 0!==(n=A.get(l,"value"))?n:"string"==typeof(n=l.value)?n.replace(gA,""):null==n?"":n:void 0}}),y.extend({valHooks:{option:{get:function(e){var A=y.find.attr(e,"value");return null!=A?A:fA(y.text(e))}},select:{get:function(e){var A,n,t,l=e.options,i=e.selectedIndex,s="select-one"===e.type,o=s?null:[],a=s?i+1:l.length;for(t=i<0?a:s?i:0;t<a;t++)if(((n=l[t]).selected||t===i)&&!n.disabled&&(!n.parentNode.disabled||!W(n.parentNode,"optgroup"))){if(A=y(n).val(),s)return A;o.push(A)}return o},set:function(e,A){for(var n,t,l=e.options,i=y.makeArray(A),s=l.length;s--;)((t=l[s]).selected=y.inArray(y.valHooks.option.get(t),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),y.each(["radio","checkbox"],(function(){y.valHooks[this]={set:function(e,A){if(Array.isArray(A))return e.checked=y.inArray(y(e).val(),A)>-1}},h.checkOn||(y.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),h.focusin="onfocusin"in t;var vA=/^(?:focusinfocus|focusoutblur)$/,bA=function(e){e.stopPropagation()};y.extend(y.event,{trigger:function(e,A,n,l){var i,s,o,a,r,C,u,c,d=[n||E],p=m.call(e,"type")?e.type:e,h=m.call(e,"namespace")?e.namespace.split("."):[];if(s=c=o=n=n||E,3!==n.nodeType&&8!==n.nodeType&&!vA.test(p+y.event.triggered)&&(p.indexOf(".")>-1&&(h=p.split("."),p=h.shift(),h.sort()),r=p.indexOf(":")<0&&"on"+p,(e=e[y.expando]?e:new y.Event(p,"object"==typeof e&&e)).isTrigger=l?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),A=null==A?[e]:y.makeArray(A,[e]),u=y.event.special[p]||{},l||!u.trigger||!1!==u.trigger.apply(n,A))){if(!l&&!u.noBubble&&!I(n)){for(a=u.delegateType||p,vA.test(a+p)||(s=s.parentNode);s;s=s.parentNode)d.push(s),o=s;o===(n.ownerDocument||E)&&d.push(o.defaultView||o.parentWindow||t)}for(i=0;(s=d[i++])&&!e.isPropagationStopped();)c=s,e.type=i>1?a:u.bindType||p,(C=(Z.get(s,"events")||Object.create(null))[e.type]&&Z.get(s,"handle"))&&C.apply(s,A),(C=r&&s[r])&&C.apply&&$(s)&&(e.result=C.apply(s,A),!1===e.result&&e.preventDefault());return e.type=p,l||e.isDefaultPrevented()||u._default&&!1!==u._default.apply(d.pop(),A)||!$(n)||r&&f(n[p])&&!I(n)&&((o=n[r])&&(n[r]=null),y.event.triggered=p,e.isPropagationStopped()&&c.addEventListener(p,bA),n[p](),e.isPropagationStopped()&&c.removeEventListener(p,bA),y.event.triggered=void 0,o&&(n[r]=o)),e.result}},simulate:function(e,A,n){var t=y.extend(new y.Event,n,{type:e,isSimulated:!0});y.event.trigger(t,null,A)}}),y.fn.extend({trigger:function(e,A){return this.each((function(){y.event.trigger(e,A,this)}))},triggerHandler:function(e,A){var n=this[0];if(n)return y.event.trigger(e,A,n,!0)}}),h.focusin||y.each({focus:"focusin",blur:"focusout"},(function(e,A){var n=function(e){y.event.simulate(A,e.target,y.event.fix(e))};y.event.special[A]={setup:function(){var t=this.ownerDocument||this.document||this,l=Z.access(t,A);l||t.addEventListener(e,n,!0),Z.access(t,A,(l||0)+1)},teardown:function(){var t=this.ownerDocument||this.document||this,l=Z.access(t,A)-1;l?Z.access(t,A,l):(t.removeEventListener(e,n,!0),Z.remove(t,A))}}}));var MA=t.location,yA={guid:Date.now()},BA=/\?/;y.parseXML=function(e){var A,n;if(!e||"string"!=typeof e)return null;try{A=(new t.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=A&&A.getElementsByTagName("parsererror")[0],A&&!n||y.error("Invalid XML: "+(n?y.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),A};var SA=/\[\]$/,QA=/\r?\n/g,GA=/^(?:submit|button|image|reset|file)$/i,xA=/^(?:input|select|textarea|keygen)/i;function WA(e,A,n,t){var l;if(Array.isArray(A))y.each(A,(function(A,l){n||SA.test(e)?t(e,l):WA(e+"["+("object"==typeof l&&null!=l?A:"")+"]",l,n,t)}));else if(n||"object"!==b(A))t(e,A);else for(l in A)WA(e+"["+l+"]",A[l],n,t)}y.param=function(e,A){var n,t=[],l=function(e,A){var n=f(A)?A():A;t[t.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!y.isPlainObject(e))y.each(e,(function(){l(this.name,this.value)}));else for(n in e)WA(n,e[n],A,l);return t.join("&")},y.fn.extend({serialize:function(){return y.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=y.prop(this,"elements");return e?y.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!y(this).is(":disabled")&&xA.test(this.nodeName)&&!GA.test(e)&&(this.checked||!he.test(e))})).map((function(e,A){var n=y(this).val();return null==n?null:Array.isArray(n)?y.map(n,(function(e){return{name:A.name,value:e.replace(QA,"\r\n")}})):{name:A.name,value:n.replace(QA,"\r\n")}})).get()}});var DA=/%20/g,OA=/#.*$/,wA=/([?&])_=[^&]*/,TA=/^(.*?):[ \t]*([^\r\n]*)$/gm,KA=/^(?:GET|HEAD)$/,kA=/^\/\//,_A={},YA={},VA="*/".concat("*"),PA=E.createElement("a");function HA(e){return function(A,n){"string"!=typeof A&&(n=A,A="*");var t,l=0,i=A.toLowerCase().match(Y)||[];if(f(n))for(;t=i[l++];)"+"===t[0]?(t=t.slice(1)||"*",(e[t]=e[t]||[]).unshift(n)):(e[t]=e[t]||[]).push(n)}}function NA(e,A,n,t){var l={},i=e===YA;function s(o){var a;return l[o]=!0,y.each(e[o]||[],(function(e,o){var r=o(A,n,t);return"string"!=typeof r||i||l[r]?i?!(a=r):void 0:(A.dataTypes.unshift(r),s(r),!1)})),a}return s(A.dataTypes[0])||!l["*"]&&s("*")}function FA(e,A){var n,t,l=y.ajaxSettings.flatOptions||{};for(n in A)void 0!==A[n]&&((l[n]?e:t||(t={}))[n]=A[n]);return t&&y.extend(!0,e,t),e}PA.href=MA.href,y.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:MA.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(MA.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":VA,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":y.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,A){return A?FA(FA(e,y.ajaxSettings),A):FA(y.ajaxSettings,e)},ajaxPrefilter:HA(_A),ajaxTransport:HA(YA),ajax:function(e,A){"object"==typeof e&&(A=e,e=void 0),A=A||{};var n,l,i,s,o,a,r,C,u,c,m=y.ajaxSetup({},A),d=m.context||m,p=m.context&&(d.nodeType||d.jquery)?y(d):y.event,h=y.Deferred(),f=y.Callbacks("once memory"),I=m.statusCode||{},g={},v={},b="canceled",M={readyState:0,getResponseHeader:function(e){var A;if(r){if(!s)for(s={};A=TA.exec(i);)s[A[1].toLowerCase()+" "]=(s[A[1].toLowerCase()+" "]||[]).concat(A[2]);A=s[e.toLowerCase()+" "]}return null==A?null:A.join(", ")},getAllResponseHeaders:function(){return r?i:null},setRequestHeader:function(e,A){return null==r&&(e=v[e.toLowerCase()]=v[e.toLowerCase()]||e,g[e]=A),this},overrideMimeType:function(e){return null==r&&(m.mimeType=e),this},statusCode:function(e){var A;if(e)if(r)M.always(e[M.status]);else for(A in e)I[A]=[I[A],e[A]];return this},abort:function(e){var A=e||b;return n&&n.abort(A),B(0,A),this}};if(h.promise(M),m.url=((e||m.url||MA.href)+"").replace(kA,MA.protocol+"//"),m.type=A.method||A.type||m.method||m.type,m.dataTypes=(m.dataType||"*").toLowerCase().match(Y)||[""],null==m.crossDomain){a=E.createElement("a");try{a.href=m.url,a.href=a.href,m.crossDomain=PA.protocol+"//"+PA.host!=a.protocol+"//"+a.host}catch(e){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=y.param(m.data,m.traditional)),NA(_A,m,A,M),r)return M;for(u in(C=y.event&&m.global)&&0==y.active++&&y.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!KA.test(m.type),l=m.url.replace(OA,""),m.hasContent?m.data&&m.processData&&0===(m.contentType||"").indexOf("application/x-www-form-urlencoded")&&(m.data=m.data.replace(DA,"+")):(c=m.url.slice(l.length),m.data&&(m.processData||"string"==typeof m.data)&&(l+=(BA.test(l)?"&":"?")+m.data,delete m.data),!1===m.cache&&(l=l.replace(wA,"$1"),c=(BA.test(l)?"&":"?")+"_="+yA.guid+++c),m.url=l+c),m.ifModified&&(y.lastModified[l]&&M.setRequestHeader("If-Modified-Since",y.lastModified[l]),y.etag[l]&&M.setRequestHeader("If-None-Match",y.etag[l])),(m.data&&m.hasContent&&!1!==m.contentType||A.contentType)&&M.setRequestHeader("Content-Type",m.contentType),M.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+VA+"; q=0.01":""):m.accepts["*"]),m.headers)M.setRequestHeader(u,m.headers[u]);if(m.beforeSend&&(!1===m.beforeSend.call(d,M,m)||r))return M.abort();if(b="abort",f.add(m.complete),M.done(m.success),M.fail(m.error),n=NA(YA,m,A,M)){if(M.readyState=1,C&&p.trigger("ajaxSend",[M,m]),r)return M;m.async&&m.timeout>0&&(o=t.setTimeout((function(){M.abort("timeout")}),m.timeout));try{r=!1,n.send(g,B)}catch(e){if(r)throw e;B(-1,e)}}else B(-1,"No Transport");function B(e,A,s,a){var u,c,E,g,v,b=A;r||(r=!0,o&&t.clearTimeout(o),n=void 0,i=a||"",M.readyState=e>0?4:0,u=e>=200&&e<300||304===e,s&&(g=function(e,A,n){for(var t,l,i,s,o=e.contents,a=e.dataTypes;"*"===a[0];)a.shift(),void 0===t&&(t=e.mimeType||A.getResponseHeader("Content-Type"));if(t)for(l in o)if(o[l]&&o[l].test(t)){a.unshift(l);break}if(a[0]in n)i=a[0];else{for(l in n){if(!a[0]||e.converters[l+" "+a[0]]){i=l;break}s||(s=l)}i=i||s}if(i)return i!==a[0]&&a.unshift(i),n[i]}(m,M,s)),!u&&y.inArray("script",m.dataTypes)>-1&&y.inArray("json",m.dataTypes)<0&&(m.converters["text script"]=function(){}),g=function(e,A,n,t){var l,i,s,o,a,r={},C=e.dataTypes.slice();if(C[1])for(s in e.converters)r[s.toLowerCase()]=e.converters[s];for(i=C.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=A),!a&&t&&e.dataFilter&&(A=e.dataFilter(A,e.dataType)),a=i,i=C.shift())if("*"===i)i=a;else if("*"!==a&&a!==i){if(!(s=r[a+" "+i]||r["* "+i]))for(l in r)if((o=l.split(" "))[1]===i&&(s=r[a+" "+o[0]]||r["* "+o[0]])){!0===s?s=r[l]:!0!==r[l]&&(i=o[0],C.unshift(o[1]));break}if(!0!==s)if(s&&e.throws)A=s(A);else try{A=s(A)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+a+" to "+i}}}return{state:"success",data:A}}(m,g,M,u),u?(m.ifModified&&((v=M.getResponseHeader("Last-Modified"))&&(y.lastModified[l]=v),(v=M.getResponseHeader("etag"))&&(y.etag[l]=v)),204===e||"HEAD"===m.type?b="nocontent":304===e?b="notmodified":(b=g.state,c=g.data,u=!(E=g.error))):(E=b,!e&&b||(b="error",e<0&&(e=0))),M.status=e,M.statusText=(A||b)+"",u?h.resolveWith(d,[c,b,M]):h.rejectWith(d,[M,b,E]),M.statusCode(I),I=void 0,C&&p.trigger(u?"ajaxSuccess":"ajaxError",[M,m,u?c:E]),f.fireWith(d,[M,b]),C&&(p.trigger("ajaxComplete",[M,m]),--y.active||y.event.trigger("ajaxStop")))}return M},getJSON:function(e,A,n){return y.get(e,A,n,"json")},getScript:function(e,A){return y.get(e,void 0,A,"script")}}),y.each(["get","post"],(function(e,A){y[A]=function(e,n,t,l){return f(n)&&(l=l||t,t=n,n=void 0),y.ajax(y.extend({url:e,type:A,dataType:l,data:n,success:t},y.isPlainObject(e)&&e))}})),y.ajaxPrefilter((function(e){var A;for(A in e.headers)"content-type"===A.toLowerCase()&&(e.contentType=e.headers[A]||"")})),y._evalUrl=function(e,A,n){return y.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){y.globalEval(e,A,n)}})},y.fn.extend({wrapAll:function(e){var A;return this[0]&&(f(e)&&(e=e.call(this[0])),A=y(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&A.insertBefore(this[0]),A.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return f(e)?this.each((function(A){y(this).wrapInner(e.call(this,A))})):this.each((function(){var A=y(this),n=A.contents();n.length?n.wrapAll(e):A.append(e)}))},wrap:function(e){var A=f(e);return this.each((function(n){y(this).wrapAll(A?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){y(this).replaceWith(this.childNodes)})),this}}),y.expr.pseudos.hidden=function(e){return!y.expr.pseudos.visible(e)},y.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},y.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(e){}};var UA={0:200,1223:204},LA=y.ajaxSettings.xhr();h.cors=!!LA&&"withCredentials"in LA,h.ajax=LA=!!LA,y.ajaxTransport((function(e){var A,n;if(h.cors||LA&&!e.crossDomain)return{send:function(l,i){var s,o=e.xhr();if(o.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)o[s]=e.xhrFields[s];for(s in e.mimeType&&o.overrideMimeType&&o.overrideMimeType(e.mimeType),e.crossDomain||l["X-Requested-With"]||(l["X-Requested-With"]="XMLHttpRequest"),l)o.setRequestHeader(s,l[s]);A=function(e){return function(){A&&(A=n=o.onload=o.onerror=o.onabort=o.ontimeout=o.onreadystatechange=null,"abort"===e?o.abort():"error"===e?"number"!=typeof o.status?i(0,"error"):i(o.status,o.statusText):i(UA[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=A(),n=o.onerror=o.ontimeout=A("error"),void 0!==o.onabort?o.onabort=n:o.onreadystatechange=function(){4===o.readyState&&t.setTimeout((function(){A&&n()}))},A=A("abort");try{o.send(e.hasContent&&e.data||null)}catch(e){if(A)throw e}},abort:function(){A&&A()}}})),y.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),y.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return y.globalEval(e),e}}}),y.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),y.ajaxTransport("script",(function(e){var A,n;if(e.crossDomain||e.scriptAttrs)return{send:function(t,l){A=y("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){A.remove(),n=null,e&&l("error"===e.type?404:200,e.type)}),E.head.appendChild(A[0])},abort:function(){n&&n()}}}));var jA,qA=[],RA=/(=)\?(?=&|$)|\?\?/;y.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=qA.pop()||y.expando+"_"+yA.guid++;return this[e]=!0,e}}),y.ajaxPrefilter("json jsonp",(function(e,A,n){var l,i,s,o=!1!==e.jsonp&&(RA.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&RA.test(e.data)&&"data");if(o||"jsonp"===e.dataTypes[0])return l=e.jsonpCallback=f(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,o?e[o]=e[o].replace(RA,"$1"+l):!1!==e.jsonp&&(e.url+=(BA.test(e.url)?"&":"?")+e.jsonp+"="+l),e.converters["script json"]=function(){return s||y.error(l+" was not called"),s[0]},e.dataTypes[0]="json",i=t[l],t[l]=function(){s=arguments},n.always((function(){void 0===i?y(t).removeProp(l):t[l]=i,e[l]&&(e.jsonpCallback=A.jsonpCallback,qA.push(l)),s&&f(i)&&i(s[0]),s=i=void 0})),"script"})),h.createHTMLDocument=((jA=E.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===jA.childNodes.length),y.parseHTML=function(e,A,n){return"string"!=typeof e?[]:("boolean"==typeof A&&(n=A,A=!1),A||(h.createHTMLDocument?((t=(A=E.implementation.createHTMLDocument("")).createElement("base")).href=E.location.href,A.head.appendChild(t)):A=E),i=!n&&[],(l=D.exec(e))?[A.createElement(l[1])]:(l=Me([e],A,i),i&&i.length&&y(i).remove(),y.merge([],l.childNodes)));var t,l,i},y.fn.load=function(e,A,n){var t,l,i,s=this,o=e.indexOf(" ");return o>-1&&(t=fA(e.slice(o)),e=e.slice(0,o)),f(A)?(n=A,A=void 0):A&&"object"==typeof A&&(l="POST"),s.length>0&&y.ajax({url:e,type:l||"GET",dataType:"html",data:A}).done((function(e){i=arguments,s.html(t?y("<div>").append(y.parseHTML(e)).find(t):e)})).always(n&&function(e,A){s.each((function(){n.apply(this,i||[e.responseText,A,e])}))}),this},y.expr.pseudos.animated=function(e){return y.grep(y.timers,(function(A){return e===A.elem})).length},y.offset={setOffset:function(e,A,n){var t,l,i,s,o,a,r=y.css(e,"position"),C=y(e),u={};"static"===r&&(e.style.position="relative"),o=C.offset(),i=y.css(e,"top"),a=y.css(e,"left"),("absolute"===r||"fixed"===r)&&(i+a).indexOf("auto")>-1?(s=(t=C.position()).top,l=t.left):(s=parseFloat(i)||0,l=parseFloat(a)||0),f(A)&&(A=A.call(e,n,y.extend({},o))),null!=A.top&&(u.top=A.top-o.top+s),null!=A.left&&(u.left=A.left-o.left+l),"using"in A?A.using.call(e,u):C.css(u)}},y.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(A){y.offset.setOffset(this,e,A)}));var A,n,t=this[0];return t?t.getClientRects().length?(A=t.getBoundingClientRect(),n=t.ownerDocument.defaultView,{top:A.top+n.pageYOffset,left:A.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,A,n,t=this[0],l={top:0,left:0};if("fixed"===y.css(t,"position"))A=t.getBoundingClientRect();else{for(A=this.offset(),n=t.ownerDocument,e=t.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===y.css(e,"position");)e=e.parentNode;e&&e!==t&&1===e.nodeType&&((l=y(e).offset()).top+=y.css(e,"borderTopWidth",!0),l.left+=y.css(e,"borderLeftWidth",!0))}return{top:A.top-l.top-y.css(t,"marginTop",!0),left:A.left-l.left-y.css(t,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===y.css(e,"position");)e=e.offsetParent;return e||se}))}}),y.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,A){var n="pageYOffset"===A;y.fn[e]=function(t){return L(this,(function(e,t,l){var i;if(I(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===l)return i?i[A]:e[t];i?i.scrollTo(n?i.pageXOffset:l,n?l:i.pageYOffset):e[t]=l}),e,t,arguments.length)}})),y.each(["top","left"],(function(e,A){y.cssHooks[A]=Le(h.pixelPosition,(function(e,n){if(n)return n=Ue(e,A),Pe.test(n)?y(e).position()[A]+"px":n}))})),y.each({Height:"height",Width:"width"},(function(e,A){y.each({padding:"inner"+e,content:A,"":"outer"+e},(function(n,t){y.fn[t]=function(l,i){var s=arguments.length&&(n||"boolean"!=typeof l),o=n||(!0===l||!0===i?"margin":"border");return L(this,(function(A,n,l){var i;return I(A)?0===t.indexOf("outer")?A["inner"+e]:A.document.documentElement["client"+e]:9===A.nodeType?(i=A.documentElement,Math.max(A.body["scroll"+e],i["scroll"+e],A.body["offset"+e],i["offset"+e],i["client"+e])):void 0===l?y.css(A,n,o):y.style(A,n,l,o)}),A,s?l:void 0,s)}}))})),y.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,A){y.fn[A]=function(e){return this.on(A,e)}})),y.fn.extend({bind:function(e,A,n){return this.on(e,null,A,n)},unbind:function(e,A){return this.off(e,null,A)},delegate:function(e,A,n,t){return this.on(A,e,n,t)},undelegate:function(e,A,n){return 1===arguments.length?this.off(e,"**"):this.off(A,e||"**",n)},hover:function(e,A){return this.mouseenter(e).mouseleave(A||e)}}),y.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,A){y.fn[A]=function(e,n){return arguments.length>0?this.on(A,null,e,n):this.trigger(A)}}));var zA=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;y.proxy=function(e,A){var n,t,l;if("string"==typeof A&&(n=e[A],A=e,e=n),f(e))return t=o.call(arguments,2),l=function(){return e.apply(A||this,t.concat(o.call(arguments)))},l.guid=e.guid=e.guid||y.guid++,l},y.holdReady=function(e){e?y.readyWait++:y.ready(!0)},y.isArray=Array.isArray,y.parseJSON=JSON.parse,y.nodeName=W,y.isFunction=f,y.isWindow=I,y.camelCase=z,y.type=b,y.now=Date.now,y.isNumeric=function(e){var A=y.type(e);return("number"===A||"string"===A)&&!isNaN(e-parseFloat(e))},y.trim=function(e){return null==e?"":(e+"").replace(zA,"")},void 0===(n=function(){return y}.apply(A,[]))||(e.exports=n);var $A=t.jQuery,XA=t.$;return y.noConflict=function(e){return t.$===y&&(t.$=XA),e&&t.jQuery===y&&(t.jQuery=$A),y},void 0===l&&(t.jQuery=t.$=y),y}))}},e=>{var A;A="./src/plugin/slider.ts",e(e.s=A)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,