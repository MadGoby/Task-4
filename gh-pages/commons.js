/*! For license information please see commons.js.LICENSE.txt */
(self.webpackChunktest=self.webpackChunktest||[]).push([["commons"],{"./node_modules/autobind-decorator/lib/esm/index.js":(e,n,A)=>{"use strict";function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function l(e,n,A){var l=A.value;if("function"!=typeof l)throw new TypeError("@boundMethod decorator can only be applied to methods not: ".concat(t(l)));var i=!1;return{configurable:!0,get:function(){if(i||this===e.prototype||this.hasOwnProperty(n)||"function"!=typeof l)return l;var A=l.bind(this);return i=!0,Object.defineProperty(this,n,{configurable:!0,get:function(){return A},set:function(e){l=e,delete this[n]}}),i=!1,A},set:function(e){l=e}}}function i(e){var n;return"undefined"!=typeof Reflect&&"function"==typeof Reflect.ownKeys?n=Reflect.ownKeys(e.prototype):(n=Object.getOwnPropertyNames(e.prototype),"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(e.prototype)))),n.forEach((function(n){if("constructor"!==n){var A=Object.getOwnPropertyDescriptor(e.prototype,n);"function"==typeof A.value&&Object.defineProperty(e.prototype,n,l(e,n,A))}})),e}function s(){return 1===arguments.length?i.apply(void 0,arguments):l.apply(void 0,arguments)}A.r(n),A.d(n,{boundClass:()=>i,boundMethod:()=>l,default:()=>s})},"./src/plugin/Model/Model.ts":(e,n)=>{"use strict";var A,t,l,i,s,o,a=(A="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Model\\Model.ts",t="8a11d455f9ad3cd2cd1a0a5bb6e710406f68fd18",l=new(0,function(){}.constructor)("return this")(),s={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Model\\Model.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:0},end:{line:3,column:23}},2:{start:{line:6,column:8},end:{line:6,column:37}},3:{start:{line:7,column:24},end:{line:7,column:41}},4:{start:{line:8,column:21},end:{line:8,column:62}},5:{start:{line:9,column:19},end:{line:9,column:56}},6:{start:{line:10,column:8},end:{line:10,column:38}},7:{start:{line:11,column:8},end:{line:11,column:34}},8:{start:{line:12,column:8},end:{line:18,column:10}},9:{start:{line:21,column:24},end:{line:21,column:41}},10:{start:{line:22,column:28},end:{line:22,column:56}},11:{start:{line:23,column:8},end:{line:30,column:11}},12:{start:{line:24,column:26},end:{line:24,column:38}},13:{start:{line:25,column:12},end:{line:29,column:15}},14:{start:{line:31,column:8},end:{line:31,column:40}},15:{start:{line:34,column:25},end:{line:34,column:43}},16:{start:{line:35,column:8},end:{line:36,column:49}},17:{start:{line:36,column:12},end:{line:36,column:49}},18:{start:{line:37,column:8},end:{line:38,column:49}},19:{start:{line:38,column:12},end:{line:38,column:49}},20:{start:{line:39,column:38},end:{line:39,column:77}},21:{start:{line:40,column:41},end:{line:40,column:81}},22:{start:{line:41,column:36},end:{line:41,column:73}},23:{start:{line:42,column:35},end:{line:42,column:103}},24:{start:{line:43,column:33},end:{line:43,column:101}},25:{start:{line:44,column:8},end:{line:49,column:9}},26:{start:{line:45,column:12},end:{line:45,column:48}},27:{start:{line:47,column:13},end:{line:49,column:9}},28:{start:{line:48,column:12},end:{line:48,column:40}},29:{start:{line:50,column:8},end:{line:51,column:50}},30:{start:{line:51,column:12},end:{line:51,column:50}},31:{start:{line:52,column:8},end:{line:52,column:26}},32:{start:{line:55,column:8},end:{line:55,column:64}},33:{start:{line:58,column:8},end:{line:58,column:65}},34:{start:{line:61,column:27},end:{line:61,column:94}},35:{start:{line:62,column:31},end:{line:62,column:71}},36:{start:{line:63,column:26},end:{line:63,column:67}},37:{start:{line:64,column:8},end:{line:71,column:9}},38:{start:{line:66,column:16},end:{line:66,column:48}},39:{start:{line:68,column:16},end:{line:68,column:48}},40:{start:{line:70,column:16},end:{line:70,column:48}},41:{start:{line:74,column:8},end:{line:75,column:26}},42:{start:{line:75,column:12},end:{line:75,column:26}},43:{start:{line:76,column:31},end:{line:76,column:81}},44:{start:{line:77,column:29},end:{line:77,column:77}},45:{start:{line:78,column:30},end:{line:78,column:81}},46:{start:{line:79,column:37},end:{line:79,column:94}},47:{start:{line:80,column:39},end:{line:80,column:94}},48:{start:{line:81,column:8},end:{line:82,column:26}},49:{start:{line:82,column:12},end:{line:82,column:26}},50:{start:{line:83,column:8},end:{line:84,column:24}},51:{start:{line:84,column:12},end:{line:84,column:24}},52:{start:{line:85,column:8},end:{line:85,column:62}},53:{start:{line:88,column:26},end:{line:88,column:180}},54:{start:{line:89,column:8},end:{line:89,column:49}},55:{start:{line:92,column:30},end:{line:92,column:115}},56:{start:{line:93,column:32},end:{line:93,column:116}},57:{start:{line:94,column:8},end:{line:101,column:9}},58:{start:{line:96,column:16},end:{line:96,column:37}},59:{start:{line:98,column:16},end:{line:98,column:39}},60:{start:{line:100,column:16},end:{line:100,column:29}},61:{start:{line:104,column:32},end:{line:104,column:69}},62:{start:{line:105,column:8},end:{line:106,column:25}},63:{start:{line:106,column:12},end:{line:106,column:25}},64:{start:{line:107,column:8},end:{line:109,column:61}},65:{start:{line:112,column:22},end:{line:112,column:51}},66:{start:{line:113,column:29},end:{line:114,column:37}},67:{start:{line:115,column:8},end:{line:123,column:9}},68:{start:{line:116,column:12},end:{line:121,column:15}},69:{start:{line:122,column:12},end:{line:122,column:19}},70:{start:{line:124,column:23},end:{line:124,column:65}},71:{start:{line:125,column:25},end:{line:127,column:52}},72:{start:{line:128,column:8},end:{line:129,column:19}},73:{start:{line:129,column:12},end:{line:129,column:19}},74:{start:{line:130,column:8},end:{line:134,column:11}},75:{start:{line:137,column:23},end:{line:137,column:81}},76:{start:{line:138,column:8},end:{line:142,column:11}},77:{start:{line:145,column:31},end:{line:145,column:131}},78:{start:{line:145,column:43},end:{line:145,column:130}},79:{start:{line:146,column:8},end:{line:153,column:10}},80:{start:{line:156,column:0},end:{line:156,column:22}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:28},end:{line:19,column:5}},line:5},1:{name:"(anonymous_1)",decl:{start:{line:20,column:4},end:{line:20,column:5}},loc:{start:{line:20,column:19},end:{line:32,column:5}},line:20},2:{name:"(anonymous_2)",decl:{start:{line:23,column:28},end:{line:23,column:29}},loc:{start:{line:23,column:37},end:{line:30,column:9}},line:23},3:{name:"(anonymous_3)",decl:{start:{line:33,column:4},end:{line:33,column:5}},loc:{start:{line:33,column:28},end:{line:53,column:5}},line:33},4:{name:"(anonymous_4)",decl:{start:{line:54,column:4},end:{line:54,column:5}},loc:{start:{line:54,column:27},end:{line:56,column:5}},line:54},5:{name:"(anonymous_5)",decl:{start:{line:57,column:4},end:{line:57,column:5}},loc:{start:{line:57,column:21},end:{line:59,column:5}},line:57},6:{name:"(anonymous_6)",decl:{start:{line:60,column:4},end:{line:60,column:5}},loc:{start:{line:60,column:36},end:{line:72,column:5}},line:60},7:{name:"(anonymous_7)",decl:{start:{line:73,column:4},end:{line:73,column:5}},loc:{start:{line:73,column:40},end:{line:86,column:5}},line:73},8:{name:"(anonymous_8)",decl:{start:{line:87,column:4},end:{line:87,column:5}},loc:{start:{line:87,column:36},end:{line:90,column:5}},line:87},9:{name:"(anonymous_9)",decl:{start:{line:91,column:4},end:{line:91,column:5}},loc:{start:{line:91,column:46},end:{line:102,column:5}},line:91},10:{name:"(anonymous_10)",decl:{start:{line:103,column:4},end:{line:103,column:5}},loc:{start:{line:103,column:38},end:{line:110,column:5}},line:103},11:{name:"(anonymous_11)",decl:{start:{line:111,column:4},end:{line:111,column:5}},loc:{start:{line:111,column:37},end:{line:135,column:5}},line:111},12:{name:"(anonymous_12)",decl:{start:{line:136,column:4},end:{line:136,column:5}},loc:{start:{line:136,column:25},end:{line:143,column:5}},line:136},13:{name:"(anonymous_13)",decl:{start:{line:144,column:4},end:{line:144,column:5}},loc:{start:{line:144,column:33},end:{line:154,column:5}},line:144},14:{name:"(anonymous_14)",decl:{start:{line:145,column:31},end:{line:145,column:32}},loc:{start:{line:145,column:43},end:{line:145,column:130}},line:145}},branchMap:{0:{loc:{start:{line:8,column:21},end:{line:8,column:62}},type:"cond-expr",locations:[{start:{line:8,column:36},end:{line:8,column:48}},{start:{line:8,column:51},end:{line:8,column:62}}],line:8},1:{loc:{start:{line:9,column:19},end:{line:9,column:56}},type:"cond-expr",locations:[{start:{line:9,column:32},end:{line:9,column:42}},{start:{line:9,column:45},end:{line:9,column:56}}],line:9},2:{loc:{start:{line:35,column:8},end:{line:36,column:49}},type:"if",locations:[{start:{line:35,column:8},end:{line:36,column:49}},{start:{line:35,column:8},end:{line:36,column:49}}],line:35},3:{loc:{start:{line:37,column:8},end:{line:38,column:49}},type:"if",locations:[{start:{line:37,column:8},end:{line:38,column:49}},{start:{line:37,column:8},end:{line:38,column:49}}],line:37},4:{loc:{start:{line:39,column:38},end:{line:39,column:77}},type:"binary-expr",locations:[{start:{line:39,column:38},end:{line:39,column:51}},{start:{line:39,column:55},end:{line:39,column:77}}],line:39},5:{loc:{start:{line:40,column:41},end:{line:40,column:81}},type:"binary-expr",locations:[{start:{line:40,column:41},end:{line:40,column:55}},{start:{line:40,column:59},end:{line:40,column:81}}],line:40},6:{loc:{start:{line:41,column:36},end:{line:41,column:73}},type:"binary-expr",locations:[{start:{line:41,column:36},end:{line:41,column:49}},{start:{line:41,column:53},end:{line:41,column:73}}],line:41},7:{loc:{start:{line:42,column:35},end:{line:42,column:103}},type:"binary-expr",locations:[{start:{line:42,column:35},end:{line:42,column:56}},{start:{line:42,column:60},end:{line:42,column:103}}],line:42},8:{loc:{start:{line:43,column:33},end:{line:43,column:101}},type:"binary-expr",locations:[{start:{line:43,column:33},end:{line:43,column:52}},{start:{line:43,column:56},end:{line:43,column:101}}],line:43},9:{loc:{start:{line:44,column:8},end:{line:49,column:9}},type:"if",locations:[{start:{line:44,column:8},end:{line:49,column:9}},{start:{line:44,column:8},end:{line:49,column:9}}],line:44},10:{loc:{start:{line:47,column:13},end:{line:49,column:9}},type:"if",locations:[{start:{line:47,column:13},end:{line:49,column:9}},{start:{line:47,column:13},end:{line:49,column:9}}],line:47},11:{loc:{start:{line:50,column:8},end:{line:51,column:50}},type:"if",locations:[{start:{line:50,column:8},end:{line:51,column:50}},{start:{line:50,column:8},end:{line:51,column:50}}],line:50},12:{loc:{start:{line:61,column:27},end:{line:61,column:94}},type:"binary-expr",locations:[{start:{line:61,column:27},end:{line:61,column:51}},{start:{line:61,column:55},end:{line:61,column:94}}],line:61},13:{loc:{start:{line:63,column:26},end:{line:63,column:67}},type:"binary-expr",locations:[{start:{line:63,column:26},end:{line:63,column:49}},{start:{line:63,column:53},end:{line:63,column:67}}],line:63},14:{loc:{start:{line:64,column:8},end:{line:71,column:9}},type:"switch",locations:[{start:{line:65,column:12},end:{line:66,column:48}},{start:{line:67,column:12},end:{line:68,column:48}},{start:{line:69,column:12},end:{line:70,column:48}}],line:64},15:{loc:{start:{line:74,column:8},end:{line:75,column:26}},type:"if",locations:[{start:{line:74,column:8},end:{line:75,column:26}},{start:{line:74,column:8},end:{line:75,column:26}}],line:74},16:{loc:{start:{line:79,column:37},end:{line:79,column:94}},type:"binary-expr",locations:[{start:{line:79,column:37},end:{line:79,column:50}},{start:{line:79,column:54},end:{line:79,column:94}}],line:79},17:{loc:{start:{line:80,column:39},end:{line:80,column:94}},type:"binary-expr",locations:[{start:{line:80,column:39},end:{line:80,column:52}},{start:{line:80,column:56},end:{line:80,column:94}}],line:80},18:{loc:{start:{line:81,column:8},end:{line:82,column:26}},type:"if",locations:[{start:{line:81,column:8},end:{line:82,column:26}},{start:{line:81,column:8},end:{line:82,column:26}}],line:81},19:{loc:{start:{line:83,column:8},end:{line:84,column:24}},type:"if",locations:[{start:{line:83,column:8},end:{line:84,column:24}},{start:{line:83,column:8},end:{line:84,column:24}}],line:83},20:{loc:{start:{line:85,column:15},end:{line:85,column:61}},type:"cond-expr",locations:[{start:{line:85,column:48},end:{line:85,column:54}},{start:{line:85,column:57},end:{line:85,column:61}}],line:85},21:{loc:{start:{line:94,column:8},end:{line:101,column:9}},type:"switch",locations:[{start:{line:95,column:12},end:{line:96,column:37}},{start:{line:97,column:12},end:{line:98,column:39}},{start:{line:99,column:12},end:{line:100,column:29}}],line:94},22:{loc:{start:{line:105,column:8},end:{line:106,column:25}},type:"if",locations:[{start:{line:105,column:8},end:{line:106,column:25}},{start:{line:105,column:8},end:{line:106,column:25}}],line:105},23:{loc:{start:{line:107,column:15},end:{line:109,column:60}},type:"cond-expr",locations:[{start:{line:108,column:14},end:{line:108,column:60}},{start:{line:109,column:14},end:{line:109,column:60}}],line:107},24:{loc:{start:{line:113,column:29},end:{line:114,column:37}},type:"binary-expr",locations:[{start:{line:113,column:30},end:{line:113,column:56}},{start:{line:113,column:60},end:{line:113,column:84}},{start:{line:114,column:15},end:{line:114,column:37}}],line:113},25:{loc:{start:{line:115,column:8},end:{line:123,column:9}},type:"if",locations:[{start:{line:115,column:8},end:{line:123,column:9}},{start:{line:115,column:8},end:{line:123,column:9}}],line:115},26:{loc:{start:{line:124,column:23},end:{line:124,column:65}},type:"cond-expr",locations:[{start:{line:124,column:52},end:{line:124,column:58}},{start:{line:124,column:61},end:{line:124,column:65}}],line:124},27:{loc:{start:{line:125,column:25},end:{line:127,column:52}},type:"cond-expr",locations:[{start:{line:126,column:14},end:{line:126,column:60}},{start:{line:127,column:14},end:{line:127,column:52}}],line:125},28:{loc:{start:{line:128,column:8},end:{line:129,column:19}},type:"if",locations:[{start:{line:128,column:8},end:{line:129,column:19}},{start:{line:128,column:8},end:{line:129,column:19}}],line:128}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0,0],15:[0,0],16:[0,0],17:[0,0],18:[0,0],19:[0,0],20:[0,0],21:[0,0,0],22:[0,0],23:[0,0],24:[0,0,0],25:[0,0],26:[0,0],27:[0,0],28:[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Model\\Model.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Model\\Model.ts"],names:[],mappings:"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",sourcesContent:["import {\n  BasicModelSettings,\n  CalculationData,\n  DataForRefreshingModel,\n  DataForValueScale,\n  UnspecifiedValueTarget, ValueData,\n  ValueTarget,\n} from './types';\nimport { SliderOptions } from '../types';\n\nclass Model {\n  public values: BasicModelSettings;\n\n  private readonly getOptions: () => SliderOptions;\n\n  constructor(getOptions: () => SliderOptions) {\n    this.getOptions = getOptions;\n    const options: SliderOptions = this.getOptions();\n\n    const from: number = options.from ? options.from : options.min;\n    const to: number = options.to ? options.to : options.max;\n    this.getOptions().from = from;\n    this.getOptions().to = to;\n\n    this.values = {\n      min: Model.convertFractional(options.min),\n      max: Model.convertFractional(options.max),\n      from: Model.convertFractional(from),\n      to: Model.convertFractional(to),\n      step: Model.convertFractional(Number(options.step)),\n    };\n  }\n\n  public updateValues(): void {\n    const options: SliderOptions = this.getOptions();\n    const modelValues: Array<ValueTarget> = ['min', 'max', 'from', 'to'];\n\n    modelValues.forEach((key: ValueTarget) => {\n      const value: number = options[key] as number;\n\n      this.writeDataToModel({\n        target: key,\n        value: Model.convertFractional(value),\n        isDouble: options.double,\n      });\n    });\n\n    this.values.step = options.step;\n  }\n\n  private fixIncorrectValue(data: DataForRefreshingModel): number {\n    let fixedValue: number = Number(data.value);\n    if (fixedValue > Number(this.values.max)) fixedValue = Number(this.values.max);\n    if (fixedValue < Number(this.values.min)) fixedValue = Number(this.values.min);\n\n    const isDoubleAndFromTarget: boolean = data.isDouble && data.target === 'from';\n    const isNotDoubleAndFromTarget: boolean = !data.isDouble && data.target === 'from';\n    const isDoubleAndToTarget: boolean = data.isDouble && data.target === 'to';\n    const isFromBiggerThenTo: boolean = isDoubleAndFromTarget && Number(data.value) > Number(this.values.to);\n    const isToLessThenFrom: boolean = isDoubleAndToTarget && Number(data.value) < Number(this.values.from);\n\n    if (isFromBiggerThenTo) {\n      fixedValue = Number(this.values.to);\n    } else if (isNotDoubleAndFromTarget) {\n      this.values.to = fixedValue;\n    }\n    if (isToLessThenFrom) fixedValue = Number(this.values.from);\n\n    return fixedValue;\n  }\n\n  public writeDataToModel(data: DataForRefreshingModel): void {\n    this.values[data.target] = this.fixIncorrectValue(data);\n  }\n\n  public getTotalValues(): number {\n    return Number(this.values.max) - Number(this.values.min);\n  }\n\n  public static convertFractional(value: number): number {\n    const isLastZero: boolean = !Number.isInteger(value) && `${value.toFixed(2)}`.slice(-1) === '0';\n    const areLastTwoZero: boolean = `${value.toFixed(2)}`.slice(-2) === '00';\n    const isInteger: boolean = Number.isInteger(value) || areLastTwoZero;\n\n    switch (true) {\n      case isInteger:\n        return Number(value.toFixed(0));\n      case isLastZero:\n        return Number(value.toFixed(1));\n      default:\n        return Number(value.toFixed(2));\n    }\n  }\n\n  private determineValueTarget(value: number, target: UnspecifiedValueTarget): ValueTarget {\n    if (target !== 'unspecified') return target;\n\n    const fromDifference: number = Math.abs(Number(this.values.from) - Number(value));\n    const toDifference: number = Math.abs(Number(this.values.to) - Number(value));\n    const isFromEqualTo: boolean = Number(this.values.from) === Number(this.values.to);\n    const isValueLessThenEqual: boolean = isFromEqualTo && Number(value) < Number(this.values.from);\n    const isValueBiggerThenEqual: boolean = isFromEqualTo && Number(value) > Number(this.values.to);\n\n    if (isValueLessThenEqual) return 'from';\n    if (isValueBiggerThenEqual) return 'to';\n    return fromDifference <= toDifference ? 'from' : 'to';\n  }\n\n  private calculateValue(calculationData: CalculationData): number {\n    const newValue: number = (Number(this.values.min) + (Number(calculationData.position) / (\n      Number(calculationData.sliderWidth) / (Number(this.values.max) - Number(this.values.min)))\n    ));\n    return Model.convertFractional(newValue);\n  }\n\n  private calculateOutStepRangeValue(value: number, target: 'from' | 'to'): number | false {\n    const lessStepValue: number = Math.floor(this.values[target] / Number(this.values.step)) * Number(this.values.step);\n    const biggerStepValue: number = Math.ceil(this.values[target] / Number(this.values.step)) * Number(this.values.step);\n\n    switch (true) {\n      case value <= lessStepValue:\n        return lessStepValue;\n      case value >= biggerStepValue:\n        return biggerStepValue;\n      default:\n        return false;\n    }\n  }\n\n  private calculateStepValue(value: number, target: 'from' | 'to'): number | false {\n    const valueDifference: number = Math.abs(value - this.values[target]);\n\n    if (valueDifference < this.values.step) return false;\n\n    return value < this.values[target]\n      ? this.values[target] - Number(this.values.step)\n      : this.values[target] + Number(this.values.step);\n  }\n\n  public writeValueFromPosition(settings: CalculationData): void {\n    const value: number = this.calculateValue(settings);\n    const isStepTarget = (settings.target === 'from' || settings.target === 'to')\n      && this.values.step !== 0;\n\n    if (!isStepTarget) {\n      this.writeValue({\n        value,\n        target: settings.target,\n        isDouble: settings.isDouble,\n        sliderWidth: settings.sliderWidth,\n      });\n      return;\n    }\n\n    const target: 'from' | 'to' = settings.target === 'from' ? 'from' : 'to';\n    const newValue: number | false = !Number.isInteger(this.values[target] / Number(this.values.step))\n      ? this.calculateOutStepRangeValue(value, target)\n      : this.calculateStepValue(value, target);\n\n    if (newValue === false) return;\n\n    this.writeDataToModel({\n      target,\n      value: newValue,\n      isDouble: settings.isDouble,\n    });\n  }\n\n  public writeValue(settings: ValueData): void {\n    const target: ValueTarget = this.determineValueTarget(settings.value, settings.target);\n\n    this.writeDataToModel({\n      target,\n      value: settings.value,\n      isDouble: settings.isDouble,\n    });\n  }\n\n  public calculateDataForValueScale(): DataForValueScale {\n    const calculateValue = (ratio: number) => (\n      ((Number(this.values.max) - Number(this.values.min)) * ratio) + Number(this.values.min)\n    );\n\n    return {\n      min: String(Model.convertFractional(Number(this.values.min))),\n      max: String(Model.convertFractional(Number(this.values.max))),\n      20: String(Model.convertFractional(calculateValue(0.2))),\n      40: String(Model.convertFractional(calculateValue(0.4))),\n      60: String(Model.convertFractional(calculateValue(0.6))),\n      80: String(Model.convertFractional(calculateValue(0.8))),\n    };\n  }\n}\n\nexport { Model };\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(o=l[i="__coverage__"]||(l[i]={}))[A]&&o[A].hash===t?o[A]:(s.hash=t,o[A]=s));a.s[0]++,Object.defineProperty(n,"__esModule",{value:!0}),a.s[1]++,n.Model=void 0;class r{constructor(e){a.f[0]++,a.s[2]++,this.getOptions=e;const n=(a.s[3]++,this.getOptions()),A=(a.s[4]++,n.from?(a.b[0][0]++,n.from):(a.b[0][1]++,n.min)),t=(a.s[5]++,n.to?(a.b[1][0]++,n.to):(a.b[1][1]++,n.max));a.s[6]++,this.getOptions().from=A,a.s[7]++,this.getOptions().to=t,a.s[8]++,this.values={min:r.convertFractional(n.min),max:r.convertFractional(n.max),from:r.convertFractional(A),to:r.convertFractional(t),step:r.convertFractional(Number(n.step))}}updateValues(){a.f[1]++;const e=(a.s[9]++,this.getOptions()),n=(a.s[10]++,["min","max","from","to"]);a.s[11]++,n.forEach((n=>{a.f[2]++;const A=(a.s[12]++,e[n]);a.s[13]++,this.writeDataToModel({target:n,value:r.convertFractional(A),isDouble:e.double})})),a.s[14]++,this.values.step=e.step}fixIncorrectValue(e){a.f[3]++;let n=(a.s[15]++,Number(e.value));a.s[16]++,n>Number(this.values.max)?(a.b[2][0]++,a.s[17]++,n=Number(this.values.max)):a.b[2][1]++,a.s[18]++,n<Number(this.values.min)?(a.b[3][0]++,a.s[19]++,n=Number(this.values.min)):a.b[3][1]++;const A=(a.s[20]++,a.b[4][0]++,e.isDouble&&(a.b[4][1]++,"from"===e.target)),t=(a.s[21]++,a.b[5][0]++,!e.isDouble&&(a.b[5][1]++,"from"===e.target)),l=(a.s[22]++,a.b[6][0]++,e.isDouble&&(a.b[6][1]++,"to"===e.target)),i=(a.s[23]++,a.b[7][0]++,A&&(a.b[7][1]++,Number(e.value)>Number(this.values.to))),s=(a.s[24]++,a.b[8][0]++,l&&(a.b[8][1]++,Number(e.value)<Number(this.values.from)));return a.s[25]++,i?(a.b[9][0]++,a.s[26]++,n=Number(this.values.to)):(a.b[9][1]++,a.s[27]++,t?(a.b[10][0]++,a.s[28]++,this.values.to=n):a.b[10][1]++),a.s[29]++,s?(a.b[11][0]++,a.s[30]++,n=Number(this.values.from)):a.b[11][1]++,a.s[31]++,n}writeDataToModel(e){a.f[4]++,a.s[32]++,this.values[e.target]=this.fixIncorrectValue(e)}getTotalValues(){return a.f[5]++,a.s[33]++,Number(this.values.max)-Number(this.values.min)}static convertFractional(e){a.f[6]++;const n=(a.s[34]++,a.b[12][0]++,!Number.isInteger(e)&&(a.b[12][1]++,"0"===`${e.toFixed(2)}`.slice(-1))),A=(a.s[35]++,"00"===`${e.toFixed(2)}`.slice(-2)),t=(a.s[36]++,a.b[13][0]++,Number.isInteger(e)||(a.b[13][1]++,A));switch(a.s[37]++,!0){case t:return a.b[14][0]++,a.s[38]++,Number(e.toFixed(0));case n:return a.b[14][1]++,a.s[39]++,Number(e.toFixed(1));default:return a.b[14][2]++,a.s[40]++,Number(e.toFixed(2))}}determineValueTarget(e,n){if(a.f[7]++,a.s[41]++,"unspecified"!==n)return a.b[15][0]++,a.s[42]++,n;a.b[15][1]++;const A=(a.s[43]++,Math.abs(Number(this.values.from)-Number(e))),t=(a.s[44]++,Math.abs(Number(this.values.to)-Number(e))),l=(a.s[45]++,Number(this.values.from)===Number(this.values.to)),i=(a.s[46]++,a.b[16][0]++,l&&(a.b[16][1]++,Number(e)<Number(this.values.from))),s=(a.s[47]++,a.b[17][0]++,l&&(a.b[17][1]++,Number(e)>Number(this.values.to)));return a.s[48]++,i?(a.b[18][0]++,a.s[49]++,"from"):(a.b[18][1]++,a.s[50]++,s?(a.b[19][0]++,a.s[51]++,"to"):(a.b[19][1]++,a.s[52]++,A<=t?(a.b[20][0]++,"from"):(a.b[20][1]++,"to")))}calculateValue(e){a.f[8]++;const n=(a.s[53]++,Number(this.values.min)+Number(e.position)/(Number(e.sliderWidth)/(Number(this.values.max)-Number(this.values.min))));return a.s[54]++,r.convertFractional(n)}calculateOutStepRangeValue(e,n){a.f[9]++;const A=(a.s[55]++,Math.floor(this.values[n]/Number(this.values.step))*Number(this.values.step)),t=(a.s[56]++,Math.ceil(this.values[n]/Number(this.values.step))*Number(this.values.step));switch(a.s[57]++,!0){case e<=A:return a.b[21][0]++,a.s[58]++,A;case e>=t:return a.b[21][1]++,a.s[59]++,t;default:return a.b[21][2]++,a.s[60]++,!1}}calculateStepValue(e,n){a.f[10]++;const A=(a.s[61]++,Math.abs(e-this.values[n]));return a.s[62]++,A<this.values.step?(a.b[22][0]++,a.s[63]++,!1):(a.b[22][1]++,a.s[64]++,e<this.values[n]?(a.b[23][0]++,this.values[n]-Number(this.values.step)):(a.b[23][1]++,this.values[n]+Number(this.values.step)))}writeValueFromPosition(e){a.f[11]++;const n=(a.s[65]++,this.calculateValue(e)),A=(a.s[66]++,!(a.b[24][0]++,"from"!==e.target&&(a.b[24][1]++,"to"!==e.target)||(a.b[24][2]++,0===this.values.step)));if(a.s[67]++,!A)return a.b[25][0]++,a.s[68]++,this.writeValue({value:n,target:e.target,isDouble:e.isDouble,sliderWidth:e.sliderWidth}),void a.s[69]++;a.b[25][1]++;const t=(a.s[70]++,"from"===e.target?(a.b[26][0]++,"from"):(a.b[26][1]++,"to")),l=(a.s[71]++,Number.isInteger(this.values[t]/Number(this.values.step))?(a.b[27][1]++,this.calculateStepValue(n,t)):(a.b[27][0]++,this.calculateOutStepRangeValue(n,t)));if(a.s[72]++,!1===l)return a.b[28][0]++,void a.s[73]++;a.b[28][1]++,a.s[74]++,this.writeDataToModel({target:t,value:l,isDouble:e.isDouble})}writeValue(e){a.f[12]++;const n=(a.s[75]++,this.determineValueTarget(e.value,e.target));a.s[76]++,this.writeDataToModel({target:n,value:e.value,isDouble:e.isDouble})}calculateDataForValueScale(){a.f[13]++,a.s[77]++;const e=e=>(a.f[14]++,a.s[78]++,(Number(this.values.max)-Number(this.values.min))*e+Number(this.values.min));return a.s[79]++,{min:String(r.convertFractional(Number(this.values.min))),max:String(r.convertFractional(Number(this.values.max))),20:String(r.convertFractional(e(.2))),40:String(r.convertFractional(e(.4))),60:String(r.convertFractional(e(.6))),80:String(r.convertFractional(e(.8)))}}}a.s[80]++,n.Model=r},"./src/plugin/Model/model.test.ts":(e,n,A)=>{"use strict";var t,l,i,s,o,a,r=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Model\\model.test.ts",l="99ff56776cafd7ae3707872159b828c4d5566fc2",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Model\\model.test.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:16},end:{line:3,column:34}},2:{start:{line:4,column:0},end:{line:161,column:3}},3:{start:{line:6,column:26},end:{line:15,column:5}},4:{start:{line:16,column:4},end:{line:18,column:7}},5:{start:{line:17,column:8},end:{line:17,column:55}},6:{start:{line:17,column:40},end:{line:17,column:53}},7:{start:{line:19,column:4},end:{line:21,column:7}},8:{start:{line:20,column:8},end:{line:20,column:35}},9:{start:{line:22,column:4},end:{line:30,column:7}},10:{start:{line:23,column:8},end:{line:23,column:45}},11:{start:{line:24,column:8},end:{line:24,column:44}},12:{start:{line:25,column:8},end:{line:25,column:31}},13:{start:{line:26,column:8},end:{line:26,column:29}},14:{start:{line:27,column:8},end:{line:27,column:29}},15:{start:{line:28,column:8},end:{line:28,column:45}},16:{start:{line:29,column:8},end:{line:29,column:43}},17:{start:{line:31,column:4},end:{line:33,column:7}},18:{start:{line:32,column:8},end:{line:32,column:51}},19:{start:{line:34,column:4},end:{line:42,column:7}},20:{start:{line:35,column:8},end:{line:40,column:11}},21:{start:{line:41,column:8},end:{line:41,column:45}},22:{start:{line:43,column:4},end:{line:51,column:7}},23:{start:{line:44,column:8},end:{line:49,column:11}},24:{start:{line:50,column:8},end:{line:50,column:43}},25:{start:{line:52,column:4},end:{line:60,column:7}},26:{start:{line:53,column:8},end:{line:58,column:11}},27:{start:{line:59,column:8},end:{line:59,column:60}},28:{start:{line:61,column:4},end:{line:69,column:7}},29:{start:{line:62,column:8},end:{line:67,column:11}},30:{start:{line:68,column:8},end:{line:68,column:58}},31:{start:{line:70,column:4},end:{line:87,column:7}},32:{start:{line:71,column:8},end:{line:71,column:28}},33:{start:{line:72,column:8},end:{line:77,column:11}},34:{start:{line:78,column:8},end:{line:78,column:59}},35:{start:{line:79,column:8},end:{line:79,column:30}},36:{start:{line:80,column:8},end:{line:85,column:11}},37:{start:{line:86,column:8},end:{line:86,column:59}},38:{start:{line:88,column:4},end:{line:97,column:7}},39:{start:{line:89,column:8},end:{line:89,column:30}},40:{start:{line:90,column:8},end:{line:95,column:11}},41:{start:{line:96,column:8},end:{line:96,column:45}},42:{start:{line:98,column:4},end:{line:107,column:7}},43:{start:{line:99,column:8},end:{line:99,column:30}},44:{start:{line:100,column:8},end:{line:105,column:11}},45:{start:{line:106,column:8},end:{line:106,column:45}},46:{start:{line:108,column:4},end:{line:118,column:7}},47:{start:{line:109,column:8},end:{line:109,column:30}},48:{start:{line:110,column:8},end:{line:110,column:32}},49:{start:{line:111,column:8},end:{line:116,column:11}},50:{start:{line:117,column:8},end:{line:117,column:45}},51:{start:{line:119,column:4},end:{line:127,column:7}},52:{start:{line:120,column:8},end:{line:125,column:11}},53:{start:{line:126,column:8},end:{line:126,column:47}},54:{start:{line:128,column:4},end:{line:138,column:7}},55:{start:{line:129,column:8},end:{line:129,column:30}},56:{start:{line:130,column:8},end:{line:130,column:28}},57:{start:{line:131,column:8},end:{line:136,column:11}},58:{start:{line:137,column:8},end:{line:137,column:47}},59:{start:{line:139,column:4},end:{line:149,column:7}},60:{start:{line:140,column:8},end:{line:140,column:30}},61:{start:{line:141,column:8},end:{line:141,column:28}},62:{start:{line:142,column:8},end:{line:147,column:11}},63:{start:{line:148,column:8},end:{line:148,column:45}},64:{start:{line:150,column:4},end:{line:160,column:7}},65:{start:{line:151,column:23},end:{line:151,column:57}},66:{start:{line:152,column:8},end:{line:159,column:11}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:4,column:18},end:{line:4,column:19}},loc:{start:{line:4,column:24},end:{line:161,column:1}},line:4},1:{name:"(anonymous_1)",decl:{start:{line:16,column:15},end:{line:16,column:16}},loc:{start:{line:16,column:21},end:{line:18,column:5}},line:16},2:{name:"(anonymous_2)",decl:{start:{line:17,column:34},end:{line:17,column:35}},loc:{start:{line:17,column:40},end:{line:17,column:53}},line:17},3:{name:"(anonymous_3)",decl:{start:{line:19,column:30},end:{line:19,column:31}},loc:{start:{line:19,column:36},end:{line:21,column:5}},line:19},4:{name:"(anonymous_4)",decl:{start:{line:22,column:47},end:{line:22,column:48}},loc:{start:{line:22,column:53},end:{line:30,column:5}},line:22},5:{name:"(anonymous_5)",decl:{start:{line:31,column:52},end:{line:31,column:53}},loc:{start:{line:31,column:58},end:{line:33,column:5}},line:31},6:{name:"(anonymous_6)",decl:{start:{line:34,column:59},end:{line:34,column:60}},loc:{start:{line:34,column:65},end:{line:42,column:5}},line:34},7:{name:"(anonymous_7)",decl:{start:{line:43,column:57},end:{line:43,column:58}},loc:{start:{line:43,column:63},end:{line:51,column:5}},line:43},8:{name:"(anonymous_8)",decl:{start:{line:52,column:54},end:{line:52,column:55}},loc:{start:{line:52,column:60},end:{line:60,column:5}},line:52},9:{name:"(anonymous_9)",decl:{start:{line:61,column:54},end:{line:61,column:55}},loc:{start:{line:61,column:60},end:{line:69,column:5}},line:61},10:{name:"(anonymous_10)",decl:{start:{line:70,column:55},end:{line:70,column:56}},loc:{start:{line:70,column:61},end:{line:87,column:5}},line:70},11:{name:"(anonymous_11)",decl:{start:{line:88,column:59},end:{line:88,column:60}},loc:{start:{line:88,column:65},end:{line:97,column:5}},line:88},12:{name:"(anonymous_12)",decl:{start:{line:98,column:50},end:{line:98,column:51}},loc:{start:{line:98,column:56},end:{line:107,column:5}},line:98},13:{name:"(anonymous_13)",decl:{start:{line:108,column:61},end:{line:108,column:62}},loc:{start:{line:108,column:67},end:{line:118,column:5}},line:108},14:{name:"(anonymous_14)",decl:{start:{line:119,column:56},end:{line:119,column:57}},loc:{start:{line:119,column:62},end:{line:127,column:5}},line:119},15:{name:"(anonymous_15)",decl:{start:{line:128,column:86},end:{line:128,column:87}},loc:{start:{line:128,column:92},end:{line:138,column:5}},line:128},16:{name:"(anonymous_16)",decl:{start:{line:139,column:86},end:{line:139,column:87}},loc:{start:{line:139,column:92},end:{line:149,column:5}},line:139},17:{name:"(anonymous_17)",decl:{start:{line:150,column:73},end:{line:150,column:74}},loc:{start:{line:150,column:79},end:{line:160,column:5}},line:150}},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Model\\model.test.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Model\\model.test.ts"],names:[],mappings:"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",sourcesContent:["import { DataForValueScale } from './types';\nimport { Model } from './Model';\nimport { SliderOptions } from '../types';\n\ndescribe('Model', () => {\n  let model: Model;\n\n  const sliderOptions: SliderOptions = {\n    min: 0,\n    max: 10,\n    double: true,\n    handlesValues: true,\n    vertical: false,\n    step: false,\n    valueScale: true,\n    integer: true,\n  };\n\n  beforeEach(() => {\n    model = new Model(() => sliderOptions);\n  });\n\n  it('model can be create', () => {\n    expect(model).toBeTruthy();\n  });\n\n  it('updateValues() correct update values', () => {\n    expect(model.values.from).toEqual(0);\n    expect(model.values.to).toEqual(10);\n\n    sliderOptions.from = 3;\n    sliderOptions.to = 7;\n\n    model.updateValues();\n\n    expect(model.values.from).toEqual(3);\n    expect(model.values.to).toEqual(7);\n  });\n\n  it('getTotalValues() pass correct total value', () => {\n    expect(model.getTotalValues()).toEqual(10);\n  });\n\n  it('writeValueFromPosition() calculate from position', () => {\n    model.writeValueFromPosition({\n      target: 'from',\n      position: 30,\n      isDouble: false,\n      sliderWidth: 100,\n    });\n\n    expect(model.values.from).toEqual(3);\n  });\n\n  it('writeValueFromPosition() calculate to position', () => {\n    model.writeValueFromPosition({\n      target: 'to',\n      position: 70,\n      isDouble: true,\n      sliderWidth: 100,\n    });\n\n    expect(model.values.to).toEqual(7);\n  });\n\n  it('writeValueFromPosition() from less then min', () => {\n    model.writeValueFromPosition({\n      target: 'from',\n      position: -10,\n      isDouble: true,\n      sliderWidth: 100,\n    });\n\n    expect(model.values.from).toEqual(model.values.min);\n  });\n\n  it('writeValueFromPosition() to bigger then max', () => {\n    model.writeValueFromPosition({\n      target: 'to',\n      position: 110,\n      isDouble: true,\n      sliderWidth: 100,\n    });\n\n    expect(model.values.to).toEqual(model.values.max);\n  });\n\n  it('writeValueFromPosition() correct when double', () => {\n    model.values.to = 7;\n    model.writeValueFromPosition({\n      target: 'from',\n      position: 80,\n      isDouble: true,\n      sliderWidth: 100,\n    });\n\n    expect(model.values.from).toEqual(model.values.to);\n    model.values.from = 3;\n\n    model.writeValueFromPosition({\n      target: 'to',\n      position: 20,\n      isDouble: true,\n      sliderWidth: 100,\n    });\n\n    expect(model.values.to).toEqual(model.values.from);\n  });\n\n  it('writeValueFromPosition() step if step not passed', () => {\n    model.values.step = 2;\n\n    model.writeValueFromPosition({\n      target: 'from',\n      position: 10,\n      isDouble: false,\n      sliderWidth: 100,\n    });\n\n    expect(model.values.from).toEqual(0);\n  });\n\n  it('writeValueFromPosition() step if passed', () => {\n    model.values.step = 2;\n\n    model.writeValueFromPosition({\n      target: 'from',\n      position: 25,\n      isDouble: false,\n      sliderWidth: 100,\n    });\n\n    expect(model.values.from).toEqual(2);\n  });\n\n  it('writeValueFromPosition() if old value not in range', () => {\n    model.values.step = 2;\n    model.values.from = 1.5;\n\n    model.writeValueFromPosition({\n      target: 'from',\n      position: 35,\n      isDouble: false,\n      sliderWidth: 100,\n    });\n\n    expect(model.values.from).toEqual(2);\n  });\n\n  it('determineValueTarget() choose value correctly', () => {\n    model.writeValueFromPosition({\n      target: 'unspecified',\n      position: 35,\n      isDouble: false,\n      sliderWidth: 100,\n    });\n\n    expect(model.values.from).toEqual(3.5);\n  });\n\n  it('determineValueTarget() choose from when from equal to and new value is less', () => {\n    model.values.from = 5;\n    model.values.to = 5;\n\n    model.writeValueFromPosition({\n      target: 'unspecified',\n      position: 35,\n      isDouble: false,\n      sliderWidth: 100,\n    });\n\n    expect(model.values.from).toEqual(3.5);\n  });\n\n  it('determineValueTarget() choose to when from equal to and new value is bigger', () => {\n    model.values.from = 5;\n    model.values.to = 5;\n\n    model.writeValueFromPosition({\n      target: 'unspecified',\n      position: 75,\n      isDouble: false,\n      sliderWidth: 100,\n    });\n\n    expect(model.values.to).toEqual(7.5);\n  });\n\n  it('calculateDataForValueScale() calculate correct valueScale data', () => {\n    const result: DataForValueScale = model.calculateDataForValueScale();\n\n    expect(result).toEqual({\n      min: '0',\n      max: '10',\n      20: '2',\n      40: '4',\n      60: '6',\n      80: '8',\n    });\n  });\n});\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[s="__coverage__"]||(i[s]={}))[t]&&a[t].hash===l?a[t]:(o.hash=l,a[t]=o));r.s[0]++,Object.defineProperty(n,"__esModule",{value:!0});const C=(r.s[1]++,A("./src/plugin/Model/Model.ts"));r.s[2]++,describe("Model",(()=>{let e;r.f[0]++;const n=(r.s[3]++,{min:0,max:10,double:!0,handlesValues:!0,vertical:!1,step:!1,valueScale:!0,integer:!0});r.s[4]++,beforeEach((()=>{r.f[1]++,r.s[5]++,e=new C.Model((()=>(r.f[2]++,r.s[6]++,n)))})),r.s[7]++,it("model can be create",(()=>{r.f[3]++,r.s[8]++,expect(e).toBeTruthy()})),r.s[9]++,it("updateValues() correct update values",(()=>{r.f[4]++,r.s[10]++,expect(e.values.from).toEqual(0),r.s[11]++,expect(e.values.to).toEqual(10),r.s[12]++,n.from=3,r.s[13]++,n.to=7,r.s[14]++,e.updateValues(),r.s[15]++,expect(e.values.from).toEqual(3),r.s[16]++,expect(e.values.to).toEqual(7)})),r.s[17]++,it("getTotalValues() pass correct total value",(()=>{r.f[5]++,r.s[18]++,expect(e.getTotalValues()).toEqual(10)})),r.s[19]++,it("writeValueFromPosition() calculate from position",(()=>{r.f[6]++,r.s[20]++,e.writeValueFromPosition({target:"from",position:30,isDouble:!1,sliderWidth:100}),r.s[21]++,expect(e.values.from).toEqual(3)})),r.s[22]++,it("writeValueFromPosition() calculate to position",(()=>{r.f[7]++,r.s[23]++,e.writeValueFromPosition({target:"to",position:70,isDouble:!0,sliderWidth:100}),r.s[24]++,expect(e.values.to).toEqual(7)})),r.s[25]++,it("writeValueFromPosition() from less then min",(()=>{r.f[8]++,r.s[26]++,e.writeValueFromPosition({target:"from",position:-10,isDouble:!0,sliderWidth:100}),r.s[27]++,expect(e.values.from).toEqual(e.values.min)})),r.s[28]++,it("writeValueFromPosition() to bigger then max",(()=>{r.f[9]++,r.s[29]++,e.writeValueFromPosition({target:"to",position:110,isDouble:!0,sliderWidth:100}),r.s[30]++,expect(e.values.to).toEqual(e.values.max)})),r.s[31]++,it("writeValueFromPosition() correct when double",(()=>{r.f[10]++,r.s[32]++,e.values.to=7,r.s[33]++,e.writeValueFromPosition({target:"from",position:80,isDouble:!0,sliderWidth:100}),r.s[34]++,expect(e.values.from).toEqual(e.values.to),r.s[35]++,e.values.from=3,r.s[36]++,e.writeValueFromPosition({target:"to",position:20,isDouble:!0,sliderWidth:100}),r.s[37]++,expect(e.values.to).toEqual(e.values.from)})),r.s[38]++,it("writeValueFromPosition() step if step not passed",(()=>{r.f[11]++,r.s[39]++,e.values.step=2,r.s[40]++,e.writeValueFromPosition({target:"from",position:10,isDouble:!1,sliderWidth:100}),r.s[41]++,expect(e.values.from).toEqual(0)})),r.s[42]++,it("writeValueFromPosition() step if passed",(()=>{r.f[12]++,r.s[43]++,e.values.step=2,r.s[44]++,e.writeValueFromPosition({target:"from",position:25,isDouble:!1,sliderWidth:100}),r.s[45]++,expect(e.values.from).toEqual(2)})),r.s[46]++,it("writeValueFromPosition() if old value not in range",(()=>{r.f[13]++,r.s[47]++,e.values.step=2,r.s[48]++,e.values.from=1.5,r.s[49]++,e.writeValueFromPosition({target:"from",position:35,isDouble:!1,sliderWidth:100}),r.s[50]++,expect(e.values.from).toEqual(2)})),r.s[51]++,it("determineValueTarget() choose value correctly",(()=>{r.f[14]++,r.s[52]++,e.writeValueFromPosition({target:"unspecified",position:35,isDouble:!1,sliderWidth:100}),r.s[53]++,expect(e.values.from).toEqual(3.5)})),r.s[54]++,it("determineValueTarget() choose from when from equal to and new value is less",(()=>{r.f[15]++,r.s[55]++,e.values.from=5,r.s[56]++,e.values.to=5,r.s[57]++,e.writeValueFromPosition({target:"unspecified",position:35,isDouble:!1,sliderWidth:100}),r.s[58]++,expect(e.values.from).toEqual(3.5)})),r.s[59]++,it("determineValueTarget() choose to when from equal to and new value is bigger",(()=>{r.f[16]++,r.s[60]++,e.values.from=5,r.s[61]++,e.values.to=5,r.s[62]++,e.writeValueFromPosition({target:"unspecified",position:75,isDouble:!1,sliderWidth:100}),r.s[63]++,expect(e.values.to).toEqual(7.5)})),r.s[64]++,it("calculateDataForValueScale() calculate correct valueScale data",(()=>{r.f[17]++;const n=(r.s[65]++,e.calculateDataForValueScale());r.s[66]++,expect(n).toEqual({min:"0",max:"10",20:"2",40:"4",60:"6",80:"8"})}))}))},"./src/plugin/Model/types.ts":(e,n)=>{"use strict";var A,t,l,i,s,o;(A="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Model\\types.ts",t="694035a9bd157addb6e2baf963fbe8d1ef30d811",l=new(0,function(){}.constructor)("return this")(),s={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Model\\types.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}}},fnMap:{},branchMap:{},s:{0:0},f:{},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Model\\types.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Model\\types.ts"],names:[],mappings:"",sourcesContent:["type ValueTarget = 'from' | 'to' | 'min' | 'max';\n\ntype ModelValues = ValueTarget | 'step';\n\ntype UnspecifiedValueTarget = ValueTarget | 'unspecified';\n\ntype CalculationData = {\n  target: UnspecifiedValueTarget;\n  position: number;\n  sliderWidth: number;\n  isDouble: boolean;\n};\n\ntype ValueData = Omit<CalculationData, 'position'> & {\n  value: number;\n};\n\ntype DataForRefreshingModel = {\n  target: ValueTarget;\n  value: number;\n  isDouble: boolean;\n};\n\ntype DataForValueScale = {\n  min: string;\n  max: string;\n  20: string;\n  40: string;\n  60: string;\n  80: string;\n};\n\ntype BasicModelSettings = {\n  min: number,\n  max: number,\n  from: number,\n  to: number,\n  step: number | boolean,\n};\n\nexport {\n  CalculationData,\n  ValueTarget,\n  DataForRefreshingModel,\n  DataForValueScale,\n  BasicModelSettings,\n  UnspecifiedValueTarget,\n  ValueData,\n  ModelValues,\n};\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(o=l[i="__coverage__"]||(l[i]={}))[A]&&o[A].hash===t?o[A]:(s.hash=t,o[A]=s)).s[0]++,Object.defineProperty(n,"__esModule",{value:!0})},"./src/plugin/Presenter/Presenter.ts":function(e,n,A){"use strict";var t,l,i,s,o,a,r=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Presenter\\Presenter.ts",l="c02eeff03d73a9e8aa27fc32b76854bdd08da144",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Presenter\\Presenter.ts",statementMap:{0:{start:{line:2,column:17},end:{line:7,column:1}},1:{start:{line:3,column:12},end:{line:3,column:28}},2:{start:{line:3,column:34},end:{line:3,column:125}},3:{start:{line:4,column:4},end:{line:5,column:150}},4:{start:{line:4,column:79},end:{line:4,column:131}},5:{start:{line:5,column:9},end:{line:5,column:150}},6:{start:{line:5,column:58},end:{line:5,column:150}},7:{start:{line:5,column:81},end:{line:5,column:150}},8:{start:{line:6,column:4},end:{line:6,column:66}},9:{start:{line:8,column:0},end:{line:8,column:62}},10:{start:{line:9,column:0},end:{line:9,column:27}},11:{start:{line:10,column:29},end:{line:10,column:58}},12:{start:{line:11,column:16},end:{line:119,column:1}},13:{start:{line:13,column:8},end:{line:13,column:38}},14:{start:{line:14,column:8},end:{line:14,column:40}},15:{start:{line:15,column:8},end:{line:15,column:54}},16:{start:{line:16,column:8},end:{line:16,column:46}},17:{start:{line:19,column:21},end:{line:19,column:25}},18:{start:{line:20,column:8},end:{line:32,column:11}},19:{start:{line:22,column:48},end:{line:22,column:59}},20:{start:{line:23,column:33},end:{line:28,column:17}},21:{start:{line:29,column:16},end:{line:29,column:60}},22:{start:{line:30,column:16},end:{line:30,column:28}},23:{start:{line:35,column:21},end:{line:35,column:25}},24:{start:{line:36,column:8},end:{line:47,column:11}},25:{start:{line:38,column:48},end:{line:38,column:59}},26:{start:{line:39,column:16},end:{line:44,column:19}},27:{start:{line:45,column:16},end:{line:45,column:28}},28:{start:{line:50,column:23},end:{line:50,column:62}},29:{start:{line:51,column:8},end:{line:51,column:44}},30:{start:{line:54,column:24},end:{line:54,column:41}},31:{start:{line:55,column:8},end:{line:61,column:11}},32:{start:{line:62,column:8},end:{line:68,column:11}},33:{start:{line:69,column:8},end:{line:69,column:32}},34:{start:{line:72,column:21},end:{line:72,column:25}},35:{start:{line:73,column:8},end:{line:84,column:11}},36:{start:{line:75,column:16},end:{line:75,column:41}},37:{start:{line:76,column:16},end:{line:76,column:135}},38:{start:{line:77,column:16},end:{line:78,column:47}},39:{start:{line:78,column:20},end:{line:78,column:47}},40:{start:{line:79,column:32},end:{line:79,column:49}},41:{start:{line:80,column:16},end:{line:81,column:46}},42:{start:{line:81,column:20},end:{line:81,column:46}},43:{start:{line:82,column:16},end:{line:82,column:28}},44:{start:{line:87,column:21},end:{line:87,column:25}},45:{start:{line:88,column:8},end:{line:93,column:11}},46:{start:{line:90,column:16},end:{line:90,column:43}},47:{start:{line:91,column:16},end:{line:91,column:28}},48:{start:{line:96,column:21},end:{line:96,column:25}},49:{start:{line:97,column:8},end:{line:105,column:11}},50:{start:{line:99,column:35},end:{line:99,column:46}},51:{start:{line:100,column:16},end:{line:100,column:134}},52:{start:{line:101,column:16},end:{line:101,column:39}},53:{start:{line:102,column:16},end:{line:102,column:42}},54:{start:{line:103,column:16},end:{line:103,column:28}},55:{start:{line:108,column:32},end:{line:108,column:36}},56:{start:{line:109,column:8},end:{line:109,column:65}},57:{start:{line:110,column:8},end:{line:110,column:61}},58:{start:{line:111,column:8},end:{line:111,column:63}},59:{start:{line:112,column:8},end:{line:112,column:53}},60:{start:{line:113,column:8},end:{line:113,column:35}},61:{start:{line:114,column:24},end:{line:114,column:41}},62:{start:{line:115,column:8},end:{line:116,column:37}},63:{start:{line:116,column:12},end:{line:116,column:37}},64:{start:{line:117,column:8},end:{line:117,column:65}},65:{start:{line:120,column:0},end:{line:122,column:14}},66:{start:{line:123,column:0},end:{line:123,column:30}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:46},end:{line:2,column:47}},loc:{start:{line:2,column:87},end:{line:7,column:1}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:26},end:{line:17,column:5}},line:12},2:{name:"(anonymous_2)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:33},end:{line:33,column:5}},line:18},3:{name:"(anonymous_3)",decl:{start:{line:34,column:4},end:{line:34,column:5}},loc:{start:{line:34,column:32},end:{line:48,column:5}},line:34},4:{name:"(anonymous_4)",decl:{start:{line:49,column:4},end:{line:49,column:5}},loc:{start:{line:49,column:23},end:{line:52,column:5}},line:49},5:{name:"(anonymous_5)",decl:{start:{line:53,column:4},end:{line:53,column:5}},loc:{start:{line:53,column:26},end:{line:70,column:5}},line:53},6:{name:"(anonymous_6)",decl:{start:{line:71,column:4},end:{line:71,column:5}},loc:{start:{line:71,column:29},end:{line:85,column:5}},line:71},7:{name:"(anonymous_7)",decl:{start:{line:86,column:4},end:{line:86,column:5}},loc:{start:{line:86,column:32},end:{line:94,column:5}},line:86},8:{name:"(anonymous_8)",decl:{start:{line:95,column:4},end:{line:95,column:5}},loc:{start:{line:95,column:24},end:{line:106,column:5}},line:95},9:{name:"(anonymous_9)",decl:{start:{line:107,column:4},end:{line:107,column:5}},loc:{start:{line:107,column:17},end:{line:118,column:5}},line:107}},branchMap:{0:{loc:{start:{line:2,column:17},end:{line:7,column:1}},type:"binary-expr",locations:[{start:{line:2,column:18},end:{line:2,column:22}},{start:{line:2,column:26},end:{line:2,column:41}},{start:{line:2,column:46},end:{line:7,column:1}}],line:2},1:{loc:{start:{line:3,column:34},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:42},end:{line:3,column:48}},{start:{line:3,column:51},end:{line:3,column:125}}],line:3},2:{loc:{start:{line:3,column:51},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:67},end:{line:3,column:118}},{start:{line:3,column:121},end:{line:3,column:125}}],line:3},3:{loc:{start:{line:4,column:4},end:{line:5,column:150}},type:"if",locations:[{start:{line:4,column:4},end:{line:5,column:150}},{start:{line:4,column:4},end:{line:5,column:150}}],line:4},4:{loc:{start:{line:4,column:8},end:{line:4,column:77}},type:"binary-expr",locations:[{start:{line:4,column:8},end:{line:4,column:35}},{start:{line:4,column:39},end:{line:4,column:77}}],line:4},5:{loc:{start:{line:5,column:58},end:{line:5,column:150}},type:"if",locations:[{start:{line:5,column:58},end:{line:5,column:150}},{start:{line:5,column:58},end:{line:5,column:150}}],line:5},6:{loc:{start:{line:5,column:85},end:{line:5,column:149}},type:"binary-expr",locations:[{start:{line:5,column:86},end:{line:5,column:143}},{start:{line:5,column:148},end:{line:5,column:149}}],line:5},7:{loc:{start:{line:5,column:86},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:94},end:{line:5,column:98}},{start:{line:5,column:101},end:{line:5,column:143}}],line:5},8:{loc:{start:{line:5,column:101},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:109},end:{line:5,column:126}},{start:{line:5,column:129},end:{line:5,column:143}}],line:5},9:{loc:{start:{line:6,column:11},end:{line:6,column:62}},type:"binary-expr",locations:[{start:{line:6,column:11},end:{line:6,column:16}},{start:{line:6,column:20},end:{line:6,column:21}},{start:{line:6,column:25},end:{line:6,column:62}}],line:6},10:{loc:{start:{line:77,column:16},end:{line:78,column:47}},type:"if",locations:[{start:{line:77,column:16},end:{line:78,column:47}},{start:{line:77,column:16},end:{line:78,column:47}}],line:77},11:{loc:{start:{line:80,column:16},end:{line:81,column:46}},type:"if",locations:[{start:{line:80,column:16},end:{line:81,column:46}},{start:{line:80,column:16},end:{line:81,column:46}}],line:80},12:{loc:{start:{line:115,column:8},end:{line:116,column:37}},type:"if",locations:[{start:{line:115,column:8},end:{line:116,column:37}},{start:{line:115,column:8},end:{line:116,column:37}}],line:115}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0},b:{0:[0,0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0,0],10:[0,0],11:[0,0],12:[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Presenter\\Presenter.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Presenter\\Presenter.ts"],names:[],mappings:"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",sourcesContent:["import autobind from 'autobind-decorator';\nimport {\n  BasicModelSettings,\n  CalculationData,\n  DataForValueScale,\n  ModelValues,\n} from '../Model/types';\nimport { Model } from '../Model/Model';\nimport { View } from '../View/View';\nimport {\n  UpdatePositions,\n  UpdatePositionsData,\n} from '../View/types';\nimport {\n  SliderOptions,\n  Update,\n  UserSliderOptions,\n} from '../types';\nimport { BasicPresenterSettings } from './types';\nimport { IPlugin } from '../interfaces';\n\n@autobind\nexport class Presenter {\n  private readonly view: View;\n\n  private readonly model: Model;\n\n  private readonly getOptions: () => SliderOptions;\n\n  private readonly updateEnvironment: IPlugin;\n\n  constructor(settings: BasicPresenterSettings) {\n    this.view = settings.viewLink;\n    this.model = settings.modelLink;\n    this.updateEnvironment = settings.environment;\n    this.getOptions = settings.getOptions;\n  }\n\n  private bindProxyToUpdatePositions(): UpdatePositions {\n    const that: Presenter = this;\n\n    return new Proxy(this.view.updatePositions, {\n      apply(environment: UpdatePositions, thisArgs: View, argArray: [UpdatePositionsData]): boolean {\n        const { target, newPosition } = argArray[0];\n\n        const settings: CalculationData = {\n          position: newPosition,\n          target,\n          sliderWidth: that.view.slider.slider.offsetWidth - that.view.handles.fromHandle.offsetWidth,\n          isDouble: that.getOptions().double,\n        };\n\n        that.model.writeValueFromPosition(settings);\n\n        return true;\n      },\n    });\n  }\n\n  private handleProxyToPassNewValue() {\n    const that: Presenter = this;\n\n    return new Proxy(this.view.passNewValue, {\n      apply(environment: UpdatePositions, thisArgs: View, argArray: [UpdatePositionsData]): boolean {\n        const { target, newPosition } = argArray[0];\n\n        that.model.writeValue({\n          value: newPosition,\n          target,\n          sliderWidth: that.view.slider.slider.offsetWidth - that.view.handles.fromHandle.offsetWidth,\n          isDouble: that.getOptions().double,\n        });\n\n        return true;\n      },\n    });\n  }\n\n  private updateValueScale(): void {\n    const values: DataForValueScale = this.model.calculateDataForValueScale();\n    this.view.refreshValueScale(values);\n  }\n\n  private updateAllViewValues(): void {\n    const options: SliderOptions = this.getOptions();\n\n    this.view.refreshHandleValues({\n      value: this.model.values.from,\n      target: 'from',\n      isToFixed: options.integer,\n      totalValues: this.model.getTotalValues(),\n      minValue: Number(this.model.values.min),\n    });\n\n    this.view.refreshHandleValues({\n      value: this.model.values.to,\n      target: 'to',\n      isToFixed: options.integer,\n      totalValues: this.model.getTotalValues(),\n      minValue: Number(this.model.values.min),\n    });\n\n    this.updateValueScale();\n  }\n\n  private bindProxyToModelValues(): BasicModelSettings {\n    const that: Presenter = this;\n\n    return new Proxy(this.model.values, {\n      set(target: BasicModelSettings, property: ModelValues, value: number): boolean {\n        target[property] = value;\n        that.updateEnvironment.options = ({ ...that.updateEnvironment.options, ...that.model.values });\n\n        if (property !== 'step') that.updateAllViewValues();\n\n        const options: SliderOptions = that.getOptions();\n        if (options.onChange) options.onChange(options);\n\n        return true;\n      },\n    });\n  }\n\n  private bindProxyToCallViewUpdate(): (target: string) => string {\n    const that: Presenter = this;\n\n    return new Proxy(this.view.callViewUpdate, {\n      apply(): boolean {\n        that.updateAllViewValues();\n\n        return true;\n      },\n    });\n  }\n\n  private bindProxyToUpdate(): Update {\n    const that: Presenter = this;\n\n    return new Proxy(this.updateEnvironment.update, {\n      apply(environment: Update, thisArgs: IPlugin, argArray: [UserSliderOptions]): boolean {\n        const userValues: UserSliderOptions = argArray[0];\n\n        thisArgs.options = ({ ...thisArgs.options, ...that.model.values, ...userValues });\n        that.view.updateView();\n        that.model.updateValues();\n\n        return true;\n      },\n    });\n  }\n\n  public initialize(): void {\n    const { view, model } = this;\n\n    view.updatePositions = this.bindProxyToUpdatePositions();\n    view.passNewValue = this.handleProxyToPassNewValue();\n    view.callViewUpdate = this.bindProxyToCallViewUpdate();\n    model.values = this.bindProxyToModelValues();\n    this.updateAllViewValues();\n\n    const options: SliderOptions = this.getOptions();\n    if (options.onStart) options.onStart(options);\n\n    this.updateEnvironment.update = this.bindProxyToUpdate();\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[s="__coverage__"]||(i[s]={}))[t]&&a[t].hash===l?a[t]:(o.hash=l,a[t]=o)),C=(r.s[0]++,r.b[0][0]++,this&&(r.b[0][1]++,this.__decorate)||(r.b[0][2]++,function(e,n,A,t){r.f[0]++;var l,i=(r.s[1]++,arguments.length),s=(r.s[2]++,i<3?(r.b[1][0]++,n):(r.b[1][1]++,null===t?(r.b[2][0]++,t=Object.getOwnPropertyDescriptor(n,A)):(r.b[2][1]++,t)));if(r.s[3]++,r.b[4][0]++,"object"==typeof Reflect&&(r.b[4][1]++,"function"==typeof Reflect.decorate))r.b[3][0]++,r.s[4]++,s=Reflect.decorate(e,n,A,t);else{r.b[3][1]++,r.s[5]++;for(var o=e.length-1;o>=0;o--)r.s[6]++,(l=e[o])?(r.b[5][0]++,r.s[7]++,r.b[6][0]++,s=(i<3?(r.b[7][0]++,l(s)):(r.b[7][1]++,i>3?(r.b[8][0]++,l(n,A,s)):(r.b[8][1]++,l(n,A))))||(r.b[6][1]++,s)):r.b[5][1]++}return r.s[8]++,r.b[9][0]++,i>3&&(r.b[9][1]++,s)&&(r.b[9][2]++,Object.defineProperty(n,A,s)),s}));r.s[9]++,Object.defineProperty(n,"__esModule",{value:!0}),r.s[10]++,n.Presenter=void 0;const c=(r.s[11]++,A("./node_modules/autobind-decorator/lib/esm/index.js"));r.s[12]++;let u=class{constructor(e){r.f[1]++,r.s[13]++,this.view=e.viewLink,r.s[14]++,this.model=e.modelLink,r.s[15]++,this.updateEnvironment=e.environment,r.s[16]++,this.getOptions=e.getOptions}bindProxyToUpdatePositions(){r.f[2]++;const e=(r.s[17]++,this);return r.s[18]++,new Proxy(this.view.updatePositions,{apply(n,A,t){const{target:l,newPosition:i}=(r.s[19]++,t[0]),s=(r.s[20]++,{position:i,target:l,sliderWidth:e.view.slider.slider.offsetWidth-e.view.handles.fromHandle.offsetWidth,isDouble:e.getOptions().double});return r.s[21]++,e.model.writeValueFromPosition(s),r.s[22]++,!0}})}handleProxyToPassNewValue(){r.f[3]++;const e=(r.s[23]++,this);return r.s[24]++,new Proxy(this.view.passNewValue,{apply(n,A,t){const{target:l,newPosition:i}=(r.s[25]++,t[0]);return r.s[26]++,e.model.writeValue({value:i,target:l,sliderWidth:e.view.slider.slider.offsetWidth-e.view.handles.fromHandle.offsetWidth,isDouble:e.getOptions().double}),r.s[27]++,!0}})}updateValueScale(){r.f[4]++;const e=(r.s[28]++,this.model.calculateDataForValueScale());r.s[29]++,this.view.refreshValueScale(e)}updateAllViewValues(){r.f[5]++;const e=(r.s[30]++,this.getOptions());r.s[31]++,this.view.refreshHandleValues({value:this.model.values.from,target:"from",isToFixed:e.integer,totalValues:this.model.getTotalValues(),minValue:Number(this.model.values.min)}),r.s[32]++,this.view.refreshHandleValues({value:this.model.values.to,target:"to",isToFixed:e.integer,totalValues:this.model.getTotalValues(),minValue:Number(this.model.values.min)}),r.s[33]++,this.updateValueScale()}bindProxyToModelValues(){r.f[6]++;const e=(r.s[34]++,this);return r.s[35]++,new Proxy(this.model.values,{set(n,A,t){r.s[36]++,n[A]=t,r.s[37]++,e.updateEnvironment.options=Object.assign(Object.assign({},e.updateEnvironment.options),e.model.values),r.s[38]++,"step"!==A?(r.b[10][0]++,r.s[39]++,e.updateAllViewValues()):r.b[10][1]++;const l=(r.s[40]++,e.getOptions());return r.s[41]++,l.onChange?(r.b[11][0]++,r.s[42]++,l.onChange(l)):r.b[11][1]++,r.s[43]++,!0}})}bindProxyToCallViewUpdate(){r.f[7]++;const e=(r.s[44]++,this);return r.s[45]++,new Proxy(this.view.callViewUpdate,{apply:()=>(r.s[46]++,e.updateAllViewValues(),r.s[47]++,!0)})}bindProxyToUpdate(){r.f[8]++;const e=(r.s[48]++,this);return r.s[49]++,new Proxy(this.updateEnvironment.update,{apply(n,A,t){const l=(r.s[50]++,t[0]);return r.s[51]++,A.options=Object.assign(Object.assign(Object.assign({},A.options),e.model.values),l),r.s[52]++,e.view.updateView(),r.s[53]++,e.model.updateValues(),r.s[54]++,!0}})}initialize(){r.f[9]++;const{view:e,model:n}=(r.s[55]++,this);r.s[56]++,e.updatePositions=this.bindProxyToUpdatePositions(),r.s[57]++,e.passNewValue=this.handleProxyToPassNewValue(),r.s[58]++,e.callViewUpdate=this.bindProxyToCallViewUpdate(),r.s[59]++,n.values=this.bindProxyToModelValues(),r.s[60]++,this.updateAllViewValues();const A=(r.s[61]++,this.getOptions());r.s[62]++,A.onStart?(r.b[12][0]++,r.s[63]++,A.onStart(A)):r.b[12][1]++,r.s[64]++,this.updateEnvironment.update=this.bindProxyToUpdate()}};r.s[65]++,u=C([c.default],u),r.s[66]++,n.Presenter=u},"./src/plugin/Presenter/presenter.test.ts":(e,n,A)=>{"use strict";var t,l,i,s,o,a,r=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Presenter\\presenter.test.ts",l="f8f300abea43751f9b9dccc7c340096e1f6897e8",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Presenter\\presenter.test.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:16},end:{line:3,column:41}},2:{start:{line:4,column:20},end:{line:4,column:42}},3:{start:{line:5,column:15},end:{line:5,column:38}},4:{start:{line:6,column:0},end:{line:46,column:3}},5:{start:{line:10,column:26},end:{line:19,column:5}},6:{start:{line:20,column:19},end:{line:20,column:48}},7:{start:{line:21,column:19},end:{line:25,column:5}},8:{start:{line:24,column:26},end:{line:24,column:30}},9:{start:{line:26,column:4},end:{line:38,column:7}},10:{start:{line:27,column:8},end:{line:27,column:55}},11:{start:{line:27,column:40},end:{line:27,column:53}},12:{start:{line:28,column:8},end:{line:28,column:60}},13:{start:{line:28,column:37},end:{line:28,column:50}},14:{start:{line:29,column:8},end:{line:34,column:11}},15:{start:{line:33,column:30},end:{line:33,column:43}},16:{start:{line:35,column:8},end:{line:35,column:74}},17:{start:{line:36,column:8},end:{line:36,column:49}},18:{start:{line:37,column:8},end:{line:37,column:31}},19:{start:{line:39,column:4},end:{line:45,column:7}},20:{start:{line:40,column:8},end:{line:43,column:11}},21:{start:{line:44,column:8},end:{line:44,column:45}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:6,column:22},end:{line:6,column:23}},loc:{start:{line:6,column:28},end:{line:46,column:1}},line:6},1:{name:"(anonymous_1)",decl:{start:{line:24,column:16},end:{line:24,column:17}},loc:{start:{line:24,column:26},end:{line:24,column:30}},line:24},2:{name:"(anonymous_2)",decl:{start:{line:26,column:15},end:{line:26,column:16}},loc:{start:{line:26,column:21},end:{line:38,column:5}},line:26},3:{name:"(anonymous_3)",decl:{start:{line:27,column:34},end:{line:27,column:35}},loc:{start:{line:27,column:40},end:{line:27,column:53}},line:27},4:{name:"(anonymous_4)",decl:{start:{line:28,column:31},end:{line:28,column:32}},loc:{start:{line:28,column:37},end:{line:28,column:50}},line:28},5:{name:"(anonymous_5)",decl:{start:{line:33,column:24},end:{line:33,column:25}},loc:{start:{line:33,column:30},end:{line:33,column:43}},line:33},6:{name:"(anonymous_6)",decl:{start:{line:39,column:54},end:{line:39,column:55}},loc:{start:{line:39,column:60},end:{line:45,column:5}},line:39}},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Presenter\\presenter.test.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Presenter\\presenter.test.ts"],names:[],mappings:";;AAAA,0CAAuC;AACvC,2CAAwC;AACxC,uCAAoC;AAIpC,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IACzB,IAAI,SAAoB,CAAC;IACzB,IAAI,IAAU,CAAC;IACf,IAAI,KAAY,CAAC;IACjB,MAAM,aAAa,GAAkB;QACnC,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,EAAE;QACP,MAAM,EAAE,IAAI;QACZ,aAAa,EAAE,IAAI;QACnB,QAAQ,EAAE,KAAK;QACf,IAAI,EAAE,KAAK;QACX,UAAU,EAAE,IAAI;QAChB,OAAO,EAAE,IAAI;KACd,CAAC;IACF,MAAM,MAAM,GAAmB,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAE7D,MAAM,MAAM,GAAY;QACtB,OAAO,EAAE,MAAM;QACf,OAAO,EAAE,aAAa;QACtB,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI;KACvB,CAAC;IAEF,UAAU,CAAC,GAAG,EAAE;QACd,KAAK,GAAG,IAAI,aAAK,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,CAAC;QACvC,IAAI,GAAG,IAAI,WAAI,CAAC,GAAG,EAAE,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;QAC7C,SAAS,GAAG,IAAI,qBAAS,CAAC;YACxB,QAAQ,EAAE,IAAI;YACd,SAAS,EAAE,KAAK;YAChB,WAAW,EAAE,MAAM;YACnB,UAAU,EAAE,GAAG,EAAE,CAAC,aAAa;SAChC,CAAC,CAAC;QACH,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAClE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;QACzC,SAAS,CAAC,UAAU,EAAE,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACrD,IAAI,CAAC,eAAe,CAAC;YACnB,MAAM,EAAE,MAAM;YACd,WAAW,EAAE,EAAE;SAChB,CAAC,CAAC;QAEH,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC",sourcesContent:["import { Model } from '../Model/Model';\nimport { Presenter } from './Presenter';\nimport { View } from '../View/View';\nimport { SliderOptions } from '../types';\nimport { IPlugin } from '../interfaces';\n\ndescribe('Presenter', () => {\n  let presenter: Presenter;\n  let view: View;\n  let model: Model;\n  const sliderOptions: SliderOptions = {\n    min: 0,\n    max: 10,\n    double: true,\n    handlesValues: true,\n    vertical: false,\n    step: false,\n    valueScale: true,\n    integer: true,\n  };\n  const target: HTMLDivElement = document.createElement('div');\n\n  const plugin: IPlugin = {\n    element: target,\n    options: sliderOptions,\n    update: (data) => data,\n  };\n\n  beforeEach(() => {\n    model = new Model(() => sliderOptions);\n    view = new View(() => sliderOptions, target);\n    presenter = new Presenter({\n      viewLink: view,\n      modelLink: model,\n      environment: plugin,\n      getOptions: () => sliderOptions,\n    });\n    document.body.append(view.slider.slider, view.handles.fromHandle);\n    view.slider.slider.style.width = '108px';\n    presenter.initialize();\n  });\n\n  it('bindProxyToUpdatePositions() work correctly', () => {\n    view.updatePositions({\n      target: 'from',\n      newPosition: 30,\n    });\n\n    expect(model.values.from).toEqual(3);\n  });\n});\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[s="__coverage__"]||(i[s]={}))[t]&&a[t].hash===l?a[t]:(o.hash=l,a[t]=o));r.s[0]++,Object.defineProperty(n,"__esModule",{value:!0});const C=(r.s[1]++,A("./src/plugin/Model/Model.ts")),c=(r.s[2]++,A("./src/plugin/Presenter/Presenter.ts")),u=(r.s[3]++,A("./src/plugin/View/View.ts"));r.s[4]++,describe("Presenter",(()=>{let e,n,A;r.f[0]++;const t=(r.s[5]++,{min:0,max:10,double:!0,handlesValues:!0,vertical:!1,step:!1,valueScale:!0,integer:!0}),l=(r.s[6]++,document.createElement("div")),i=(r.s[7]++,{element:l,options:t,update:e=>(r.f[1]++,r.s[8]++,e)});r.s[9]++,beforeEach((()=>{r.f[2]++,r.s[10]++,A=new C.Model((()=>(r.f[3]++,r.s[11]++,t))),r.s[12]++,n=new u.View((()=>(r.f[4]++,r.s[13]++,t)),l),r.s[14]++,e=new c.Presenter({viewLink:n,modelLink:A,environment:i,getOptions:()=>(r.f[5]++,r.s[15]++,t)}),r.s[16]++,document.body.append(n.slider.slider,n.handles.fromHandle),r.s[17]++,n.slider.slider.style.width="108px",r.s[18]++,e.initialize()})),r.s[19]++,it("bindProxyToUpdatePositions() work correctly",(()=>{r.f[6]++,r.s[20]++,n.updatePositions({target:"from",newPosition:30}),r.s[21]++,expect(A.values.from).toEqual(3)}))}))},"./src/plugin/Presenter/types.ts":(e,n)=>{"use strict";var A,t,l,i,s,o;(A="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Presenter\\types.ts",t="eee41f1d0271621639e1a67c30b510d02ed3617a",l=new(0,function(){}.constructor)("return this")(),s={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Presenter\\types.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}}},fnMap:{},branchMap:{},s:{0:0},f:{},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Presenter\\types.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Presenter\\types.ts"],names:[],mappings:"",sourcesContent:["import { View } from '../View/View';\nimport { Model } from '../Model/Model';\nimport {\n  SliderOptions,\n} from '../types';\nimport { IPlugin } from '../interfaces';\n\ntype BasicPresenterSettings = {\n  viewLink: View;\n  modelLink: Model;\n  getOptions: () => SliderOptions;\n  environment: IPlugin;\n};\n\nexport {\n  BasicPresenterSettings,\n};\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(o=l[i="__coverage__"]||(l[i]={}))[A]&&o[A].hash===t?o[A]:(s.hash=t,o[A]=s)).s[0]++,Object.defineProperty(n,"__esModule",{value:!0})},"./src/plugin/View/Handles/Handles.ts":(e,n)=>{"use strict";var A,t,l,i,s,o,a=(A="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Handles\\Handles.ts",t="ec5237fd38b92a6a7a557259f1e8a33e45b2e203",l=new(0,function(){}.constructor)("return this")(),s={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Handles\\Handles.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:0},end:{line:3,column:25}},2:{start:{line:6,column:8},end:{line:6,column:49}},3:{start:{line:7,column:8},end:{line:7,column:60}},4:{start:{line:8,column:8},end:{line:21,column:10}},5:{start:{line:22,column:8},end:{line:22,column:83}},6:{start:{line:23,column:8},end:{line:23,column:81}},7:{start:{line:24,column:8},end:{line:24,column:82}},8:{start:{line:25,column:8},end:{line:25,column:80}},9:{start:{line:26,column:8},end:{line:26,column:36}},10:{start:{line:29,column:8},end:{line:29,column:47}},11:{start:{line:30,column:8},end:{line:30,column:43}},12:{start:{line:36,column:15},end:{line:36,column:23}},13:{start:{line:37,column:24},end:{line:37,column:54}},14:{start:{line:38,column:8},end:{line:40,column:11}},15:{start:{line:39,column:12},end:{line:39,column:44}},16:{start:{line:41,column:8},end:{line:41,column:23}},17:{start:{line:44,column:56},end:{line:44,column:60}},18:{start:{line:45,column:8},end:{line:46,column:19}},19:{start:{line:46,column:12},end:{line:46,column:19}},20:{start:{line:47,column:32},end:{line:47,column:48}},21:{start:{line:48,column:8},end:{line:48,column:101}},22:{start:{line:49,column:8},end:{line:49,column:60}},23:{start:{line:52,column:33},end:{line:52,column:50}},24:{start:{line:53,column:8},end:{line:53,column:68}},25:{start:{line:54,column:27},end:{line:54,column:77}},26:{start:{line:55,column:29},end:{line:55,column:81}},27:{start:{line:56,column:8},end:{line:57,column:54}},28:{start:{line:57,column:12},end:{line:57,column:54}},29:{start:{line:58,column:8},end:{line:59,column:56}},30:{start:{line:59,column:12},end:{line:59,column:56}},31:{start:{line:62,column:8},end:{line:63,column:109}},32:{start:{line:66,column:8},end:{line:67,column:109}},33:{start:{line:70,column:8},end:{line:70,column:96}},34:{start:{line:73,column:8},end:{line:73,column:94}},35:{start:{line:76,column:36},end:{line:79,column:9}},36:{start:{line:77,column:12},end:{line:77,column:77}},37:{start:{line:78,column:12},end:{line:78,column:75}},38:{start:{line:80,column:8},end:{line:89,column:9}},39:{start:{line:82,column:16},end:{line:82,column:66}},40:{start:{line:83,column:16},end:{line:83,column:22}},41:{start:{line:85,column:16},end:{line:85,column:66}},42:{start:{line:86,column:16},end:{line:86,column:22}},43:{start:{line:88,column:16},end:{line:88,column:22}},44:{start:{line:92,column:29},end:{line:92,column:37}},45:{start:{line:93,column:8},end:{line:98,column:9}},46:{start:{line:94,column:12},end:{line:94,column:70}},47:{start:{line:96,column:13},end:{line:98,column:9}},48:{start:{line:97,column:12},end:{line:97,column:73}},49:{start:{line:101,column:8},end:{line:108,column:9}},50:{start:{line:102,column:12},end:{line:102,column:74}},51:{start:{line:103,column:12},end:{line:103,column:76}},52:{start:{line:106,column:12},end:{line:106,column:77}},53:{start:{line:107,column:12},end:{line:107,column:79}},54:{start:{line:111,column:26},end:{line:111,column:57}},55:{start:{line:112,column:8},end:{line:113,column:56}},56:{start:{line:113,column:12},end:{line:113,column:56}},57:{start:{line:114,column:8},end:{line:115,column:54}},58:{start:{line:115,column:12},end:{line:115,column:54}},59:{start:{line:116,column:8},end:{line:116,column:46}},60:{start:{line:119,column:0},end:{line:119,column:26}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:18},end:{line:27,column:5}},line:5},1:{name:"(anonymous_1)",decl:{start:{line:28,column:4},end:{line:28,column:5}},loc:{start:{line:28,column:27},end:{line:31,column:5}},line:28},2:{name:"(anonymous_2)",decl:{start:{line:32,column:4},end:{line:32,column:5}},loc:{start:{line:32,column:35},end:{line:42,column:5}},line:32},3:{name:"(anonymous_3)",decl:{start:{line:38,column:27},end:{line:38,column:28}},loc:{start:{line:38,column:41},end:{line:40,column:9}},line:38},4:{name:"(anonymous_4)",decl:{start:{line:43,column:4},end:{line:43,column:5}},loc:{start:{line:43,column:37},end:{line:50,column:5}},line:43},5:{name:"(anonymous_5)",decl:{start:{line:51,column:4},end:{line:51,column:5}},loc:{start:{line:51,column:51},end:{line:60,column:5}},line:51},6:{name:"(anonymous_6)",decl:{start:{line:61,column:4},end:{line:61,column:5}},loc:{start:{line:61,column:42},end:{line:64,column:5}},line:61},7:{name:"(anonymous_7)",decl:{start:{line:65,column:4},end:{line:65,column:5}},loc:{start:{line:65,column:46},end:{line:68,column:5}},line:65},8:{name:"(anonymous_8)",decl:{start:{line:69,column:4},end:{line:69,column:5}},loc:{start:{line:69,column:32},end:{line:71,column:5}},line:69},9:{name:"(anonymous_9)",decl:{start:{line:72,column:4},end:{line:72,column:5}},loc:{start:{line:72,column:32},end:{line:74,column:5}},line:72},10:{name:"(anonymous_10)",decl:{start:{line:75,column:4},end:{line:75,column:5}},loc:{start:{line:75,column:28},end:{line:90,column:5}},line:75},11:{name:"(anonymous_11)",decl:{start:{line:76,column:36},end:{line:76,column:37}},loc:{start:{line:76,column:50},end:{line:79,column:9}},line:76},12:{name:"(anonymous_12)",decl:{start:{line:91,column:4},end:{line:91,column:5}},loc:{start:{line:91,column:35},end:{line:99,column:5}},line:91},13:{name:"(anonymous_13)",decl:{start:{line:100,column:4},end:{line:100,column:5}},loc:{start:{line:100,column:39},end:{line:109,column:5}},line:100},14:{name:"(anonymous_14)",decl:{start:{line:110,column:4},end:{line:110,column:5}},loc:{start:{line:110,column:40},end:{line:117,column:5}},line:110}},branchMap:{0:{loc:{start:{line:33,column:16},end:{line:36,column:9}},type:"default-arg",locations:[{start:{line:33,column:29},end:{line:36,column:9}}],line:33},1:{loc:{start:{line:45,column:8},end:{line:46,column:19}},type:"if",locations:[{start:{line:45,column:8},end:{line:46,column:19}},{start:{line:45,column:8},end:{line:46,column:19}}],line:45},2:{loc:{start:{line:45,column:12},end:{line:45,column:48}},type:"binary-expr",locations:[{start:{line:45,column:12},end:{line:45,column:28}},{start:{line:45,column:32},end:{line:45,column:48}}],line:45},3:{loc:{start:{line:48,column:42},end:{line:48,column:100}},type:"cond-expr",locations:[{start:{line:48,column:54},end:{line:48,column:84}},{start:{line:48,column:87},end:{line:48,column:100}}],line:48},4:{loc:{start:{line:56,column:8},end:{line:57,column:54}},type:"if",locations:[{start:{line:56,column:8},end:{line:57,column:54}},{start:{line:56,column:8},end:{line:57,column:54}}],line:56},5:{loc:{start:{line:58,column:8},end:{line:59,column:56}},type:"if",locations:[{start:{line:58,column:8},end:{line:59,column:56}},{start:{line:58,column:8},end:{line:59,column:56}}],line:58},6:{loc:{start:{line:62,column:15},end:{line:63,column:108}},type:"binary-expr",locations:[{start:{line:62,column:16},end:{line:62,column:93}},{start:{line:63,column:16},end:{line:63,column:91}},{start:{line:63,column:97},end:{line:63,column:107}}],line:62},7:{loc:{start:{line:66,column:15},end:{line:67,column:108}},type:"binary-expr",locations:[{start:{line:66,column:16},end:{line:66,column:92}},{start:{line:67,column:16},end:{line:67,column:90}},{start:{line:67,column:96},end:{line:67,column:107}}],line:66},8:{loc:{start:{line:70,column:15},end:{line:70,column:95}},type:"binary-expr",locations:[{start:{line:70,column:16},end:{line:70,column:25}},{start:{line:70,column:31},end:{line:70,column:94}}],line:70},9:{loc:{start:{line:73,column:15},end:{line:73,column:93}},type:"binary-expr",locations:[{start:{line:73,column:16},end:{line:73,column:24}},{start:{line:73,column:30},end:{line:73,column:92}}],line:73},10:{loc:{start:{line:80,column:8},end:{line:89,column:9}},type:"switch",locations:[{start:{line:81,column:12},end:{line:83,column:22}},{start:{line:84,column:12},end:{line:86,column:22}},{start:{line:87,column:12},end:{line:88,column:22}}],line:80},11:{loc:{start:{line:93,column:8},end:{line:98,column:9}},type:"if",locations:[{start:{line:93,column:8},end:{line:98,column:9}},{start:{line:93,column:8},end:{line:98,column:9}}],line:93},12:{loc:{start:{line:96,column:13},end:{line:98,column:9}},type:"if",locations:[{start:{line:96,column:13},end:{line:98,column:9}},{start:{line:96,column:13},end:{line:98,column:9}}],line:96},13:{loc:{start:{line:101,column:8},end:{line:108,column:9}},type:"if",locations:[{start:{line:101,column:8},end:{line:108,column:9}},{start:{line:101,column:8},end:{line:108,column:9}}],line:101},14:{loc:{start:{line:112,column:8},end:{line:113,column:56}},type:"if",locations:[{start:{line:112,column:8},end:{line:113,column:56}},{start:{line:112,column:8},end:{line:113,column:56}}],line:112},15:{loc:{start:{line:114,column:8},end:{line:115,column:54}},type:"if",locations:[{start:{line:114,column:8},end:{line:115,column:54}},{start:{line:114,column:8},end:{line:115,column:54}}],line:114}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0},b:{0:[0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0,0],7:[0,0,0],8:[0,0],9:[0,0],10:[0,0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Handles\\Handles.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Handles\\Handles.ts"],names:[],mappings:"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",sourcesContent:["import {\n  HandlesElementsInfo,\n  StaticElementsDescription,\n  HandleHideData,\n} from './types';\nimport { NewHandlesData } from '../types';\n\nexport class Handles {\n  readonly fromHandle: HTMLSpanElement;\n\n  readonly toHandle: HTMLSpanElement;\n\n  readonly fromValue: HTMLSpanElement;\n\n  readonly toValue: HTMLSpanElement;\n\n  private readonly handleClass: string = 'goby-slider__handle';\n\n  private readonly handleValueClass: string = 'goby-slider__handle-value';\n\n  readonly staticElementsDescription: StaticElementsDescription = [\n    {\n      cssClasses: [this.handleClass, `${this.handleClass}_type_from`],\n    },\n    {\n      cssClasses: [this.handleClass, `${this.handleClass}_type_to`],\n    },\n    {\n      cssClasses: [this.handleValueClass, `${this.handleValueClass}_type_from`],\n    },\n    {\n      cssClasses: [this.handleValueClass, `${this.handleValueClass}_type_to`],\n    },\n  ];\n\n  constructor() {\n    this.fromHandle = Handles.createElement(this.staticElementsDescription[0]);\n    this.toHandle = Handles.createElement(this.staticElementsDescription[1]);\n    this.fromValue = Handles.createElement(this.staticElementsDescription[2]);\n    this.toValue = Handles.createElement(this.staticElementsDescription[3]);\n\n    this.collectClassElements();\n  }\n\n  private collectClassElements(): void {\n    this.fromHandle.append(this.fromValue);\n    this.toHandle.append(this.toValue);\n  }\n\n  static createElement(settings: HandlesElementsInfo): HTMLSpanElement {\n    const {\n      cssClasses = [\n        'for-change',\n        'for-change',\n      ],\n    } = settings;\n    const element: HTMLSpanElement = document.createElement('span');\n\n    cssClasses.forEach((cssClass: string) => {\n      element.classList.add(cssClass);\n    });\n\n    return element;\n  }\n\n  public refreshValues(data: NewHandlesData, sliderWidth: number): void {\n    const {\n      target,\n      value,\n      isToFixed,\n      position,\n    } = data;\n    if (target === 'min' || target === 'max') return;\n    const valueTargetName: 'fromValue' | 'toValue' = `${target}Value`;\n\n    this[valueTargetName].innerText = isToFixed ? `${Math.round(Number(value))}` : String(value);\n    this.refreshPosition(target, position, sliderWidth);\n  }\n\n  private refreshPosition(target: 'from' | 'to', position: string, sliderWidth: number):void {\n    const handleTargetName: 'fromHandle' | 'toHandle' = `${target}Handle`;\n    this[handleTargetName].style.left = `${Number(position)}px`;\n    const toPosition: number = Number(this.toHandle.style.left.replace('px', ''));\n    const fromPosition: number = Number(this.fromHandle.style.left.replace('px', ''));\n\n    if (toPosition <= (this.toHandle.offsetWidth * 2)) this.updateMainHandleClass(this.toHandle);\n    if (fromPosition >= (sliderWidth - this.toHandle.offsetWidth * 2)) this.updateMainHandleClass(this.fromHandle);\n  }\n\n  private checkIsNeedToMakeVertical(isVertical: boolean): boolean {\n    return (!this.fromValue.classList.contains(`${this.handleValueClass}_state_vertical`))\n      && (!this.toValue.classList.contains(`${this.handleValueClass}_state_vertical`)) && (isVertical);\n  }\n\n  private checkIsNeedToMakeHorizontally(isVertical: boolean): boolean {\n    return (this.fromValue.classList.contains(`${this.handleValueClass}_state_vertical`))\n      && (this.toValue.classList.contains(`${this.handleValueClass}_state_vertical`)) && (!isVertical);\n  }\n\n  private checkIsToNeedHide(isDouble: boolean): boolean {\n    return (!isDouble) && (!this.toHandle.classList.contains(`${this.handleClass}_hidden`));\n  }\n\n  private checkIsToNeedShow(isDouble: boolean): boolean {\n    return (isDouble) && (this.toHandle.classList.contains(`${this.handleClass}_hidden`));\n  }\n\n  public changePlane(isVertical: boolean): void {\n    const changeVerticalClass = (from: HTMLSpanElement, to: HTMLSpanElement): void => {\n      from.classList.toggle(`${this.handleValueClass}_state_vertical`);\n      to.classList.toggle(`${this.handleValueClass}_state_vertical`);\n    };\n\n    switch (true) {\n      case this.checkIsNeedToMakeVertical(isVertical):\n        changeVerticalClass(this.fromValue, this.toValue);\n        break;\n      case this.checkIsNeedToMakeHorizontally(isVertical):\n        changeVerticalClass(this.fromValue, this.toValue);\n        break;\n      default:\n        break;\n    }\n  }\n\n  public changeHandlesDisplay(settings: HandleHideData): void {\n    const { isDouble } = settings;\n\n    if (this.checkIsToNeedHide(isDouble)) {\n      this.toHandle.classList.add(`${this.handleClass}_hidden`);\n    } else if (this.checkIsToNeedShow(isDouble)) {\n      this.toHandle.classList.remove(`${this.handleClass}_hidden`);\n    }\n  }\n\n  public hideHandlesValues(isHandlesValues: boolean): void {\n    if (!isHandlesValues) {\n      this.toValue.classList.add(`${this.handleValueClass}_hidden`);\n      this.fromValue.classList.add(`${this.handleValueClass}_hidden`);\n    } else {\n      this.toValue.classList.remove(`${this.handleValueClass}_hidden`);\n      this.fromValue.classList.remove(`${this.handleValueClass}_hidden`);\n    }\n  }\n\n  updateMainHandleClass(targetHandle: HTMLSpanElement) {\n    const className: string = `${this.handleClass}_type_main`;\n\n    if (this.fromHandle.classList.contains(className)) this.fromHandle.classList.remove(className);\n    if (this.toHandle.classList.contains(className)) this.toHandle.classList.remove(className);\n    targetHandle.classList.add(className);\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(o=l[i="__coverage__"]||(l[i]={}))[A]&&o[A].hash===t?o[A]:(s.hash=t,o[A]=s));a.s[0]++,Object.defineProperty(n,"__esModule",{value:!0}),a.s[1]++,n.Handles=void 0;class r{constructor(){a.f[0]++,a.s[2]++,this.handleClass="goby-slider__handle",a.s[3]++,this.handleValueClass="goby-slider__handle-value",a.s[4]++,this.staticElementsDescription=[{cssClasses:[this.handleClass,`${this.handleClass}_type_from`]},{cssClasses:[this.handleClass,`${this.handleClass}_type_to`]},{cssClasses:[this.handleValueClass,`${this.handleValueClass}_type_from`]},{cssClasses:[this.handleValueClass,`${this.handleValueClass}_type_to`]}],a.s[5]++,this.fromHandle=r.createElement(this.staticElementsDescription[0]),a.s[6]++,this.toHandle=r.createElement(this.staticElementsDescription[1]),a.s[7]++,this.fromValue=r.createElement(this.staticElementsDescription[2]),a.s[8]++,this.toValue=r.createElement(this.staticElementsDescription[3]),a.s[9]++,this.collectClassElements()}collectClassElements(){a.f[1]++,a.s[10]++,this.fromHandle.append(this.fromValue),a.s[11]++,this.toHandle.append(this.toValue)}static createElement(e){a.f[2]++;const{cssClasses:n=(a.b[0][0]++,["for-change","for-change"])}=(a.s[12]++,e),A=(a.s[13]++,document.createElement("span"));return a.s[14]++,n.forEach((e=>{a.f[3]++,a.s[15]++,A.classList.add(e)})),a.s[16]++,A}refreshValues(e,n){a.f[4]++;const{target:A,value:t,isToFixed:l,position:i}=(a.s[17]++,e);if(a.s[18]++,a.b[2][0]++,"min"===A||(a.b[2][1]++,"max"===A))return a.b[1][0]++,void a.s[19]++;a.b[1][1]++;const s=(a.s[20]++,`${A}Value`);a.s[21]++,this[s].innerText=l?(a.b[3][0]++,`${Math.round(Number(t))}`):(a.b[3][1]++,String(t)),a.s[22]++,this.refreshPosition(A,i,n)}refreshPosition(e,n,A){a.f[5]++;const t=(a.s[23]++,`${e}Handle`);a.s[24]++,this[t].style.left=`${Number(n)}px`;const l=(a.s[25]++,Number(this.toHandle.style.left.replace("px",""))),i=(a.s[26]++,Number(this.fromHandle.style.left.replace("px","")));a.s[27]++,l<=2*this.toHandle.offsetWidth?(a.b[4][0]++,a.s[28]++,this.updateMainHandleClass(this.toHandle)):a.b[4][1]++,a.s[29]++,i>=A-2*this.toHandle.offsetWidth?(a.b[5][0]++,a.s[30]++,this.updateMainHandleClass(this.fromHandle)):a.b[5][1]++}checkIsNeedToMakeVertical(e){return a.f[6]++,a.s[31]++,a.b[6][0]++,!this.fromValue.classList.contains(`${this.handleValueClass}_state_vertical`)&&(a.b[6][1]++,!this.toValue.classList.contains(`${this.handleValueClass}_state_vertical`))&&(a.b[6][2]++,e)}checkIsNeedToMakeHorizontally(e){return a.f[7]++,a.s[32]++,a.b[7][0]++,this.fromValue.classList.contains(`${this.handleValueClass}_state_vertical`)&&(a.b[7][1]++,this.toValue.classList.contains(`${this.handleValueClass}_state_vertical`))&&(a.b[7][2]++,!e)}checkIsToNeedHide(e){return a.f[8]++,a.s[33]++,!(a.b[8][0]++,e||(a.b[8][1]++,this.toHandle.classList.contains(`${this.handleClass}_hidden`)))}checkIsToNeedShow(e){return a.f[9]++,a.s[34]++,a.b[9][0]++,e&&(a.b[9][1]++,this.toHandle.classList.contains(`${this.handleClass}_hidden`))}changePlane(e){a.f[10]++,a.s[35]++;const n=(e,n)=>{a.f[11]++,a.s[36]++,e.classList.toggle(`${this.handleValueClass}_state_vertical`),a.s[37]++,n.classList.toggle(`${this.handleValueClass}_state_vertical`)};switch(a.s[38]++,!0){case this.checkIsNeedToMakeVertical(e):a.b[10][0]++,a.s[39]++,n(this.fromValue,this.toValue),a.s[40]++;break;case this.checkIsNeedToMakeHorizontally(e):a.b[10][1]++,a.s[41]++,n(this.fromValue,this.toValue),a.s[42]++;break;default:a.b[10][2]++,a.s[43]++}}changeHandlesDisplay(e){a.f[12]++;const{isDouble:n}=(a.s[44]++,e);a.s[45]++,this.checkIsToNeedHide(n)?(a.b[11][0]++,a.s[46]++,this.toHandle.classList.add(`${this.handleClass}_hidden`)):(a.b[11][1]++,a.s[47]++,this.checkIsToNeedShow(n)?(a.b[12][0]++,a.s[48]++,this.toHandle.classList.remove(`${this.handleClass}_hidden`)):a.b[12][1]++)}hideHandlesValues(e){a.f[13]++,a.s[49]++,e?(a.b[13][1]++,a.s[52]++,this.toValue.classList.remove(`${this.handleValueClass}_hidden`),a.s[53]++,this.fromValue.classList.remove(`${this.handleValueClass}_hidden`)):(a.b[13][0]++,a.s[50]++,this.toValue.classList.add(`${this.handleValueClass}_hidden`),a.s[51]++,this.fromValue.classList.add(`${this.handleValueClass}_hidden`))}updateMainHandleClass(e){a.f[14]++;const n=(a.s[54]++,`${this.handleClass}_type_main`);a.s[55]++,this.fromHandle.classList.contains(n)?(a.b[14][0]++,a.s[56]++,this.fromHandle.classList.remove(n)):a.b[14][1]++,a.s[57]++,this.toHandle.classList.contains(n)?(a.b[15][0]++,a.s[58]++,this.toHandle.classList.remove(n)):a.b[15][1]++,a.s[59]++,e.classList.add(n)}}a.s[60]++,n.Handles=r},"./src/plugin/View/Handles/handles.test.ts":(e,n,A)=>{"use strict";var t,l,i,s,o,a,r=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Handles\\handles.test.ts",l="528e36afd1202ab78c70943e04851a6f600fdf07",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Handles\\handles.test.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:18},end:{line:3,column:38}},2:{start:{line:4,column:0},end:{line:65,column:3}},3:{start:{line:6,column:4},end:{line:8,column:7}},4:{start:{line:7,column:8},end:{line:7,column:42}},5:{start:{line:9,column:4},end:{line:11,column:7}},6:{start:{line:10,column:8},end:{line:10,column:37}},7:{start:{line:12,column:4},end:{line:20,column:7}},8:{start:{line:13,column:8},end:{line:18,column:16}},9:{start:{line:19,column:8},end:{line:19,column:57}},10:{start:{line:21,column:4},end:{line:29,column:7}},11:{start:{line:22,column:8},end:{line:27,column:16}},12:{start:{line:28,column:8},end:{line:28,column:56}},13:{start:{line:30,column:4},end:{line:39,column:7}},14:{start:{line:31,column:8},end:{line:36,column:16}},15:{start:{line:37,column:8},end:{line:37,column:59}},16:{start:{line:38,column:8},end:{line:38,column:80}},17:{start:{line:40,column:4},end:{line:47,column:7}},18:{start:{line:41,column:8},end:{line:41,column:34}},19:{start:{line:42,column:8},end:{line:42,column:90}},20:{start:{line:43,column:8},end:{line:43,column:88}},21:{start:{line:44,column:8},end:{line:44,column:35}},22:{start:{line:45,column:8},end:{line:45,column:94}},23:{start:{line:46,column:8},end:{line:46,column:92}},24:{start:{line:48,column:4},end:{line:55,column:7}},25:{start:{line:49,column:8},end:{line:49,column:41}},26:{start:{line:50,column:8},end:{line:50,column:102}},27:{start:{line:51,column:8},end:{line:51,column:102}},28:{start:{line:52,column:8},end:{line:52,column:40}},29:{start:{line:53,column:8},end:{line:53,column:101}},30:{start:{line:54,column:8},end:{line:54,column:101}},31:{start:{line:56,column:4},end:{line:59,column:7}},32:{start:{line:57,column:8},end:{line:57,column:76}},33:{start:{line:58,column:8},end:{line:58,column:95}},34:{start:{line:60,column:4},end:{line:64,column:7}},35:{start:{line:61,column:8},end:{line:61,column:69}},36:{start:{line:62,column:8},end:{line:62,column:75}},37:{start:{line:63,column:8},end:{line:63,column:94}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:4,column:20},end:{line:4,column:21}},loc:{start:{line:4,column:26},end:{line:65,column:1}},line:4},1:{name:"(anonymous_1)",decl:{start:{line:6,column:15},end:{line:6,column:16}},loc:{start:{line:6,column:21},end:{line:8,column:5}},line:6},2:{name:"(anonymous_2)",decl:{start:{line:9,column:32},end:{line:9,column:33}},loc:{start:{line:9,column:38},end:{line:11,column:5}},line:9},3:{name:"(anonymous_3)",decl:{start:{line:12,column:49},end:{line:12,column:50}},loc:{start:{line:12,column:55},end:{line:20,column:5}},line:12},4:{name:"(anonymous_4)",decl:{start:{line:21,column:47},end:{line:21,column:48}},loc:{start:{line:21,column:53},end:{line:29,column:5}},line:21},5:{name:"(anonymous_5)",decl:{start:{line:30,column:52},end:{line:30,column:53}},loc:{start:{line:30,column:58},end:{line:39,column:5}},line:30},6:{name:"(anonymous_6)",decl:{start:{line:40,column:49},end:{line:40,column:50}},loc:{start:{line:40,column:55},end:{line:47,column:5}},line:40},7:{name:"(anonymous_7)",decl:{start:{line:48,column:54},end:{line:48,column:55}},loc:{start:{line:48,column:60},end:{line:55,column:5}},line:48},8:{name:"(anonymous_8)",decl:{start:{line:56,column:49},end:{line:56,column:50}},loc:{start:{line:56,column:55},end:{line:59,column:5}},line:56},9:{name:"(anonymous_9)",decl:{start:{line:60,column:41},end:{line:60,column:42}},loc:{start:{line:60,column:47},end:{line:64,column:5}},line:60}},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Handles\\handles.test.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Handles\\handles.test.ts"],names:[],mappings:"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",sourcesContent:["import { Handles } from './Handles';\n\ndescribe('Handles', () => {\n  let handles: Handles;\n\n  beforeEach(() => {\n    handles = new Handles();\n  });\n\n  it('Handles can be create', () => {\n    expect(handles).toBeTruthy();\n  });\n\n  it('refreshValues() refresh value for from', () => {\n    handles.refreshValues({\n      target: 'from',\n      value: 5,\n      position: '120',\n      isToFixed: true,\n    }, 500);\n    expect(handles.fromValue.innerText).toEqual('5');\n  });\n\n  it('refreshValues() refresh value for to', () => {\n    handles.refreshValues({\n      target: 'to',\n      value: 5,\n      position: '120',\n      isToFixed: true,\n    }, 500);\n    expect(handles.toHandle.innerText).toEqual('5');\n  });\n\n  it('refreshValues() refresh not integer value', () => {\n    handles.refreshValues({\n      target: 'from',\n      value: 5.5,\n      position: '500',\n      isToFixed: false,\n    }, 500);\n    expect(handles.fromValue.innerText).toEqual('5.5');\n    expect(handles.fromHandle).toHaveClass('goby-slider__handle_type_main');\n  });\n\n  it('changePlane() change classes correctly', () => {\n    handles.changePlane(true);\n    expect(handles.fromValue).toHaveClass('goby-slider__handle-value_state_vertical');\n    expect(handles.toValue).toHaveClass('goby-slider__handle-value_state_vertical');\n    handles.changePlane(false);\n    expect(handles.fromValue).not.toHaveClass('goby-slider__handle-value_state_vertical');\n    expect(handles.toValue).not.toHaveClass('goby-slider__handle-value_state_vertical');\n  });\n\n  it('hideHandleValues() manage display correctly', () => {\n    handles.hideHandlesValues(false);\n    expect(handles.fromValue.classList.contains('goby-slider__handle-value_hidden')).toBeTruthy();\n    expect(handles.fromValue.classList.contains('goby-slider__handle-value_hidden')).toBeTruthy();\n    handles.hideHandlesValues(true);\n    expect(handles.fromValue.classList.contains('goby-slider__handle-value_hidden')).toBeFalse();\n    expect(handles.fromValue.classList.contains('goby-slider__handle-value_hidden')).toBeFalse();\n  });\n\n  it('changeHandlesDisplay() if need to hide', () => {\n    handles.changeHandlesDisplay({ isDouble: false, sliderWidth: 100 });\n    expect(handles.toHandle.classList.contains('goby-slider__handle_hidden')).toBeTruthy();\n  });\n\n  it('hideToHandel() if need to show', () => {\n    handles.toHandle.classList.add('goby-slider__handle_hidden');\n    handles.changeHandlesDisplay({ isDouble: true, sliderWidth: 100 });\n    expect(handles.toHandle.classList.contains('goby-slider__handle_hidden')).toBeFalse();\n  });\n});\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[s="__coverage__"]||(i[s]={}))[t]&&a[t].hash===l?a[t]:(o.hash=l,a[t]=o));r.s[0]++,Object.defineProperty(n,"__esModule",{value:!0});const C=(r.s[1]++,A("./src/plugin/View/Handles/Handles.ts"));r.s[2]++,describe("Handles",(()=>{let e;r.f[0]++,r.s[3]++,beforeEach((()=>{r.f[1]++,r.s[4]++,e=new C.Handles})),r.s[5]++,it("Handles can be create",(()=>{r.f[2]++,r.s[6]++,expect(e).toBeTruthy()})),r.s[7]++,it("refreshValues() refresh value for from",(()=>{r.f[3]++,r.s[8]++,e.refreshValues({target:"from",value:5,position:"120",isToFixed:!0},500),r.s[9]++,expect(e.fromValue.innerText).toEqual("5")})),r.s[10]++,it("refreshValues() refresh value for to",(()=>{r.f[4]++,r.s[11]++,e.refreshValues({target:"to",value:5,position:"120",isToFixed:!0},500),r.s[12]++,expect(e.toHandle.innerText).toEqual("5")})),r.s[13]++,it("refreshValues() refresh not integer value",(()=>{r.f[5]++,r.s[14]++,e.refreshValues({target:"from",value:5.5,position:"500",isToFixed:!1},500),r.s[15]++,expect(e.fromValue.innerText).toEqual("5.5"),r.s[16]++,expect(e.fromHandle).toHaveClass("goby-slider__handle_type_main")})),r.s[17]++,it("changePlane() change classes correctly",(()=>{r.f[6]++,r.s[18]++,e.changePlane(!0),r.s[19]++,expect(e.fromValue).toHaveClass("goby-slider__handle-value_state_vertical"),r.s[20]++,expect(e.toValue).toHaveClass("goby-slider__handle-value_state_vertical"),r.s[21]++,e.changePlane(!1),r.s[22]++,expect(e.fromValue).not.toHaveClass("goby-slider__handle-value_state_vertical"),r.s[23]++,expect(e.toValue).not.toHaveClass("goby-slider__handle-value_state_vertical")})),r.s[24]++,it("hideHandleValues() manage display correctly",(()=>{r.f[7]++,r.s[25]++,e.hideHandlesValues(!1),r.s[26]++,expect(e.fromValue.classList.contains("goby-slider__handle-value_hidden")).toBeTruthy(),r.s[27]++,expect(e.fromValue.classList.contains("goby-slider__handle-value_hidden")).toBeTruthy(),r.s[28]++,e.hideHandlesValues(!0),r.s[29]++,expect(e.fromValue.classList.contains("goby-slider__handle-value_hidden")).toBeFalse(),r.s[30]++,expect(e.fromValue.classList.contains("goby-slider__handle-value_hidden")).toBeFalse()})),r.s[31]++,it("changeHandlesDisplay() if need to hide",(()=>{r.f[8]++,r.s[32]++,e.changeHandlesDisplay({isDouble:!1,sliderWidth:100}),r.s[33]++,expect(e.toHandle.classList.contains("goby-slider__handle_hidden")).toBeTruthy()})),r.s[34]++,it("hideToHandel() if need to show",(()=>{r.f[9]++,r.s[35]++,e.toHandle.classList.add("goby-slider__handle_hidden"),r.s[36]++,e.changeHandlesDisplay({isDouble:!0,sliderWidth:100}),r.s[37]++,expect(e.toHandle.classList.contains("goby-slider__handle_hidden")).toBeFalse()}))}))},"./src/plugin/View/Handles/types.ts":(e,n)=>{"use strict";var A,t,l,i,s,o;(A="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Handles\\types.ts",t="13fcf3e8746d0da833d17ce69f77490fb0d91a13",l=new(0,function(){}.constructor)("return this")(),s={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Handles\\types.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}}},fnMap:{},branchMap:{},s:{0:0},f:{},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Handles\\types.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Handles\\types.ts"],names:[],mappings:"",sourcesContent:["type HandlesElementsInfo = {\n  cssClasses: Array<string>,\n};\n\ntype HandleHideData = {\n  isDouble: boolean,\n  sliderWidth: number\n};\n\ntype DataToHandlesMove = {\n  targetPosition: number,\n  isDouble: boolean,\n};\n\ntype StaticElementsDescription = Array<HandlesElementsInfo>;\n\nexport {\n  HandlesElementsInfo,\n  StaticElementsDescription,\n  HandleHideData,\n  DataToHandlesMove,\n};\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(o=l[i="__coverage__"]||(l[i]={}))[A]&&o[A].hash===t?o[A]:(s.hash=t,o[A]=s)).s[0]++,Object.defineProperty(n,"__esModule",{value:!0})},"./src/plugin/View/Movement/Movement.ts":function(e,n,A){"use strict";var t,l,i,s,o,a,r=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Movement\\Movement.ts",l="5eaacdad8baf6fb3cea2e2beea9c31f6726bfaaa",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Movement\\Movement.ts",statementMap:{0:{start:{line:2,column:17},end:{line:7,column:1}},1:{start:{line:3,column:12},end:{line:3,column:28}},2:{start:{line:3,column:34},end:{line:3,column:125}},3:{start:{line:4,column:4},end:{line:5,column:150}},4:{start:{line:4,column:79},end:{line:4,column:131}},5:{start:{line:5,column:9},end:{line:5,column:150}},6:{start:{line:5,column:58},end:{line:5,column:150}},7:{start:{line:5,column:81},end:{line:5,column:150}},8:{start:{line:6,column:4},end:{line:6,column:66}},9:{start:{line:8,column:0},end:{line:8,column:62}},10:{start:{line:9,column:0},end:{line:9,column:26}},11:{start:{line:10,column:29},end:{line:10,column:58}},12:{start:{line:11,column:15},end:{line:68,column:1}},13:{start:{line:13,column:8},end:{line:13,column:38}},14:{start:{line:14,column:8},end:{line:14,column:40}},15:{start:{line:15,column:8},end:{line:15,column:46}},16:{start:{line:16,column:8},end:{line:16,column:41}},17:{start:{line:17,column:8},end:{line:20,column:10}},18:{start:{line:23,column:44},end:{line:23,column:52}},19:{start:{line:24,column:8},end:{line:26,column:86}},20:{start:{line:29,column:18},end:{line:29,column:31}},21:{start:{line:30,column:18},end:{line:30,column:31}},22:{start:{line:31,column:28},end:{line:35,column:10}},23:{start:{line:36,column:29},end:{line:36,column:84}},24:{start:{line:37,column:23},end:{line:37,column:51}},25:{start:{line:38,column:8},end:{line:41,column:11}},26:{start:{line:44,column:50},end:{line:44,column:57}},27:{start:{line:45,column:29},end:{line:45,column:63}},28:{start:{line:46,column:29},end:{line:46,column:91}},29:{start:{line:47,column:33},end:{line:49,column:59}},30:{start:{line:50,column:8},end:{line:53,column:10}},31:{start:{line:54,column:8},end:{line:54,column:57}},32:{start:{line:55,column:8},end:{line:55,column:42}},33:{start:{line:58,column:8},end:{line:58,column:80}},34:{start:{line:59,column:8},end:{line:59,column:76}},35:{start:{line:62,column:8},end:{line:62,column:44}},36:{start:{line:65,column:8},end:{line:65,column:77}},37:{start:{line:66,column:8},end:{line:66,column:73}},38:{start:{line:69,column:0},end:{line:71,column:13}},39:{start:{line:72,column:0},end:{line:72,column:28}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:46},end:{line:2,column:47}},loc:{start:{line:2,column:87},end:{line:7,column:1}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:26},end:{line:21,column:5}},line:12},2:{name:"(anonymous_2)",decl:{start:{line:22,column:4},end:{line:22,column:5}},loc:{start:{line:22,column:35},end:{line:27,column:5}},line:22},3:{name:"(anonymous_3)",decl:{start:{line:28,column:4},end:{line:28,column:5}},loc:{start:{line:28,column:35},end:{line:42,column:5}},line:28},4:{name:"(anonymous_4)",decl:{start:{line:43,column:4},end:{line:43,column:5}},loc:{start:{line:43,column:28},end:{line:56,column:5}},line:43},5:{name:"(anonymous_5)",decl:{start:{line:57,column:4},end:{line:57,column:5}},loc:{start:{line:57,column:35},end:{line:60,column:5}},line:57},6:{name:"(anonymous_6)",decl:{start:{line:61,column:4},end:{line:61,column:5}},loc:{start:{line:61,column:28},end:{line:63,column:5}},line:61},7:{name:"(anonymous_7)",decl:{start:{line:64,column:4},end:{line:64,column:5}},loc:{start:{line:64,column:33},end:{line:67,column:5}},line:64}},branchMap:{0:{loc:{start:{line:2,column:17},end:{line:7,column:1}},type:"binary-expr",locations:[{start:{line:2,column:18},end:{line:2,column:22}},{start:{line:2,column:26},end:{line:2,column:41}},{start:{line:2,column:46},end:{line:7,column:1}}],line:2},1:{loc:{start:{line:3,column:34},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:42},end:{line:3,column:48}},{start:{line:3,column:51},end:{line:3,column:125}}],line:3},2:{loc:{start:{line:3,column:51},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:67},end:{line:3,column:118}},{start:{line:3,column:121},end:{line:3,column:125}}],line:3},3:{loc:{start:{line:4,column:4},end:{line:5,column:150}},type:"if",locations:[{start:{line:4,column:4},end:{line:5,column:150}},{start:{line:4,column:4},end:{line:5,column:150}}],line:4},4:{loc:{start:{line:4,column:8},end:{line:4,column:77}},type:"binary-expr",locations:[{start:{line:4,column:8},end:{line:4,column:35}},{start:{line:4,column:39},end:{line:4,column:77}}],line:4},5:{loc:{start:{line:5,column:58},end:{line:5,column:150}},type:"if",locations:[{start:{line:5,column:58},end:{line:5,column:150}},{start:{line:5,column:58},end:{line:5,column:150}}],line:5},6:{loc:{start:{line:5,column:85},end:{line:5,column:149}},type:"binary-expr",locations:[{start:{line:5,column:86},end:{line:5,column:143}},{start:{line:5,column:148},end:{line:5,column:149}}],line:5},7:{loc:{start:{line:5,column:86},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:94},end:{line:5,column:98}},{start:{line:5,column:101},end:{line:5,column:143}}],line:5},8:{loc:{start:{line:5,column:101},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:109},end:{line:5,column:126}},{start:{line:5,column:129},end:{line:5,column:143}}],line:5},9:{loc:{start:{line:6,column:11},end:{line:6,column:62}},type:"binary-expr",locations:[{start:{line:6,column:11},end:{line:6,column:16}},{start:{line:6,column:20},end:{line:6,column:21}},{start:{line:6,column:25},end:{line:6,column:62}}],line:6},10:{loc:{start:{line:24,column:15},end:{line:26,column:85}},type:"cond-expr",locations:[{start:{line:25,column:14},end:{line:25,column:112}},{start:{line:26,column:14},end:{line:26,column:85}}],line:24},11:{loc:{start:{line:37,column:23},end:{line:37,column:51}},type:"cond-expr",locations:[{start:{line:37,column:38},end:{line:37,column:44}},{start:{line:37,column:47},end:{line:37,column:51}}],line:37},12:{loc:{start:{line:44,column:16},end:{line:44,column:21}},type:"default-arg",locations:[{start:{line:44,column:20},end:{line:44,column:21}}],line:44},13:{loc:{start:{line:44,column:23},end:{line:44,column:28}},type:"default-arg",locations:[{start:{line:44,column:27},end:{line:44,column:28}}],line:44},14:{loc:{start:{line:44,column:30},end:{line:44,column:44}},type:"default-arg",locations:[{start:{line:44,column:39},end:{line:44,column:44}}],line:44},15:{loc:{start:{line:46,column:29},end:{line:46,column:91}},type:"cond-expr",locations:[{start:{line:46,column:44},end:{line:46,column:67}},{start:{line:46,column:70},end:{line:46,column:91}}],line:46},16:{loc:{start:{line:47,column:33},end:{line:49,column:59}},type:"cond-expr",locations:[{start:{line:48,column:14},end:{line:48,column:87}},{start:{line:49,column:14},end:{line:49,column:59}}],line:47}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0},b:{0:[0,0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0,0],10:[0,0],11:[0,0],12:[0],13:[0],14:[0],15:[0,0],16:[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Movement\\Movement.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Movement\\Movement.ts"],names:[],mappings:"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",sourcesContent:["import autobind from 'autobind-decorator';\nimport {\n  BasicViewSettings,\n} from '../types';\nimport {\n  HandleClickData, MovementCalculateData,\n  MovementEvent,\n  MovementSettings,\n} from './types';\nimport { Handles } from '../Handles/Handles';\n\n@autobind\nexport class Movement {\n  readonly slider: HTMLDivElement;\n\n  private readonly handles: Handles;\n\n  readonly getOptions: () => BasicViewSettings;\n\n  private handleClickData: HandleClickData;\n\n  public movementSettings: MovementSettings;\n\n  constructor(settings: MovementSettings) {\n    this.slider = settings.slider;\n    this.handles = settings.handles;\n    this.getOptions = settings.getOptions;\n    this.movementSettings = settings;\n    this.handleClickData = {\n      target: this.handles.fromHandle,\n      distanceToCursor: 0,\n    };\n  }\n\n  public calculateNewPosition(settings: MovementCalculateData): number {\n    const {\n      x,\n      y,\n      distanceToCursor,\n    } = settings;\n\n    return this.getOptions().vertical\n      ? this.slider.offsetWidth - (\n        y - Number(distanceToCursor) - this.slider.getBoundingClientRect().top)\n      : x - Number(distanceToCursor) - this.slider.getBoundingClientRect().left;\n  }\n\n  private handleDocumentMouseMove(event: MouseEvent): void {\n    const x: number = event.clientX;\n    const y: number = event.clientY;\n    const newPosition: number = this.calculateNewPosition({\n      x,\n      y,\n      distanceToCursor: this.handleClickData.distanceToCursor,\n    });\n    const isTargetFrom: boolean = this.handleClickData.target === this.handles.fromHandle;\n    const target = isTargetFrom ? 'from' : 'to';\n\n    this.movementSettings.environmentLink.updatePositions({\n      target,\n      newPosition,\n    });\n  }\n\n  public handleListener(setting: MovementEvent): void {\n    const {\n      x = 0,\n      y = 0,\n      target = false,\n    } = setting;\n    const isFromHandle: boolean = target === this.handles.fromHandle;\n    const targetHandle: HTMLSpanElement = isFromHandle ? this.handles.fromHandle : this.handles.toHandle;\n    const distanceToCursor: number = this.getOptions().vertical\n      ? y - targetHandle.getBoundingClientRect().top - (targetHandle.offsetWidth)\n      : x - targetHandle.getBoundingClientRect().left;\n    this.handleClickData = {\n      target: targetHandle,\n      distanceToCursor,\n    };\n\n    this.handles.updateMainHandleClass(targetHandle);\n\n    this.bindDocumentEventListeners();\n  }\n\n  private removeDocumentEventListeners(): void {\n    document.removeEventListener('mousemove', this.handleDocumentMouseMove);\n    document.removeEventListener('mouseup', this.handleDocumentMouseUp);\n  }\n\n  private handleDocumentMouseUp(): void {\n    this.removeDocumentEventListeners();\n  }\n\n  private bindDocumentEventListeners(): void {\n    document.addEventListener('mousemove', this.handleDocumentMouseMove);\n    document.addEventListener('mouseup', this.handleDocumentMouseUp);\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[s="__coverage__"]||(i[s]={}))[t]&&a[t].hash===l?a[t]:(o.hash=l,a[t]=o)),C=(r.s[0]++,r.b[0][0]++,this&&(r.b[0][1]++,this.__decorate)||(r.b[0][2]++,function(e,n,A,t){r.f[0]++;var l,i=(r.s[1]++,arguments.length),s=(r.s[2]++,i<3?(r.b[1][0]++,n):(r.b[1][1]++,null===t?(r.b[2][0]++,t=Object.getOwnPropertyDescriptor(n,A)):(r.b[2][1]++,t)));if(r.s[3]++,r.b[4][0]++,"object"==typeof Reflect&&(r.b[4][1]++,"function"==typeof Reflect.decorate))r.b[3][0]++,r.s[4]++,s=Reflect.decorate(e,n,A,t);else{r.b[3][1]++,r.s[5]++;for(var o=e.length-1;o>=0;o--)r.s[6]++,(l=e[o])?(r.b[5][0]++,r.s[7]++,r.b[6][0]++,s=(i<3?(r.b[7][0]++,l(s)):(r.b[7][1]++,i>3?(r.b[8][0]++,l(n,A,s)):(r.b[8][1]++,l(n,A))))||(r.b[6][1]++,s)):r.b[5][1]++}return r.s[8]++,r.b[9][0]++,i>3&&(r.b[9][1]++,s)&&(r.b[9][2]++,Object.defineProperty(n,A,s)),s}));r.s[9]++,Object.defineProperty(n,"__esModule",{value:!0}),r.s[10]++,n.Movement=void 0;const c=(r.s[11]++,A("./node_modules/autobind-decorator/lib/esm/index.js"));r.s[12]++;let u=class{constructor(e){r.f[1]++,r.s[13]++,this.slider=e.slider,r.s[14]++,this.handles=e.handles,r.s[15]++,this.getOptions=e.getOptions,r.s[16]++,this.movementSettings=e,r.s[17]++,this.handleClickData={target:this.handles.fromHandle,distanceToCursor:0}}calculateNewPosition(e){r.f[2]++;const{x:n,y:A,distanceToCursor:t}=(r.s[18]++,e);return r.s[19]++,this.getOptions().vertical?(r.b[10][0]++,this.slider.offsetWidth-(A-Number(t)-this.slider.getBoundingClientRect().top)):(r.b[10][1]++,n-Number(t)-this.slider.getBoundingClientRect().left)}handleDocumentMouseMove(e){r.f[3]++;const n=(r.s[20]++,e.clientX),A=(r.s[21]++,e.clientY),t=(r.s[22]++,this.calculateNewPosition({x:n,y:A,distanceToCursor:this.handleClickData.distanceToCursor})),l=(r.s[23]++,this.handleClickData.target===this.handles.fromHandle),i=(r.s[24]++,l?(r.b[11][0]++,"from"):(r.b[11][1]++,"to"));r.s[25]++,this.movementSettings.environmentLink.updatePositions({target:i,newPosition:t})}handleListener(e){r.f[4]++;const{x:n=(r.b[12][0]++,0),y:A=(r.b[13][0]++,0),target:t=(r.b[14][0]++,!1)}=(r.s[26]++,e),l=(r.s[27]++,t===this.handles.fromHandle),i=(r.s[28]++,l?(r.b[15][0]++,this.handles.fromHandle):(r.b[15][1]++,this.handles.toHandle)),s=(r.s[29]++,this.getOptions().vertical?(r.b[16][0]++,A-i.getBoundingClientRect().top-i.offsetWidth):(r.b[16][1]++,n-i.getBoundingClientRect().left));r.s[30]++,this.handleClickData={target:i,distanceToCursor:s},r.s[31]++,this.handles.updateMainHandleClass(i),r.s[32]++,this.bindDocumentEventListeners()}removeDocumentEventListeners(){r.f[5]++,r.s[33]++,document.removeEventListener("mousemove",this.handleDocumentMouseMove),r.s[34]++,document.removeEventListener("mouseup",this.handleDocumentMouseUp)}handleDocumentMouseUp(){r.f[6]++,r.s[35]++,this.removeDocumentEventListeners()}bindDocumentEventListeners(){r.f[7]++,r.s[36]++,document.addEventListener("mousemove",this.handleDocumentMouseMove),r.s[37]++,document.addEventListener("mouseup",this.handleDocumentMouseUp)}};r.s[38]++,u=C([c.default],u),r.s[39]++,n.Movement=u},"./src/plugin/View/Movement/movement.test.ts":(e,n,A)=>{"use strict";var t,l,i,s,o,a,r=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Movement\\movement.test.ts",l="e3415f283591dc974362ada117d06d3792f50bee",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Movement\\movement.test.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:19},end:{line:3,column:40}},2:{start:{line:4,column:18},end:{line:4,column:47}},3:{start:{line:5,column:0},end:{line:42,column:3}},4:{start:{line:7,column:21},end:{line:19,column:5}},5:{start:{line:9,column:54},end:{line:9,column:58}},6:{start:{line:10,column:27},end:{line:17,column:9}},7:{start:{line:20,column:4},end:{line:22,column:7}},8:{start:{line:21,column:8},end:{line:21,column:53}},9:{start:{line:23,column:4},end:{line:25,column:7}},10:{start:{line:24,column:8},end:{line:24,column:38}},11:{start:{line:26,column:4},end:{line:33,column:7}},12:{start:{line:27,column:23},end:{line:31,column:10}},13:{start:{line:32,column:8},end:{line:32,column:36}},14:{start:{line:34,column:4},end:{line:41,column:7}},15:{start:{line:35,column:8},end:{line:39,column:11}},16:{start:{line:40,column:8},end:{line:40,column:106}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:5,column:21},end:{line:5,column:22}},loc:{start:{line:5,column:27},end:{line:42,column:1}},line:5},1:{name:"(anonymous_1)",decl:{start:{line:9,column:44},end:{line:9,column:45}},loc:{start:{line:9,column:54},end:{line:9,column:58}},line:9},2:{name:"(anonymous_2)",decl:{start:{line:10,column:20},end:{line:10,column:21}},loc:{start:{line:10,column:27},end:{line:17,column:9}},line:10},3:{name:"(anonymous_3)",decl:{start:{line:20,column:15},end:{line:20,column:16}},loc:{start:{line:20,column:21},end:{line:22,column:5}},line:20},4:{name:"(anonymous_4)",decl:{start:{line:23,column:33},end:{line:23,column:34}},loc:{start:{line:23,column:39},end:{line:25,column:5}},line:23},5:{name:"(anonymous_5)",decl:{start:{line:26,column:48},end:{line:26,column:49}},loc:{start:{line:26,column:54},end:{line:33,column:5}},line:26},6:{name:"(anonymous_6)",decl:{start:{line:34,column:32},end:{line:34,column:33}},loc:{start:{line:34,column:38},end:{line:41,column:5}},line:34}},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Movement\\movement.test.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Movement\\movement.test.ts"],names:[],mappings:";;AAAA,yCAAsC;AACtC,gDAA6C;AAI7C,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;IACxB,IAAI,QAAkB,CAAC;IAEvB,MAAM,QAAQ,GAAqB;QACjC,MAAM,EAAE,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC;QACrC,eAAe,EAAE,EAAE,eAAe,EAAE,CAAC,IAAyB,EAAE,EAAE,CAAC,IAAI,EAAE;QACzE,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC;YACjB,MAAM,EAAE,IAAI;YACZ,aAAa,EAAE,IAAI;YACnB,QAAQ,EAAE,KAAK;YACf,IAAI,EAAE,KAAK;YACX,UAAU,EAAE,IAAI;YAChB,OAAO,EAAE,IAAI;SACd,CAAC;QACF,OAAO,EAAE,IAAI,iBAAO,EAAE;KACvB,CAAC;IAEF,UAAU,CAAC,GAAG,EAAE;QACd,QAAQ,GAAG,IAAI,mBAAQ,CAAC,QAAQ,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;QAC/C,MAAM,MAAM,GAAG,QAAQ,CAAC,oBAAoB,CAAC;YAC3C,CAAC,EAAE,GAAG;YACN,CAAC,EAAE,GAAG;YACN,gBAAgB,EAAE,CAAC;SACpB,CAAC,CAAC;QAEH,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;QAC/B,QAAQ,CAAC,cAAc,CAAC;YACtB,CAAC,EAAE,GAAG;YACN,CAAC,EAAE,GAAG;YACN,MAAM,EAAE,QAAQ,CAAC,gBAAgB,CAAC,OAAO,CAAC,UAAU;SACrD,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,+BAA+B,CAAC,CAAC;IACpG,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC",sourcesContent:["import { Movement } from './Movement';\nimport { Handles } from '../Handles/Handles';\nimport { UpdatePositionsData } from '../types';\nimport { MovementSettings } from './types';\n\ndescribe('Movement', () => {\n  let movement: Movement;\n\n  const settings: MovementSettings = {\n    slider: document.createElement('div'),\n    environmentLink: { updatePositions: (data: UpdatePositionsData) => data },\n    getOptions: () => ({\n      double: true,\n      handlesValues: true,\n      vertical: false,\n      step: false,\n      valueScale: true,\n      integer: true,\n    }),\n    handles: new Handles(),\n  };\n\n  beforeEach(() => {\n    movement = new Movement(settings);\n  });\n\n  it('Movement can be create', () => {\n    expect(movement).toBeTruthy();\n  });\n\n  it('calculateNewPosition() work correctly', () => {\n    const result = movement.calculateNewPosition({\n      x: 100,\n      y: 200,\n      distanceToCursor: 0,\n    });\n\n    expect(result).toEqual(100);\n  });\n\n  it('handle got main class', () => {\n    movement.handleListener({\n      x: 100,\n      y: 200,\n      target: movement.movementSettings.handles.fromHandle,\n    });\n\n    expect(movement.movementSettings.handles.fromHandle).toHaveClass('goby-slider__handle_type_main');\n  });\n});\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[s="__coverage__"]||(i[s]={}))[t]&&a[t].hash===l?a[t]:(o.hash=l,a[t]=o));r.s[0]++,Object.defineProperty(n,"__esModule",{value:!0});const C=(r.s[1]++,A("./src/plugin/View/Movement/Movement.ts")),c=(r.s[2]++,A("./src/plugin/View/Handles/Handles.ts"));r.s[3]++,describe("Movement",(()=>{let e;r.f[0]++;const n=(r.s[4]++,{slider:document.createElement("div"),environmentLink:{updatePositions:e=>(r.f[1]++,r.s[5]++,e)},getOptions:()=>(r.f[2]++,r.s[6]++,{double:!0,handlesValues:!0,vertical:!1,step:!1,valueScale:!0,integer:!0}),handles:new c.Handles});r.s[7]++,beforeEach((()=>{r.f[3]++,r.s[8]++,e=new C.Movement(n)})),r.s[9]++,it("Movement can be create",(()=>{r.f[4]++,r.s[10]++,expect(e).toBeTruthy()})),r.s[11]++,it("calculateNewPosition() work correctly",(()=>{r.f[5]++;const n=(r.s[12]++,e.calculateNewPosition({x:100,y:200,distanceToCursor:0}));r.s[13]++,expect(n).toEqual(100)})),r.s[14]++,it("handle got main class",(()=>{r.f[6]++,r.s[15]++,e.handleListener({x:100,y:200,target:e.movementSettings.handles.fromHandle}),r.s[16]++,expect(e.movementSettings.handles.fromHandle).toHaveClass("goby-slider__handle_type_main")}))}))},"./src/plugin/View/Movement/types.ts":(e,n)=>{"use strict";var A,t,l,i,s,o;(A="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Movement\\types.ts",t="84228d3880a3bab80ad3d7d7e93b14a617c715fd",l=new(0,function(){}.constructor)("return this")(),s={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Movement\\types.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}}},fnMap:{},branchMap:{},s:{0:0},f:{},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Movement\\types.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Movement\\types.ts"],names:[],mappings:"",sourcesContent:["import {\n  BasicViewSettings,\n  HandlePositions,\n  UpdatePositions,\n} from '../types';\nimport { Handles } from '../Handles/Handles';\n\ntype MovementSettings = {\n  slider: HTMLDivElement;\n  handles: Handles;\n  getOptions: () => BasicViewSettings;\n  environmentLink: { updatePositions: UpdatePositions };\n};\n\ntype MovementCalculateData = {\n  x: number,\n  y: number,\n  distanceToCursor: number,\n};\n\ntype MovementEvent = {\n  readonly target: EventTarget,\n  readonly x: number,\n  readonly y: number\n};\n\ntype HandleClickData = {\n  target: HTMLSpanElement,\n  distanceToCursor: number,\n};\n\nexport {\n  HandlePositions,\n  MovementSettings,\n  MovementEvent,\n  HandleClickData,\n  MovementCalculateData,\n};\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(o=l[i="__coverage__"]||(l[i]={}))[A]&&o[A].hash===t?o[A]:(s.hash=t,o[A]=s)).s[0]++,Object.defineProperty(n,"__esModule",{value:!0})},"./src/plugin/View/SelectedInterval/SelectedInterval.ts":function(e,n,A){"use strict";var t,l,i,s,o,a,r=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SelectedInterval\\SelectedInterval.ts",l="acad2ab05e67a298ac8256f8abd367017b261f08",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SelectedInterval\\SelectedInterval.ts",statementMap:{0:{start:{line:2,column:17},end:{line:7,column:1}},1:{start:{line:3,column:12},end:{line:3,column:28}},2:{start:{line:3,column:34},end:{line:3,column:125}},3:{start:{line:4,column:4},end:{line:5,column:150}},4:{start:{line:4,column:79},end:{line:4,column:131}},5:{start:{line:5,column:9},end:{line:5,column:150}},6:{start:{line:5,column:58},end:{line:5,column:150}},7:{start:{line:5,column:81},end:{line:5,column:150}},8:{start:{line:6,column:4},end:{line:6,column:66}},9:{start:{line:8,column:0},end:{line:8,column:62}},10:{start:{line:9,column:0},end:{line:9,column:34}},11:{start:{line:10,column:29},end:{line:10,column:58}},12:{start:{line:11,column:23},end:{line:47,column:1}},13:{start:{line:13,column:8},end:{line:13,column:53}},14:{start:{line:14,column:8},end:{line:14,column:54}},15:{start:{line:15,column:8},end:{line:15,column:37}},16:{start:{line:18,column:64},end:{line:18,column:72}},17:{start:{line:19,column:8},end:{line:24,column:9}},18:{start:{line:20,column:12},end:{line:20,column:83}},19:{start:{line:22,column:13},end:{line:24,column:9}},20:{start:{line:23,column:12},end:{line:23,column:100}},21:{start:{line:27,column:8},end:{line:27,column:56}},22:{start:{line:30,column:8},end:{line:30,column:98}},23:{start:{line:33,column:8},end:{line:33,column:96}},24:{start:{line:36,column:8},end:{line:45,column:9}},25:{start:{line:38,column:16},end:{line:38,column:76}},26:{start:{line:39,column:16},end:{line:39,column:22}},27:{start:{line:41,column:16},end:{line:41,column:79}},28:{start:{line:42,column:16},end:{line:42,column:22}},29:{start:{line:44,column:16},end:{line:44,column:22}},30:{start:{line:48,column:0},end:{line:50,column:21}},31:{start:{line:51,column:0},end:{line:51,column:44}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:46},end:{line:2,column:47}},loc:{start:{line:2,column:87},end:{line:7,column:1}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:18},end:{line:16,column:5}},line:12},2:{name:"(anonymous_2)",decl:{start:{line:17,column:4},end:{line:17,column:5}},loc:{start:{line:17,column:39},end:{line:25,column:5}},line:17},3:{name:"(anonymous_3)",decl:{start:{line:26,column:4},end:{line:26,column:5}},loc:{start:{line:26,column:28},end:{line:28,column:5}},line:26},4:{name:"(anonymous_4)",decl:{start:{line:29,column:4},end:{line:29,column:5}},loc:{start:{line:29,column:43},end:{line:31,column:5}},line:29},5:{name:"(anonymous_5)",decl:{start:{line:32,column:4},end:{line:32,column:5}},loc:{start:{line:32,column:43},end:{line:34,column:5}},line:32},6:{name:"(anonymous_6)",decl:{start:{line:35,column:4},end:{line:35,column:5}},loc:{start:{line:35,column:36},end:{line:46,column:5}},line:35}},branchMap:{0:{loc:{start:{line:2,column:17},end:{line:7,column:1}},type:"binary-expr",locations:[{start:{line:2,column:18},end:{line:2,column:22}},{start:{line:2,column:26},end:{line:2,column:41}},{start:{line:2,column:46},end:{line:7,column:1}}],line:2},1:{loc:{start:{line:3,column:34},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:42},end:{line:3,column:48}},{start:{line:3,column:51},end:{line:3,column:125}}],line:3},2:{loc:{start:{line:3,column:51},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:67},end:{line:3,column:118}},{start:{line:3,column:121},end:{line:3,column:125}}],line:3},3:{loc:{start:{line:4,column:4},end:{line:5,column:150}},type:"if",locations:[{start:{line:4,column:4},end:{line:5,column:150}},{start:{line:4,column:4},end:{line:5,column:150}}],line:4},4:{loc:{start:{line:4,column:8},end:{line:4,column:77}},type:"binary-expr",locations:[{start:{line:4,column:8},end:{line:4,column:35}},{start:{line:4,column:39},end:{line:4,column:77}}],line:4},5:{loc:{start:{line:5,column:58},end:{line:5,column:150}},type:"if",locations:[{start:{line:5,column:58},end:{line:5,column:150}},{start:{line:5,column:58},end:{line:5,column:150}}],line:5},6:{loc:{start:{line:5,column:85},end:{line:5,column:149}},type:"binary-expr",locations:[{start:{line:5,column:86},end:{line:5,column:143}},{start:{line:5,column:148},end:{line:5,column:149}}],line:5},7:{loc:{start:{line:5,column:86},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:94},end:{line:5,column:98}},{start:{line:5,column:101},end:{line:5,column:143}}],line:5},8:{loc:{start:{line:5,column:101},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:109},end:{line:5,column:126}},{start:{line:5,column:129},end:{line:5,column:143}}],line:5},9:{loc:{start:{line:6,column:11},end:{line:6,column:62}},type:"binary-expr",locations:[{start:{line:6,column:11},end:{line:6,column:16}},{start:{line:6,column:20},end:{line:6,column:21}},{start:{line:6,column:25},end:{line:6,column:62}}],line:6},10:{loc:{start:{line:19,column:8},end:{line:24,column:9}},type:"if",locations:[{start:{line:19,column:8},end:{line:24,column:9}},{start:{line:19,column:8},end:{line:24,column:9}}],line:19},11:{loc:{start:{line:22,column:13},end:{line:24,column:9}},type:"if",locations:[{start:{line:22,column:13},end:{line:24,column:9}},{start:{line:22,column:13},end:{line:24,column:9}}],line:22},12:{loc:{start:{line:30,column:15},end:{line:30,column:97}},type:"binary-expr",locations:[{start:{line:30,column:16},end:{line:30,column:25}},{start:{line:30,column:31},end:{line:30,column:96}}],line:30},13:{loc:{start:{line:33,column:15},end:{line:33,column:95}},type:"binary-expr",locations:[{start:{line:33,column:16},end:{line:33,column:24}},{start:{line:33,column:30},end:{line:33,column:94}}],line:33},14:{loc:{start:{line:36,column:8},end:{line:45,column:9}},type:"switch",locations:[{start:{line:37,column:12},end:{line:39,column:22}},{start:{line:40,column:12},end:{line:42,column:22}},{start:{line:43,column:12},end:{line:44,column:22}}],line:36}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0},b:{0:[0,0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SelectedInterval\\SelectedInterval.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SelectedInterval\\SelectedInterval.ts"],names:[],mappings:";;;;;;;;;AAAA,2DAA0C;AAI1C,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;IAK3B;QAFiB,kBAAa,GAAW,uBAAuB,CAAC;QAG/D,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC/B,CAAC;IAEM,wBAAwB,CAAC,QAAyB;QACvD,MAAM,EACJ,MAAM,EACN,QAAQ,EACR,WAAW,EACX,WAAW,GACZ,GAAG,QAAQ,CAAC;QAEb,IAAI,MAAM,KAAK,MAAM,EAAE;YACrB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC;SACxE;aAAM,IAAI,MAAM,KAAK,IAAI,EAAE;YAC1B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC;SACzF;IACH,CAAC;IAEO,qBAAqB;QAC3B,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAClD,CAAC;IAEO,4BAA4B,CAAC,QAAiB;QACpD,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,aAAa,SAAS,CAAC,CAAC,CAAC;IAC5F,CAAC;IAEO,4BAA4B,CAAC,QAAiB;QACpD,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,aAAa,SAAS,CAAC,CAAC,CAAC;IAC1F,CAAC;IAEM,qBAAqB,CAAC,QAAiB;QAC5C,QAAQ,IAAI,EAAE;YACZ,KAAK,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC;gBAC9C,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,aAAa,SAAS,CAAC,CAAC;gBAC5D,MAAM;YACR,KAAK,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC;gBAC9C,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,aAAa,SAAS,CAAC,CAAC;gBAC/D,MAAM;YACR;gBACE,MAAM;SACT;IACH,CAAC;CACF,CAAA;AAjDY,gBAAgB;IAD5B,4BAAQ;GACI,gBAAgB,CAiD5B;AAjDY,4CAAgB",sourcesContent:["import autobind from 'autobind-decorator';\nimport { NewIntervalData } from './types';\n\n@autobind\nexport class SelectedInterval {\n  readonly interval: HTMLDivElement;\n\n  private readonly intervalClass: string = 'goby-slider__interval';\n\n  constructor() {\n    this.interval = document.createElement('div');\n    this.initializeHTMLElement();\n  }\n\n  public refreshIntervalPositions(settings: NewIntervalData):void {\n    const {\n      target,\n      position,\n      sliderWidth,\n      handleWidth,\n    } = settings;\n\n    if (target === 'from') {\n      this.interval.style.left = `${Number(position) + (handleWidth / 2)}px`;\n    } else if (target === 'to') {\n      this.interval.style.right = `${(sliderWidth - Number(position)) - (handleWidth / 2)}px`;\n    }\n  }\n\n  private initializeHTMLElement(): void {\n    this.interval.classList.add(this.intervalClass);\n  }\n\n  private checkIsIntervalShouldBeHided(isDouble: boolean): boolean {\n    return (!isDouble) && (!this.interval.classList.contains(`${this.intervalClass}_hidden`));\n  }\n\n  private checkIsIntervalShouldBeShown(isDouble: boolean): boolean {\n    return (isDouble) && (this.interval.classList.contains(`${this.intervalClass}_hidden`));\n  }\n\n  public changeIntervalDisplay(isDouble: boolean): void {\n    switch (true) {\n      case this.checkIsIntervalShouldBeHided(isDouble):\n        this.interval.classList.add(`${this.intervalClass}_hidden`);\n        break;\n      case this.checkIsIntervalShouldBeShown(isDouble):\n        this.interval.classList.remove(`${this.intervalClass}_hidden`);\n        break;\n      default:\n        break;\n    }\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[s="__coverage__"]||(i[s]={}))[t]&&a[t].hash===l?a[t]:(o.hash=l,a[t]=o)),C=(r.s[0]++,r.b[0][0]++,this&&(r.b[0][1]++,this.__decorate)||(r.b[0][2]++,function(e,n,A,t){r.f[0]++;var l,i=(r.s[1]++,arguments.length),s=(r.s[2]++,i<3?(r.b[1][0]++,n):(r.b[1][1]++,null===t?(r.b[2][0]++,t=Object.getOwnPropertyDescriptor(n,A)):(r.b[2][1]++,t)));if(r.s[3]++,r.b[4][0]++,"object"==typeof Reflect&&(r.b[4][1]++,"function"==typeof Reflect.decorate))r.b[3][0]++,r.s[4]++,s=Reflect.decorate(e,n,A,t);else{r.b[3][1]++,r.s[5]++;for(var o=e.length-1;o>=0;o--)r.s[6]++,(l=e[o])?(r.b[5][0]++,r.s[7]++,r.b[6][0]++,s=(i<3?(r.b[7][0]++,l(s)):(r.b[7][1]++,i>3?(r.b[8][0]++,l(n,A,s)):(r.b[8][1]++,l(n,A))))||(r.b[6][1]++,s)):r.b[5][1]++}return r.s[8]++,r.b[9][0]++,i>3&&(r.b[9][1]++,s)&&(r.b[9][2]++,Object.defineProperty(n,A,s)),s}));r.s[9]++,Object.defineProperty(n,"__esModule",{value:!0}),r.s[10]++,n.SelectedInterval=void 0;const c=(r.s[11]++,A("./node_modules/autobind-decorator/lib/esm/index.js"));r.s[12]++;let u=class{constructor(){r.f[1]++,r.s[13]++,this.intervalClass="goby-slider__interval",r.s[14]++,this.interval=document.createElement("div"),r.s[15]++,this.initializeHTMLElement()}refreshIntervalPositions(e){r.f[2]++;const{target:n,position:A,sliderWidth:t,handleWidth:l}=(r.s[16]++,e);r.s[17]++,"from"===n?(r.b[10][0]++,r.s[18]++,this.interval.style.left=`${Number(A)+l/2}px`):(r.b[10][1]++,r.s[19]++,"to"===n?(r.b[11][0]++,r.s[20]++,this.interval.style.right=t-Number(A)-l/2+"px"):r.b[11][1]++)}initializeHTMLElement(){r.f[3]++,r.s[21]++,this.interval.classList.add(this.intervalClass)}checkIsIntervalShouldBeHided(e){return r.f[4]++,r.s[22]++,!(r.b[12][0]++,e||(r.b[12][1]++,this.interval.classList.contains(`${this.intervalClass}_hidden`)))}checkIsIntervalShouldBeShown(e){return r.f[5]++,r.s[23]++,r.b[13][0]++,e&&(r.b[13][1]++,this.interval.classList.contains(`${this.intervalClass}_hidden`))}changeIntervalDisplay(e){switch(r.f[6]++,r.s[24]++,!0){case this.checkIsIntervalShouldBeHided(e):r.b[14][0]++,r.s[25]++,this.interval.classList.add(`${this.intervalClass}_hidden`),r.s[26]++;break;case this.checkIsIntervalShouldBeShown(e):r.b[14][1]++,r.s[27]++,this.interval.classList.remove(`${this.intervalClass}_hidden`),r.s[28]++;break;default:r.b[14][2]++,r.s[29]++}}};r.s[30]++,u=C([c.default],u),r.s[31]++,n.SelectedInterval=u},"./src/plugin/View/SelectedInterval/selectedInterval.test.ts":(e,n,A)=>{"use strict";var t,l,i,s,o,a,r=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SelectedInterval\\selectedInterval.test.ts",l="3bbfdde23c83653a3e6dc7f71c5d9305564ba2a5",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SelectedInterval\\selectedInterval.test.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:27},end:{line:3,column:56}},2:{start:{line:4,column:0},end:{line:36,column:3}},3:{start:{line:6,column:4},end:{line:8,column:7}},4:{start:{line:7,column:8},end:{line:7,column:61}},5:{start:{line:9,column:4},end:{line:11,column:7}},6:{start:{line:10,column:8},end:{line:10,column:38}},7:{start:{line:12,column:4},end:{line:20,column:7}},8:{start:{line:13,column:8},end:{line:18,column:11}},9:{start:{line:19,column:8},end:{line:19,column:61}},10:{start:{line:21,column:4},end:{line:29,column:7}},11:{start:{line:22,column:8},end:{line:27,column:11}},12:{start:{line:28,column:8},end:{line:28,column:62}},13:{start:{line:30,column:4},end:{line:35,column:7}},14:{start:{line:31,column:8},end:{line:31,column:46}},15:{start:{line:32,column:8},end:{line:32,column:78}},16:{start:{line:33,column:8},end:{line:33,column:45}},17:{start:{line:34,column:8},end:{line:34,column:82}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:4,column:29},end:{line:4,column:30}},loc:{start:{line:4,column:35},end:{line:36,column:1}},line:4},1:{name:"(anonymous_1)",decl:{start:{line:6,column:15},end:{line:6,column:16}},loc:{start:{line:6,column:21},end:{line:8,column:5}},line:6},2:{name:"(anonymous_2)",decl:{start:{line:9,column:34},end:{line:9,column:35}},loc:{start:{line:9,column:40},end:{line:11,column:5}},line:9},3:{name:"(anonymous_3)",decl:{start:{line:12,column:77},end:{line:12,column:78}},loc:{start:{line:12,column:83},end:{line:20,column:5}},line:12},4:{name:"(anonymous_4)",decl:{start:{line:21,column:78},end:{line:21,column:79}},loc:{start:{line:21,column:84},end:{line:29,column:5}},line:21},5:{name:"(anonymous_5)",decl:{start:{line:30,column:73},end:{line:30,column:74}},loc:{start:{line:30,column:79},end:{line:35,column:5}},line:30}},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0},f:{0:0,1:0,2:0,3:0,4:0,5:0},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SelectedInterval\\selectedInterval.test.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SelectedInterval\\selectedInterval.test.ts"],names:[],mappings:";;AAAA,yDAAsD;AAEtD,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,IAAI,QAA0B,CAAC;IAE/B,UAAU,CAAC,GAAG,EAAE;QACd,QAAQ,GAAG,IAAI,mCAAgB,EAAE,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACjC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oEAAoE,EAAE,GAAG,EAAE;QAC5E,QAAQ,CAAC,wBAAwB,CAAC;YAChC,MAAM,EAAE,MAAM;YACd,QAAQ,EAAE,IAAI;YACd,WAAW,EAAE,EAAE;YACf,WAAW,EAAE,GAAG;SACjB,CAAC,CAAC;QACH,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qEAAqE,EAAE,GAAG,EAAE;QAC7E,QAAQ,CAAC,wBAAwB,CAAC;YAChC,MAAM,EAAE,IAAI;YACZ,QAAQ,EAAE,IAAI;YACd,WAAW,EAAE,EAAE;YACf,WAAW,EAAE,GAAG;SACjB,CAAC,CAAC;QACH,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;QACxE,QAAQ,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;QACtC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC,8BAA8B,CAAC,CAAC;QACtE,QAAQ,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;QACrC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,8BAA8B,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC",sourcesContent:["import { SelectedInterval } from './SelectedInterval';\n\ndescribe('SelectedInterval', () => {\n  let interval: SelectedInterval;\n\n  beforeEach(() => {\n    interval = new SelectedInterval();\n  });\n\n  it('Interval cal be created', () => {\n    expect(interval).toBeTruthy();\n  });\n\n  it('refreshIntervalPositions() change position correctly for left side', () => {\n    interval.refreshIntervalPositions({\n      target: 'from',\n      position: '50',\n      handleWidth: 20,\n      sliderWidth: 120,\n    });\n    expect(interval.interval.style.left).toEqual('60px');\n  });\n\n  it('refreshIntervalPositions() change position correctly for right side', () => {\n    interval.refreshIntervalPositions({\n      target: 'to',\n      position: '50',\n      handleWidth: 20,\n      sliderWidth: 120,\n    });\n    expect(interval.interval.style.right).toEqual('60px');\n  });\n\n  it('hideSelectedInterval() operates the display function correctly', () => {\n    interval.changeIntervalDisplay(false);\n    expect(interval.interval).toHaveClass('goby-slider__interval_hidden');\n    interval.changeIntervalDisplay(true);\n    expect(interval.interval).not.toHaveClass('goby-slider__interval_hidden');\n  });\n});\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[s="__coverage__"]||(i[s]={}))[t]&&a[t].hash===l?a[t]:(o.hash=l,a[t]=o));r.s[0]++,Object.defineProperty(n,"__esModule",{value:!0});const C=(r.s[1]++,A("./src/plugin/View/SelectedInterval/SelectedInterval.ts"));r.s[2]++,describe("SelectedInterval",(()=>{let e;r.f[0]++,r.s[3]++,beforeEach((()=>{r.f[1]++,r.s[4]++,e=new C.SelectedInterval})),r.s[5]++,it("Interval cal be created",(()=>{r.f[2]++,r.s[6]++,expect(e).toBeTruthy()})),r.s[7]++,it("refreshIntervalPositions() change position correctly for left side",(()=>{r.f[3]++,r.s[8]++,e.refreshIntervalPositions({target:"from",position:"50",handleWidth:20,sliderWidth:120}),r.s[9]++,expect(e.interval.style.left).toEqual("60px")})),r.s[10]++,it("refreshIntervalPositions() change position correctly for right side",(()=>{r.f[4]++,r.s[11]++,e.refreshIntervalPositions({target:"to",position:"50",handleWidth:20,sliderWidth:120}),r.s[12]++,expect(e.interval.style.right).toEqual("60px")})),r.s[13]++,it("hideSelectedInterval() operates the display function correctly",(()=>{r.f[5]++,r.s[14]++,e.changeIntervalDisplay(!1),r.s[15]++,expect(e.interval).toHaveClass("goby-slider__interval_hidden"),r.s[16]++,e.changeIntervalDisplay(!0),r.s[17]++,expect(e.interval).not.toHaveClass("goby-slider__interval_hidden")}))}))},"./src/plugin/View/SelectedInterval/types.ts":(e,n)=>{"use strict";var A,t,l,i,s,o;(A="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SelectedInterval\\types.ts",t="5f4b356e95ddeb4dd7b21dfde754292a00a2a4eb",l=new(0,function(){}.constructor)("return this")(),s={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SelectedInterval\\types.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}}},fnMap:{},branchMap:{},s:{0:0},f:{},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SelectedInterval\\types.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SelectedInterval\\types.ts"],names:[],mappings:"",sourcesContent:["type IntervalDisplayData = {\n  isDouble: boolean,\n  handleWidth: number\n};\n\ntype NewIntervalData = {\n  target: 'from' | 'to' | 'min' | 'max';\n  position: string;\n  sliderWidth: number;\n  handleWidth: number;\n};\n\nexport {\n  NewIntervalData,\n  IntervalDisplayData,\n};\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(o=l[i="__coverage__"]||(l[i]={}))[A]&&o[A].hash===t?o[A]:(s.hash=t,o[A]=s)).s[0]++,Object.defineProperty(n,"__esModule",{value:!0})},"./src/plugin/View/Slider/Slider.ts":(e,n)=>{"use strict";var A,t,l,i,s,o,a=(A="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Slider\\Slider.ts",t="e300c2a5e233ec28eebdbb42b0dedc7fac69e6c1",l=new(0,function(){}.constructor)("return this")(),s={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Slider\\Slider.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:0},end:{line:3,column:24}},2:{start:{line:6,column:8},end:{line:6,column:57}},3:{start:{line:7,column:8},end:{line:7,column:52}},4:{start:{line:8,column:8},end:{line:8,column:59}},5:{start:{line:9,column:8},end:{line:9,column:34}},6:{start:{line:12,column:8},end:{line:12,column:55}},7:{start:{line:13,column:8},end:{line:13,column:64}},8:{start:{line:14,column:8},end:{line:14,column:54}},9:{start:{line:15,column:8},end:{line:15,column:47}},10:{start:{line:16,column:8},end:{line:16,column:52}},11:{start:{line:19,column:8},end:{line:19,column:292}},12:{start:{line:22,column:8},end:{line:22,column:103}},13:{start:{line:25,column:8},end:{line:25,column:103}},14:{start:{line:28,column:8},end:{line:39,column:9}},15:{start:{line:30,column:16},end:{line:30,column:81}},16:{start:{line:31,column:16},end:{line:31,column:90}},17:{start:{line:32,column:16},end:{line:32,column:22}},18:{start:{line:34,column:16},end:{line:34,column:81}},19:{start:{line:35,column:16},end:{line:35,column:90}},20:{start:{line:36,column:16},end:{line:36,column:22}},21:{start:{line:38,column:16},end:{line:38,column:22}},22:{start:{line:42,column:0},end:{line:42,column:24}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:18},end:{line:10,column:5}},line:5},1:{name:"(anonymous_1)",decl:{start:{line:11,column:4},end:{line:11,column:5}},loc:{start:{line:11,column:25},end:{line:17,column:5}},line:11},2:{name:"(anonymous_2)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:39},end:{line:20,column:5}},line:18},3:{name:"(anonymous_3)",decl:{start:{line:21,column:4},end:{line:21,column:5}},loc:{start:{line:21,column:49},end:{line:23,column:5}},line:21},4:{name:"(anonymous_4)",decl:{start:{line:24,column:4},end:{line:24,column:5}},loc:{start:{line:24,column:45},end:{line:26,column:5}},line:24},5:{name:"(anonymous_5)",decl:{start:{line:27,column:4},end:{line:27,column:5}},loc:{start:{line:27,column:28},end:{line:40,column:5}},line:27}},branchMap:{0:{loc:{start:{line:22,column:16},end:{line:22,column:101}},type:"binary-expr",locations:[{start:{line:22,column:17},end:{line:22,column:83}},{start:{line:22,column:89},end:{line:22,column:100}}],line:22},1:{loc:{start:{line:25,column:16},end:{line:25,column:101}},type:"binary-expr",locations:[{start:{line:25,column:17},end:{line:25,column:84}},{start:{line:25,column:90},end:{line:25,column:100}}],line:25},2:{loc:{start:{line:28,column:8},end:{line:39,column:9}},type:"switch",locations:[{start:{line:29,column:12},end:{line:32,column:22}},{start:{line:33,column:12},end:{line:36,column:22}},{start:{line:37,column:12},end:{line:38,column:22}}],line:28}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0},f:{0:0,1:0,2:0,3:0,4:0,5:0},b:{0:[0,0],1:[0,0],2:[0,0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Slider\\Slider.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Slider\\Slider.ts"],names:[],mappings:";;;AAEA,MAAa,MAAM;IAOjB;QACE,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACjD,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC5C,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAEnD,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAEO,kBAAkB;QACxB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QAC/C,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACxD,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAC9C,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC9C,CAAC;IAEM,wBAAwB,CAAC,QAAiC;QAC/D,IAAI,CAAC,MAAM,CAAC,MAAM,CAChB,QAAQ,CAAC,IAAI,EACb,QAAQ,CAAC,EAAE,EACX,QAAQ,CAAC,QAAQ,EACjB,QAAQ,CAAC,UAAU,CAAC,QAAQ,EAC5B,QAAQ,CAAC,UAAU,CAAC,QAAQ,EAC5B,QAAQ,CAAC,UAAU,CAAC,kBAAkB,EACtC,QAAQ,CAAC,UAAU,CAAC,iBAAiB,EACrC,QAAQ,CAAC,UAAU,CAAC,iBAAiB,EACrC,QAAQ,CAAC,UAAU,CAAC,kBAAkB,CACvC,CAAC;IACJ,CAAC;IAEO,gCAAgC,CAAC,UAAmB;QAC1D,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,kCAAkC,CAAC,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;IACjG,CAAC;IAEO,4BAA4B,CAAC,UAAmB;QACtD,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,kCAAkC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IACjG,CAAC;IAEM,WAAW,CAAC,UAAmB;QACpC,QAAQ,IAAI,EAAE;YACZ,KAAK,IAAI,CAAC,4BAA4B,CAAC,UAAU,CAAC;gBAChD,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,kCAAkC,CAAC,CAAC;gBACjE,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,oCAAoC,CAAC,CAAC;gBAC1E,MAAM;YACR,KAAK,IAAI,CAAC,gCAAgC,CAAC,UAAU,CAAC;gBACpD,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,kCAAkC,CAAC,CAAC;gBACjE,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,oCAAoC,CAAC,CAAC;gBAC1E,MAAM;YACR;gBACE,MAAM;SACT;IACH,CAAC;CACF;AA3DD,wBA2DC",sourcesContent:["import { SliderAssemblerSettings } from './types';\n\nexport class Slider {\n  readonly slider: HTMLDivElement;\n\n  readonly sliderWrapper: HTMLDivElement;\n\n  readonly mainWrapper: HTMLDivElement;\n\n  constructor() {\n    this.mainWrapper = document.createElement('div');\n    this.slider = document.createElement('div');\n    this.sliderWrapper = document.createElement('div');\n\n    this.createHTMLElements();\n  }\n\n  private createHTMLElements(): void {\n    this.slider.classList.add('goby-slider__body');\n    this.sliderWrapper.classList.add('goby-slider__slider');\n    this.mainWrapper.classList.add('goby-slider');\n    this.sliderWrapper.append(this.slider);\n    this.mainWrapper.append(this.sliderWrapper);\n  }\n\n  public initializeSliderElements(settings: SliderAssemblerSettings): void {\n    this.slider.append(\n      settings.from,\n      settings.to,\n      settings.interval,\n      settings.valueScale.minValue,\n      settings.valueScale.maxValue,\n      settings.valueScale.twentyPercentValue,\n      settings.valueScale.fortyPercentValue,\n      settings.valueScale.sixtyPercentValue,\n      settings.valueScale.eightyPercentValue,\n    );\n  }\n\n  private checkIsNeedToDisplayHorizontally(isVertical: boolean): boolean {\n    return ((this.slider.classList.contains('goby-slider__body_state_vertical')) && (!isVertical));\n  }\n\n  private checkIsNeedToDisplayVertical(isVertical: boolean): boolean {\n    return ((!this.slider.classList.contains('goby-slider__body_state_vertical')) && (isVertical));\n  }\n\n  public changePlane(isVertical: boolean): void {\n    switch (true) {\n      case this.checkIsNeedToDisplayVertical(isVertical):\n        this.slider.classList.toggle('goby-slider__body_state_vertical');\n        this.sliderWrapper.classList.toggle('goby-slider__slider_state_vertical');\n        break;\n      case this.checkIsNeedToDisplayHorizontally(isVertical):\n        this.slider.classList.toggle('goby-slider__body_state_vertical');\n        this.sliderWrapper.classList.toggle('goby-slider__slider_state_vertical');\n        break;\n      default:\n        break;\n    }\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(o=l[i="__coverage__"]||(l[i]={}))[A]&&o[A].hash===t?o[A]:(s.hash=t,o[A]=s));a.s[0]++,Object.defineProperty(n,"__esModule",{value:!0}),a.s[1]++,n.Slider=void 0;a.s[22]++,n.Slider=class{constructor(){a.f[0]++,a.s[2]++,this.mainWrapper=document.createElement("div"),a.s[3]++,this.slider=document.createElement("div"),a.s[4]++,this.sliderWrapper=document.createElement("div"),a.s[5]++,this.createHTMLElements()}createHTMLElements(){a.f[1]++,a.s[6]++,this.slider.classList.add("goby-slider__body"),a.s[7]++,this.sliderWrapper.classList.add("goby-slider__slider"),a.s[8]++,this.mainWrapper.classList.add("goby-slider"),a.s[9]++,this.sliderWrapper.append(this.slider),a.s[10]++,this.mainWrapper.append(this.sliderWrapper)}initializeSliderElements(e){a.f[2]++,a.s[11]++,this.slider.append(e.from,e.to,e.interval,e.valueScale.minValue,e.valueScale.maxValue,e.valueScale.twentyPercentValue,e.valueScale.fortyPercentValue,e.valueScale.sixtyPercentValue,e.valueScale.eightyPercentValue)}checkIsNeedToDisplayHorizontally(e){return a.f[3]++,a.s[12]++,a.b[0][0]++,this.slider.classList.contains("goby-slider__body_state_vertical")&&(a.b[0][1]++,!e)}checkIsNeedToDisplayVertical(e){return a.f[4]++,a.s[13]++,a.b[1][0]++,!this.slider.classList.contains("goby-slider__body_state_vertical")&&(a.b[1][1]++,e)}changePlane(e){switch(a.f[5]++,a.s[14]++,!0){case this.checkIsNeedToDisplayVertical(e):a.b[2][0]++,a.s[15]++,this.slider.classList.toggle("goby-slider__body_state_vertical"),a.s[16]++,this.sliderWrapper.classList.toggle("goby-slider__slider_state_vertical"),a.s[17]++;break;case this.checkIsNeedToDisplayHorizontally(e):a.b[2][1]++,a.s[18]++,this.slider.classList.toggle("goby-slider__body_state_vertical"),a.s[19]++,this.sliderWrapper.classList.toggle("goby-slider__slider_state_vertical"),a.s[20]++;break;default:a.b[2][2]++,a.s[21]++}}}},"./src/plugin/View/Slider/slider.test.ts":(e,n,A)=>{"use strict";var t,l,i,s,o,a,r=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Slider\\slider.test.ts",l="84848bea21f787bfb0a8fca6ad83172d7ea5e00e",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Slider\\slider.test.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:18},end:{line:3,column:47}},2:{start:{line:4,column:27},end:{line:4,column:74}},3:{start:{line:5,column:17},end:{line:5,column:36}},4:{start:{line:6,column:22},end:{line:6,column:59}},5:{start:{line:7,column:0},end:{line:33,column:3}},6:{start:{line:9,column:4},end:{line:11,column:7}},7:{start:{line:10,column:8},end:{line:10,column:39}},8:{start:{line:12,column:4},end:{line:14,column:7}},9:{start:{line:13,column:8},end:{line:13,column:36}},10:{start:{line:15,column:4},end:{line:24,column:7}},11:{start:{line:16,column:25},end:{line:21,column:9}},12:{start:{line:20,column:80},end:{line:20,column:84}},13:{start:{line:22,column:8},end:{line:22,column:50}},14:{start:{line:23,column:8},end:{line:23,column:43}},15:{start:{line:25,column:4},end:{line:32,column:7}},16:{start:{line:26,column:8},end:{line:26,column:33}},17:{start:{line:27,column:8},end:{line:27,column:78}},18:{start:{line:28,column:8},end:{line:28,column:87}},19:{start:{line:29,column:8},end:{line:29,column:34}},20:{start:{line:30,column:8},end:{line:30,column:82}},21:{start:{line:31,column:8},end:{line:31,column:91}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:7,column:19},end:{line:7,column:20}},loc:{start:{line:7,column:25},end:{line:33,column:1}},line:7},1:{name:"(anonymous_1)",decl:{start:{line:9,column:15},end:{line:9,column:16}},loc:{start:{line:9,column:21},end:{line:11,column:5}},line:9},2:{name:"(anonymous_2)",decl:{start:{line:12,column:31},end:{line:12,column:32}},loc:{start:{line:12,column:37},end:{line:14,column:5}},line:12},3:{name:"(anonymous_3)",decl:{start:{line:15,column:47},end:{line:15,column:48}},loc:{start:{line:15,column:53},end:{line:24,column:5}},line:15},4:{name:"(anonymous_4)",decl:{start:{line:20,column:70},end:{line:20,column:71}},loc:{start:{line:20,column:80},end:{line:20,column:84}},line:20},5:{name:"(anonymous_5)",decl:{start:{line:25,column:64},end:{line:25,column:65}},loc:{start:{line:25,column:70},end:{line:32,column:5}},line:25}},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0},f:{0:0,1:0,2:0,3:0,4:0,5:0},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Slider\\slider.test.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Slider\\slider.test.ts"],names:[],mappings:";;AAAA,gDAA6C;AAC7C,2EAAwE;AAExE,qCAAkC;AAClC,4DAAyD;AAGzD,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;IACtB,IAAI,MAAc,CAAC;IAEnB,UAAU,CAAC,GAAG,EAAE;QACd,MAAM,GAAG,IAAI,eAAM,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE,GAAG,EAAE;QAC9B,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAC9C,MAAM,QAAQ,GAA4B;YACxC,IAAI,EAAE,IAAI,iBAAO,EAAE,CAAC,UAAU;YAC9B,EAAE,EAAE,IAAI,iBAAO,EAAE,CAAC,QAAQ;YAC1B,QAAQ,EAAE,IAAI,mCAAgB,EAAE,CAAC,QAAQ;YACzC,UAAU,EAAE,IAAI,yBAAW,CAAC,EAAE,YAAY,EAAE,CAAC,IAAyB,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC;SACnF,CAAC;QACF,MAAM,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;QAC1C,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;QAC/D,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACzB,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,kCAAkC,CAAC,CAAC;QACtE,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,WAAW,CAAC,oCAAoC,CAAC,CAAC;QAE/E,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC1B,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,kCAAkC,CAAC,CAAC;QAC1E,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,oCAAoC,CAAC,CAAC;IACrF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC",sourcesContent:["import { Handles } from '../Handles/Handles';\nimport { SelectedInterval } from '../SelectedInterval/SelectedInterval';\nimport { SliderAssemblerSettings } from './types';\nimport { Slider } from './Slider';\nimport { ValuesScale } from '../ValuesScale/ValuesScale';\nimport { UpdatePositionsData } from '../types';\n\ndescribe('Slider', () => {\n  let slider: Slider;\n\n  beforeEach(() => {\n    slider = new Slider();\n  });\n\n  it('Slider can be create', () => {\n    expect(slider).toBeTruthy();\n  });\n\n  it('createHTMLElements() create elements', () => {\n    const settings: SliderAssemblerSettings = {\n      from: new Handles().fromHandle,\n      to: new Handles().toHandle,\n      interval: new SelectedInterval().interval,\n      valueScale: new ValuesScale({ passNewValue: (data: UpdatePositionsData) => data }),\n    };\n    slider.initializeSliderElements(settings);\n    expect(slider.slider).toBeTruthy();\n  });\n\n  it('changePlane() operates the display function correctly', () => {\n    slider.changePlane(true);\n    expect(slider.slider).toHaveClass('goby-slider__body_state_vertical');\n    expect(slider.sliderWrapper).toHaveClass('goby-slider__slider_state_vertical');\n\n    slider.changePlane(false);\n    expect(slider.slider).not.toHaveClass('goby-slider__body_state_vertical');\n    expect(slider.sliderWrapper).not.toHaveClass('goby-slider__slider_state_vertical');\n  });\n});\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[s="__coverage__"]||(i[s]={}))[t]&&a[t].hash===l?a[t]:(o.hash=l,a[t]=o));r.s[0]++,Object.defineProperty(n,"__esModule",{value:!0});const C=(r.s[1]++,A("./src/plugin/View/Handles/Handles.ts")),c=(r.s[2]++,A("./src/plugin/View/SelectedInterval/SelectedInterval.ts")),u=(r.s[3]++,A("./src/plugin/View/Slider/Slider.ts")),d=(r.s[4]++,A("./src/plugin/View/ValuesScale/ValuesScale.ts"));r.s[5]++,describe("Slider",(()=>{let e;r.f[0]++,r.s[6]++,beforeEach((()=>{r.f[1]++,r.s[7]++,e=new u.Slider})),r.s[8]++,it("Slider can be create",(()=>{r.f[2]++,r.s[9]++,expect(e).toBeTruthy()})),r.s[10]++,it("createHTMLElements() create elements",(()=>{r.f[3]++;const n=(r.s[11]++,{from:(new C.Handles).fromHandle,to:(new C.Handles).toHandle,interval:(new c.SelectedInterval).interval,valueScale:new d.ValuesScale({passNewValue:e=>(r.f[4]++,r.s[12]++,e)})});r.s[13]++,e.initializeSliderElements(n),r.s[14]++,expect(e.slider).toBeTruthy()})),r.s[15]++,it("changePlane() operates the display function correctly",(()=>{r.f[5]++,r.s[16]++,e.changePlane(!0),r.s[17]++,expect(e.slider).toHaveClass("goby-slider__body_state_vertical"),r.s[18]++,expect(e.sliderWrapper).toHaveClass("goby-slider__slider_state_vertical"),r.s[19]++,e.changePlane(!1),r.s[20]++,expect(e.slider).not.toHaveClass("goby-slider__body_state_vertical"),r.s[21]++,expect(e.sliderWrapper).not.toHaveClass("goby-slider__slider_state_vertical")}))}))},"./src/plugin/View/Slider/types.ts":(e,n)=>{"use strict";var A,t,l,i,s,o;(A="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Slider\\types.ts",t="d8d8c8352c98328dd16a2be7d3cd4b6c29df2675",l=new(0,function(){}.constructor)("return this")(),s={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Slider\\types.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}}},fnMap:{},branchMap:{},s:{0:0},f:{},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Slider\\types.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Slider\\types.ts"],names:[],mappings:"",sourcesContent:["import { IValuesScale } from '../ValuesScale/interfaces';\n\ntype SliderAssemblerSettings = {\n  readonly from: HTMLSpanElement;\n  readonly to: HTMLSpanElement;\n  readonly interval: HTMLDivElement;\n  readonly valueScale: IValuesScale;\n};\n\nexport {\n  SliderAssemblerSettings,\n};\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(o=l[i="__coverage__"]||(l[i]={}))[A]&&o[A].hash===t?o[A]:(s.hash=t,o[A]=s)).s[0]++,Object.defineProperty(n,"__esModule",{value:!0})},"./src/plugin/View/ValuesScale/ValuesScale.ts":function(e,n,A){"use strict";var t,l,i,s,o,a,r=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\ValuesScale\\ValuesScale.ts",l="ba594408a14b7f3abd3c021b651a18c958490d92",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\ValuesScale\\ValuesScale.ts",statementMap:{0:{start:{line:2,column:17},end:{line:7,column:1}},1:{start:{line:3,column:12},end:{line:3,column:28}},2:{start:{line:3,column:34},end:{line:3,column:125}},3:{start:{line:4,column:4},end:{line:5,column:150}},4:{start:{line:4,column:79},end:{line:4,column:131}},5:{start:{line:5,column:9},end:{line:5,column:150}},6:{start:{line:5,column:58},end:{line:5,column:150}},7:{start:{line:5,column:81},end:{line:5,column:150}},8:{start:{line:6,column:4},end:{line:6,column:66}},9:{start:{line:8,column:0},end:{line:8,column:62}},10:{start:{line:9,column:0},end:{line:9,column:29}},11:{start:{line:10,column:29},end:{line:10,column:58}},12:{start:{line:11,column:18},end:{line:105,column:1}},13:{start:{line:13,column:8},end:{line:13,column:47}},14:{start:{line:14,column:8},end:{line:14,column:55}},15:{start:{line:15,column:8},end:{line:15,column:55}},16:{start:{line:16,column:8},end:{line:16,column:67}},17:{start:{line:17,column:8},end:{line:17,column:66}},18:{start:{line:18,column:8},end:{line:18,column:66}},19:{start:{line:19,column:8},end:{line:19,column:67}},20:{start:{line:20,column:8},end:{line:20,column:47}},21:{start:{line:21,column:8},end:{line:28,column:10}},22:{start:{line:29,column:8},end:{line:29,column:73}},23:{start:{line:29,column:39},end:{line:29,column:71}},24:{start:{line:32,column:24},end:{line:32,column:54}},25:{start:{line:33,column:8},end:{line:33,column:86}},26:{start:{line:34,column:8},end:{line:34,column:23}},27:{start:{line:37,column:8},end:{line:44,column:20}},28:{start:{line:47,column:46},end:{line:47,column:111}},29:{start:{line:47,column:59},end:{line:47,column:111}},30:{start:{line:48,column:39},end:{line:48,column:141}},31:{start:{line:48,column:65},end:{line:48,column:141}},32:{start:{line:49,column:8},end:{line:49,column:80}},33:{start:{line:50,column:8},end:{line:50,column:81}},34:{start:{line:51,column:8},end:{line:51,column:98}},35:{start:{line:52,column:8},end:{line:52,column:96}},36:{start:{line:53,column:8},end:{line:53,column:96}},37:{start:{line:54,column:8},end:{line:54,column:98}},38:{start:{line:57,column:8},end:{line:62,column:97}},39:{start:{line:65,column:8},end:{line:65,column:65}},40:{start:{line:68,column:8},end:{line:68,column:65}},41:{start:{line:71,column:30},end:{line:75,column:9}},42:{start:{line:72,column:12},end:{line:74,column:15}},43:{start:{line:73,column:16},end:{line:73,column:78}},44:{start:{line:76,column:38},end:{line:77,column:61}},45:{start:{line:78,column:8},end:{line:79,column:28}},46:{start:{line:79,column:12},end:{line:79,column:28}},47:{start:{line:82,column:8},end:{line:91,column:9}},48:{start:{line:83,column:12},end:{line:85,column:15}},49:{start:{line:84,column:16},end:{line:84,column:67}},50:{start:{line:88,column:12},end:{line:90,column:15}},51:{start:{line:89,column:16},end:{line:89,column:70}},52:{start:{line:94,column:8},end:{line:95,column:19}},53:{start:{line:95,column:12},end:{line:95,column:19}},54:{start:{line:96,column:28},end:{line:96,column:40}},55:{start:{line:97,column:8},end:{line:100,column:11}},56:{start:{line:103,column:8},end:{line:103,column:63}},57:{start:{line:106,column:0},end:{line:108,column:16}},58:{start:{line:109,column:0},end:{line:109,column:34}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:46},end:{line:2,column:47}},loc:{start:{line:2,column:87},end:{line:7,column:1}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:33},end:{line:30,column:5}},line:12},2:{name:"(anonymous_2)",decl:{start:{line:29,column:28},end:{line:29,column:29}},loc:{start:{line:29,column:39},end:{line:29,column:71}},line:29},3:{name:"(anonymous_3)",decl:{start:{line:31,column:4},end:{line:31,column:5}},loc:{start:{line:31,column:33},end:{line:35,column:5}},line:31},4:{name:"(anonymous_4)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:30},end:{line:45,column:5}},line:36},5:{name:"(anonymous_5)",decl:{start:{line:46,column:4},end:{line:46,column:5}},loc:{start:{line:46,column:43},end:{line:55,column:5}},line:46},6:{name:"(anonymous_6)",decl:{start:{line:47,column:46},end:{line:47,column:47}},loc:{start:{line:47,column:59},end:{line:47,column:111}},line:47},7:{name:"(anonymous_7)",decl:{start:{line:48,column:39},end:{line:48,column:40}},loc:{start:{line:48,column:65},end:{line:48,column:141}},line:48},8:{name:"(anonymous_8)",decl:{start:{line:56,column:4},end:{line:56,column:5}},loc:{start:{line:56,column:34},end:{line:63,column:5}},line:56},9:{name:"(anonymous_9)",decl:{start:{line:64,column:4},end:{line:64,column:5}},loc:{start:{line:64,column:46},end:{line:66,column:5}},line:64},10:{name:"(anonymous_10)",decl:{start:{line:67,column:4},end:{line:67,column:5}},loc:{start:{line:67,column:42},end:{line:69,column:5}},line:67},11:{name:"(anonymous_11)",decl:{start:{line:70,column:4},end:{line:70,column:5}},loc:{start:{line:70,column:28},end:{line:80,column:5}},line:70},12:{name:"(anonymous_12)",decl:{start:{line:71,column:30},end:{line:71,column:31}},loc:{start:{line:71,column:36},end:{line:75,column:9}},line:71},13:{name:"(anonymous_13)",decl:{start:{line:72,column:32},end:{line:72,column:33}},loc:{start:{line:72,column:45},end:{line:74,column:13}},line:72},14:{name:"(anonymous_14)",decl:{start:{line:81,column:4},end:{line:81,column:5}},loc:{start:{line:81,column:42},end:{line:92,column:5}},line:81},15:{name:"(anonymous_15)",decl:{start:{line:83,column:32},end:{line:83,column:33}},loc:{start:{line:83,column:45},end:{line:85,column:13}},line:83},16:{name:"(anonymous_16)",decl:{start:{line:88,column:32},end:{line:88,column:33}},loc:{start:{line:88,column:45},end:{line:90,column:13}},line:88},17:{name:"(anonymous_17)",decl:{start:{line:93,column:4},end:{line:93,column:5}},loc:{start:{line:93,column:28},end:{line:101,column:5}},line:93},18:{name:"(anonymous_18)",decl:{start:{line:102,column:4},end:{line:102,column:5}},loc:{start:{line:102,column:32},end:{line:104,column:5}},line:102}},branchMap:{0:{loc:{start:{line:2,column:17},end:{line:7,column:1}},type:"binary-expr",locations:[{start:{line:2,column:18},end:{line:2,column:22}},{start:{line:2,column:26},end:{line:2,column:41}},{start:{line:2,column:46},end:{line:7,column:1}}],line:2},1:{loc:{start:{line:3,column:34},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:42},end:{line:3,column:48}},{start:{line:3,column:51},end:{line:3,column:125}}],line:3},2:{loc:{start:{line:3,column:51},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:67},end:{line:3,column:118}},{start:{line:3,column:121},end:{line:3,column:125}}],line:3},3:{loc:{start:{line:4,column:4},end:{line:5,column:150}},type:"if",locations:[{start:{line:4,column:4},end:{line:5,column:150}},{start:{line:4,column:4},end:{line:5,column:150}}],line:4},4:{loc:{start:{line:4,column:8},end:{line:4,column:77}},type:"binary-expr",locations:[{start:{line:4,column:8},end:{line:4,column:35}},{start:{line:4,column:39},end:{line:4,column:77}}],line:4},5:{loc:{start:{line:5,column:58},end:{line:5,column:150}},type:"if",locations:[{start:{line:5,column:58},end:{line:5,column:150}},{start:{line:5,column:58},end:{line:5,column:150}}],line:5},6:{loc:{start:{line:5,column:85},end:{line:5,column:149}},type:"binary-expr",locations:[{start:{line:5,column:86},end:{line:5,column:143}},{start:{line:5,column:148},end:{line:5,column:149}}],line:5},7:{loc:{start:{line:5,column:86},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:94},end:{line:5,column:98}},{start:{line:5,column:101},end:{line:5,column:143}}],line:5},8:{loc:{start:{line:5,column:101},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:109},end:{line:5,column:126}},{start:{line:5,column:129},end:{line:5,column:143}}],line:5},9:{loc:{start:{line:6,column:11},end:{line:6,column:62}},type:"binary-expr",locations:[{start:{line:6,column:11},end:{line:6,column:16}},{start:{line:6,column:20},end:{line:6,column:21}},{start:{line:6,column:25},end:{line:6,column:62}}],line:6},10:{loc:{start:{line:57,column:15},end:{line:62,column:96}},type:"binary-expr",locations:[{start:{line:57,column:16},end:{line:57,column:85}},{start:{line:58,column:16},end:{line:58,column:85}},{start:{line:59,column:16},end:{line:59,column:95}},{start:{line:60,column:16},end:{line:60,column:94}},{start:{line:61,column:16},end:{line:61,column:94}},{start:{line:62,column:16},end:{line:62,column:95}}],line:57},11:{loc:{start:{line:65,column:15},end:{line:65,column:64}},type:"binary-expr",locations:[{start:{line:65,column:15},end:{line:65,column:49}},{start:{line:65,column:53},end:{line:65,column:64}}],line:65},12:{loc:{start:{line:68,column:15},end:{line:68,column:64}},type:"binary-expr",locations:[{start:{line:68,column:15},end:{line:68,column:50}},{start:{line:68,column:54},end:{line:68,column:64}}],line:68},13:{loc:{start:{line:76,column:38},end:{line:77,column:61}},type:"binary-expr",locations:[{start:{line:76,column:38},end:{line:76,column:80}},{start:{line:77,column:15},end:{line:77,column:61}}],line:76},14:{loc:{start:{line:78,column:8},end:{line:79,column:28}},type:"if",locations:[{start:{line:78,column:8},end:{line:79,column:28}},{start:{line:78,column:8},end:{line:79,column:28}}],line:78},15:{loc:{start:{line:82,column:8},end:{line:91,column:9}},type:"if",locations:[{start:{line:82,column:8},end:{line:91,column:9}},{start:{line:82,column:8},end:{line:91,column:9}}],line:82},16:{loc:{start:{line:94,column:8},end:{line:95,column:19}},type:"if",locations:[{start:{line:94,column:8},end:{line:95,column:19}},{start:{line:94,column:8},end:{line:95,column:19}}],line:94}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0},b:{0:[0,0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0,0],10:[0,0,0,0,0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0],16:[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\ValuesScale\\ValuesScale.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\ValuesScale\\ValuesScale.ts"],names:[],mappings:"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",sourcesContent:["import autobind from 'autobind-decorator';\nimport { DataForValueScale } from '../../Model/types';\nimport { IValuesScale } from './interfaces';\nimport { PassNewValue } from '../types';\n\n@autobind\nexport class ValuesScale implements IValuesScale {\n  readonly minValue: HTMLSpanElement;\n\n  readonly maxValue: HTMLSpanElement;\n\n  readonly twentyPercentValue: HTMLSpanElement;\n\n  readonly fortyPercentValue: HTMLSpanElement;\n\n  readonly sixtyPercentValue: HTMLSpanElement;\n\n  readonly eightyPercentValue: HTMLSpanElement;\n\n  readonly valueClass: string = 'goby-slider__value';\n\n  readonly values: Array<HTMLSpanElement>;\n\n  private readonly environmentLink: { passNewValue: PassNewValue };\n\n  constructor(environmentLink: { passNewValue: PassNewValue }) {\n    this.minValue = this.createElement('type_min');\n    this.maxValue = this.createElement('type_max');\n    this.twentyPercentValue = this.createElement('percent_20');\n    this.fortyPercentValue = this.createElement('percent_40');\n    this.sixtyPercentValue = this.createElement('percent_60');\n    this.eightyPercentValue = this.createElement('percent_80');\n    this.environmentLink = environmentLink;\n\n    this.values = [\n      this.minValue,\n      this.maxValue,\n      this.twentyPercentValue,\n      this.fortyPercentValue,\n      this.sixtyPercentValue,\n      this.eightyPercentValue,\n    ];\n    this.values.forEach((value) => this.bindHandleValueClick(value));\n  }\n\n  private createElement(classModifier: string): HTMLSpanElement {\n    const element: HTMLSpanElement = document.createElement('span');\n\n    element.classList.add(this.valueClass, `${this.valueClass}_${classModifier}`);\n\n    return element;\n  }\n\n  public refreshValueScale(values: DataForValueScale): void {\n    ({\n      min: this.minValue.innerText,\n      max: this.maxValue.innerText,\n      20: this.twentyPercentValue.innerText,\n      40: this.fortyPercentValue.innerText,\n      60: this.sixtyPercentValue.innerText,\n      80: this.eightyPercentValue.innerText,\n    } = values);\n  }\n\n  public centerValues(sliderWidth: number, handleWidth: number): void {\n    const calculateExtremeValuePosition = (element: HTMLSpanElement): string => `${\n      0 - ((element.offsetWidth - handleWidth) / 2)\n    }px`;\n    const calculateValuePosition = (coefficient: number, element: HTMLSpanElement): string => `${\n      sliderWidth * coefficient - ((element.offsetWidth - handleWidth) / 2)\n    }px`;\n\n    this.minValue.style.left = calculateExtremeValuePosition(this.minValue);\n    this.maxValue.style.right = calculateExtremeValuePosition(this.maxValue);\n    this.twentyPercentValue.style.left = calculateValuePosition(0.2, this.twentyPercentValue);\n    this.fortyPercentValue.style.left = calculateValuePosition(0.4, this.fortyPercentValue);\n    this.sixtyPercentValue.style.left = calculateValuePosition(0.6, this.sixtyPercentValue);\n    this.eightyPercentValue.style.left = calculateValuePosition(0.8, this.eightyPercentValue);\n  }\n\n  private checkIsContainVerticalClass(): boolean {\n    return (this.minValue.classList.contains(`${this.valueClass}_state_vertical`))\n      && (this.maxValue.classList.contains(`${this.valueClass}_state_vertical`))\n      && (this.twentyPercentValue.classList.contains(`${this.valueClass}_state_vertical`))\n      && (this.fortyPercentValue.classList.contains(`${this.valueClass}_state_vertical`))\n      && (this.sixtyPercentValue.classList.contains(`${this.valueClass}_state_vertical`))\n      && (this.eightyPercentValue.classList.contains(`${this.valueClass}_state_vertical`));\n  }\n\n  private checkIsNeedToMakeHorizontally(isVertical: boolean): boolean {\n    return this.checkIsContainVerticalClass() && !isVertical;\n  }\n\n  private checkIsNeedToMakeVertical(isVertical: boolean): boolean {\n    return !this.checkIsContainVerticalClass() && isVertical;\n  }\n\n  public changePlane(isVertical: boolean): void {\n    const changeClasses = (): void => {\n      this.values.forEach((element: HTMLSpanElement): void => {\n        element.classList.toggle(`${this.valueClass}_state_vertical`);\n      });\n    };\n\n    const isNeedToChangeClasses = this.checkIsNeedToMakeVertical(isVertical)\n      || this.checkIsNeedToMakeHorizontally(isVertical);\n\n    if (isNeedToChangeClasses) changeClasses();\n  }\n\n  public changeValueScaleDisplay(isValueScale: boolean): void {\n    if (!isValueScale) {\n      this.values.forEach((element: HTMLSpanElement): void => {\n        element.classList.add(`${this.valueClass}_hidden`);\n      });\n    } else {\n      this.values.forEach((element: HTMLSpanElement): void => {\n        element.classList.remove(`${this.valueClass}_hidden`);\n      });\n    }\n  }\n\n  private handleValueClick(event: Event): void {\n    if (!event.target) return;\n    const eventTarget: HTMLSpanElement = event.target as HTMLSpanElement;\n\n    this.environmentLink.passNewValue({\n      target: 'unspecified',\n      newPosition: Number(eventTarget.innerText),\n    });\n  }\n\n  private bindHandleValueClick(value: HTMLSpanElement):void {\n    value.addEventListener('click', this.handleValueClick);\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[s="__coverage__"]||(i[s]={}))[t]&&a[t].hash===l?a[t]:(o.hash=l,a[t]=o)),C=(r.s[0]++,r.b[0][0]++,this&&(r.b[0][1]++,this.__decorate)||(r.b[0][2]++,function(e,n,A,t){r.f[0]++;var l,i=(r.s[1]++,arguments.length),s=(r.s[2]++,i<3?(r.b[1][0]++,n):(r.b[1][1]++,null===t?(r.b[2][0]++,t=Object.getOwnPropertyDescriptor(n,A)):(r.b[2][1]++,t)));if(r.s[3]++,r.b[4][0]++,"object"==typeof Reflect&&(r.b[4][1]++,"function"==typeof Reflect.decorate))r.b[3][0]++,r.s[4]++,s=Reflect.decorate(e,n,A,t);else{r.b[3][1]++,r.s[5]++;for(var o=e.length-1;o>=0;o--)r.s[6]++,(l=e[o])?(r.b[5][0]++,r.s[7]++,r.b[6][0]++,s=(i<3?(r.b[7][0]++,l(s)):(r.b[7][1]++,i>3?(r.b[8][0]++,l(n,A,s)):(r.b[8][1]++,l(n,A))))||(r.b[6][1]++,s)):r.b[5][1]++}return r.s[8]++,r.b[9][0]++,i>3&&(r.b[9][1]++,s)&&(r.b[9][2]++,Object.defineProperty(n,A,s)),s}));r.s[9]++,Object.defineProperty(n,"__esModule",{value:!0}),r.s[10]++,n.ValuesScale=void 0;const c=(r.s[11]++,A("./node_modules/autobind-decorator/lib/esm/index.js"));r.s[12]++;let u=class{constructor(e){r.f[1]++,r.s[13]++,this.valueClass="goby-slider__value",r.s[14]++,this.minValue=this.createElement("type_min"),r.s[15]++,this.maxValue=this.createElement("type_max"),r.s[16]++,this.twentyPercentValue=this.createElement("percent_20"),r.s[17]++,this.fortyPercentValue=this.createElement("percent_40"),r.s[18]++,this.sixtyPercentValue=this.createElement("percent_60"),r.s[19]++,this.eightyPercentValue=this.createElement("percent_80"),r.s[20]++,this.environmentLink=e,r.s[21]++,this.values=[this.minValue,this.maxValue,this.twentyPercentValue,this.fortyPercentValue,this.sixtyPercentValue,this.eightyPercentValue],r.s[22]++,this.values.forEach((e=>(r.f[2]++,r.s[23]++,this.bindHandleValueClick(e))))}createElement(e){r.f[3]++;const n=(r.s[24]++,document.createElement("span"));return r.s[25]++,n.classList.add(this.valueClass,`${this.valueClass}_${e}`),r.s[26]++,n}refreshValueScale(e){r.f[4]++,r.s[27]++,({min:this.minValue.innerText,max:this.maxValue.innerText,20:this.twentyPercentValue.innerText,40:this.fortyPercentValue.innerText,60:this.sixtyPercentValue.innerText,80:this.eightyPercentValue.innerText}=e)}centerValues(e,n){r.f[5]++,r.s[28]++;const A=e=>(r.f[6]++,r.s[29]++,0-(e.offsetWidth-n)/2+"px");r.s[30]++;const t=(A,t)=>(r.f[7]++,r.s[31]++,e*A-(t.offsetWidth-n)/2+"px");r.s[32]++,this.minValue.style.left=A(this.minValue),r.s[33]++,this.maxValue.style.right=A(this.maxValue),r.s[34]++,this.twentyPercentValue.style.left=t(.2,this.twentyPercentValue),r.s[35]++,this.fortyPercentValue.style.left=t(.4,this.fortyPercentValue),r.s[36]++,this.sixtyPercentValue.style.left=t(.6,this.sixtyPercentValue),r.s[37]++,this.eightyPercentValue.style.left=t(.8,this.eightyPercentValue)}checkIsContainVerticalClass(){return r.f[8]++,r.s[38]++,r.b[10][0]++,this.minValue.classList.contains(`${this.valueClass}_state_vertical`)&&(r.b[10][1]++,this.maxValue.classList.contains(`${this.valueClass}_state_vertical`))&&(r.b[10][2]++,this.twentyPercentValue.classList.contains(`${this.valueClass}_state_vertical`))&&(r.b[10][3]++,this.fortyPercentValue.classList.contains(`${this.valueClass}_state_vertical`))&&(r.b[10][4]++,this.sixtyPercentValue.classList.contains(`${this.valueClass}_state_vertical`))&&(r.b[10][5]++,this.eightyPercentValue.classList.contains(`${this.valueClass}_state_vertical`))}checkIsNeedToMakeHorizontally(e){return r.f[9]++,r.s[39]++,r.b[11][0]++,this.checkIsContainVerticalClass()&&(r.b[11][1]++,!e)}checkIsNeedToMakeVertical(e){return r.f[10]++,r.s[40]++,r.b[12][0]++,!this.checkIsContainVerticalClass()&&(r.b[12][1]++,e)}changePlane(e){r.f[11]++,r.s[41]++;const n=()=>{r.f[12]++,r.s[42]++,this.values.forEach((e=>{r.f[13]++,r.s[43]++,e.classList.toggle(`${this.valueClass}_state_vertical`)}))},A=(r.s[44]++,r.b[13][0]++,this.checkIsNeedToMakeVertical(e)||(r.b[13][1]++,this.checkIsNeedToMakeHorizontally(e)));r.s[45]++,A?(r.b[14][0]++,r.s[46]++,n()):r.b[14][1]++}changeValueScaleDisplay(e){r.f[14]++,r.s[47]++,e?(r.b[15][1]++,r.s[50]++,this.values.forEach((e=>{r.f[16]++,r.s[51]++,e.classList.remove(`${this.valueClass}_hidden`)}))):(r.b[15][0]++,r.s[48]++,this.values.forEach((e=>{r.f[15]++,r.s[49]++,e.classList.add(`${this.valueClass}_hidden`)})))}handleValueClick(e){if(r.f[17]++,r.s[52]++,!e.target)return r.b[16][0]++,void r.s[53]++;r.b[16][1]++;const n=(r.s[54]++,e.target);r.s[55]++,this.environmentLink.passNewValue({target:"unspecified",newPosition:Number(n.innerText)})}bindHandleValueClick(e){r.f[18]++,r.s[56]++,e.addEventListener("click",this.handleValueClick)}};r.s[57]++,u=C([c.default],u),r.s[58]++,n.ValuesScale=u},"./src/plugin/View/ValuesScale/interfaces.ts":(e,n)=>{"use strict";var A,t,l,i,s,o;(A="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\ValuesScale\\interfaces.ts",t="f9fde95df6e65715a4f162ee391eb466ac80abdd",l=new(0,function(){}.constructor)("return this")(),s={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\ValuesScale\\interfaces.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}}},fnMap:{},branchMap:{},s:{0:0},f:{},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\ValuesScale\\interfaces.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\ValuesScale\\interfaces.ts"],names:[],mappings:"",sourcesContent:["import { DataForValueScale } from '../../Model/types';\n\ninterface IValuesScale {\n  minValue: HTMLSpanElement;\n  maxValue: HTMLSpanElement;\n  twentyPercentValue: HTMLSpanElement;\n  fortyPercentValue: HTMLSpanElement;\n  sixtyPercentValue: HTMLSpanElement;\n  eightyPercentValue: HTMLSpanElement;\n  valueClass: string;\n  values: Array<HTMLSpanElement>;\n  refreshValueScale: (values: DataForValueScale) => void;\n  centerValues: (sliderWidth: number, handleWidth: number) => void;\n  changePlane: (isVertical: boolean) => void;\n  changeValueScaleDisplay: (isValueScale: boolean) => void;\n}\n\nexport { IValuesScale };\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(o=l[i="__coverage__"]||(l[i]={}))[A]&&o[A].hash===t?o[A]:(s.hash=t,o[A]=s)).s[0]++,Object.defineProperty(n,"__esModule",{value:!0})},"./src/plugin/View/ValuesScale/valueScale.test.ts":(e,n,A)=>{"use strict";var t,l,i,s,o,a,r=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\ValuesScale\\valueScale.test.ts",l="c50079d358a2c4e72f5165c060ac107a2ac569e8",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\ValuesScale\\valueScale.test.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:22},end:{line:3,column:46}},2:{start:{line:4,column:0},end:{line:64,column:3}},3:{start:{line:6,column:4},end:{line:8,column:7}},4:{start:{line:7,column:8},end:{line:7,column:102}},5:{start:{line:7,column:86},end:{line:7,column:98}},6:{start:{line:9,column:4},end:{line:11,column:7}},7:{start:{line:10,column:8},end:{line:10,column:41}},8:{start:{line:12,column:4},end:{line:22,column:7}},9:{start:{line:13,column:8},end:{line:15,column:11}},10:{start:{line:16,column:8},end:{line:16,column:60}},11:{start:{line:17,column:8},end:{line:17,column:62}},12:{start:{line:18,column:8},end:{line:18,column:71}},13:{start:{line:19,column:8},end:{line:19,column:70}},14:{start:{line:20,column:8},end:{line:20,column:70}},15:{start:{line:21,column:8},end:{line:21,column:71}},16:{start:{line:23,column:4},end:{line:31,column:7}},17:{start:{line:24,column:8},end:{line:24,column:42}},18:{start:{line:25,column:8},end:{line:25,column:64}},19:{start:{line:26,column:8},end:{line:26,column:65}},20:{start:{line:27,column:8},end:{line:27,column:74}},21:{start:{line:28,column:8},end:{line:28,column:73}},22:{start:{line:29,column:8},end:{line:29,column:73}},23:{start:{line:30,column:8},end:{line:30,column:74}},24:{start:{line:32,column:4},end:{line:47,column:7}},25:{start:{line:33,column:8},end:{line:33,column:38}},26:{start:{line:34,column:8},end:{line:34,column:86}},27:{start:{line:35,column:8},end:{line:35,column:86}},28:{start:{line:36,column:8},end:{line:36,column:96}},29:{start:{line:37,column:8},end:{line:37,column:95}},30:{start:{line:38,column:8},end:{line:38,column:95}},31:{start:{line:39,column:8},end:{line:39,column:96}},32:{start:{line:40,column:8},end:{line:40,column:39}},33:{start:{line:41,column:8},end:{line:41,column:90}},34:{start:{line:42,column:8},end:{line:42,column:90}},35:{start:{line:43,column:8},end:{line:43,column:100}},36:{start:{line:44,column:8},end:{line:44,column:99}},37:{start:{line:45,column:8},end:{line:45,column:99}},38:{start:{line:46,column:8},end:{line:46,column:100}},39:{start:{line:48,column:4},end:{line:63,column:7}},40:{start:{line:49,column:8},end:{line:49,column:51}},41:{start:{line:50,column:8},end:{line:50,column:78}},42:{start:{line:51,column:8},end:{line:51,column:78}},43:{start:{line:52,column:8},end:{line:52,column:88}},44:{start:{line:53,column:8},end:{line:53,column:87}},45:{start:{line:54,column:8},end:{line:54,column:87}},46:{start:{line:55,column:8},end:{line:55,column:88}},47:{start:{line:56,column:8},end:{line:56,column:50}},48:{start:{line:57,column:8},end:{line:57,column:82}},49:{start:{line:58,column:8},end:{line:58,column:82}},50:{start:{line:59,column:8},end:{line:59,column:92}},51:{start:{line:60,column:8},end:{line:60,column:91}},52:{start:{line:61,column:8},end:{line:61,column:91}},53:{start:{line:62,column:8},end:{line:62,column:92}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:4,column:23},end:{line:4,column:24}},loc:{start:{line:4,column:29},end:{line:64,column:1}},line:4},1:{name:"(anonymous_1)",decl:{start:{line:6,column:15},end:{line:6,column:16}},loc:{start:{line:6,column:21},end:{line:8,column:5}},line:6},2:{name:"(anonymous_2)",decl:{start:{line:7,column:68},end:{line:7,column:69}},loc:{start:{line:7,column:86},end:{line:7,column:98}},line:7},3:{name:"(anonymous_3)",decl:{start:{line:9,column:35},end:{line:9,column:36}},loc:{start:{line:9,column:41},end:{line:11,column:5}},line:9},4:{name:"(anonymous_4)",decl:{start:{line:12,column:54},end:{line:12,column:55}},loc:{start:{line:12,column:60},end:{line:22,column:5}},line:12},5:{name:"(anonymous_5)",decl:{start:{line:23,column:46},end:{line:23,column:47}},loc:{start:{line:23,column:52},end:{line:31,column:5}},line:23},6:{name:"(anonymous_6)",decl:{start:{line:32,column:62},end:{line:32,column:63}},loc:{start:{line:32,column:68},end:{line:47,column:5}},line:32},7:{name:"(anonymous_7)",decl:{start:{line:48,column:67},end:{line:48,column:68}},loc:{start:{line:48,column:73},end:{line:63,column:5}},line:48}},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\ValuesScale\\valueScale.test.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\ValuesScale\\valueScale.test.ts"],names:[],mappings:"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",sourcesContent:["import { ValuesScale } from './ValuesScale';\nimport { UpdatePositionsData } from '../types';\n\ndescribe('ValueScale', () => {\n  let valuesScale: ValuesScale;\n\n  beforeEach(() => {\n    valuesScale = new ValuesScale({ passNewValue: (passNewValue: UpdatePositionsData) => passNewValue });\n  });\n\n  it('ValueScale can be create', () => {\n    expect(valuesScale).toBeTruthy();\n  });\n\n  it('refreshValueScale() refresh scale correctly', () => {\n    valuesScale.refreshValueScale({\n      min: '0', max: '100', 20: '20', 40: '40', 60: '60', 80: '80',\n    });\n    expect(valuesScale.minValue.innerText).toEqual('0');\n    expect(valuesScale.maxValue.innerText).toEqual('100');\n    expect(valuesScale.twentyPercentValue.innerText).toEqual('20');\n    expect(valuesScale.fortyPercentValue.innerText).toEqual('40');\n    expect(valuesScale.sixtyPercentValue.innerText).toEqual('60');\n    expect(valuesScale.eightyPercentValue.innerText).toEqual('80');\n  });\n\n  it('centersValues() calculate correctly', () => {\n    valuesScale.centerValues(100, 20);\n    expect(valuesScale.minValue.style.left).toEqual('10px');\n    expect(valuesScale.maxValue.style.right).toEqual('10px');\n    expect(valuesScale.twentyPercentValue.style.left).toEqual('30px');\n    expect(valuesScale.fortyPercentValue.style.left).toEqual('50px');\n    expect(valuesScale.sixtyPercentValue.style.left).toEqual('70px');\n    expect(valuesScale.eightyPercentValue.style.left).toEqual('90px');\n  });\n\n  it('changePlane() operates the plane function correctly', () => {\n    valuesScale.changePlane(true);\n    expect(valuesScale.minValue).toHaveClass('goby-slider__value_state_vertical');\n    expect(valuesScale.maxValue).toHaveClass('goby-slider__value_state_vertical');\n    expect(valuesScale.twentyPercentValue).toHaveClass('goby-slider__value_state_vertical');\n    expect(valuesScale.fortyPercentValue).toHaveClass('goby-slider__value_state_vertical');\n    expect(valuesScale.sixtyPercentValue).toHaveClass('goby-slider__value_state_vertical');\n    expect(valuesScale.eightyPercentValue).toHaveClass('goby-slider__value_state_vertical');\n    valuesScale.changePlane(false);\n    expect(valuesScale.minValue).not.toHaveClass('goby-slider__value_state_vertical');\n    expect(valuesScale.maxValue).not.toHaveClass('goby-slider__value_state_vertical');\n    expect(valuesScale.twentyPercentValue).not.toHaveClass('goby-slider__value_state_vertical');\n    expect(valuesScale.fortyPercentValue).not.toHaveClass('goby-slider__value_state_vertical');\n    expect(valuesScale.sixtyPercentValue).not.toHaveClass('goby-slider__value_state_vertical');\n    expect(valuesScale.eightyPercentValue).not.toHaveClass('goby-slider__value_state_vertical');\n  });\n\n  it('hideValueScale() operates the display function correctly', () => {\n    valuesScale.changeValueScaleDisplay(false);\n    expect(valuesScale.minValue).toHaveClass('goby-slider__value_hidden');\n    expect(valuesScale.maxValue).toHaveClass('goby-slider__value_hidden');\n    expect(valuesScale.twentyPercentValue).toHaveClass('goby-slider__value_hidden');\n    expect(valuesScale.fortyPercentValue).toHaveClass('goby-slider__value_hidden');\n    expect(valuesScale.sixtyPercentValue).toHaveClass('goby-slider__value_hidden');\n    expect(valuesScale.eightyPercentValue).toHaveClass('goby-slider__value_hidden');\n    valuesScale.changeValueScaleDisplay(true);\n    expect(valuesScale.minValue).not.toHaveClass('goby-slider__value_hidden');\n    expect(valuesScale.maxValue).not.toHaveClass('goby-slider__value_hidden');\n    expect(valuesScale.twentyPercentValue).not.toHaveClass('goby-slider__value_hidden');\n    expect(valuesScale.fortyPercentValue).not.toHaveClass('goby-slider__value_hidden');\n    expect(valuesScale.sixtyPercentValue).not.toHaveClass('goby-slider__value_hidden');\n    expect(valuesScale.eightyPercentValue).not.toHaveClass('goby-slider__value_hidden');\n  });\n});\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[s="__coverage__"]||(i[s]={}))[t]&&a[t].hash===l?a[t]:(o.hash=l,a[t]=o));r.s[0]++,Object.defineProperty(n,"__esModule",{value:!0});const C=(r.s[1]++,A("./src/plugin/View/ValuesScale/ValuesScale.ts"));r.s[2]++,describe("ValueScale",(()=>{let e;r.f[0]++,r.s[3]++,beforeEach((()=>{r.f[1]++,r.s[4]++,e=new C.ValuesScale({passNewValue:e=>(r.f[2]++,r.s[5]++,e)})})),r.s[6]++,it("ValueScale can be create",(()=>{r.f[3]++,r.s[7]++,expect(e).toBeTruthy()})),r.s[8]++,it("refreshValueScale() refresh scale correctly",(()=>{r.f[4]++,r.s[9]++,e.refreshValueScale({min:"0",max:"100",20:"20",40:"40",60:"60",80:"80"}),r.s[10]++,expect(e.minValue.innerText).toEqual("0"),r.s[11]++,expect(e.maxValue.innerText).toEqual("100"),r.s[12]++,expect(e.twentyPercentValue.innerText).toEqual("20"),r.s[13]++,expect(e.fortyPercentValue.innerText).toEqual("40"),r.s[14]++,expect(e.sixtyPercentValue.innerText).toEqual("60"),r.s[15]++,expect(e.eightyPercentValue.innerText).toEqual("80")})),r.s[16]++,it("centersValues() calculate correctly",(()=>{r.f[5]++,r.s[17]++,e.centerValues(100,20),r.s[18]++,expect(e.minValue.style.left).toEqual("10px"),r.s[19]++,expect(e.maxValue.style.right).toEqual("10px"),r.s[20]++,expect(e.twentyPercentValue.style.left).toEqual("30px"),r.s[21]++,expect(e.fortyPercentValue.style.left).toEqual("50px"),r.s[22]++,expect(e.sixtyPercentValue.style.left).toEqual("70px"),r.s[23]++,expect(e.eightyPercentValue.style.left).toEqual("90px")})),r.s[24]++,it("changePlane() operates the plane function correctly",(()=>{r.f[6]++,r.s[25]++,e.changePlane(!0),r.s[26]++,expect(e.minValue).toHaveClass("goby-slider__value_state_vertical"),r.s[27]++,expect(e.maxValue).toHaveClass("goby-slider__value_state_vertical"),r.s[28]++,expect(e.twentyPercentValue).toHaveClass("goby-slider__value_state_vertical"),r.s[29]++,expect(e.fortyPercentValue).toHaveClass("goby-slider__value_state_vertical"),r.s[30]++,expect(e.sixtyPercentValue).toHaveClass("goby-slider__value_state_vertical"),r.s[31]++,expect(e.eightyPercentValue).toHaveClass("goby-slider__value_state_vertical"),r.s[32]++,e.changePlane(!1),r.s[33]++,expect(e.minValue).not.toHaveClass("goby-slider__value_state_vertical"),r.s[34]++,expect(e.maxValue).not.toHaveClass("goby-slider__value_state_vertical"),r.s[35]++,expect(e.twentyPercentValue).not.toHaveClass("goby-slider__value_state_vertical"),r.s[36]++,expect(e.fortyPercentValue).not.toHaveClass("goby-slider__value_state_vertical"),r.s[37]++,expect(e.sixtyPercentValue).not.toHaveClass("goby-slider__value_state_vertical"),r.s[38]++,expect(e.eightyPercentValue).not.toHaveClass("goby-slider__value_state_vertical")})),r.s[39]++,it("hideValueScale() operates the display function correctly",(()=>{r.f[7]++,r.s[40]++,e.changeValueScaleDisplay(!1),r.s[41]++,expect(e.minValue).toHaveClass("goby-slider__value_hidden"),r.s[42]++,expect(e.maxValue).toHaveClass("goby-slider__value_hidden"),r.s[43]++,expect(e.twentyPercentValue).toHaveClass("goby-slider__value_hidden"),r.s[44]++,expect(e.fortyPercentValue).toHaveClass("goby-slider__value_hidden"),r.s[45]++,expect(e.sixtyPercentValue).toHaveClass("goby-slider__value_hidden"),r.s[46]++,expect(e.eightyPercentValue).toHaveClass("goby-slider__value_hidden"),r.s[47]++,e.changeValueScaleDisplay(!0),r.s[48]++,expect(e.minValue).not.toHaveClass("goby-slider__value_hidden"),r.s[49]++,expect(e.maxValue).not.toHaveClass("goby-slider__value_hidden"),r.s[50]++,expect(e.twentyPercentValue).not.toHaveClass("goby-slider__value_hidden"),r.s[51]++,expect(e.fortyPercentValue).not.toHaveClass("goby-slider__value_hidden"),r.s[52]++,expect(e.sixtyPercentValue).not.toHaveClass("goby-slider__value_hidden"),r.s[53]++,expect(e.eightyPercentValue).not.toHaveClass("goby-slider__value_hidden")}))}))},"./src/plugin/View/View.ts":function(e,n,A){"use strict";var t,l,i,s,o,a,r=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\View.ts",l="4fb81b86b36af09872ed790294707378cab860c5",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\View.ts",statementMap:{0:{start:{line:2,column:17},end:{line:7,column:1}},1:{start:{line:3,column:12},end:{line:3,column:28}},2:{start:{line:3,column:34},end:{line:3,column:125}},3:{start:{line:4,column:4},end:{line:5,column:150}},4:{start:{line:4,column:79},end:{line:4,column:131}},5:{start:{line:5,column:9},end:{line:5,column:150}},6:{start:{line:5,column:58},end:{line:5,column:150}},7:{start:{line:5,column:81},end:{line:5,column:150}},8:{start:{line:6,column:4},end:{line:6,column:66}},9:{start:{line:8,column:0},end:{line:8,column:62}},10:{start:{line:9,column:0},end:{line:9,column:22}},11:{start:{line:10,column:29},end:{line:10,column:58}},12:{start:{line:11,column:17},end:{line:11,column:43}},13:{start:{line:12,column:18},end:{line:12,column:46}},14:{start:{line:13,column:19},end:{line:13,column:49}},15:{start:{line:14,column:27},end:{line:14,column:73}},16:{start:{line:15,column:22},end:{line:15,column:58}},17:{start:{line:16,column:11},end:{line:120,column:1}},18:{start:{line:18,column:8},end:{line:18,column:43}},19:{start:{line:18,column:38},end:{line:18,column:42}},20:{start:{line:19,column:8},end:{line:19,column:46}},21:{start:{line:19,column:41},end:{line:19,column:45}},22:{start:{line:20,column:8},end:{line:20,column:49}},23:{start:{line:20,column:42},end:{line:20,column:48}},24:{start:{line:21,column:8},end:{line:21,column:32}},25:{start:{line:22,column:8},end:{line:22,column:44}},26:{start:{line:23,column:8},end:{line:23,column:47}},27:{start:{line:24,column:8},end:{line:24,column:66}},28:{start:{line:25,column:8},end:{line:25,column:63}},29:{start:{line:26,column:8},end:{line:26,column:37}},30:{start:{line:27,column:8},end:{line:32,column:11}},31:{start:{line:33,column:8},end:{line:33,column:35}},32:{start:{line:34,column:8},end:{line:34,column:34}},33:{start:{line:37,column:8},end:{line:42,column:11}},34:{start:{line:43,column:8},end:{line:43,column:55}},35:{start:{line:46,column:8},end:{line:46,column:30}},36:{start:{line:47,column:8},end:{line:47,column:26}},37:{start:{line:50,column:24},end:{line:50,column:41}},38:{start:{line:51,column:8},end:{line:51,column:50}},39:{start:{line:52,column:8},end:{line:52,column:51}},40:{start:{line:53,column:8},end:{line:53,column:55}},41:{start:{line:54,column:8},end:{line:57,column:11}},42:{start:{line:58,column:8},end:{line:58,column:60}},43:{start:{line:59,column:8},end:{line:59,column:69}},44:{start:{line:60,column:8},end:{line:60,column:62}},45:{start:{line:63,column:49},end:{line:63,column:57}},46:{start:{line:64,column:26},end:{line:64,column:56}},47:{start:{line:65,column:28},end:{line:65,column:63}},48:{start:{line:66,column:8},end:{line:67,column:50}},49:{start:{line:70,column:8},end:{line:70,column:51}},50:{start:{line:71,column:8},end:{line:71,column:145}},51:{start:{line:74,column:31},end:{line:79,column:9}},52:{start:{line:80,column:8},end:{line:80,column:83}},53:{start:{line:81,column:8},end:{line:86,column:11}},54:{start:{line:89,column:8},end:{line:91,column:11}},55:{start:{line:90,column:12},end:{line:90,column:77}},56:{start:{line:92,column:8},end:{line:92,column:85}},57:{start:{line:93,column:8},end:{line:93,column:67}},58:{start:{line:96,column:23},end:{line:96,column:35}},59:{start:{line:97,column:8},end:{line:101,column:11}},60:{start:{line:104,column:32},end:{line:104,column:110}},61:{start:{line:105,column:8},end:{line:106,column:19}},62:{start:{line:106,column:12},end:{line:106,column:19}},63:{start:{line:107,column:32},end:{line:107,column:71}},64:{start:{line:108,column:8},end:{line:115,column:11}},65:{start:{line:118,column:8},end:{line:118,column:38}},66:{start:{line:121,column:0},end:{line:123,column:9}},67:{start:{line:124,column:0},end:{line:124,column:20}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:46},end:{line:2,column:47}},loc:{start:{line:2,column:87},end:{line:7,column:1}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:17,column:4},end:{line:17,column:5}},loc:{start:{line:17,column:36},end:{line:35,column:5}},line:17},2:{name:"(anonymous_2)",decl:{start:{line:18,column:28},end:{line:18,column:29}},loc:{start:{line:18,column:38},end:{line:18,column:42}},line:18},3:{name:"(anonymous_3)",decl:{start:{line:19,column:31},end:{line:19,column:32}},loc:{start:{line:19,column:41},end:{line:19,column:45}},line:19},4:{name:"(anonymous_4)",decl:{start:{line:20,column:30},end:{line:20,column:31}},loc:{start:{line:20,column:42},end:{line:20,column:48}},line:20},5:{name:"(anonymous_5)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:21},end:{line:44,column:5}},line:36},6:{name:"(anonymous_6)",decl:{start:{line:45,column:4},end:{line:45,column:5}},loc:{start:{line:45,column:26},end:{line:48,column:5}},line:45},7:{name:"(anonymous_7)",decl:{start:{line:49,column:4},end:{line:49,column:5}},loc:{start:{line:49,column:17},end:{line:61,column:5}},line:49},8:{name:"(anonymous_8)",decl:{start:{line:62,column:4},end:{line:62,column:5}},loc:{start:{line:62,column:37},end:{line:68,column:5}},line:62},9:{name:"(anonymous_9)",decl:{start:{line:69,column:4},end:{line:69,column:5}},loc:{start:{line:69,column:30},end:{line:72,column:5}},line:69},10:{name:"(anonymous_10)",decl:{start:{line:73,column:4},end:{line:73,column:5}},loc:{start:{line:73,column:34},end:{line:87,column:5}},line:73},11:{name:"(anonymous_11)",decl:{start:{line:88,column:4},end:{line:88,column:5}},loc:{start:{line:88,column:25},end:{line:94,column:5}},line:88},12:{name:"(anonymous_12)",decl:{start:{line:89,column:65},end:{line:89,column:66}},loc:{start:{line:89,column:77},end:{line:91,column:9}},line:89},13:{name:"(anonymous_13)",decl:{start:{line:95,column:4},end:{line:95,column:5}},loc:{start:{line:95,column:33},end:{line:102,column:5}},line:95},14:{name:"(anonymous_14)",decl:{start:{line:103,column:4},end:{line:103,column:5}},loc:{start:{line:103,column:33},end:{line:116,column:5}},line:103},15:{name:"(anonymous_15)",decl:{start:{line:117,column:4},end:{line:117,column:5}},loc:{start:{line:117,column:25},end:{line:119,column:5}},line:117}},branchMap:{0:{loc:{start:{line:2,column:17},end:{line:7,column:1}},type:"binary-expr",locations:[{start:{line:2,column:18},end:{line:2,column:22}},{start:{line:2,column:26},end:{line:2,column:41}},{start:{line:2,column:46},end:{line:7,column:1}}],line:2},1:{loc:{start:{line:3,column:34},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:42},end:{line:3,column:48}},{start:{line:3,column:51},end:{line:3,column:125}}],line:3},2:{loc:{start:{line:3,column:51},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:67},end:{line:3,column:118}},{start:{line:3,column:121},end:{line:3,column:125}}],line:3},3:{loc:{start:{line:4,column:4},end:{line:5,column:150}},type:"if",locations:[{start:{line:4,column:4},end:{line:5,column:150}},{start:{line:4,column:4},end:{line:5,column:150}}],line:4},4:{loc:{start:{line:4,column:8},end:{line:4,column:77}},type:"binary-expr",locations:[{start:{line:4,column:8},end:{line:4,column:35}},{start:{line:4,column:39},end:{line:4,column:77}}],line:4},5:{loc:{start:{line:5,column:58},end:{line:5,column:150}},type:"if",locations:[{start:{line:5,column:58},end:{line:5,column:150}},{start:{line:5,column:58},end:{line:5,column:150}}],line:5},6:{loc:{start:{line:5,column:85},end:{line:5,column:149}},type:"binary-expr",locations:[{start:{line:5,column:86},end:{line:5,column:143}},{start:{line:5,column:148},end:{line:5,column:149}}],line:5},7:{loc:{start:{line:5,column:86},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:94},end:{line:5,column:98}},{start:{line:5,column:101},end:{line:5,column:143}}],line:5},8:{loc:{start:{line:5,column:101},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:109},end:{line:5,column:126}},{start:{line:5,column:129},end:{line:5,column:143}}],line:5},9:{loc:{start:{line:6,column:11},end:{line:6,column:62}},type:"binary-expr",locations:[{start:{line:6,column:11},end:{line:6,column:16}},{start:{line:6,column:20},end:{line:6,column:21}},{start:{line:6,column:25},end:{line:6,column:62}}],line:6},10:{loc:{start:{line:104,column:32},end:{line:104,column:110}},type:"binary-expr",locations:[{start:{line:104,column:32},end:{line:104,column:71}},{start:{line:104,column:75},end:{line:104,column:110}}],line:104},11:{loc:{start:{line:105,column:8},end:{line:106,column:19}},type:"if",locations:[{start:{line:105,column:8},end:{line:106,column:19}},{start:{line:105,column:8},end:{line:106,column:19}}],line:105}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0},b:{0:[0,0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0,0],10:[0,0],11:[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\View.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\View.ts"],names:[],mappings:"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",sourcesContent:["import autobind from 'autobind-decorator';\nimport { Slider } from './Slider/Slider';\nimport { Handles } from './Handles/Handles';\nimport { Movement } from './Movement/Movement';\nimport { SelectedInterval } from './SelectedInterval/SelectedInterval';\nimport { ValuesScale } from './ValuesScale/ValuesScale';\nimport {\n  DataFromModel,\n  BasicViewSettings,\n  NewHandlesData,\n  UpdatePositionsData,\n  PassNewValue,\n} from './types';\nimport { DataForValueScale } from '../Model/types';\n\n@autobind\nexport class View {\n  readonly container: HTMLElement;\n\n  readonly slider: Slider;\n\n  readonly handles: Handles;\n\n  readonly movement: Movement;\n\n  readonly interval: SelectedInterval;\n\n  readonly valuesScale: ValuesScale;\n\n  public getOptions: () => BasicViewSettings;\n\n  public passNewValue: PassNewValue = (data: UpdatePositionsData) => data;\n\n  public updatePositions: PassNewValue = (data: UpdatePositionsData) => data;\n\n  public callViewUpdate: (target: string) => string = (target) => target;\n\n  constructor(getOptions: () => BasicViewSettings, target: HTMLElement) {\n    this.container = target;\n    this.slider = new Slider();\n    this.handles = new Handles();\n    this.interval = new SelectedInterval();\n    this.valuesScale = new ValuesScale(this);\n    this.getOptions = getOptions;\n    this.movement = new Movement({\n      slider: this.slider.slider,\n      handles: this.handles,\n      environmentLink: this,\n      getOptions: this.getOptions,\n    });\n\n    this.prepareSliderForUse();\n    this.bindEventListeners();\n  }\n\n  private addSliderToDOM(): void {\n    this.slider.initializeSliderElements({\n      from: this.handles.fromHandle,\n      to: this.handles.toHandle,\n      interval: this.interval.interval,\n      valueScale: this.valuesScale,\n    });\n    this.container.append(this.slider.mainWrapper);\n  }\n\n  private prepareSliderForUse(): void {\n    this.addSliderToDOM();\n    this.updateView();\n  }\n\n  public updateView(): void {\n    const options: BasicViewSettings = this.getOptions();\n\n    this.slider.changePlane(options.vertical);\n    this.handles.changePlane(options.vertical);\n    this.valuesScale.changePlane(options.vertical);\n    this.handles.changeHandlesDisplay({\n      isDouble: options.double,\n      sliderWidth: this.slider.slider.offsetWidth,\n    });\n    this.interval.changeIntervalDisplay(options.double);\n    this.valuesScale.changeValueScaleDisplay(options.valueScale);\n    this.handles.hideHandlesValues(options.handlesValues);\n  }\n\n  private convertValueToPosition(settings: DataFromModel):string {\n    const { totalValues, minValue, value } = settings;\n    const workRange: number = this.slider.slider.offsetWidth;\n    const handleWidth: number = this.handles.fromHandle.offsetWidth;\n\n    return String(((workRange - handleWidth) / totalValues)\n        * (Number(value) - Number(minValue)));\n  }\n\n  public refreshValueScale(values: DataForValueScale): void {\n    this.valuesScale.refreshValueScale(values);\n    this.valuesScale.centerValues(\n      this.slider.slider.offsetWidth - this.handles.fromHandle.offsetWidth,\n      this.handles.fromHandle.offsetWidth,\n    );\n  }\n\n  public refreshHandleValues(settings: DataFromModel): void {\n    const newHandlesData: NewHandlesData = {\n      target: settings.target,\n      value: settings.value,\n      isToFixed: settings.isToFixed,\n      position: this.convertValueToPosition(settings),\n    };\n\n    this.handles.refreshValues(newHandlesData, this.slider.slider.offsetWidth);\n    this.interval.refreshIntervalPositions({\n      target: settings.target,\n      position: newHandlesData.position,\n      handleWidth: this.handles.fromHandle.offsetWidth,\n      sliderWidth: this.slider.slider.offsetWidth,\n    });\n  }\n\n  private bindEventListeners(): void {\n    [this.handles.fromHandle, this.handles.toHandle].forEach((handle: HTMLSpanElement):void => {\n      handle.addEventListener('mousedown', this.handleHandleMouseDown);\n    });\n    this.slider.slider.addEventListener('mousedown', this.handleSliderMouseDown);\n    window.addEventListener('resize', this.handleWindowResize);\n  }\n\n  private handleHandleMouseDown(event: MouseEvent): void {\n    const target: HTMLSpanElement = event.target as HTMLSpanElement;\n    this.movement.handleListener({\n      target,\n      x: event.clientX,\n      y: event.clientY,\n    });\n  }\n\n  private handleSliderMouseDown(event: MouseEvent): void {\n    const isNotSliderBody = event.target !== this.interval.interval && event.target !== this.slider.slider;\n    if (isNotSliderBody) return;\n\n    const halfHandleWidth: number = this.handles.fromHandle.offsetWidth / 2;\n    this.updatePositions({\n      target: 'unspecified',\n      newPosition: this.movement.calculateNewPosition({\n        x: event.clientX,\n        y: event.clientY,\n        distanceToCursor: halfHandleWidth,\n      }),\n    });\n  }\n\n  public handleWindowResize(): void {\n    this.callViewUpdate('resize');\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[s="__coverage__"]||(i[s]={}))[t]&&a[t].hash===l?a[t]:(o.hash=l,a[t]=o)),C=(r.s[0]++,r.b[0][0]++,this&&(r.b[0][1]++,this.__decorate)||(r.b[0][2]++,function(e,n,A,t){r.f[0]++;var l,i=(r.s[1]++,arguments.length),s=(r.s[2]++,i<3?(r.b[1][0]++,n):(r.b[1][1]++,null===t?(r.b[2][0]++,t=Object.getOwnPropertyDescriptor(n,A)):(r.b[2][1]++,t)));if(r.s[3]++,r.b[4][0]++,"object"==typeof Reflect&&(r.b[4][1]++,"function"==typeof Reflect.decorate))r.b[3][0]++,r.s[4]++,s=Reflect.decorate(e,n,A,t);else{r.b[3][1]++,r.s[5]++;for(var o=e.length-1;o>=0;o--)r.s[6]++,(l=e[o])?(r.b[5][0]++,r.s[7]++,r.b[6][0]++,s=(i<3?(r.b[7][0]++,l(s)):(r.b[7][1]++,i>3?(r.b[8][0]++,l(n,A,s)):(r.b[8][1]++,l(n,A))))||(r.b[6][1]++,s)):r.b[5][1]++}return r.s[8]++,r.b[9][0]++,i>3&&(r.b[9][1]++,s)&&(r.b[9][2]++,Object.defineProperty(n,A,s)),s}));r.s[9]++,Object.defineProperty(n,"__esModule",{value:!0}),r.s[10]++,n.View=void 0;const c=(r.s[11]++,A("./node_modules/autobind-decorator/lib/esm/index.js")),u=(r.s[12]++,A("./src/plugin/View/Slider/Slider.ts")),d=(r.s[13]++,A("./src/plugin/View/Handles/Handles.ts")),m=(r.s[14]++,A("./src/plugin/View/Movement/Movement.ts")),p=(r.s[15]++,A("./src/plugin/View/SelectedInterval/SelectedInterval.ts")),f=(r.s[16]++,A("./src/plugin/View/ValuesScale/ValuesScale.ts"));r.s[17]++;let h=class{constructor(e,n){r.f[1]++,r.s[18]++,this.passNewValue=e=>(r.f[2]++,r.s[19]++,e),r.s[20]++,this.updatePositions=e=>(r.f[3]++,r.s[21]++,e),r.s[22]++,this.callViewUpdate=e=>(r.f[4]++,r.s[23]++,e),r.s[24]++,this.container=n,r.s[25]++,this.slider=new u.Slider,r.s[26]++,this.handles=new d.Handles,r.s[27]++,this.interval=new p.SelectedInterval,r.s[28]++,this.valuesScale=new f.ValuesScale(this),r.s[29]++,this.getOptions=e,r.s[30]++,this.movement=new m.Movement({slider:this.slider.slider,handles:this.handles,environmentLink:this,getOptions:this.getOptions}),r.s[31]++,this.prepareSliderForUse(),r.s[32]++,this.bindEventListeners()}addSliderToDOM(){r.f[5]++,r.s[33]++,this.slider.initializeSliderElements({from:this.handles.fromHandle,to:this.handles.toHandle,interval:this.interval.interval,valueScale:this.valuesScale}),r.s[34]++,this.container.append(this.slider.mainWrapper)}prepareSliderForUse(){r.f[6]++,r.s[35]++,this.addSliderToDOM(),r.s[36]++,this.updateView()}updateView(){r.f[7]++;const e=(r.s[37]++,this.getOptions());r.s[38]++,this.slider.changePlane(e.vertical),r.s[39]++,this.handles.changePlane(e.vertical),r.s[40]++,this.valuesScale.changePlane(e.vertical),r.s[41]++,this.handles.changeHandlesDisplay({isDouble:e.double,sliderWidth:this.slider.slider.offsetWidth}),r.s[42]++,this.interval.changeIntervalDisplay(e.double),r.s[43]++,this.valuesScale.changeValueScaleDisplay(e.valueScale),r.s[44]++,this.handles.hideHandlesValues(e.handlesValues)}convertValueToPosition(e){r.f[8]++;const{totalValues:n,minValue:A,value:t}=(r.s[45]++,e),l=(r.s[46]++,this.slider.slider.offsetWidth),i=(r.s[47]++,this.handles.fromHandle.offsetWidth);return r.s[48]++,String((l-i)/n*(Number(t)-Number(A)))}refreshValueScale(e){r.f[9]++,r.s[49]++,this.valuesScale.refreshValueScale(e),r.s[50]++,this.valuesScale.centerValues(this.slider.slider.offsetWidth-this.handles.fromHandle.offsetWidth,this.handles.fromHandle.offsetWidth)}refreshHandleValues(e){r.f[10]++;const n=(r.s[51]++,{target:e.target,value:e.value,isToFixed:e.isToFixed,position:this.convertValueToPosition(e)});r.s[52]++,this.handles.refreshValues(n,this.slider.slider.offsetWidth),r.s[53]++,this.interval.refreshIntervalPositions({target:e.target,position:n.position,handleWidth:this.handles.fromHandle.offsetWidth,sliderWidth:this.slider.slider.offsetWidth})}bindEventListeners(){r.f[11]++,r.s[54]++,[this.handles.fromHandle,this.handles.toHandle].forEach((e=>{r.f[12]++,r.s[55]++,e.addEventListener("mousedown",this.handleHandleMouseDown)})),r.s[56]++,this.slider.slider.addEventListener("mousedown",this.handleSliderMouseDown),r.s[57]++,window.addEventListener("resize",this.handleWindowResize)}handleHandleMouseDown(e){r.f[13]++;const n=(r.s[58]++,e.target);r.s[59]++,this.movement.handleListener({target:n,x:e.clientX,y:e.clientY})}handleSliderMouseDown(e){r.f[14]++;const n=(r.s[60]++,r.b[10][0]++,e.target!==this.interval.interval&&(r.b[10][1]++,e.target!==this.slider.slider));if(r.s[61]++,n)return r.b[11][0]++,void r.s[62]++;r.b[11][1]++;const A=(r.s[63]++,this.handles.fromHandle.offsetWidth/2);r.s[64]++,this.updatePositions({target:"unspecified",newPosition:this.movement.calculateNewPosition({x:e.clientX,y:e.clientY,distanceToCursor:A})})}handleWindowResize(){r.f[15]++,r.s[65]++,this.callViewUpdate("resize")}};r.s[66]++,h=C([c.default],h),r.s[67]++,n.View=h},"./src/plugin/View/types.ts":(e,n)=>{"use strict";var A,t,l,i,s,o;(A="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\types.ts",t="538b4f172ff37800c942b6c0fa45c4339d82d56b",l=new(0,function(){}.constructor)("return this")(),s={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\types.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}}},fnMap:{},branchMap:{},s:{0:0},f:{},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\types.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\types.ts"],names:[],mappings:"",sourcesContent:["type UpdatePositionTarget = 'from' | 'to' | 'unspecified';\n\ntype UpdatePositionsData = {\n  target: UpdatePositionTarget;\n  newPosition: number;\n};\n\ntype UpdatePositions = (data: UpdatePositionsData) => UpdatePositionsData;\n\ntype PassNewValue = UpdatePositions;\n\ntype BasicViewSettings = {\n  double: boolean;\n  handlesValues: boolean;\n  vertical: boolean;\n  step: boolean | number;\n  valueScale: boolean;\n  integer: boolean;\n};\n\ntype HandlePositions = {\n  from: number;\n  to: number;\n  unspecified: number\n};\n\ntype DataFromModel = {\n  value: number;\n  target: 'from' | 'to' | 'min' | 'max';\n  isToFixed: boolean;\n  totalValues: number;\n  minValue: number;\n};\n\ntype NewHandlesData = {\n  target: 'from' | 'to' | 'min' | 'max';\n  value: number;\n  isToFixed: boolean;\n  position: string;\n};\n\nexport {\n  BasicViewSettings,\n  DataFromModel,\n  HandlePositions,\n  NewHandlesData,\n  UpdatePositions,\n  UpdatePositionTarget,\n  PassNewValue,\n  UpdatePositionsData,\n};\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(o=l[i="__coverage__"]||(l[i]={}))[A]&&o[A].hash===t?o[A]:(s.hash=t,o[A]=s)).s[0]++,Object.defineProperty(n,"__esModule",{value:!0})},"./src/plugin/View/view.test.ts":(e,n,A)=>{"use strict";var t,l,i,s,o,a,r=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\view.test.ts",l="59dccda6c198a1e031ada266166d31fecc7fb35e",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\view.test.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:15},end:{line:3,column:32}},2:{start:{line:4,column:0},end:{line:4,column:26}},3:{start:{line:5,column:0},end:{line:52,column:3}},4:{start:{line:7,column:21},end:{line:14,column:5}},5:{start:{line:15,column:19},end:{line:15,column:48}},6:{start:{line:16,column:4},end:{line:18,column:7}},7:{start:{line:17,column:8},end:{line:17,column:55}},8:{start:{line:17,column:37},end:{line:17,column:45}},9:{start:{line:19,column:4},end:{line:21,column:7}},10:{start:{line:20,column:8},end:{line:20,column:34}},11:{start:{line:22,column:4},end:{line:28,column:7}},12:{start:{line:23,column:8},end:{line:23,column:26}},13:{start:{line:24,column:8},end:{line:24,column:83}},14:{start:{line:25,column:8},end:{line:25,column:95}},15:{start:{line:26,column:8},end:{line:26,column:93}},16:{start:{line:27,column:8},end:{line:27,column:91}},17:{start:{line:29,column:4},end:{line:39,column:7}},18:{start:{line:30,column:8},end:{line:32,column:11}},19:{start:{line:33,column:8},end:{line:33,column:58}},20:{start:{line:34,column:8},end:{line:34,column:68}},21:{start:{line:35,column:8},end:{line:35,column:67}},22:{start:{line:36,column:8},end:{line:36,column:67}},23:{start:{line:37,column:8},end:{line:37,column:68}},24:{start:{line:38,column:8},end:{line:38,column:59}},25:{start:{line:40,column:4},end:{line:51,column:7}},26:{start:{line:41,column:8},end:{line:41,column:49}},27:{start:{line:42,column:8},end:{line:42,column:49}},28:{start:{line:43,column:8},end:{line:49,column:11}},29:{start:{line:50,column:8},end:{line:50,column:67}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:5,column:17},end:{line:5,column:18}},loc:{start:{line:5,column:23},end:{line:52,column:1}},line:5},1:{name:"(anonymous_1)",decl:{start:{line:16,column:15},end:{line:16,column:16}},loc:{start:{line:16,column:21},end:{line:18,column:5}},line:16},2:{name:"(anonymous_2)",decl:{start:{line:17,column:31},end:{line:17,column:32}},loc:{start:{line:17,column:37},end:{line:17,column:45}},line:17},3:{name:"(anonymous_3)",decl:{start:{line:19,column:29},end:{line:19,column:30}},loc:{start:{line:19,column:35},end:{line:21,column:5}},line:19},4:{name:"(anonymous_4)",decl:{start:{line:22,column:66},end:{line:22,column:67}},loc:{start:{line:22,column:72},end:{line:28,column:5}},line:22},5:{name:"(anonymous_5)",decl:{start:{line:29,column:45},end:{line:29,column:46}},loc:{start:{line:29,column:51},end:{line:39,column:5}},line:29},6:{name:"(anonymous_6)",decl:{start:{line:40,column:55},end:{line:40,column:56}},loc:{start:{line:40,column:61},end:{line:51,column:5}},line:40}},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\view.test.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\view.test.ts"],names:[],mappings:"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",sourcesContent:["import { BasicViewSettings } from './types';\nimport { View } from './View';\n\nrequire('jasmine-jquery');\n\ndescribe('View', () => {\n  let view: View;\n  const settings: BasicViewSettings = {\n    double: true,\n    handlesValues: true,\n    step: true,\n    valueScale: true,\n    vertical: true,\n    integer: true,\n  };\n  const target: HTMLDivElement = document.createElement('div');\n\n  beforeEach(() => {\n    view = new View(() => settings, target);\n  });\n\n  it('View can be create', () => {\n    expect(view).toBeTruthy();\n  });\n\n  it('updateSliderView() call plane changers to make vertical', () => {\n    view.updateView();\n    expect(view.slider.slider).toHaveClass('goby-slider__body_state_vertical');\n    expect(view.handles.fromValue).toHaveClass('goby-slider__handle-value_state_vertical');\n    expect(view.handles.toValue).toHaveClass('goby-slider__handle-value_state_vertical');\n    expect(view.valuesScale.minValue).toHaveClass('goby-slider__value_state_vertical');\n  });\n\n  it('refreshValueScale() work correctly', () => {\n    view.refreshValueScale({\n      min: '0', max: '10', 20: '2', 40: '4', 60: '6', 80: '8',\n    });\n    expect(view.valuesScale.minValue).toHaveText('0');\n    expect(view.valuesScale.twentyPercentValue).toHaveText('2');\n    expect(view.valuesScale.fortyPercentValue).toHaveText('4');\n    expect(view.valuesScale.sixtyPercentValue).toHaveText('6');\n    expect(view.valuesScale.eightyPercentValue).toHaveText('8');\n    expect(view.valuesScale.maxValue).toHaveText('10');\n  });\n\n  it('refreshHandleValues() refresh from correctly', () => {\n    document.body.append(view.slider.slider);\n    view.slider.slider.style.width = '100px';\n\n    view.refreshHandleValues({\n      value: 4,\n      minValue: 0,\n      target: 'from',\n      isToFixed: true,\n      totalValues: 10,\n    });\n\n    expect(view.handles.fromHandle.style.left).toEqual('40px');\n  });\n});\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[s="__coverage__"]||(i[s]={}))[t]&&a[t].hash===l?a[t]:(o.hash=l,a[t]=o));r.s[0]++,Object.defineProperty(n,"__esModule",{value:!0});const C=(r.s[1]++,A("./src/plugin/View/View.ts"));r.s[2]++,A("./node_modules/jasmine-jquery/lib/jasmine-jquery.js"),r.s[3]++,describe("View",(()=>{let e;r.f[0]++;const n=(r.s[4]++,{double:!0,handlesValues:!0,step:!0,valueScale:!0,vertical:!0,integer:!0}),A=(r.s[5]++,document.createElement("div"));r.s[6]++,beforeEach((()=>{r.f[1]++,r.s[7]++,e=new C.View((()=>(r.f[2]++,r.s[8]++,n)),A)})),r.s[9]++,it("View can be create",(()=>{r.f[3]++,r.s[10]++,expect(e).toBeTruthy()})),r.s[11]++,it("updateSliderView() call plane changers to make vertical",(()=>{r.f[4]++,r.s[12]++,e.updateView(),r.s[13]++,expect(e.slider.slider).toHaveClass("goby-slider__body_state_vertical"),r.s[14]++,expect(e.handles.fromValue).toHaveClass("goby-slider__handle-value_state_vertical"),r.s[15]++,expect(e.handles.toValue).toHaveClass("goby-slider__handle-value_state_vertical"),r.s[16]++,expect(e.valuesScale.minValue).toHaveClass("goby-slider__value_state_vertical")})),r.s[17]++,it("refreshValueScale() work correctly",(()=>{r.f[5]++,r.s[18]++,e.refreshValueScale({min:"0",max:"10",20:"2",40:"4",60:"6",80:"8"}),r.s[19]++,expect(e.valuesScale.minValue).toHaveText("0"),r.s[20]++,expect(e.valuesScale.twentyPercentValue).toHaveText("2"),r.s[21]++,expect(e.valuesScale.fortyPercentValue).toHaveText("4"),r.s[22]++,expect(e.valuesScale.sixtyPercentValue).toHaveText("6"),r.s[23]++,expect(e.valuesScale.eightyPercentValue).toHaveText("8"),r.s[24]++,expect(e.valuesScale.maxValue).toHaveText("10")})),r.s[25]++,it("refreshHandleValues() refresh from correctly",(()=>{r.f[6]++,r.s[26]++,document.body.append(e.slider.slider),r.s[27]++,e.slider.slider.style.width="100px",r.s[28]++,e.refreshHandleValues({value:4,minValue:0,target:"from",isToFixed:!0,totalValues:10}),r.s[29]++,expect(e.handles.fromHandle.style.left).toEqual("40px")}))}))},"./src/plugin/tools/index.test.ts":(e,n,A)=>{"use strict";var t,l,i,s,o,a,r=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\tools\\index.test.ts",l="491b8999bfa16e17b66bd583135c75a2b26b8619",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\tools\\index.test.ts",statementMap:{0:{start:{line:2,column:18},end:{line:2,column:63}},1:{start:{line:3,column:23},end:{line:3,column:72}},2:{start:{line:4,column:18},end:{line:4,column:62}},3:{start:{line:5,column:0},end:{line:5,column:36}},4:{start:{line:6,column:0},end:{line:6,column:46}},5:{start:{line:7,column:0},end:{line:7,column:36}},6:{start:{line:8,column:24},end:{line:8,column:65}},7:{start:{line:9,column:28},end:{line:9,column:73}},8:{start:{line:10,column:23},end:{line:10,column:63}},9:{start:{line:11,column:0},end:{line:11,column:48}},10:{start:{line:12,column:0},end:{line:12,column:56}},11:{start:{line:13,column:0},end:{line:13,column:46}}},fnMap:{},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0},f:{},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\tools\\index.test.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\tools\\index.test.ts"],names:[],mappings:";AAAA,MAAM,SAAS,GAAG,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAChE,MAAM,cAAc,GAAG,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AACzE,MAAM,SAAS,GAAG,OAAO,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAE/D,SAAS,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AACpC,cAAc,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;AAC9C,SAAS,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AAEpC,MAAM,eAAe,GAAG,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;AAClE,MAAM,mBAAmB,GAAG,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;AAC1E,MAAM,cAAc,GAAG,OAAO,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;AAEhE,eAAe,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;AAChD,mBAAmB,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;AACxD,cAAc,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC",sourcesContent:["const modelTest = require.context('../Model', true, /test.ts$/);\nconst presenterTests = require.context('../Presenter', true, /test.ts$/);\nconst viewTests = require.context('../View', true, /test.ts$/);\n\nmodelTest.keys().forEach(modelTest);\npresenterTests.keys().forEach(presenterTests);\nviewTests.keys().forEach(viewTests);\n\nconst modelComponents = require.context('../Model', true, /.ts$/);\nconst presenterComponents = require.context('../Presenter', true, /.ts$/);\nconst viewComponents = require.context('../View', true, /.ts$/);\n\nmodelComponents.keys().forEach(modelComponents);\npresenterComponents.keys().forEach(presenterComponents);\nviewComponents.keys().forEach(viewComponents);\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[s="__coverage__"]||(i[s]={}))[t]&&a[t].hash===l?a[t]:(o.hash=l,a[t]=o));const C=(r.s[0]++,A("./src/plugin/Model sync recursive test.ts$")),c=(r.s[1]++,A("./src/plugin/Presenter sync recursive test.ts$")),u=(r.s[2]++,A("./src/plugin/View sync recursive test.ts$"));r.s[3]++,C.keys().forEach(C),r.s[4]++,c.keys().forEach(c),r.s[5]++,u.keys().forEach(u);const d=(r.s[6]++,A("./src/plugin/Model sync recursive .ts$")),m=(r.s[7]++,A("./src/plugin/Presenter sync recursive .ts$")),p=(r.s[8]++,A("./src/plugin/View sync recursive .ts$"));r.s[9]++,d.keys().forEach(d),r.s[10]++,m.keys().forEach(m),r.s[11]++,p.keys().forEach(p)},"./node_modules/jasmine-jquery/lib/jasmine-jquery.js":(e,n,A)=>{var t,l;t=function(){return this}(),l=function(e,n,A){"use strict";n.spiedEventsKey=function(e,n){return[A(e).selector,n].toString()},n.getFixtures=function(){return n.currentFixtures_=n.currentFixtures_||new n.Fixtures},n.getStyleFixtures=function(){return n.currentStyleFixtures_=n.currentStyleFixtures_||new n.StyleFixtures},n.Fixtures=function(){this.containerId="jasmine-fixtures",this.fixturesCache_={},this.fixturesPath="spec/javascripts/fixtures"},n.Fixtures.prototype.set=function(e){return this.cleanUp(),this.createContainer_(e)},n.Fixtures.prototype.appendSet=function(e){this.addToContainer_(e)},n.Fixtures.prototype.preload=function(){this.read.apply(this,arguments)},n.Fixtures.prototype.load=function(){this.cleanUp(),this.createContainer_(this.read.apply(this,arguments))},n.Fixtures.prototype.appendLoad=function(){this.addToContainer_(this.read.apply(this,arguments))},n.Fixtures.prototype.read=function(){for(var e=[],n=arguments,A=n.length,t=0;t<A;t++)e.push(this.getFixtureHtml_(n[t]));return e.join("")},n.Fixtures.prototype.clearCache=function(){this.fixturesCache_={}},n.Fixtures.prototype.cleanUp=function(){A("#"+this.containerId).remove()},n.Fixtures.prototype.sandbox=function(e){var n=e||{};return A('<div id="sandbox" />').attr(n)},n.Fixtures.prototype.createContainer_=function(e){var n=A("<div>").attr("id",this.containerId).html(e);return A(document.body).append(n),n},n.Fixtures.prototype.addToContainer_=function(e){A(document.body).find("#"+this.containerId).append(e).length||this.createContainer_(e)},n.Fixtures.prototype.getFixtureHtml_=function(e){return void 0===this.fixturesCache_[e]&&this.loadFixtureIntoCache_(e),this.fixturesCache_[e]},n.Fixtures.prototype.loadFixtureIntoCache_=function(e){var n=this.makeFixtureUrl_(e),t="";A.ajax({async:!1,cache:!1,url:n,dataType:"html",success:function(e,n,A){t=A.responseText}}).fail((function(e,A,t){throw new Error("Fixture could not be loaded: "+n+" (status: "+A+", message: "+t.message+")")})),(A(A.parseHTML(t,!0)).find("script[src]")||[]).each((function(){A.ajax({async:!1,cache:!1,dataType:"script",url:A(this).attr("src"),success:function(e,n,A){t+="<script>"+A.responseText+"<\/script>"},error:function(e,A,t){throw new Error("Script could not be loaded: "+n+" (status: "+A+", message: "+t.message+")")}})})),this.fixturesCache_[e]=t},n.Fixtures.prototype.makeFixtureUrl_=function(e){return this.fixturesPath.match("/$")?this.fixturesPath+e:this.fixturesPath+"/"+e},n.Fixtures.prototype.proxyCallTo_=function(e,n){return this[e].apply(this,n)},n.StyleFixtures=function(){this.fixturesCache_={},this.fixturesNodes_=[],this.fixturesPath="spec/javascripts/fixtures"},n.StyleFixtures.prototype.set=function(e){this.cleanUp(),this.createStyle_(e)},n.StyleFixtures.prototype.appendSet=function(e){this.createStyle_(e)},n.StyleFixtures.prototype.preload=function(){this.read_.apply(this,arguments)},n.StyleFixtures.prototype.load=function(){this.cleanUp(),this.createStyle_(this.read_.apply(this,arguments))},n.StyleFixtures.prototype.appendLoad=function(){this.createStyle_(this.read_.apply(this,arguments))},n.StyleFixtures.prototype.cleanUp=function(){for(;this.fixturesNodes_.length;)this.fixturesNodes_.pop().remove()},n.StyleFixtures.prototype.createStyle_=function(e){var n=A("<div></div>").html(e).text(),t=A("<style>"+n+"</style>");this.fixturesNodes_.push(t),A("head").append(t)},n.StyleFixtures.prototype.clearCache=n.Fixtures.prototype.clearCache,n.StyleFixtures.prototype.read_=n.Fixtures.prototype.read,n.StyleFixtures.prototype.getFixtureHtml_=n.Fixtures.prototype.getFixtureHtml_,n.StyleFixtures.prototype.loadFixtureIntoCache_=n.Fixtures.prototype.loadFixtureIntoCache_,n.StyleFixtures.prototype.makeFixtureUrl_=n.Fixtures.prototype.makeFixtureUrl_,n.StyleFixtures.prototype.proxyCallTo_=n.Fixtures.prototype.proxyCallTo_,n.getJSONFixtures=function(){return n.currentJSONFixtures_=n.currentJSONFixtures_||new n.JSONFixtures},n.JSONFixtures=function(){this.fixturesCache_={},this.fixturesPath="spec/javascripts/fixtures/json"},n.JSONFixtures.prototype.load=function(){return this.read.apply(this,arguments),this.fixturesCache_},n.JSONFixtures.prototype.read=function(){for(var e=arguments,n=e.length,A=0;A<n;A++)this.getFixtureData_(e[A]);return this.fixturesCache_},n.JSONFixtures.prototype.clearCache=function(){this.fixturesCache_={}},n.JSONFixtures.prototype.getFixtureData_=function(e){return this.fixturesCache_[e]||this.loadFixtureIntoCache_(e),this.fixturesCache_[e]},n.JSONFixtures.prototype.loadFixtureIntoCache_=function(e){var n=this,t=this.fixturesPath.match("/$")?this.fixturesPath+e:this.fixturesPath+"/"+e;A.ajax({async:!1,cache:!1,dataType:"json",url:t,success:function(A){n.fixturesCache_[e]=A},error:function(e,n,A){throw new Error("JSONFixture could not be loaded: "+t+" (status: "+n+", message: "+A.message+")")}})},n.JSONFixtures.prototype.proxyCallTo_=function(e,n){return this[e].apply(this,n)},n.jQuery=function(){},n.jQuery.browserTagCaseIndependentHtml=function(e){return A("<div/>").append(e).html()},n.jQuery.elementToString=function(e){return A(e).map((function(){return this.outerHTML})).toArray().join(", ")};var t={spiedEvents:{},handlers:[]};n.jQuery.events={spyOn:function(e,l){var i=function(A){var i=void 0!==t.spiedEvents[n.spiedEventsKey(e,l)]?t.spiedEvents[n.spiedEventsKey(e,l)].calls:0;t.spiedEvents[n.spiedEventsKey(e,l)]={args:n.util.argsToArray(arguments),calls:++i}};return A(e).on(l,i),t.handlers.push(i),{selector:e,eventName:l,handler:i,reset:function(){delete t.spiedEvents[n.spiedEventsKey(e,l)]},calls:{count:function(){return t.spiedEvents[n.spiedEventsKey(e,l)]?t.spiedEvents[n.spiedEventsKey(e,l)].calls:0},any:function(){return!!t.spiedEvents[n.spiedEventsKey(e,l)]&&!!t.spiedEvents[n.spiedEventsKey(e,l)].calls}}}},args:function(e,A){var l=t.spiedEvents[n.spiedEventsKey(e,A)].args;if(!l)throw"There is no spy for "+A+" on "+e.toString()+". Make sure to create a spy using spyOnEvent.";return l},wasTriggered:function(e,A){return!!t.spiedEvents[n.spiedEventsKey(e,A)]},wasTriggeredWith:function(e,A,t,l,i){var s=n.jQuery.events.args(e,A).slice(1);return"[object Array]"!==Object.prototype.toString.call(t)&&(s=s[0]),l.equals(s,t,i)},wasPrevented:function(e,A){var l=t.spiedEvents[n.spiedEventsKey(e,A)],i=n.util.isUndefined(l)?{}:l.args,s=i?i[0]:void 0;return s&&s.isDefaultPrevented()},wasStopped:function(e,A){var l=t.spiedEvents[n.spiedEventsKey(e,A)],i=n.util.isUndefined(l)?{}:l.args,s=i?i[0]:void 0;return s&&s.isPropagationStopped()},cleanUp:function(){t.spiedEvents={},t.handlers=[]}};var l=function(e,n){return void 0===n?void 0!==e:e===n};beforeEach((function(){n.addMatchers({toHaveClass:function(){return{compare:function(e,n){return{pass:A(e).hasClass(n)}}}},toHaveCss:function(){return{compare:function(e,n){for(var t in n){var l=n[t];if(("auto"!==l||"auto"!==A(e).get(0).style[t])&&A(e).css(t)!==l)return{pass:!1}}return{pass:!0}}}},toBeVisible:function(){return{compare:function(e){return{pass:A(e).is(":visible")}}}},toBeHidden:function(){return{compare:function(e){return{pass:A(e).is(":hidden")}}}},toBeSelected:function(){return{compare:function(e){return{pass:A(e).is(":selected")}}}},toBeChecked:function(){return{compare:function(e){return{pass:A(e).is(":checked")}}}},toBeEmpty:function(){return{compare:function(e){return{pass:A(e).is(":empty")}}}},toBeInDOM:function(){return{compare:function(e){return{pass:A.contains(document.documentElement,A(e)[0])}}}},toExist:function(){return{compare:function(e){return{pass:A(e).length}}}},toHaveLength:function(){return{compare:function(e,n){return{pass:A(e).length===n}}}},toHaveAttr:function(){return{compare:function(e,n,t){return{pass:l(A(e).attr(n),t)}}}},toHaveProp:function(){return{compare:function(e,n,t){return{pass:l(A(e).prop(n),t)}}}},toHaveId:function(){return{compare:function(e,n){return{pass:A(e).attr("id")==n}}}},toHaveHtml:function(){return{compare:function(e,t){return{pass:A(e).html()==n.jQuery.browserTagCaseIndependentHtml(t)}}}},toContainHtml:function(){return{compare:function(e,t){var l=A(e).html(),i=n.jQuery.browserTagCaseIndependentHtml(t);return{pass:l.indexOf(i)>=0}}}},toHaveText:function(){return{compare:function(e,n){var t=A(e).text(),l=A.trim(t);return n&&A.isFunction(n.test)?{pass:n.test(t)||n.test(l)}:{pass:t==n||l==n}}}},toContainText:function(){return{compare:function(e,n){var t=A.trim(A(e).text());return n&&A.isFunction(n.test)?{pass:n.test(t)}:{pass:-1!=t.indexOf(n)}}}},toHaveValue:function(){return{compare:function(e,n){return{pass:A(e).val()===n}}}},toHaveData:function(){return{compare:function(e,n,t){return{pass:l(A(e).data(n),t)}}}},toContainElement:function(){return{compare:function(e,n){return{pass:A(e).find(n).length}}}},toBeMatchedBy:function(){return{compare:function(e,n){return{pass:A(e).filter(n).length}}}},toBeDisabled:function(){return{compare:function(e,n){return{pass:A(e).is(":disabled")}}}},toBeFocused:function(e){return{compare:function(e,n){return{pass:A(e)[0]===A(e)[0].ownerDocument.activeElement}}}},toHandle:function(){return{compare:function(e,n){if(!e||0===e.length)return{pass:!1};var t=A._data(A(e).get(0),"events");if(!t||!n||"string"!=typeof n)return{pass:!1};var l=n.split("."),i=l.shift(),s=l.slice(0).sort(),o=new RegExp("(^|\\.)"+s.join("\\.(?:.*\\.)?")+"(\\.|$)");if(!t[i]||!l.length)return{pass:t[i]&&t[i].length>0};for(var a=0;a<t[i].length;a++){var r=t[i][a].namespace;if(o.test(r))return{pass:!0}}return{pass:!1}}}},toHandleWith:function(){return{compare:function(e,n,t){if(!e||0===e.length)return{pass:!1};for(var l=n.split(".")[0],i=A._data(A(e).get(0),"events")[l],s=0;s<i.length;s++)if(i[s].handler==t)return{pass:!0};return{pass:!1}}}},toHaveBeenTriggeredOn:function(){return{compare:function(e,t){var l={pass:n.jQuery.events.wasTriggered(t,e)};return l.message=l.pass?"Expected event "+A(e)+" not to have been triggered on "+t:"Expected event "+A(e)+" to have been triggered on "+t,l}}},toHaveBeenTriggered:function(){return{compare:function(e){var A=e.eventName,t=e.selector,l={pass:n.jQuery.events.wasTriggered(t,A)};return l.message=l.pass?"Expected event "+A+" not to have been triggered on "+t:"Expected event "+A+" to have been triggered on "+t,l}}},toHaveBeenTriggeredOnAndWith:function(e,A){return{compare:function(t,l,i){var s=n.jQuery.events.wasTriggered(l,t),o={pass:s&&n.jQuery.events.wasTriggeredWith(l,t,i,e,A)};if(s){var a=n.jQuery.events.args(l,t,i)[1];o.message=o.pass?"Expected event "+t+" not to have been triggered with "+n.pp(i)+" but it was triggered with "+n.pp(a):"Expected event "+t+" to have been triggered with "+n.pp(i)+"  but it was triggered with "+n.pp(a)}else o.message=o.pass?"Expected event "+t+" not to have been triggered on "+l:"Expected event "+t+" to have been triggered on "+l;return o}}},toHaveBeenPreventedOn:function(){return{compare:function(e,A){var t={pass:n.jQuery.events.wasPrevented(A,e)};return t.message=t.pass?"Expected event "+e+" not to have been prevented on "+A:"Expected event "+e+" to have been prevented on "+A,t}}},toHaveBeenPrevented:function(){return{compare:function(e){var A=e.eventName,t=e.selector,l={pass:n.jQuery.events.wasPrevented(t,A)};return l.message=l.pass?"Expected event "+A+" not to have been prevented on "+t:"Expected event "+A+" to have been prevented on "+t,l}}},toHaveBeenStoppedOn:function(){return{compare:function(e,A){var t={pass:n.jQuery.events.wasStopped(A,e)};return t.message=t.pass?"Expected event "+e+" not to have been stopped on "+A:"Expected event "+e+" to have been stopped on "+A,t}}},toHaveBeenStopped:function(){return{compare:function(e){var A=e.eventName,t=e.selector,l={pass:n.jQuery.events.wasStopped(t,A)};return l.message=l.pass?"Expected event "+A+" not to have been stopped on "+t:"Expected event "+A+" to have been stopped on "+t,l}}}}),n.getEnv().addCustomEqualityTester((function(e,t){if(e&&t){if(e instanceof A||n.isDomNode(e)){var l=A(e);return t instanceof A?l.length==t.length&&e.is(t):l.is(t)}if(t instanceof A||n.isDomNode(t)){var i=A(t);return e instanceof A?e.length==i.length&&i.is(e):A(t).is(e)}}})),n.getEnv().addCustomEqualityTester((function(e,n){if(e instanceof A&&n instanceof A&&e.size()==n.size())return e.is(n)}))})),afterEach((function(){n.getFixtures().cleanUp(),n.getStyleFixtures().cleanUp(),n.jQuery.events.cleanUp()})),e.readFixtures=function(){return n.getFixtures().proxyCallTo_("read",arguments)},e.preloadFixtures=function(){n.getFixtures().proxyCallTo_("preload",arguments)},e.loadFixtures=function(){n.getFixtures().proxyCallTo_("load",arguments)},e.appendLoadFixtures=function(){n.getFixtures().proxyCallTo_("appendLoad",arguments)},e.setFixtures=function(e){return n.getFixtures().proxyCallTo_("set",arguments)},e.appendSetFixtures=function(){n.getFixtures().proxyCallTo_("appendSet",arguments)},e.sandbox=function(e){return n.getFixtures().sandbox(e)},e.spyOnEvent=function(e,A){return n.jQuery.events.spyOn(e,A)},e.preloadStyleFixtures=function(){n.getStyleFixtures().proxyCallTo_("preload",arguments)},e.loadStyleFixtures=function(){n.getStyleFixtures().proxyCallTo_("load",arguments)},e.appendLoadStyleFixtures=function(){n.getStyleFixtures().proxyCallTo_("appendLoad",arguments)},e.setStyleFixtures=function(e){n.getStyleFixtures().proxyCallTo_("set",arguments)},e.appendSetStyleFixtures=function(e){n.getStyleFixtures().proxyCallTo_("appendSet",arguments)},e.loadJSONFixtures=function(){return n.getJSONFixtures().proxyCallTo_("load",arguments)},e.getJSONFixture=function(e){return n.getJSONFixtures().proxyCallTo_("read",arguments)[e]}},e.exports?l(t,t.jasmine,A("./node_modules/jquery/dist/jquery.js")):l(t,t.jasmine,t.jQuery)},"./node_modules/jquery/dist/jquery.js":function(e,n){var A;!function(n,A){"use strict";"object"==typeof e.exports?e.exports=n.document?A(n,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return A(e)}:A(n)}("undefined"!=typeof window?window:this,(function(t,l){"use strict";var i=[],s=Object.getPrototypeOf,o=i.slice,a=i.flat?function(e){return i.flat.call(e)}:function(e){return i.concat.apply([],e)},r=i.push,C=i.indexOf,c={},u=c.toString,d=c.hasOwnProperty,m=d.toString,p=m.call(Object),f={},h=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},v=function(e){return null!=e&&e===e.window},E=t.document,g={type:!0,src:!0,nonce:!0,noModule:!0};function y(e,n,A){var t,l,i=(A=A||E).createElement("script");if(i.text=e,n)for(t in g)(l=n[t]||n.getAttribute&&n.getAttribute(t))&&i.setAttribute(t,l);A.head.appendChild(i).parentNode.removeChild(i)}function I(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?c[u.call(e)]||"object":typeof e}var M="3.6.0",b=function(e,n){return new b.fn.init(e,n)};function B(e){var n=!!e&&"length"in e&&e.length,A=I(e);return!h(e)&&!v(e)&&("array"===A||0===n||"number"==typeof n&&n>0&&n-1 in e)}b.fn=b.prototype={jquery:M,constructor:b,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var n=b.merge(this.constructor(),e);return n.prevObject=this,n},each:function(e){return b.each(this,e)},map:function(e){return this.pushStack(b.map(this,(function(n,A){return e.call(n,A,n)})))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(b.grep(this,(function(e,n){return(n+1)%2})))},odd:function(){return this.pushStack(b.grep(this,(function(e,n){return n%2})))},eq:function(e){var n=this.length,A=+e+(e<0?n:0);return this.pushStack(A>=0&&A<n?[this[A]]:[])},end:function(){return this.prevObject||this.constructor()},push:r,sort:i.sort,splice:i.splice},b.extend=b.fn.extend=function(){var e,n,A,t,l,i,s=arguments[0]||{},o=1,a=arguments.length,r=!1;for("boolean"==typeof s&&(r=s,s=arguments[o]||{},o++),"object"==typeof s||h(s)||(s={}),o===a&&(s=this,o--);o<a;o++)if(null!=(e=arguments[o]))for(n in e)t=e[n],"__proto__"!==n&&s!==t&&(r&&t&&(b.isPlainObject(t)||(l=Array.isArray(t)))?(A=s[n],i=l&&!Array.isArray(A)?[]:l||b.isPlainObject(A)?A:{},l=!1,s[n]=b.extend(r,i,t)):void 0!==t&&(s[n]=t));return s},b.extend({expando:"jQuery"+(M+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var n,A;return!(!e||"[object Object]"!==u.call(e))&&(!(n=s(e))||"function"==typeof(A=d.call(n,"constructor")&&n.constructor)&&m.call(A)===p)},isEmptyObject:function(e){var n;for(n in e)return!1;return!0},globalEval:function(e,n,A){y(e,{nonce:n&&n.nonce},A)},each:function(e,n){var A,t=0;if(B(e))for(A=e.length;t<A&&!1!==n.call(e[t],t,e[t]);t++);else for(t in e)if(!1===n.call(e[t],t,e[t]))break;return e},makeArray:function(e,n){var A=n||[];return null!=e&&(B(Object(e))?b.merge(A,"string"==typeof e?[e]:e):r.call(A,e)),A},inArray:function(e,n,A){return null==n?-1:C.call(n,e,A)},merge:function(e,n){for(var A=+n.length,t=0,l=e.length;t<A;t++)e[l++]=n[t];return e.length=l,e},grep:function(e,n,A){for(var t=[],l=0,i=e.length,s=!A;l<i;l++)!n(e[l],l)!==s&&t.push(e[l]);return t},map:function(e,n,A){var t,l,i=0,s=[];if(B(e))for(t=e.length;i<t;i++)null!=(l=n(e[i],i,A))&&s.push(l);else for(i in e)null!=(l=n(e[i],i,A))&&s.push(l);return a(s)},guid:1,support:f}),"function"==typeof Symbol&&(b.fn[Symbol.iterator]=i[Symbol.iterator]),b.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,n){c["[object "+n+"]"]=n.toLowerCase()}));var x=function(e){var n,A,t,l,i,s,o,a,r,C,c,u,d,m,p,f,h,v,E,g="sizzle"+1*new Date,y=e.document,I=0,M=0,b=ae(),B=ae(),x=ae(),S=ae(),Q=function(e,n){return e===n&&(c=!0),0},_={}.hasOwnProperty,w=[],V=w.pop,G=w.push,O=w.push,D=w.slice,T=function(e,n){for(var A=0,t=e.length;A<t;A++)if(e[A]===n)return A;return-1},W="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",H="[\\x20\\t\\r\\n\\f]",k="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",P="\\[[\\x20\\t\\r\\n\\f]*("+k+")(?:"+H+"*([*^$|!~]?=)"+H+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+k+"))|)"+H+"*\\]",K=":("+k+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+P+")*)|.*)\\)|)",U=new RegExp(H+"+","g"),F=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),N=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),Y=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),L=new RegExp(H+"|>"),j=new RegExp(K),q=new RegExp("^"+k+"$"),$={ID:new RegExp("^#("+k+")"),CLASS:new RegExp("^\\.("+k+")"),TAG:new RegExp("^("+k+"|[*])"),ATTR:new RegExp("^"+P),PSEUDO:new RegExp("^"+K),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+W+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},R=/HTML$/i,z=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,ne=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),Ae=function(e,n){var A="0x"+e.slice(1)-65536;return n||(A<0?String.fromCharCode(A+65536):String.fromCharCode(A>>10|55296,1023&A|56320))},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,le=function(e,n){return n?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){u()},se=ge((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{O.apply(w=D.call(y.childNodes),y.childNodes),w[y.childNodes.length].nodeType}catch(e){O={apply:w.length?function(e,n){G.apply(e,D.call(n))}:function(e,n){for(var A=e.length,t=0;e[A++]=n[t++];);e.length=A-1}}}function oe(e,n,t,l){var i,o,r,C,c,m,h,v=n&&n.ownerDocument,y=n?n.nodeType:9;if(t=t||[],"string"!=typeof e||!e||1!==y&&9!==y&&11!==y)return t;if(!l&&(u(n),n=n||d,p)){if(11!==y&&(c=J.exec(e)))if(i=c[1]){if(9===y){if(!(r=n.getElementById(i)))return t;if(r.id===i)return t.push(r),t}else if(v&&(r=v.getElementById(i))&&E(n,r)&&r.id===i)return t.push(r),t}else{if(c[2])return O.apply(t,n.getElementsByTagName(e)),t;if((i=c[3])&&A.getElementsByClassName&&n.getElementsByClassName)return O.apply(t,n.getElementsByClassName(i)),t}if(A.qsa&&!S[e+" "]&&(!f||!f.test(e))&&(1!==y||"object"!==n.nodeName.toLowerCase())){if(h=e,v=n,1===y&&(L.test(e)||Y.test(e))){for((v=ee.test(e)&&he(n.parentNode)||n)===n&&A.scope||((C=n.getAttribute("id"))?C=C.replace(te,le):n.setAttribute("id",C=g)),o=(m=s(e)).length;o--;)m[o]=(C?"#"+C:":scope")+" "+Ee(m[o]);h=m.join(",")}try{return O.apply(t,v.querySelectorAll(h)),t}catch(n){S(e,!0)}finally{C===g&&n.removeAttribute("id")}}}return a(e.replace(F,"$1"),n,t,l)}function ae(){var e=[];return function n(A,l){return e.push(A+" ")>t.cacheLength&&delete n[e.shift()],n[A+" "]=l}}function re(e){return e[g]=!0,e}function Ce(e){var n=d.createElement("fieldset");try{return!!e(n)}catch(e){return!1}finally{n.parentNode&&n.parentNode.removeChild(n),n=null}}function ce(e,n){for(var A=e.split("|"),l=A.length;l--;)t.attrHandle[A[l]]=n}function ue(e,n){var A=n&&e,t=A&&1===e.nodeType&&1===n.nodeType&&e.sourceIndex-n.sourceIndex;if(t)return t;if(A)for(;A=A.nextSibling;)if(A===n)return-1;return e?1:-1}function de(e){return function(n){return"input"===n.nodeName.toLowerCase()&&n.type===e}}function me(e){return function(n){var A=n.nodeName.toLowerCase();return("input"===A||"button"===A)&&n.type===e}}function pe(e){return function(n){return"form"in n?n.parentNode&&!1===n.disabled?"label"in n?"label"in n.parentNode?n.parentNode.disabled===e:n.disabled===e:n.isDisabled===e||n.isDisabled!==!e&&se(n)===e:n.disabled===e:"label"in n&&n.disabled===e}}function fe(e){return re((function(n){return n=+n,re((function(A,t){for(var l,i=e([],A.length,n),s=i.length;s--;)A[l=i[s]]&&(A[l]=!(t[l]=A[l]))}))}))}function he(e){return e&&void 0!==e.getElementsByTagName&&e}for(n in A=oe.support={},i=oe.isXML=function(e){var n=e&&e.namespaceURI,A=e&&(e.ownerDocument||e).documentElement;return!R.test(n||A&&A.nodeName||"HTML")},u=oe.setDocument=function(e){var n,l,s=e?e.ownerDocument||e:y;return s!=d&&9===s.nodeType&&s.documentElement?(m=(d=s).documentElement,p=!i(d),y!=d&&(l=d.defaultView)&&l.top!==l&&(l.addEventListener?l.addEventListener("unload",ie,!1):l.attachEvent&&l.attachEvent("onunload",ie)),A.scope=Ce((function(e){return m.appendChild(e).appendChild(d.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),A.attributes=Ce((function(e){return e.className="i",!e.getAttribute("className")})),A.getElementsByTagName=Ce((function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length})),A.getElementsByClassName=Z.test(d.getElementsByClassName),A.getById=Ce((function(e){return m.appendChild(e).id=g,!d.getElementsByName||!d.getElementsByName(g).length})),A.getById?(t.filter.ID=function(e){var n=e.replace(ne,Ae);return function(e){return e.getAttribute("id")===n}},t.find.ID=function(e,n){if(void 0!==n.getElementById&&p){var A=n.getElementById(e);return A?[A]:[]}}):(t.filter.ID=function(e){var n=e.replace(ne,Ae);return function(e){var A=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return A&&A.value===n}},t.find.ID=function(e,n){if(void 0!==n.getElementById&&p){var A,t,l,i=n.getElementById(e);if(i){if((A=i.getAttributeNode("id"))&&A.value===e)return[i];for(l=n.getElementsByName(e),t=0;i=l[t++];)if((A=i.getAttributeNode("id"))&&A.value===e)return[i]}return[]}}),t.find.TAG=A.getElementsByTagName?function(e,n){return void 0!==n.getElementsByTagName?n.getElementsByTagName(e):A.qsa?n.querySelectorAll(e):void 0}:function(e,n){var A,t=[],l=0,i=n.getElementsByTagName(e);if("*"===e){for(;A=i[l++];)1===A.nodeType&&t.push(A);return t}return i},t.find.CLASS=A.getElementsByClassName&&function(e,n){if(void 0!==n.getElementsByClassName&&p)return n.getElementsByClassName(e)},h=[],f=[],(A.qsa=Z.test(d.querySelectorAll))&&(Ce((function(e){var n;m.appendChild(e).innerHTML="<a id='"+g+"'></a><select id='"+g+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&f.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll("[selected]").length||f.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+W+")"),e.querySelectorAll("[id~="+g+"-]").length||f.push("~="),(n=d.createElement("input")).setAttribute("name",""),e.appendChild(n),e.querySelectorAll("[name='']").length||f.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll(":checked").length||f.push(":checked"),e.querySelectorAll("a#"+g+"+*").length||f.push(".#.+[+~]"),e.querySelectorAll("\\\f"),f.push("[\\r\\n\\f]")})),Ce((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var n=d.createElement("input");n.setAttribute("type","hidden"),e.appendChild(n).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&f.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&f.push(":enabled",":disabled"),m.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&f.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),f.push(",.*:")}))),(A.matchesSelector=Z.test(v=m.matches||m.webkitMatchesSelector||m.mozMatchesSelector||m.oMatchesSelector||m.msMatchesSelector))&&Ce((function(e){A.disconnectedMatch=v.call(e,"*"),v.call(e,"[s!='']:x"),h.push("!=",K)})),f=f.length&&new RegExp(f.join("|")),h=h.length&&new RegExp(h.join("|")),n=Z.test(m.compareDocumentPosition),E=n||Z.test(m.contains)?function(e,n){var A=9===e.nodeType?e.documentElement:e,t=n&&n.parentNode;return e===t||!(!t||1!==t.nodeType||!(A.contains?A.contains(t):e.compareDocumentPosition&&16&e.compareDocumentPosition(t)))}:function(e,n){if(n)for(;n=n.parentNode;)if(n===e)return!0;return!1},Q=n?function(e,n){if(e===n)return c=!0,0;var t=!e.compareDocumentPosition-!n.compareDocumentPosition;return t||(1&(t=(e.ownerDocument||e)==(n.ownerDocument||n)?e.compareDocumentPosition(n):1)||!A.sortDetached&&n.compareDocumentPosition(e)===t?e==d||e.ownerDocument==y&&E(y,e)?-1:n==d||n.ownerDocument==y&&E(y,n)?1:C?T(C,e)-T(C,n):0:4&t?-1:1)}:function(e,n){if(e===n)return c=!0,0;var A,t=0,l=e.parentNode,i=n.parentNode,s=[e],o=[n];if(!l||!i)return e==d?-1:n==d?1:l?-1:i?1:C?T(C,e)-T(C,n):0;if(l===i)return ue(e,n);for(A=e;A=A.parentNode;)s.unshift(A);for(A=n;A=A.parentNode;)o.unshift(A);for(;s[t]===o[t];)t++;return t?ue(s[t],o[t]):s[t]==y?-1:o[t]==y?1:0},d):d},oe.matches=function(e,n){return oe(e,null,null,n)},oe.matchesSelector=function(e,n){if(u(e),A.matchesSelector&&p&&!S[n+" "]&&(!h||!h.test(n))&&(!f||!f.test(n)))try{var t=v.call(e,n);if(t||A.disconnectedMatch||e.document&&11!==e.document.nodeType)return t}catch(e){S(n,!0)}return oe(n,d,null,[e]).length>0},oe.contains=function(e,n){return(e.ownerDocument||e)!=d&&u(e),E(e,n)},oe.attr=function(e,n){(e.ownerDocument||e)!=d&&u(e);var l=t.attrHandle[n.toLowerCase()],i=l&&_.call(t.attrHandle,n.toLowerCase())?l(e,n,!p):void 0;return void 0!==i?i:A.attributes||!p?e.getAttribute(n):(i=e.getAttributeNode(n))&&i.specified?i.value:null},oe.escape=function(e){return(e+"").replace(te,le)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var n,t=[],l=0,i=0;if(c=!A.detectDuplicates,C=!A.sortStable&&e.slice(0),e.sort(Q),c){for(;n=e[i++];)n===e[i]&&(l=t.push(i));for(;l--;)e.splice(t[l],1)}return C=null,e},l=oe.getText=function(e){var n,A="",t=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)A+=l(e)}else if(3===i||4===i)return e.nodeValue}else for(;n=e[t++];)A+=l(n);return A},t=oe.selectors={cacheLength:50,createPseudo:re,match:$,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ne,Ae),e[3]=(e[3]||e[4]||e[5]||"").replace(ne,Ae),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var n,A=!e[6]&&e[2];return $.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":A&&j.test(A)&&(n=s(A,!0))&&(n=A.indexOf(")",A.length-n)-A.length)&&(e[0]=e[0].slice(0,n),e[2]=A.slice(0,n)),e.slice(0,3))}},filter:{TAG:function(e){var n=e.replace(ne,Ae).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===n}},CLASS:function(e){var n=b[e+" "];return n||(n=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+e+"("+H+"|$)"))&&b(e,(function(e){return n.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,n,A){return function(t){var l=oe.attr(t,e);return null==l?"!="===n:!n||(l+="","="===n?l===A:"!="===n?l!==A:"^="===n?A&&0===l.indexOf(A):"*="===n?A&&l.indexOf(A)>-1:"$="===n?A&&l.slice(-A.length)===A:"~="===n?(" "+l.replace(U," ")+" ").indexOf(A)>-1:"|="===n&&(l===A||l.slice(0,A.length+1)===A+"-"))}},CHILD:function(e,n,A,t,l){var i="nth"!==e.slice(0,3),s="last"!==e.slice(-4),o="of-type"===n;return 1===t&&0===l?function(e){return!!e.parentNode}:function(n,A,a){var r,C,c,u,d,m,p=i!==s?"nextSibling":"previousSibling",f=n.parentNode,h=o&&n.nodeName.toLowerCase(),v=!a&&!o,E=!1;if(f){if(i){for(;p;){for(u=n;u=u[p];)if(o?u.nodeName.toLowerCase()===h:1===u.nodeType)return!1;m=p="only"===e&&!m&&"nextSibling"}return!0}if(m=[s?f.firstChild:f.lastChild],s&&v){for(E=(d=(r=(C=(c=(u=f)[g]||(u[g]={}))[u.uniqueID]||(c[u.uniqueID]={}))[e]||[])[0]===I&&r[1])&&r[2],u=d&&f.childNodes[d];u=++d&&u&&u[p]||(E=d=0)||m.pop();)if(1===u.nodeType&&++E&&u===n){C[e]=[I,d,E];break}}else if(v&&(E=d=(r=(C=(c=(u=n)[g]||(u[g]={}))[u.uniqueID]||(c[u.uniqueID]={}))[e]||[])[0]===I&&r[1]),!1===E)for(;(u=++d&&u&&u[p]||(E=d=0)||m.pop())&&((o?u.nodeName.toLowerCase()!==h:1!==u.nodeType)||!++E||(v&&((C=(c=u[g]||(u[g]={}))[u.uniqueID]||(c[u.uniqueID]={}))[e]=[I,E]),u!==n)););return(E-=l)===t||E%t==0&&E/t>=0}}},PSEUDO:function(e,n){var A,l=t.pseudos[e]||t.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return l[g]?l(n):l.length>1?(A=[e,e,"",n],t.setFilters.hasOwnProperty(e.toLowerCase())?re((function(e,A){for(var t,i=l(e,n),s=i.length;s--;)e[t=T(e,i[s])]=!(A[t]=i[s])})):function(e){return l(e,0,A)}):l}},pseudos:{not:re((function(e){var n=[],A=[],t=o(e.replace(F,"$1"));return t[g]?re((function(e,n,A,l){for(var i,s=t(e,null,l,[]),o=e.length;o--;)(i=s[o])&&(e[o]=!(n[o]=i))})):function(e,l,i){return n[0]=e,t(n,null,i,A),n[0]=null,!A.pop()}})),has:re((function(e){return function(n){return oe(e,n).length>0}})),contains:re((function(e){return e=e.replace(ne,Ae),function(n){return(n.textContent||l(n)).indexOf(e)>-1}})),lang:re((function(e){return q.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(ne,Ae).toLowerCase(),function(n){var A;do{if(A=p?n.lang:n.getAttribute("xml:lang")||n.getAttribute("lang"))return(A=A.toLowerCase())===e||0===A.indexOf(e+"-")}while((n=n.parentNode)&&1===n.nodeType);return!1}})),target:function(n){var A=e.location&&e.location.hash;return A&&A.slice(1)===n.id},root:function(e){return e===m},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:pe(!1),disabled:pe(!0),checked:function(e){var n=e.nodeName.toLowerCase();return"input"===n&&!!e.checked||"option"===n&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!t.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return z.test(e.nodeName)},button:function(e){var n=e.nodeName.toLowerCase();return"input"===n&&"button"===e.type||"button"===n},text:function(e){var n;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(n=e.getAttribute("type"))||"text"===n.toLowerCase())},first:fe((function(){return[0]})),last:fe((function(e,n){return[n-1]})),eq:fe((function(e,n,A){return[A<0?A+n:A]})),even:fe((function(e,n){for(var A=0;A<n;A+=2)e.push(A);return e})),odd:fe((function(e,n){for(var A=1;A<n;A+=2)e.push(A);return e})),lt:fe((function(e,n,A){for(var t=A<0?A+n:A>n?n:A;--t>=0;)e.push(t);return e})),gt:fe((function(e,n,A){for(var t=A<0?A+n:A;++t<n;)e.push(t);return e}))}},t.pseudos.nth=t.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})t.pseudos[n]=de(n);for(n in{submit:!0,reset:!0})t.pseudos[n]=me(n);function ve(){}function Ee(e){for(var n=0,A=e.length,t="";n<A;n++)t+=e[n].value;return t}function ge(e,n,A){var t=n.dir,l=n.next,i=l||t,s=A&&"parentNode"===i,o=M++;return n.first?function(n,A,l){for(;n=n[t];)if(1===n.nodeType||s)return e(n,A,l);return!1}:function(n,A,a){var r,C,c,u=[I,o];if(a){for(;n=n[t];)if((1===n.nodeType||s)&&e(n,A,a))return!0}else for(;n=n[t];)if(1===n.nodeType||s)if(C=(c=n[g]||(n[g]={}))[n.uniqueID]||(c[n.uniqueID]={}),l&&l===n.nodeName.toLowerCase())n=n[t]||n;else{if((r=C[i])&&r[0]===I&&r[1]===o)return u[2]=r[2];if(C[i]=u,u[2]=e(n,A,a))return!0}return!1}}function ye(e){return e.length>1?function(n,A,t){for(var l=e.length;l--;)if(!e[l](n,A,t))return!1;return!0}:e[0]}function Ie(e,n,A,t,l){for(var i,s=[],o=0,a=e.length,r=null!=n;o<a;o++)(i=e[o])&&(A&&!A(i,t,l)||(s.push(i),r&&n.push(o)));return s}function Me(e,n,A,t,l,i){return t&&!t[g]&&(t=Me(t)),l&&!l[g]&&(l=Me(l,i)),re((function(i,s,o,a){var r,C,c,u=[],d=[],m=s.length,p=i||function(e,n,A){for(var t=0,l=n.length;t<l;t++)oe(e,n[t],A);return A}(n||"*",o.nodeType?[o]:o,[]),f=!e||!i&&n?p:Ie(p,u,e,o,a),h=A?l||(i?e:m||t)?[]:s:f;if(A&&A(f,h,o,a),t)for(r=Ie(h,d),t(r,[],o,a),C=r.length;C--;)(c=r[C])&&(h[d[C]]=!(f[d[C]]=c));if(i){if(l||e){if(l){for(r=[],C=h.length;C--;)(c=h[C])&&r.push(f[C]=c);l(null,h=[],r,a)}for(C=h.length;C--;)(c=h[C])&&(r=l?T(i,c):u[C])>-1&&(i[r]=!(s[r]=c))}}else h=Ie(h===s?h.splice(m,h.length):h),l?l(null,s,h,a):O.apply(s,h)}))}function be(e){for(var n,A,l,i=e.length,s=t.relative[e[0].type],o=s||t.relative[" "],a=s?1:0,C=ge((function(e){return e===n}),o,!0),c=ge((function(e){return T(n,e)>-1}),o,!0),u=[function(e,A,t){var l=!s&&(t||A!==r)||((n=A).nodeType?C(e,A,t):c(e,A,t));return n=null,l}];a<i;a++)if(A=t.relative[e[a].type])u=[ge(ye(u),A)];else{if((A=t.filter[e[a].type].apply(null,e[a].matches))[g]){for(l=++a;l<i&&!t.relative[e[l].type];l++);return Me(a>1&&ye(u),a>1&&Ee(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(F,"$1"),A,a<l&&be(e.slice(a,l)),l<i&&be(e=e.slice(l)),l<i&&Ee(e))}u.push(A)}return ye(u)}return ve.prototype=t.filters=t.pseudos,t.setFilters=new ve,s=oe.tokenize=function(e,n){var A,l,i,s,o,a,r,C=B[e+" "];if(C)return n?0:C.slice(0);for(o=e,a=[],r=t.preFilter;o;){for(s in A&&!(l=N.exec(o))||(l&&(o=o.slice(l[0].length)||o),a.push(i=[])),A=!1,(l=Y.exec(o))&&(A=l.shift(),i.push({value:A,type:l[0].replace(F," ")}),o=o.slice(A.length)),t.filter)!(l=$[s].exec(o))||r[s]&&!(l=r[s](l))||(A=l.shift(),i.push({value:A,type:s,matches:l}),o=o.slice(A.length));if(!A)break}return n?o.length:o?oe.error(e):B(e,a).slice(0)},o=oe.compile=function(e,n){var A,l=[],i=[],o=x[e+" "];if(!o){for(n||(n=s(e)),A=n.length;A--;)(o=be(n[A]))[g]?l.push(o):i.push(o);o=x(e,function(e,n){var A=n.length>0,l=e.length>0,i=function(i,s,o,a,C){var c,m,f,h=0,v="0",E=i&&[],g=[],y=r,M=i||l&&t.find.TAG("*",C),b=I+=null==y?1:Math.random()||.1,B=M.length;for(C&&(r=s==d||s||C);v!==B&&null!=(c=M[v]);v++){if(l&&c){for(m=0,s||c.ownerDocument==d||(u(c),o=!p);f=e[m++];)if(f(c,s||d,o)){a.push(c);break}C&&(I=b)}A&&((c=!f&&c)&&h--,i&&E.push(c))}if(h+=v,A&&v!==h){for(m=0;f=n[m++];)f(E,g,s,o);if(i){if(h>0)for(;v--;)E[v]||g[v]||(g[v]=V.call(a));g=Ie(g)}O.apply(a,g),C&&!i&&g.length>0&&h+n.length>1&&oe.uniqueSort(a)}return C&&(I=b,r=y),E};return A?re(i):i}(i,l)),o.selector=e}return o},a=oe.select=function(e,n,A,l){var i,a,r,C,c,u="function"==typeof e&&e,d=!l&&s(e=u.selector||e);if(A=A||[],1===d.length){if((a=d[0]=d[0].slice(0)).length>2&&"ID"===(r=a[0]).type&&9===n.nodeType&&p&&t.relative[a[1].type]){if(!(n=(t.find.ID(r.matches[0].replace(ne,Ae),n)||[])[0]))return A;u&&(n=n.parentNode),e=e.slice(a.shift().value.length)}for(i=$.needsContext.test(e)?0:a.length;i--&&(r=a[i],!t.relative[C=r.type]);)if((c=t.find[C])&&(l=c(r.matches[0].replace(ne,Ae),ee.test(a[0].type)&&he(n.parentNode)||n))){if(a.splice(i,1),!(e=l.length&&Ee(a)))return O.apply(A,l),A;break}}return(u||o(e,d))(l,n,!p,A,!n||ee.test(e)&&he(n.parentNode)||n),A},A.sortStable=g.split("").sort(Q).join("")===g,A.detectDuplicates=!!c,u(),A.sortDetached=Ce((function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))})),Ce((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||ce("type|href|height|width",(function(e,n,A){if(!A)return e.getAttribute(n,"type"===n.toLowerCase()?1:2)})),A.attributes&&Ce((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||ce("value",(function(e,n,A){if(!A&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),Ce((function(e){return null==e.getAttribute("disabled")}))||ce(W,(function(e,n,A){var t;if(!A)return!0===e[n]?n.toLowerCase():(t=e.getAttributeNode(n))&&t.specified?t.value:null})),oe}(t);b.find=x,b.expr=x.selectors,b.expr[":"]=b.expr.pseudos,b.uniqueSort=b.unique=x.uniqueSort,b.text=x.getText,b.isXMLDoc=x.isXML,b.contains=x.contains,b.escapeSelector=x.escape;var S=function(e,n,A){for(var t=[],l=void 0!==A;(e=e[n])&&9!==e.nodeType;)if(1===e.nodeType){if(l&&b(e).is(A))break;t.push(e)}return t},Q=function(e,n){for(var A=[];e;e=e.nextSibling)1===e.nodeType&&e!==n&&A.push(e);return A},_=b.expr.match.needsContext;function w(e,n){return e.nodeName&&e.nodeName.toLowerCase()===n.toLowerCase()}var V=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function G(e,n,A){return h(n)?b.grep(e,(function(e,t){return!!n.call(e,t,e)!==A})):n.nodeType?b.grep(e,(function(e){return e===n!==A})):"string"!=typeof n?b.grep(e,(function(e){return C.call(n,e)>-1!==A})):b.filter(n,e,A)}b.filter=function(e,n,A){var t=n[0];return A&&(e=":not("+e+")"),1===n.length&&1===t.nodeType?b.find.matchesSelector(t,e)?[t]:[]:b.find.matches(e,b.grep(n,(function(e){return 1===e.nodeType})))},b.fn.extend({find:function(e){var n,A,t=this.length,l=this;if("string"!=typeof e)return this.pushStack(b(e).filter((function(){for(n=0;n<t;n++)if(b.contains(l[n],this))return!0})));for(A=this.pushStack([]),n=0;n<t;n++)b.find(e,l[n],A);return t>1?b.uniqueSort(A):A},filter:function(e){return this.pushStack(G(this,e||[],!1))},not:function(e){return this.pushStack(G(this,e||[],!0))},is:function(e){return!!G(this,"string"==typeof e&&_.test(e)?b(e):e||[],!1).length}});var O,D=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(b.fn.init=function(e,n,A){var t,l;if(!e)return this;if(A=A||O,"string"==typeof e){if(!(t="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:D.exec(e))||!t[1]&&n)return!n||n.jquery?(n||A).find(e):this.constructor(n).find(e);if(t[1]){if(n=n instanceof b?n[0]:n,b.merge(this,b.parseHTML(t[1],n&&n.nodeType?n.ownerDocument||n:E,!0)),V.test(t[1])&&b.isPlainObject(n))for(t in n)h(this[t])?this[t](n[t]):this.attr(t,n[t]);return this}return(l=E.getElementById(t[2]))&&(this[0]=l,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):h(e)?void 0!==A.ready?A.ready(e):e(b):b.makeArray(e,this)}).prototype=b.fn,O=b(E);var T=/^(?:parents|prev(?:Until|All))/,W={children:!0,contents:!0,next:!0,prev:!0};function H(e,n){for(;(e=e[n])&&1!==e.nodeType;);return e}b.fn.extend({has:function(e){var n=b(e,this),A=n.length;return this.filter((function(){for(var e=0;e<A;e++)if(b.contains(this,n[e]))return!0}))},closest:function(e,n){var A,t=0,l=this.length,i=[],s="string"!=typeof e&&b(e);if(!_.test(e))for(;t<l;t++)for(A=this[t];A&&A!==n;A=A.parentNode)if(A.nodeType<11&&(s?s.index(A)>-1:1===A.nodeType&&b.find.matchesSelector(A,e))){i.push(A);break}return this.pushStack(i.length>1?b.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?C.call(b(e),this[0]):C.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,n){return this.pushStack(b.uniqueSort(b.merge(this.get(),b(e,n))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),b.each({parent:function(e){var n=e.parentNode;return n&&11!==n.nodeType?n:null},parents:function(e){return S(e,"parentNode")},parentsUntil:function(e,n,A){return S(e,"parentNode",A)},next:function(e){return H(e,"nextSibling")},prev:function(e){return H(e,"previousSibling")},nextAll:function(e){return S(e,"nextSibling")},prevAll:function(e){return S(e,"previousSibling")},nextUntil:function(e,n,A){return S(e,"nextSibling",A)},prevUntil:function(e,n,A){return S(e,"previousSibling",A)},siblings:function(e){return Q((e.parentNode||{}).firstChild,e)},children:function(e){return Q(e.firstChild)},contents:function(e){return null!=e.contentDocument&&s(e.contentDocument)?e.contentDocument:(w(e,"template")&&(e=e.content||e),b.merge([],e.childNodes))}},(function(e,n){b.fn[e]=function(A,t){var l=b.map(this,n,A);return"Until"!==e.slice(-5)&&(t=A),t&&"string"==typeof t&&(l=b.filter(t,l)),this.length>1&&(W[e]||b.uniqueSort(l),T.test(e)&&l.reverse()),this.pushStack(l)}}));var k=/[^\x20\t\r\n\f]+/g;function P(e){return e}function K(e){throw e}function U(e,n,A,t){var l;try{e&&h(l=e.promise)?l.call(e).done(n).fail(A):e&&h(l=e.then)?l.call(e,n,A):n.apply(void 0,[e].slice(t))}catch(e){A.apply(void 0,[e])}}b.Callbacks=function(e){e="string"==typeof e?function(e){var n={};return b.each(e.match(k)||[],(function(e,A){n[A]=!0})),n}(e):b.extend({},e);var n,A,t,l,i=[],s=[],o=-1,a=function(){for(l=l||e.once,t=n=!0;s.length;o=-1)for(A=s.shift();++o<i.length;)!1===i[o].apply(A[0],A[1])&&e.stopOnFalse&&(o=i.length,A=!1);e.memory||(A=!1),n=!1,l&&(i=A?[]:"")},r={add:function(){return i&&(A&&!n&&(o=i.length-1,s.push(A)),function n(A){b.each(A,(function(A,t){h(t)?e.unique&&r.has(t)||i.push(t):t&&t.length&&"string"!==I(t)&&n(t)}))}(arguments),A&&!n&&a()),this},remove:function(){return b.each(arguments,(function(e,n){for(var A;(A=b.inArray(n,i,A))>-1;)i.splice(A,1),A<=o&&o--})),this},has:function(e){return e?b.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return l=s=[],i=A="",this},disabled:function(){return!i},lock:function(){return l=s=[],A||n||(i=A=""),this},locked:function(){return!!l},fireWith:function(e,A){return l||(A=[e,(A=A||[]).slice?A.slice():A],s.push(A),n||a()),this},fire:function(){return r.fireWith(this,arguments),this},fired:function(){return!!t}};return r},b.extend({Deferred:function(e){var n=[["notify","progress",b.Callbacks("memory"),b.Callbacks("memory"),2],["resolve","done",b.Callbacks("once memory"),b.Callbacks("once memory"),0,"resolved"],["reject","fail",b.Callbacks("once memory"),b.Callbacks("once memory"),1,"rejected"]],A="pending",l={state:function(){return A},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return l.then(null,e)},pipe:function(){var e=arguments;return b.Deferred((function(A){b.each(n,(function(n,t){var l=h(e[t[4]])&&e[t[4]];i[t[1]]((function(){var e=l&&l.apply(this,arguments);e&&h(e.promise)?e.promise().progress(A.notify).done(A.resolve).fail(A.reject):A[t[0]+"With"](this,l?[e]:arguments)}))})),e=null})).promise()},then:function(e,A,l){var i=0;function s(e,n,A,l){return function(){var o=this,a=arguments,r=function(){var t,r;if(!(e<i)){if((t=A.apply(o,a))===n.promise())throw new TypeError("Thenable self-resolution");r=t&&("object"==typeof t||"function"==typeof t)&&t.then,h(r)?l?r.call(t,s(i,n,P,l),s(i,n,K,l)):(i++,r.call(t,s(i,n,P,l),s(i,n,K,l),s(i,n,P,n.notifyWith))):(A!==P&&(o=void 0,a=[t]),(l||n.resolveWith)(o,a))}},C=l?r:function(){try{r()}catch(t){b.Deferred.exceptionHook&&b.Deferred.exceptionHook(t,C.stackTrace),e+1>=i&&(A!==K&&(o=void 0,a=[t]),n.rejectWith(o,a))}};e?C():(b.Deferred.getStackHook&&(C.stackTrace=b.Deferred.getStackHook()),t.setTimeout(C))}}return b.Deferred((function(t){n[0][3].add(s(0,t,h(l)?l:P,t.notifyWith)),n[1][3].add(s(0,t,h(e)?e:P)),n[2][3].add(s(0,t,h(A)?A:K))})).promise()},promise:function(e){return null!=e?b.extend(e,l):l}},i={};return b.each(n,(function(e,t){var s=t[2],o=t[5];l[t[1]]=s.add,o&&s.add((function(){A=o}),n[3-e][2].disable,n[3-e][3].disable,n[0][2].lock,n[0][3].lock),s.add(t[3].fire),i[t[0]]=function(){return i[t[0]+"With"](this===i?void 0:this,arguments),this},i[t[0]+"With"]=s.fireWith})),l.promise(i),e&&e.call(i,i),i},when:function(e){var n=arguments.length,A=n,t=Array(A),l=o.call(arguments),i=b.Deferred(),s=function(e){return function(A){t[e]=this,l[e]=arguments.length>1?o.call(arguments):A,--n||i.resolveWith(t,l)}};if(n<=1&&(U(e,i.done(s(A)).resolve,i.reject,!n),"pending"===i.state()||h(l[A]&&l[A].then)))return i.then();for(;A--;)U(l[A],s(A),i.reject);return i.promise()}});var F=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;b.Deferred.exceptionHook=function(e,n){t.console&&t.console.warn&&e&&F.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,n)},b.readyException=function(e){t.setTimeout((function(){throw e}))};var N=b.Deferred();function Y(){E.removeEventListener("DOMContentLoaded",Y),t.removeEventListener("load",Y),b.ready()}b.fn.ready=function(e){return N.then(e).catch((function(e){b.readyException(e)})),this},b.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--b.readyWait:b.isReady)||(b.isReady=!0,!0!==e&&--b.readyWait>0||N.resolveWith(E,[b]))}}),b.ready.then=N.then,"complete"===E.readyState||"loading"!==E.readyState&&!E.documentElement.doScroll?t.setTimeout(b.ready):(E.addEventListener("DOMContentLoaded",Y),t.addEventListener("load",Y));var L=function(e,n,A,t,l,i,s){var o=0,a=e.length,r=null==A;if("object"===I(A))for(o in l=!0,A)L(e,n,o,A[o],!0,i,s);else if(void 0!==t&&(l=!0,h(t)||(s=!0),r&&(s?(n.call(e,t),n=null):(r=n,n=function(e,n,A){return r.call(b(e),A)})),n))for(;o<a;o++)n(e[o],A,s?t:t.call(e[o],o,n(e[o],A)));return l?e:r?n.call(e):a?n(e[0],A):i},j=/^-ms-/,q=/-([a-z])/g;function $(e,n){return n.toUpperCase()}function R(e){return e.replace(j,"ms-").replace(q,$)}var z=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function X(){this.expando=b.expando+X.uid++}X.uid=1,X.prototype={cache:function(e){var n=e[this.expando];return n||(n={},z(e)&&(e.nodeType?e[this.expando]=n:Object.defineProperty(e,this.expando,{value:n,configurable:!0}))),n},set:function(e,n,A){var t,l=this.cache(e);if("string"==typeof n)l[R(n)]=A;else for(t in n)l[R(t)]=n[t];return l},get:function(e,n){return void 0===n?this.cache(e):e[this.expando]&&e[this.expando][R(n)]},access:function(e,n,A){return void 0===n||n&&"string"==typeof n&&void 0===A?this.get(e,n):(this.set(e,n,A),void 0!==A?A:n)},remove:function(e,n){var A,t=e[this.expando];if(void 0!==t){if(void 0!==n){A=(n=Array.isArray(n)?n.map(R):(n=R(n))in t?[n]:n.match(k)||[]).length;for(;A--;)delete t[n[A]]}(void 0===n||b.isEmptyObject(t))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var n=e[this.expando];return void 0!==n&&!b.isEmptyObject(n)}};var Z=new X,J=new X,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ne=/[A-Z]/g;function Ae(e,n,A){var t;if(void 0===A&&1===e.nodeType)if(t="data-"+n.replace(ne,"-$&").toLowerCase(),"string"==typeof(A=e.getAttribute(t))){try{A=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(A)}catch(e){}J.set(e,n,A)}else A=void 0;return A}b.extend({hasData:function(e){return J.hasData(e)||Z.hasData(e)},data:function(e,n,A){return J.access(e,n,A)},removeData:function(e,n){J.remove(e,n)},_data:function(e,n,A){return Z.access(e,n,A)},_removeData:function(e,n){Z.remove(e,n)}}),b.fn.extend({data:function(e,n){var A,t,l,i=this[0],s=i&&i.attributes;if(void 0===e){if(this.length&&(l=J.get(i),1===i.nodeType&&!Z.get(i,"hasDataAttrs"))){for(A=s.length;A--;)s[A]&&0===(t=s[A].name).indexOf("data-")&&(t=R(t.slice(5)),Ae(i,t,l[t]));Z.set(i,"hasDataAttrs",!0)}return l}return"object"==typeof e?this.each((function(){J.set(this,e)})):L(this,(function(n){var A;if(i&&void 0===n)return void 0!==(A=J.get(i,e))||void 0!==(A=Ae(i,e))?A:void 0;this.each((function(){J.set(this,e,n)}))}),null,n,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){J.remove(this,e)}))}}),b.extend({queue:function(e,n,A){var t;if(e)return n=(n||"fx")+"queue",t=Z.get(e,n),A&&(!t||Array.isArray(A)?t=Z.access(e,n,b.makeArray(A)):t.push(A)),t||[]},dequeue:function(e,n){n=n||"fx";var A=b.queue(e,n),t=A.length,l=A.shift(),i=b._queueHooks(e,n);"inprogress"===l&&(l=A.shift(),t--),l&&("fx"===n&&A.unshift("inprogress"),delete i.stop,l.call(e,(function(){b.dequeue(e,n)}),i)),!t&&i&&i.empty.fire()},_queueHooks:function(e,n){var A=n+"queueHooks";return Z.get(e,A)||Z.access(e,A,{empty:b.Callbacks("once memory").add((function(){Z.remove(e,[n+"queue",A])}))})}}),b.fn.extend({queue:function(e,n){var A=2;return"string"!=typeof e&&(n=e,e="fx",A--),arguments.length<A?b.queue(this[0],e):void 0===n?this:this.each((function(){var A=b.queue(this,e,n);b._queueHooks(this,e),"fx"===e&&"inprogress"!==A[0]&&b.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){b.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,n){var A,t=1,l=b.Deferred(),i=this,s=this.length,o=function(){--t||l.resolveWith(i,[i])};for("string"!=typeof e&&(n=e,e=void 0),e=e||"fx";s--;)(A=Z.get(i[s],e+"queueHooks"))&&A.empty&&(t++,A.empty.add(o));return o(),l.promise(n)}});var te=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,le=new RegExp("^(?:([+-])=|)("+te+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],se=E.documentElement,oe=function(e){return b.contains(e.ownerDocument,e)},ae={composed:!0};se.getRootNode&&(oe=function(e){return b.contains(e.ownerDocument,e)||e.getRootNode(ae)===e.ownerDocument});var re=function(e,n){return"none"===(e=n||e).style.display||""===e.style.display&&oe(e)&&"none"===b.css(e,"display")};function Ce(e,n,A,t){var l,i,s=20,o=t?function(){return t.cur()}:function(){return b.css(e,n,"")},a=o(),r=A&&A[3]||(b.cssNumber[n]?"":"px"),C=e.nodeType&&(b.cssNumber[n]||"px"!==r&&+a)&&le.exec(b.css(e,n));if(C&&C[3]!==r){for(a/=2,r=r||C[3],C=+a||1;s--;)b.style(e,n,C+r),(1-i)*(1-(i=o()/a||.5))<=0&&(s=0),C/=i;C*=2,b.style(e,n,C+r),A=A||[]}return A&&(C=+C||+a||0,l=A[1]?C+(A[1]+1)*A[2]:+A[2],t&&(t.unit=r,t.start=C,t.end=l)),l}var ce={};function ue(e){var n,A=e.ownerDocument,t=e.nodeName,l=ce[t];return l||(n=A.body.appendChild(A.createElement(t)),l=b.css(n,"display"),n.parentNode.removeChild(n),"none"===l&&(l="block"),ce[t]=l,l)}function de(e,n){for(var A,t,l=[],i=0,s=e.length;i<s;i++)(t=e[i]).style&&(A=t.style.display,n?("none"===A&&(l[i]=Z.get(t,"display")||null,l[i]||(t.style.display="")),""===t.style.display&&re(t)&&(l[i]=ue(t))):"none"!==A&&(l[i]="none",Z.set(t,"display",A)));for(i=0;i<s;i++)null!=l[i]&&(e[i].style.display=l[i]);return e}b.fn.extend({show:function(){return de(this,!0)},hide:function(){return de(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){re(this)?b(this).show():b(this).hide()}))}});var me,pe,fe=/^(?:checkbox|radio)$/i,he=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ve=/^$|^module$|\/(?:java|ecma)script/i;me=E.createDocumentFragment().appendChild(E.createElement("div")),(pe=E.createElement("input")).setAttribute("type","radio"),pe.setAttribute("checked","checked"),pe.setAttribute("name","t"),me.appendChild(pe),f.checkClone=me.cloneNode(!0).cloneNode(!0).lastChild.checked,me.innerHTML="<textarea>x</textarea>",f.noCloneChecked=!!me.cloneNode(!0).lastChild.defaultValue,me.innerHTML="<option></option>",f.option=!!me.lastChild;var Ee={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,n){var A;return A=void 0!==e.getElementsByTagName?e.getElementsByTagName(n||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(n||"*"):[],void 0===n||n&&w(e,n)?b.merge([e],A):A}function ye(e,n){for(var A=0,t=e.length;A<t;A++)Z.set(e[A],"globalEval",!n||Z.get(n[A],"globalEval"))}Ee.tbody=Ee.tfoot=Ee.colgroup=Ee.caption=Ee.thead,Ee.th=Ee.td,f.option||(Ee.optgroup=Ee.option=[1,"<select multiple='multiple'>","</select>"]);var Ie=/<|&#?\w+;/;function Me(e,n,A,t,l){for(var i,s,o,a,r,C,c=n.createDocumentFragment(),u=[],d=0,m=e.length;d<m;d++)if((i=e[d])||0===i)if("object"===I(i))b.merge(u,i.nodeType?[i]:i);else if(Ie.test(i)){for(s=s||c.appendChild(n.createElement("div")),o=(he.exec(i)||["",""])[1].toLowerCase(),a=Ee[o]||Ee._default,s.innerHTML=a[1]+b.htmlPrefilter(i)+a[2],C=a[0];C--;)s=s.lastChild;b.merge(u,s.childNodes),(s=c.firstChild).textContent=""}else u.push(n.createTextNode(i));for(c.textContent="",d=0;i=u[d++];)if(t&&b.inArray(i,t)>-1)l&&l.push(i);else if(r=oe(i),s=ge(c.appendChild(i),"script"),r&&ye(s),A)for(C=0;i=s[C++];)ve.test(i.type||"")&&A.push(i);return c}var be=/^([^.]*)(?:\.(.+)|)/;function Be(){return!0}function xe(){return!1}function Se(e,n){return e===function(){try{return E.activeElement}catch(e){}}()==("focus"===n)}function Qe(e,n,A,t,l,i){var s,o;if("object"==typeof n){for(o in"string"!=typeof A&&(t=t||A,A=void 0),n)Qe(e,o,A,t,n[o],i);return e}if(null==t&&null==l?(l=A,t=A=void 0):null==l&&("string"==typeof A?(l=t,t=void 0):(l=t,t=A,A=void 0)),!1===l)l=xe;else if(!l)return e;return 1===i&&(s=l,l=function(e){return b().off(e),s.apply(this,arguments)},l.guid=s.guid||(s.guid=b.guid++)),e.each((function(){b.event.add(this,n,l,t,A)}))}function _e(e,n,A){A?(Z.set(e,n,!1),b.event.add(e,n,{namespace:!1,handler:function(e){var t,l,i=Z.get(this,n);if(1&e.isTrigger&&this[n]){if(i.length)(b.event.special[n]||{}).delegateType&&e.stopPropagation();else if(i=o.call(arguments),Z.set(this,n,i),t=A(this,n),this[n](),i!==(l=Z.get(this,n))||t?Z.set(this,n,!1):l={},i!==l)return e.stopImmediatePropagation(),e.preventDefault(),l&&l.value}else i.length&&(Z.set(this,n,{value:b.event.trigger(b.extend(i[0],b.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Z.get(e,n)&&b.event.add(e,n,Be)}b.event={global:{},add:function(e,n,A,t,l){var i,s,o,a,r,C,c,u,d,m,p,f=Z.get(e);if(z(e))for(A.handler&&(A=(i=A).handler,l=i.selector),l&&b.find.matchesSelector(se,l),A.guid||(A.guid=b.guid++),(a=f.events)||(a=f.events=Object.create(null)),(s=f.handle)||(s=f.handle=function(n){return void 0!==b&&b.event.triggered!==n.type?b.event.dispatch.apply(e,arguments):void 0}),r=(n=(n||"").match(k)||[""]).length;r--;)d=p=(o=be.exec(n[r])||[])[1],m=(o[2]||"").split(".").sort(),d&&(c=b.event.special[d]||{},d=(l?c.delegateType:c.bindType)||d,c=b.event.special[d]||{},C=b.extend({type:d,origType:p,data:t,handler:A,guid:A.guid,selector:l,needsContext:l&&b.expr.match.needsContext.test(l),namespace:m.join(".")},i),(u=a[d])||((u=a[d]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(e,t,m,s)||e.addEventListener&&e.addEventListener(d,s)),c.add&&(c.add.call(e,C),C.handler.guid||(C.handler.guid=A.guid)),l?u.splice(u.delegateCount++,0,C):u.push(C),b.event.global[d]=!0)},remove:function(e,n,A,t,l){var i,s,o,a,r,C,c,u,d,m,p,f=Z.hasData(e)&&Z.get(e);if(f&&(a=f.events)){for(r=(n=(n||"").match(k)||[""]).length;r--;)if(d=p=(o=be.exec(n[r])||[])[1],m=(o[2]||"").split(".").sort(),d){for(c=b.event.special[d]||{},u=a[d=(t?c.delegateType:c.bindType)||d]||[],o=o[2]&&new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=i=u.length;i--;)C=u[i],!l&&p!==C.origType||A&&A.guid!==C.guid||o&&!o.test(C.namespace)||t&&t!==C.selector&&("**"!==t||!C.selector)||(u.splice(i,1),C.selector&&u.delegateCount--,c.remove&&c.remove.call(e,C));s&&!u.length&&(c.teardown&&!1!==c.teardown.call(e,m,f.handle)||b.removeEvent(e,d,f.handle),delete a[d])}else for(d in a)b.event.remove(e,d+n[r],A,t,!0);b.isEmptyObject(a)&&Z.remove(e,"handle events")}},dispatch:function(e){var n,A,t,l,i,s,o=new Array(arguments.length),a=b.event.fix(e),r=(Z.get(this,"events")||Object.create(null))[a.type]||[],C=b.event.special[a.type]||{};for(o[0]=a,n=1;n<arguments.length;n++)o[n]=arguments[n];if(a.delegateTarget=this,!C.preDispatch||!1!==C.preDispatch.call(this,a)){for(s=b.event.handlers.call(this,a,r),n=0;(l=s[n++])&&!a.isPropagationStopped();)for(a.currentTarget=l.elem,A=0;(i=l.handlers[A++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==i.namespace&&!a.rnamespace.test(i.namespace)||(a.handleObj=i,a.data=i.data,void 0!==(t=((b.event.special[i.origType]||{}).handle||i.handler).apply(l.elem,o))&&!1===(a.result=t)&&(a.preventDefault(),a.stopPropagation()));return C.postDispatch&&C.postDispatch.call(this,a),a.result}},handlers:function(e,n){var A,t,l,i,s,o=[],a=n.delegateCount,r=e.target;if(a&&r.nodeType&&!("click"===e.type&&e.button>=1))for(;r!==this;r=r.parentNode||this)if(1===r.nodeType&&("click"!==e.type||!0!==r.disabled)){for(i=[],s={},A=0;A<a;A++)void 0===s[l=(t=n[A]).selector+" "]&&(s[l]=t.needsContext?b(l,this).index(r)>-1:b.find(l,this,null,[r]).length),s[l]&&i.push(t);i.length&&o.push({elem:r,handlers:i})}return r=this,a<n.length&&o.push({elem:r,handlers:n.slice(a)}),o},addProp:function(e,n){Object.defineProperty(b.Event.prototype,e,{enumerable:!0,configurable:!0,get:h(n)?function(){if(this.originalEvent)return n(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(n){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:n})}})},fix:function(e){return e[b.expando]?e:new b.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var n=this||e;return fe.test(n.type)&&n.click&&w(n,"input")&&_e(n,"click",Be),!1},trigger:function(e){var n=this||e;return fe.test(n.type)&&n.click&&w(n,"input")&&_e(n,"click"),!0},_default:function(e){var n=e.target;return fe.test(n.type)&&n.click&&w(n,"input")&&Z.get(n,"click")||w(n,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},b.removeEvent=function(e,n,A){e.removeEventListener&&e.removeEventListener(n,A)},b.Event=function(e,n){if(!(this instanceof b.Event))return new b.Event(e,n);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Be:xe,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,n&&b.extend(this,n),this.timeStamp=e&&e.timeStamp||Date.now(),this[b.expando]=!0},b.Event.prototype={constructor:b.Event,isDefaultPrevented:xe,isPropagationStopped:xe,isImmediatePropagationStopped:xe,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Be,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Be,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Be,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},b.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},b.event.addProp),b.each({focus:"focusin",blur:"focusout"},(function(e,n){b.event.special[e]={setup:function(){return _e(this,e,Se),!1},trigger:function(){return _e(this,e),!0},_default:function(){return!0},delegateType:n}})),b.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,n){b.event.special[e]={delegateType:n,bindType:n,handle:function(e){var A,t=this,l=e.relatedTarget,i=e.handleObj;return l&&(l===t||b.contains(t,l))||(e.type=i.origType,A=i.handler.apply(this,arguments),e.type=n),A}}})),b.fn.extend({on:function(e,n,A,t){return Qe(this,e,n,A,t)},one:function(e,n,A,t){return Qe(this,e,n,A,t,1)},off:function(e,n,A){var t,l;if(e&&e.preventDefault&&e.handleObj)return t=e.handleObj,b(e.delegateTarget).off(t.namespace?t.origType+"."+t.namespace:t.origType,t.selector,t.handler),this;if("object"==typeof e){for(l in e)this.off(l,n,e[l]);return this}return!1!==n&&"function"!=typeof n||(A=n,n=void 0),!1===A&&(A=xe),this.each((function(){b.event.remove(this,e,A,n)}))}});var we=/<script|<style|<link/i,Ve=/checked\s*(?:[^=]|=\s*.checked.)/i,Ge=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Oe(e,n){return w(e,"table")&&w(11!==n.nodeType?n:n.firstChild,"tr")&&b(e).children("tbody")[0]||e}function De(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Te(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function We(e,n){var A,t,l,i,s,o;if(1===n.nodeType){if(Z.hasData(e)&&(o=Z.get(e).events))for(l in Z.remove(n,"handle events"),o)for(A=0,t=o[l].length;A<t;A++)b.event.add(n,l,o[l][A]);J.hasData(e)&&(i=J.access(e),s=b.extend({},i),J.set(n,s))}}function He(e,n){var A=n.nodeName.toLowerCase();"input"===A&&fe.test(e.type)?n.checked=e.checked:"input"!==A&&"textarea"!==A||(n.defaultValue=e.defaultValue)}function ke(e,n,A,t){n=a(n);var l,i,s,o,r,C,c=0,u=e.length,d=u-1,m=n[0],p=h(m);if(p||u>1&&"string"==typeof m&&!f.checkClone&&Ve.test(m))return e.each((function(l){var i=e.eq(l);p&&(n[0]=m.call(this,l,i.html())),ke(i,n,A,t)}));if(u&&(i=(l=Me(n,e[0].ownerDocument,!1,e,t)).firstChild,1===l.childNodes.length&&(l=i),i||t)){for(o=(s=b.map(ge(l,"script"),De)).length;c<u;c++)r=l,c!==d&&(r=b.clone(r,!0,!0),o&&b.merge(s,ge(r,"script"))),A.call(e[c],r,c);if(o)for(C=s[s.length-1].ownerDocument,b.map(s,Te),c=0;c<o;c++)r=s[c],ve.test(r.type||"")&&!Z.access(r,"globalEval")&&b.contains(C,r)&&(r.src&&"module"!==(r.type||"").toLowerCase()?b._evalUrl&&!r.noModule&&b._evalUrl(r.src,{nonce:r.nonce||r.getAttribute("nonce")},C):y(r.textContent.replace(Ge,""),r,C))}return e}function Pe(e,n,A){for(var t,l=n?b.filter(n,e):e,i=0;null!=(t=l[i]);i++)A||1!==t.nodeType||b.cleanData(ge(t)),t.parentNode&&(A&&oe(t)&&ye(ge(t,"script")),t.parentNode.removeChild(t));return e}b.extend({htmlPrefilter:function(e){return e},clone:function(e,n,A){var t,l,i,s,o=e.cloneNode(!0),a=oe(e);if(!(f.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||b.isXMLDoc(e)))for(s=ge(o),t=0,l=(i=ge(e)).length;t<l;t++)He(i[t],s[t]);if(n)if(A)for(i=i||ge(e),s=s||ge(o),t=0,l=i.length;t<l;t++)We(i[t],s[t]);else We(e,o);return(s=ge(o,"script")).length>0&&ye(s,!a&&ge(e,"script")),o},cleanData:function(e){for(var n,A,t,l=b.event.special,i=0;void 0!==(A=e[i]);i++)if(z(A)){if(n=A[Z.expando]){if(n.events)for(t in n.events)l[t]?b.event.remove(A,t):b.removeEvent(A,t,n.handle);A[Z.expando]=void 0}A[J.expando]&&(A[J.expando]=void 0)}}}),b.fn.extend({detach:function(e){return Pe(this,e,!0)},remove:function(e){return Pe(this,e)},text:function(e){return L(this,(function(e){return void 0===e?b.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return ke(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Oe(this,e).appendChild(e)}))},prepend:function(){return ke(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var n=Oe(this,e);n.insertBefore(e,n.firstChild)}}))},before:function(){return ke(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return ke(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,n=0;null!=(e=this[n]);n++)1===e.nodeType&&(b.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,n){return e=null!=e&&e,n=null==n?e:n,this.map((function(){return b.clone(this,e,n)}))},html:function(e){return L(this,(function(e){var n=this[0]||{},A=0,t=this.length;if(void 0===e&&1===n.nodeType)return n.innerHTML;if("string"==typeof e&&!we.test(e)&&!Ee[(he.exec(e)||["",""])[1].toLowerCase()]){e=b.htmlPrefilter(e);try{for(;A<t;A++)1===(n=this[A]||{}).nodeType&&(b.cleanData(ge(n,!1)),n.innerHTML=e);n=0}catch(e){}}n&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return ke(this,arguments,(function(n){var A=this.parentNode;b.inArray(this,e)<0&&(b.cleanData(ge(this)),A&&A.replaceChild(n,this))}),e)}}),b.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,n){b.fn[e]=function(e){for(var A,t=[],l=b(e),i=l.length-1,s=0;s<=i;s++)A=s===i?this:this.clone(!0),b(l[s])[n](A),r.apply(t,A.get());return this.pushStack(t)}}));var Ke=new RegExp("^("+te+")(?!px)[a-z%]+$","i"),Ue=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)},Fe=function(e,n,A){var t,l,i={};for(l in n)i[l]=e.style[l],e.style[l]=n[l];for(l in t=A.call(e),n)e.style[l]=i[l];return t},Ne=new RegExp(ie.join("|"),"i");function Ye(e,n,A){var t,l,i,s,o=e.style;return(A=A||Ue(e))&&(""!==(s=A.getPropertyValue(n)||A[n])||oe(e)||(s=b.style(e,n)),!f.pixelBoxStyles()&&Ke.test(s)&&Ne.test(n)&&(t=o.width,l=o.minWidth,i=o.maxWidth,o.minWidth=o.maxWidth=o.width=s,s=A.width,o.width=t,o.minWidth=l,o.maxWidth=i)),void 0!==s?s+"":s}function Le(e,n){return{get:function(){if(!e())return(this.get=n).apply(this,arguments);delete this.get}}}!function(){function e(){if(C){r.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",C.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",se.appendChild(r).appendChild(C);var e=t.getComputedStyle(C);A="1%"!==e.top,a=12===n(e.marginLeft),C.style.right="60%",s=36===n(e.right),l=36===n(e.width),C.style.position="absolute",i=12===n(C.offsetWidth/3),se.removeChild(r),C=null}}function n(e){return Math.round(parseFloat(e))}var A,l,i,s,o,a,r=E.createElement("div"),C=E.createElement("div");C.style&&(C.style.backgroundClip="content-box",C.cloneNode(!0).style.backgroundClip="",f.clearCloneStyle="content-box"===C.style.backgroundClip,b.extend(f,{boxSizingReliable:function(){return e(),l},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),A},reliableMarginLeft:function(){return e(),a},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,n,A,l;return null==o&&(e=E.createElement("table"),n=E.createElement("tr"),A=E.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",n.style.cssText="border:1px solid",n.style.height="1px",A.style.height="9px",A.style.display="block",se.appendChild(e).appendChild(n).appendChild(A),l=t.getComputedStyle(n),o=parseInt(l.height,10)+parseInt(l.borderTopWidth,10)+parseInt(l.borderBottomWidth,10)===n.offsetHeight,se.removeChild(e)),o}}))}();var je=["Webkit","Moz","ms"],qe=E.createElement("div").style,$e={};function Re(e){var n=b.cssProps[e]||$e[e];return n||(e in qe?e:$e[e]=function(e){for(var n=e[0].toUpperCase()+e.slice(1),A=je.length;A--;)if((e=je[A]+n)in qe)return e}(e)||e)}var ze=/^(none|table(?!-c[ea]).+)/,Xe=/^--/,Ze={position:"absolute",visibility:"hidden",display:"block"},Je={letterSpacing:"0",fontWeight:"400"};function en(e,n,A){var t=le.exec(n);return t?Math.max(0,t[2]-(A||0))+(t[3]||"px"):n}function nn(e,n,A,t,l,i){var s="width"===n?1:0,o=0,a=0;if(A===(t?"border":"content"))return 0;for(;s<4;s+=2)"margin"===A&&(a+=b.css(e,A+ie[s],!0,l)),t?("content"===A&&(a-=b.css(e,"padding"+ie[s],!0,l)),"margin"!==A&&(a-=b.css(e,"border"+ie[s]+"Width",!0,l))):(a+=b.css(e,"padding"+ie[s],!0,l),"padding"!==A?a+=b.css(e,"border"+ie[s]+"Width",!0,l):o+=b.css(e,"border"+ie[s]+"Width",!0,l));return!t&&i>=0&&(a+=Math.max(0,Math.ceil(e["offset"+n[0].toUpperCase()+n.slice(1)]-i-a-o-.5))||0),a}function An(e,n,A){var t=Ue(e),l=(!f.boxSizingReliable()||A)&&"border-box"===b.css(e,"boxSizing",!1,t),i=l,s=Ye(e,n,t),o="offset"+n[0].toUpperCase()+n.slice(1);if(Ke.test(s)){if(!A)return s;s="auto"}return(!f.boxSizingReliable()&&l||!f.reliableTrDimensions()&&w(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===b.css(e,"display",!1,t))&&e.getClientRects().length&&(l="border-box"===b.css(e,"boxSizing",!1,t),(i=o in e)&&(s=e[o])),(s=parseFloat(s)||0)+nn(e,n,A||(l?"border":"content"),i,t,s)+"px"}function tn(e,n,A,t,l){return new tn.prototype.init(e,n,A,t,l)}b.extend({cssHooks:{opacity:{get:function(e,n){if(n){var A=Ye(e,"opacity");return""===A?"1":A}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,n,A,t){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var l,i,s,o=R(n),a=Xe.test(n),r=e.style;if(a||(n=Re(o)),s=b.cssHooks[n]||b.cssHooks[o],void 0===A)return s&&"get"in s&&void 0!==(l=s.get(e,!1,t))?l:r[n];"string"===(i=typeof A)&&(l=le.exec(A))&&l[1]&&(A=Ce(e,n,l),i="number"),null!=A&&A==A&&("number"!==i||a||(A+=l&&l[3]||(b.cssNumber[o]?"":"px")),f.clearCloneStyle||""!==A||0!==n.indexOf("background")||(r[n]="inherit"),s&&"set"in s&&void 0===(A=s.set(e,A,t))||(a?r.setProperty(n,A):r[n]=A))}},css:function(e,n,A,t){var l,i,s,o=R(n);return Xe.test(n)||(n=Re(o)),(s=b.cssHooks[n]||b.cssHooks[o])&&"get"in s&&(l=s.get(e,!0,A)),void 0===l&&(l=Ye(e,n,t)),"normal"===l&&n in Je&&(l=Je[n]),""===A||A?(i=parseFloat(l),!0===A||isFinite(i)?i||0:l):l}}),b.each(["height","width"],(function(e,n){b.cssHooks[n]={get:function(e,A,t){if(A)return!ze.test(b.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?An(e,n,t):Fe(e,Ze,(function(){return An(e,n,t)}))},set:function(e,A,t){var l,i=Ue(e),s=!f.scrollboxSize()&&"absolute"===i.position,o=(s||t)&&"border-box"===b.css(e,"boxSizing",!1,i),a=t?nn(e,n,t,o,i):0;return o&&s&&(a-=Math.ceil(e["offset"+n[0].toUpperCase()+n.slice(1)]-parseFloat(i[n])-nn(e,n,"border",!1,i)-.5)),a&&(l=le.exec(A))&&"px"!==(l[3]||"px")&&(e.style[n]=A,A=b.css(e,n)),en(0,A,a)}}})),b.cssHooks.marginLeft=Le(f.reliableMarginLeft,(function(e,n){if(n)return(parseFloat(Ye(e,"marginLeft"))||e.getBoundingClientRect().left-Fe(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),b.each({margin:"",padding:"",border:"Width"},(function(e,n){b.cssHooks[e+n]={expand:function(A){for(var t=0,l={},i="string"==typeof A?A.split(" "):[A];t<4;t++)l[e+ie[t]+n]=i[t]||i[t-2]||i[0];return l}},"margin"!==e&&(b.cssHooks[e+n].set=en)})),b.fn.extend({css:function(e,n){return L(this,(function(e,n,A){var t,l,i={},s=0;if(Array.isArray(n)){for(t=Ue(e),l=n.length;s<l;s++)i[n[s]]=b.css(e,n[s],!1,t);return i}return void 0!==A?b.style(e,n,A):b.css(e,n)}),e,n,arguments.length>1)}}),b.Tween=tn,tn.prototype={constructor:tn,init:function(e,n,A,t,l,i){this.elem=e,this.prop=A,this.easing=l||b.easing._default,this.options=n,this.start=this.now=this.cur(),this.end=t,this.unit=i||(b.cssNumber[A]?"":"px")},cur:function(){var e=tn.propHooks[this.prop];return e&&e.get?e.get(this):tn.propHooks._default.get(this)},run:function(e){var n,A=tn.propHooks[this.prop];return this.options.duration?this.pos=n=b.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=n=e,this.now=(this.end-this.start)*n+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),A&&A.set?A.set(this):tn.propHooks._default.set(this),this}},tn.prototype.init.prototype=tn.prototype,tn.propHooks={_default:{get:function(e){var n;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(n=b.css(e.elem,e.prop,""))&&"auto"!==n?n:0},set:function(e){b.fx.step[e.prop]?b.fx.step[e.prop](e):1!==e.elem.nodeType||!b.cssHooks[e.prop]&&null==e.elem.style[Re(e.prop)]?e.elem[e.prop]=e.now:b.style(e.elem,e.prop,e.now+e.unit)}}},tn.propHooks.scrollTop=tn.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},b.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},b.fx=tn.prototype.init,b.fx.step={};var ln,sn,on=/^(?:toggle|show|hide)$/,an=/queueHooks$/;function rn(){sn&&(!1===E.hidden&&t.requestAnimationFrame?t.requestAnimationFrame(rn):t.setTimeout(rn,b.fx.interval),b.fx.tick())}function Cn(){return t.setTimeout((function(){ln=void 0})),ln=Date.now()}function cn(e,n){var A,t=0,l={height:e};for(n=n?1:0;t<4;t+=2-n)l["margin"+(A=ie[t])]=l["padding"+A]=e;return n&&(l.opacity=l.width=e),l}function un(e,n,A){for(var t,l=(dn.tweeners[n]||[]).concat(dn.tweeners["*"]),i=0,s=l.length;i<s;i++)if(t=l[i].call(A,n,e))return t}function dn(e,n,A){var t,l,i=0,s=dn.prefilters.length,o=b.Deferred().always((function(){delete a.elem})),a=function(){if(l)return!1;for(var n=ln||Cn(),A=Math.max(0,r.startTime+r.duration-n),t=1-(A/r.duration||0),i=0,s=r.tweens.length;i<s;i++)r.tweens[i].run(t);return o.notifyWith(e,[r,t,A]),t<1&&s?A:(s||o.notifyWith(e,[r,1,0]),o.resolveWith(e,[r]),!1)},r=o.promise({elem:e,props:b.extend({},n),opts:b.extend(!0,{specialEasing:{},easing:b.easing._default},A),originalProperties:n,originalOptions:A,startTime:ln||Cn(),duration:A.duration,tweens:[],createTween:function(n,A){var t=b.Tween(e,r.opts,n,A,r.opts.specialEasing[n]||r.opts.easing);return r.tweens.push(t),t},stop:function(n){var A=0,t=n?r.tweens.length:0;if(l)return this;for(l=!0;A<t;A++)r.tweens[A].run(1);return n?(o.notifyWith(e,[r,1,0]),o.resolveWith(e,[r,n])):o.rejectWith(e,[r,n]),this}}),C=r.props;for(!function(e,n){var A,t,l,i,s;for(A in e)if(l=n[t=R(A)],i=e[A],Array.isArray(i)&&(l=i[1],i=e[A]=i[0]),A!==t&&(e[t]=i,delete e[A]),(s=b.cssHooks[t])&&"expand"in s)for(A in i=s.expand(i),delete e[t],i)A in e||(e[A]=i[A],n[A]=l);else n[t]=l}(C,r.opts.specialEasing);i<s;i++)if(t=dn.prefilters[i].call(r,e,C,r.opts))return h(t.stop)&&(b._queueHooks(r.elem,r.opts.queue).stop=t.stop.bind(t)),t;return b.map(C,un,r),h(r.opts.start)&&r.opts.start.call(e,r),r.progress(r.opts.progress).done(r.opts.done,r.opts.complete).fail(r.opts.fail).always(r.opts.always),b.fx.timer(b.extend(a,{elem:e,anim:r,queue:r.opts.queue})),r}b.Animation=b.extend(dn,{tweeners:{"*":[function(e,n){var A=this.createTween(e,n);return Ce(A.elem,e,le.exec(n),A),A}]},tweener:function(e,n){h(e)?(n=e,e=["*"]):e=e.match(k);for(var A,t=0,l=e.length;t<l;t++)A=e[t],dn.tweeners[A]=dn.tweeners[A]||[],dn.tweeners[A].unshift(n)},prefilters:[function(e,n,A){var t,l,i,s,o,a,r,C,c="width"in n||"height"in n,u=this,d={},m=e.style,p=e.nodeType&&re(e),f=Z.get(e,"fxshow");for(t in A.queue||(null==(s=b._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,o=s.empty.fire,s.empty.fire=function(){s.unqueued||o()}),s.unqueued++,u.always((function(){u.always((function(){s.unqueued--,b.queue(e,"fx").length||s.empty.fire()}))}))),n)if(l=n[t],on.test(l)){if(delete n[t],i=i||"toggle"===l,l===(p?"hide":"show")){if("show"!==l||!f||void 0===f[t])continue;p=!0}d[t]=f&&f[t]||b.style(e,t)}if((a=!b.isEmptyObject(n))||!b.isEmptyObject(d))for(t in c&&1===e.nodeType&&(A.overflow=[m.overflow,m.overflowX,m.overflowY],null==(r=f&&f.display)&&(r=Z.get(e,"display")),"none"===(C=b.css(e,"display"))&&(r?C=r:(de([e],!0),r=e.style.display||r,C=b.css(e,"display"),de([e]))),("inline"===C||"inline-block"===C&&null!=r)&&"none"===b.css(e,"float")&&(a||(u.done((function(){m.display=r})),null==r&&(C=m.display,r="none"===C?"":C)),m.display="inline-block")),A.overflow&&(m.overflow="hidden",u.always((function(){m.overflow=A.overflow[0],m.overflowX=A.overflow[1],m.overflowY=A.overflow[2]}))),a=!1,d)a||(f?"hidden"in f&&(p=f.hidden):f=Z.access(e,"fxshow",{display:r}),i&&(f.hidden=!p),p&&de([e],!0),u.done((function(){for(t in p||de([e]),Z.remove(e,"fxshow"),d)b.style(e,t,d[t])}))),a=un(p?f[t]:0,t,u),t in f||(f[t]=a.start,p&&(a.end=a.start,a.start=0))}],prefilter:function(e,n){n?dn.prefilters.unshift(e):dn.prefilters.push(e)}}),b.speed=function(e,n,A){var t=e&&"object"==typeof e?b.extend({},e):{complete:A||!A&&n||h(e)&&e,duration:e,easing:A&&n||n&&!h(n)&&n};return b.fx.off?t.duration=0:"number"!=typeof t.duration&&(t.duration in b.fx.speeds?t.duration=b.fx.speeds[t.duration]:t.duration=b.fx.speeds._default),null!=t.queue&&!0!==t.queue||(t.queue="fx"),t.old=t.complete,t.complete=function(){h(t.old)&&t.old.call(this),t.queue&&b.dequeue(this,t.queue)},t},b.fn.extend({fadeTo:function(e,n,A,t){return this.filter(re).css("opacity",0).show().end().animate({opacity:n},e,A,t)},animate:function(e,n,A,t){var l=b.isEmptyObject(e),i=b.speed(n,A,t),s=function(){var n=dn(this,b.extend({},e),i);(l||Z.get(this,"finish"))&&n.stop(!0)};return s.finish=s,l||!1===i.queue?this.each(s):this.queue(i.queue,s)},stop:function(e,n,A){var t=function(e){var n=e.stop;delete e.stop,n(A)};return"string"!=typeof e&&(A=n,n=e,e=void 0),n&&this.queue(e||"fx",[]),this.each((function(){var n=!0,l=null!=e&&e+"queueHooks",i=b.timers,s=Z.get(this);if(l)s[l]&&s[l].stop&&t(s[l]);else for(l in s)s[l]&&s[l].stop&&an.test(l)&&t(s[l]);for(l=i.length;l--;)i[l].elem!==this||null!=e&&i[l].queue!==e||(i[l].anim.stop(A),n=!1,i.splice(l,1));!n&&A||b.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var n,A=Z.get(this),t=A[e+"queue"],l=A[e+"queueHooks"],i=b.timers,s=t?t.length:0;for(A.finish=!0,b.queue(this,e,[]),l&&l.stop&&l.stop.call(this,!0),n=i.length;n--;)i[n].elem===this&&i[n].queue===e&&(i[n].anim.stop(!0),i.splice(n,1));for(n=0;n<s;n++)t[n]&&t[n].finish&&t[n].finish.call(this);delete A.finish}))}}),b.each(["toggle","show","hide"],(function(e,n){var A=b.fn[n];b.fn[n]=function(e,t,l){return null==e||"boolean"==typeof e?A.apply(this,arguments):this.animate(cn(n,!0),e,t,l)}})),b.each({slideDown:cn("show"),slideUp:cn("hide"),slideToggle:cn("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,n){b.fn[e]=function(e,A,t){return this.animate(n,e,A,t)}})),b.timers=[],b.fx.tick=function(){var e,n=0,A=b.timers;for(ln=Date.now();n<A.length;n++)(e=A[n])()||A[n]!==e||A.splice(n--,1);A.length||b.fx.stop(),ln=void 0},b.fx.timer=function(e){b.timers.push(e),b.fx.start()},b.fx.interval=13,b.fx.start=function(){sn||(sn=!0,rn())},b.fx.stop=function(){sn=null},b.fx.speeds={slow:600,fast:200,_default:400},b.fn.delay=function(e,n){return e=b.fx&&b.fx.speeds[e]||e,n=n||"fx",this.queue(n,(function(n,A){var l=t.setTimeout(n,e);A.stop=function(){t.clearTimeout(l)}}))},function(){var e=E.createElement("input"),n=E.createElement("select").appendChild(E.createElement("option"));e.type="checkbox",f.checkOn=""!==e.value,f.optSelected=n.selected,(e=E.createElement("input")).value="t",e.type="radio",f.radioValue="t"===e.value}();var mn,pn=b.expr.attrHandle;b.fn.extend({attr:function(e,n){return L(this,b.attr,e,n,arguments.length>1)},removeAttr:function(e){return this.each((function(){b.removeAttr(this,e)}))}}),b.extend({attr:function(e,n,A){var t,l,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?b.prop(e,n,A):(1===i&&b.isXMLDoc(e)||(l=b.attrHooks[n.toLowerCase()]||(b.expr.match.bool.test(n)?mn:void 0)),void 0!==A?null===A?void b.removeAttr(e,n):l&&"set"in l&&void 0!==(t=l.set(e,A,n))?t:(e.setAttribute(n,A+""),A):l&&"get"in l&&null!==(t=l.get(e,n))?t:null==(t=b.find.attr(e,n))?void 0:t)},attrHooks:{type:{set:function(e,n){if(!f.radioValue&&"radio"===n&&w(e,"input")){var A=e.value;return e.setAttribute("type",n),A&&(e.value=A),n}}}},removeAttr:function(e,n){var A,t=0,l=n&&n.match(k);if(l&&1===e.nodeType)for(;A=l[t++];)e.removeAttribute(A)}}),mn={set:function(e,n,A){return!1===n?b.removeAttr(e,A):e.setAttribute(A,A),A}},b.each(b.expr.match.bool.source.match(/\w+/g),(function(e,n){var A=pn[n]||b.find.attr;pn[n]=function(e,n,t){var l,i,s=n.toLowerCase();return t||(i=pn[s],pn[s]=l,l=null!=A(e,n,t)?s:null,pn[s]=i),l}}));var fn=/^(?:input|select|textarea|button)$/i,hn=/^(?:a|area)$/i;function vn(e){return(e.match(k)||[]).join(" ")}function En(e){return e.getAttribute&&e.getAttribute("class")||""}function gn(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(k)||[]}b.fn.extend({prop:function(e,n){return L(this,b.prop,e,n,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[b.propFix[e]||e]}))}}),b.extend({prop:function(e,n,A){var t,l,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&b.isXMLDoc(e)||(n=b.propFix[n]||n,l=b.propHooks[n]),void 0!==A?l&&"set"in l&&void 0!==(t=l.set(e,A,n))?t:e[n]=A:l&&"get"in l&&null!==(t=l.get(e,n))?t:e[n]},propHooks:{tabIndex:{get:function(e){var n=b.find.attr(e,"tabindex");return n?parseInt(n,10):fn.test(e.nodeName)||hn.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),f.optSelected||(b.propHooks.selected={get:function(e){var n=e.parentNode;return n&&n.parentNode&&n.parentNode.selectedIndex,null},set:function(e){var n=e.parentNode;n&&(n.selectedIndex,n.parentNode&&n.parentNode.selectedIndex)}}),b.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){b.propFix[this.toLowerCase()]=this})),b.fn.extend({addClass:function(e){var n,A,t,l,i,s,o,a=0;if(h(e))return this.each((function(n){b(this).addClass(e.call(this,n,En(this)))}));if((n=gn(e)).length)for(;A=this[a++];)if(l=En(A),t=1===A.nodeType&&" "+vn(l)+" "){for(s=0;i=n[s++];)t.indexOf(" "+i+" ")<0&&(t+=i+" ");l!==(o=vn(t))&&A.setAttribute("class",o)}return this},removeClass:function(e){var n,A,t,l,i,s,o,a=0;if(h(e))return this.each((function(n){b(this).removeClass(e.call(this,n,En(this)))}));if(!arguments.length)return this.attr("class","");if((n=gn(e)).length)for(;A=this[a++];)if(l=En(A),t=1===A.nodeType&&" "+vn(l)+" "){for(s=0;i=n[s++];)for(;t.indexOf(" "+i+" ")>-1;)t=t.replace(" "+i+" "," ");l!==(o=vn(t))&&A.setAttribute("class",o)}return this},toggleClass:function(e,n){var A=typeof e,t="string"===A||Array.isArray(e);return"boolean"==typeof n&&t?n?this.addClass(e):this.removeClass(e):h(e)?this.each((function(A){b(this).toggleClass(e.call(this,A,En(this),n),n)})):this.each((function(){var n,l,i,s;if(t)for(l=0,i=b(this),s=gn(e);n=s[l++];)i.hasClass(n)?i.removeClass(n):i.addClass(n);else void 0!==e&&"boolean"!==A||((n=En(this))&&Z.set(this,"__className__",n),this.setAttribute&&this.setAttribute("class",n||!1===e?"":Z.get(this,"__className__")||""))}))},hasClass:function(e){var n,A,t=0;for(n=" "+e+" ";A=this[t++];)if(1===A.nodeType&&(" "+vn(En(A))+" ").indexOf(n)>-1)return!0;return!1}});var yn=/\r/g;b.fn.extend({val:function(e){var n,A,t,l=this[0];return arguments.length?(t=h(e),this.each((function(A){var l;1===this.nodeType&&(null==(l=t?e.call(this,A,b(this).val()):e)?l="":"number"==typeof l?l+="":Array.isArray(l)&&(l=b.map(l,(function(e){return null==e?"":e+""}))),(n=b.valHooks[this.type]||b.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,l,"value")||(this.value=l))}))):l?(n=b.valHooks[l.type]||b.valHooks[l.nodeName.toLowerCase()])&&"get"in n&&void 0!==(A=n.get(l,"value"))?A:"string"==typeof(A=l.value)?A.replace(yn,""):null==A?"":A:void 0}}),b.extend({valHooks:{option:{get:function(e){var n=b.find.attr(e,"value");return null!=n?n:vn(b.text(e))}},select:{get:function(e){var n,A,t,l=e.options,i=e.selectedIndex,s="select-one"===e.type,o=s?null:[],a=s?i+1:l.length;for(t=i<0?a:s?i:0;t<a;t++)if(((A=l[t]).selected||t===i)&&!A.disabled&&(!A.parentNode.disabled||!w(A.parentNode,"optgroup"))){if(n=b(A).val(),s)return n;o.push(n)}return o},set:function(e,n){for(var A,t,l=e.options,i=b.makeArray(n),s=l.length;s--;)((t=l[s]).selected=b.inArray(b.valHooks.option.get(t),i)>-1)&&(A=!0);return A||(e.selectedIndex=-1),i}}}}),b.each(["radio","checkbox"],(function(){b.valHooks[this]={set:function(e,n){if(Array.isArray(n))return e.checked=b.inArray(b(e).val(),n)>-1}},f.checkOn||(b.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),f.focusin="onfocusin"in t;var In=/^(?:focusinfocus|focusoutblur)$/,Mn=function(e){e.stopPropagation()};b.extend(b.event,{trigger:function(e,n,A,l){var i,s,o,a,r,C,c,u,m=[A||E],p=d.call(e,"type")?e.type:e,f=d.call(e,"namespace")?e.namespace.split("."):[];if(s=u=o=A=A||E,3!==A.nodeType&&8!==A.nodeType&&!In.test(p+b.event.triggered)&&(p.indexOf(".")>-1&&(f=p.split("."),p=f.shift(),f.sort()),r=p.indexOf(":")<0&&"on"+p,(e=e[b.expando]?e:new b.Event(p,"object"==typeof e&&e)).isTrigger=l?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=A),n=null==n?[e]:b.makeArray(n,[e]),c=b.event.special[p]||{},l||!c.trigger||!1!==c.trigger.apply(A,n))){if(!l&&!c.noBubble&&!v(A)){for(a=c.delegateType||p,In.test(a+p)||(s=s.parentNode);s;s=s.parentNode)m.push(s),o=s;o===(A.ownerDocument||E)&&m.push(o.defaultView||o.parentWindow||t)}for(i=0;(s=m[i++])&&!e.isPropagationStopped();)u=s,e.type=i>1?a:c.bindType||p,(C=(Z.get(s,"events")||Object.create(null))[e.type]&&Z.get(s,"handle"))&&C.apply(s,n),(C=r&&s[r])&&C.apply&&z(s)&&(e.result=C.apply(s,n),!1===e.result&&e.preventDefault());return e.type=p,l||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(m.pop(),n)||!z(A)||r&&h(A[p])&&!v(A)&&((o=A[r])&&(A[r]=null),b.event.triggered=p,e.isPropagationStopped()&&u.addEventListener(p,Mn),A[p](),e.isPropagationStopped()&&u.removeEventListener(p,Mn),b.event.triggered=void 0,o&&(A[r]=o)),e.result}},simulate:function(e,n,A){var t=b.extend(new b.Event,A,{type:e,isSimulated:!0});b.event.trigger(t,null,n)}}),b.fn.extend({trigger:function(e,n){return this.each((function(){b.event.trigger(e,n,this)}))},triggerHandler:function(e,n){var A=this[0];if(A)return b.event.trigger(e,n,A,!0)}}),f.focusin||b.each({focus:"focusin",blur:"focusout"},(function(e,n){var A=function(e){b.event.simulate(n,e.target,b.event.fix(e))};b.event.special[n]={setup:function(){var t=this.ownerDocument||this.document||this,l=Z.access(t,n);l||t.addEventListener(e,A,!0),Z.access(t,n,(l||0)+1)},teardown:function(){var t=this.ownerDocument||this.document||this,l=Z.access(t,n)-1;l?Z.access(t,n,l):(t.removeEventListener(e,A,!0),Z.remove(t,n))}}}));var bn=t.location,Bn={guid:Date.now()},xn=/\?/;b.parseXML=function(e){var n,A;if(!e||"string"!=typeof e)return null;try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(e){}return A=n&&n.getElementsByTagName("parsererror")[0],n&&!A||b.error("Invalid XML: "+(A?b.map(A.childNodes,(function(e){return e.textContent})).join("\n"):e)),n};var Sn=/\[\]$/,Qn=/\r?\n/g,_n=/^(?:submit|button|image|reset|file)$/i,wn=/^(?:input|select|textarea|keygen)/i;function Vn(e,n,A,t){var l;if(Array.isArray(n))b.each(n,(function(n,l){A||Sn.test(e)?t(e,l):Vn(e+"["+("object"==typeof l&&null!=l?n:"")+"]",l,A,t)}));else if(A||"object"!==I(n))t(e,n);else for(l in n)Vn(e+"["+l+"]",n[l],A,t)}b.param=function(e,n){var A,t=[],l=function(e,n){var A=h(n)?n():n;t[t.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==A?"":A)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!b.isPlainObject(e))b.each(e,(function(){l(this.name,this.value)}));else for(A in e)Vn(A,e[A],n,l);return t.join("&")},b.fn.extend({serialize:function(){return b.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=b.prop(this,"elements");return e?b.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!b(this).is(":disabled")&&wn.test(this.nodeName)&&!_n.test(e)&&(this.checked||!fe.test(e))})).map((function(e,n){var A=b(this).val();return null==A?null:Array.isArray(A)?b.map(A,(function(e){return{name:n.name,value:e.replace(Qn,"\r\n")}})):{name:n.name,value:A.replace(Qn,"\r\n")}})).get()}});var Gn=/%20/g,On=/#.*$/,Dn=/([?&])_=[^&]*/,Tn=/^(.*?):[ \t]*([^\r\n]*)$/gm,Wn=/^(?:GET|HEAD)$/,Hn=/^\/\//,kn={},Pn={},Kn="*/".concat("*"),Un=E.createElement("a");function Fn(e){return function(n,A){"string"!=typeof n&&(A=n,n="*");var t,l=0,i=n.toLowerCase().match(k)||[];if(h(A))for(;t=i[l++];)"+"===t[0]?(t=t.slice(1)||"*",(e[t]=e[t]||[]).unshift(A)):(e[t]=e[t]||[]).push(A)}}function Nn(e,n,A,t){var l={},i=e===Pn;function s(o){var a;return l[o]=!0,b.each(e[o]||[],(function(e,o){var r=o(n,A,t);return"string"!=typeof r||i||l[r]?i?!(a=r):void 0:(n.dataTypes.unshift(r),s(r),!1)})),a}return s(n.dataTypes[0])||!l["*"]&&s("*")}function Yn(e,n){var A,t,l=b.ajaxSettings.flatOptions||{};for(A in n)void 0!==n[A]&&((l[A]?e:t||(t={}))[A]=n[A]);return t&&b.extend(!0,e,t),e}Un.href=bn.href,b.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:bn.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(bn.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Kn,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":b.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,n){return n?Yn(Yn(e,b.ajaxSettings),n):Yn(b.ajaxSettings,e)},ajaxPrefilter:Fn(kn),ajaxTransport:Fn(Pn),ajax:function(e,n){"object"==typeof e&&(n=e,e=void 0),n=n||{};var A,l,i,s,o,a,r,C,c,u,d=b.ajaxSetup({},n),m=d.context||d,p=d.context&&(m.nodeType||m.jquery)?b(m):b.event,f=b.Deferred(),h=b.Callbacks("once memory"),v=d.statusCode||{},g={},y={},I="canceled",M={readyState:0,getResponseHeader:function(e){var n;if(r){if(!s)for(s={};n=Tn.exec(i);)s[n[1].toLowerCase()+" "]=(s[n[1].toLowerCase()+" "]||[]).concat(n[2]);n=s[e.toLowerCase()+" "]}return null==n?null:n.join(", ")},getAllResponseHeaders:function(){return r?i:null},setRequestHeader:function(e,n){return null==r&&(e=y[e.toLowerCase()]=y[e.toLowerCase()]||e,g[e]=n),this},overrideMimeType:function(e){return null==r&&(d.mimeType=e),this},statusCode:function(e){var n;if(e)if(r)M.always(e[M.status]);else for(n in e)v[n]=[v[n],e[n]];return this},abort:function(e){var n=e||I;return A&&A.abort(n),B(0,n),this}};if(f.promise(M),d.url=((e||d.url||bn.href)+"").replace(Hn,bn.protocol+"//"),d.type=n.method||n.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(k)||[""],null==d.crossDomain){a=E.createElement("a");try{a.href=d.url,a.href=a.href,d.crossDomain=Un.protocol+"//"+Un.host!=a.protocol+"//"+a.host}catch(e){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=b.param(d.data,d.traditional)),Nn(kn,d,n,M),r)return M;for(c in(C=b.event&&d.global)&&0==b.active++&&b.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Wn.test(d.type),l=d.url.replace(On,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(Gn,"+")):(u=d.url.slice(l.length),d.data&&(d.processData||"string"==typeof d.data)&&(l+=(xn.test(l)?"&":"?")+d.data,delete d.data),!1===d.cache&&(l=l.replace(Dn,"$1"),u=(xn.test(l)?"&":"?")+"_="+Bn.guid+++u),d.url=l+u),d.ifModified&&(b.lastModified[l]&&M.setRequestHeader("If-Modified-Since",b.lastModified[l]),b.etag[l]&&M.setRequestHeader("If-None-Match",b.etag[l])),(d.data&&d.hasContent&&!1!==d.contentType||n.contentType)&&M.setRequestHeader("Content-Type",d.contentType),M.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Kn+"; q=0.01":""):d.accepts["*"]),d.headers)M.setRequestHeader(c,d.headers[c]);if(d.beforeSend&&(!1===d.beforeSend.call(m,M,d)||r))return M.abort();if(I="abort",h.add(d.complete),M.done(d.success),M.fail(d.error),A=Nn(Pn,d,n,M)){if(M.readyState=1,C&&p.trigger("ajaxSend",[M,d]),r)return M;d.async&&d.timeout>0&&(o=t.setTimeout((function(){M.abort("timeout")}),d.timeout));try{r=!1,A.send(g,B)}catch(e){if(r)throw e;B(-1,e)}}else B(-1,"No Transport");function B(e,n,s,a){var c,u,E,g,y,I=n;r||(r=!0,o&&t.clearTimeout(o),A=void 0,i=a||"",M.readyState=e>0?4:0,c=e>=200&&e<300||304===e,s&&(g=function(e,n,A){for(var t,l,i,s,o=e.contents,a=e.dataTypes;"*"===a[0];)a.shift(),void 0===t&&(t=e.mimeType||n.getResponseHeader("Content-Type"));if(t)for(l in o)if(o[l]&&o[l].test(t)){a.unshift(l);break}if(a[0]in A)i=a[0];else{for(l in A){if(!a[0]||e.converters[l+" "+a[0]]){i=l;break}s||(s=l)}i=i||s}if(i)return i!==a[0]&&a.unshift(i),A[i]}(d,M,s)),!c&&b.inArray("script",d.dataTypes)>-1&&b.inArray("json",d.dataTypes)<0&&(d.converters["text script"]=function(){}),g=function(e,n,A,t){var l,i,s,o,a,r={},C=e.dataTypes.slice();if(C[1])for(s in e.converters)r[s.toLowerCase()]=e.converters[s];for(i=C.shift();i;)if(e.responseFields[i]&&(A[e.responseFields[i]]=n),!a&&t&&e.dataFilter&&(n=e.dataFilter(n,e.dataType)),a=i,i=C.shift())if("*"===i)i=a;else if("*"!==a&&a!==i){if(!(s=r[a+" "+i]||r["* "+i]))for(l in r)if((o=l.split(" "))[1]===i&&(s=r[a+" "+o[0]]||r["* "+o[0]])){!0===s?s=r[l]:!0!==r[l]&&(i=o[0],C.unshift(o[1]));break}if(!0!==s)if(s&&e.throws)n=s(n);else try{n=s(n)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+a+" to "+i}}}return{state:"success",data:n}}(d,g,M,c),c?(d.ifModified&&((y=M.getResponseHeader("Last-Modified"))&&(b.lastModified[l]=y),(y=M.getResponseHeader("etag"))&&(b.etag[l]=y)),204===e||"HEAD"===d.type?I="nocontent":304===e?I="notmodified":(I=g.state,u=g.data,c=!(E=g.error))):(E=I,!e&&I||(I="error",e<0&&(e=0))),M.status=e,M.statusText=(n||I)+"",c?f.resolveWith(m,[u,I,M]):f.rejectWith(m,[M,I,E]),M.statusCode(v),v=void 0,C&&p.trigger(c?"ajaxSuccess":"ajaxError",[M,d,c?u:E]),h.fireWith(m,[M,I]),C&&(p.trigger("ajaxComplete",[M,d]),--b.active||b.event.trigger("ajaxStop")))}return M},getJSON:function(e,n,A){return b.get(e,n,A,"json")},getScript:function(e,n){return b.get(e,void 0,n,"script")}}),b.each(["get","post"],(function(e,n){b[n]=function(e,A,t,l){return h(A)&&(l=l||t,t=A,A=void 0),b.ajax(b.extend({url:e,type:n,dataType:l,data:A,success:t},b.isPlainObject(e)&&e))}})),b.ajaxPrefilter((function(e){var n;for(n in e.headers)"content-type"===n.toLowerCase()&&(e.contentType=e.headers[n]||"")})),b._evalUrl=function(e,n,A){return b.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){b.globalEval(e,n,A)}})},b.fn.extend({wrapAll:function(e){var n;return this[0]&&(h(e)&&(e=e.call(this[0])),n=b(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&n.insertBefore(this[0]),n.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return h(e)?this.each((function(n){b(this).wrapInner(e.call(this,n))})):this.each((function(){var n=b(this),A=n.contents();A.length?A.wrapAll(e):n.append(e)}))},wrap:function(e){var n=h(e);return this.each((function(A){b(this).wrapAll(n?e.call(this,A):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){b(this).replaceWith(this.childNodes)})),this}}),b.expr.pseudos.hidden=function(e){return!b.expr.pseudos.visible(e)},b.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},b.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(e){}};var Ln={0:200,1223:204},jn=b.ajaxSettings.xhr();f.cors=!!jn&&"withCredentials"in jn,f.ajax=jn=!!jn,b.ajaxTransport((function(e){var n,A;if(f.cors||jn&&!e.crossDomain)return{send:function(l,i){var s,o=e.xhr();if(o.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)o[s]=e.xhrFields[s];for(s in e.mimeType&&o.overrideMimeType&&o.overrideMimeType(e.mimeType),e.crossDomain||l["X-Requested-With"]||(l["X-Requested-With"]="XMLHttpRequest"),l)o.setRequestHeader(s,l[s]);n=function(e){return function(){n&&(n=A=o.onload=o.onerror=o.onabort=o.ontimeout=o.onreadystatechange=null,"abort"===e?o.abort():"error"===e?"number"!=typeof o.status?i(0,"error"):i(o.status,o.statusText):i(Ln[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=n(),A=o.onerror=o.ontimeout=n("error"),void 0!==o.onabort?o.onabort=A:o.onreadystatechange=function(){4===o.readyState&&t.setTimeout((function(){n&&A()}))},n=n("abort");try{o.send(e.hasContent&&e.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}})),b.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),b.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return b.globalEval(e),e}}}),b.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),b.ajaxTransport("script",(function(e){var n,A;if(e.crossDomain||e.scriptAttrs)return{send:function(t,l){n=b("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",A=function(e){n.remove(),A=null,e&&l("error"===e.type?404:200,e.type)}),E.head.appendChild(n[0])},abort:function(){A&&A()}}}));var qn,$n=[],Rn=/(=)\?(?=&|$)|\?\?/;b.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=$n.pop()||b.expando+"_"+Bn.guid++;return this[e]=!0,e}}),b.ajaxPrefilter("json jsonp",(function(e,n,A){var l,i,s,o=!1!==e.jsonp&&(Rn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Rn.test(e.data)&&"data");if(o||"jsonp"===e.dataTypes[0])return l=e.jsonpCallback=h(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,o?e[o]=e[o].replace(Rn,"$1"+l):!1!==e.jsonp&&(e.url+=(xn.test(e.url)?"&":"?")+e.jsonp+"="+l),e.converters["script json"]=function(){return s||b.error(l+" was not called"),s[0]},e.dataTypes[0]="json",i=t[l],t[l]=function(){s=arguments},A.always((function(){void 0===i?b(t).removeProp(l):t[l]=i,e[l]&&(e.jsonpCallback=n.jsonpCallback,$n.push(l)),s&&h(i)&&i(s[0]),s=i=void 0})),"script"})),f.createHTMLDocument=((qn=E.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===qn.childNodes.length),b.parseHTML=function(e,n,A){return"string"!=typeof e?[]:("boolean"==typeof n&&(A=n,n=!1),n||(f.createHTMLDocument?((t=(n=E.implementation.createHTMLDocument("")).createElement("base")).href=E.location.href,n.head.appendChild(t)):n=E),i=!A&&[],(l=V.exec(e))?[n.createElement(l[1])]:(l=Me([e],n,i),i&&i.length&&b(i).remove(),b.merge([],l.childNodes)));var t,l,i},b.fn.load=function(e,n,A){var t,l,i,s=this,o=e.indexOf(" ");return o>-1&&(t=vn(e.slice(o)),e=e.slice(0,o)),h(n)?(A=n,n=void 0):n&&"object"==typeof n&&(l="POST"),s.length>0&&b.ajax({url:e,type:l||"GET",dataType:"html",data:n}).done((function(e){i=arguments,s.html(t?b("<div>").append(b.parseHTML(e)).find(t):e)})).always(A&&function(e,n){s.each((function(){A.apply(this,i||[e.responseText,n,e])}))}),this},b.expr.pseudos.animated=function(e){return b.grep(b.timers,(function(n){return e===n.elem})).length},b.offset={setOffset:function(e,n,A){var t,l,i,s,o,a,r=b.css(e,"position"),C=b(e),c={};"static"===r&&(e.style.position="relative"),o=C.offset(),i=b.css(e,"top"),a=b.css(e,"left"),("absolute"===r||"fixed"===r)&&(i+a).indexOf("auto")>-1?(s=(t=C.position()).top,l=t.left):(s=parseFloat(i)||0,l=parseFloat(a)||0),h(n)&&(n=n.call(e,A,b.extend({},o))),null!=n.top&&(c.top=n.top-o.top+s),null!=n.left&&(c.left=n.left-o.left+l),"using"in n?n.using.call(e,c):C.css(c)}},b.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(n){b.offset.setOffset(this,e,n)}));var n,A,t=this[0];return t?t.getClientRects().length?(n=t.getBoundingClientRect(),A=t.ownerDocument.defaultView,{top:n.top+A.pageYOffset,left:n.left+A.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,n,A,t=this[0],l={top:0,left:0};if("fixed"===b.css(t,"position"))n=t.getBoundingClientRect();else{for(n=this.offset(),A=t.ownerDocument,e=t.offsetParent||A.documentElement;e&&(e===A.body||e===A.documentElement)&&"static"===b.css(e,"position");)e=e.parentNode;e&&e!==t&&1===e.nodeType&&((l=b(e).offset()).top+=b.css(e,"borderTopWidth",!0),l.left+=b.css(e,"borderLeftWidth",!0))}return{top:n.top-l.top-b.css(t,"marginTop",!0),left:n.left-l.left-b.css(t,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===b.css(e,"position");)e=e.offsetParent;return e||se}))}}),b.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,n){var A="pageYOffset"===n;b.fn[e]=function(t){return L(this,(function(e,t,l){var i;if(v(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===l)return i?i[n]:e[t];i?i.scrollTo(A?i.pageXOffset:l,A?l:i.pageYOffset):e[t]=l}),e,t,arguments.length)}})),b.each(["top","left"],(function(e,n){b.cssHooks[n]=Le(f.pixelPosition,(function(e,A){if(A)return A=Ye(e,n),Ke.test(A)?b(e).position()[n]+"px":A}))})),b.each({Height:"height",Width:"width"},(function(e,n){b.each({padding:"inner"+e,content:n,"":"outer"+e},(function(A,t){b.fn[t]=function(l,i){var s=arguments.length&&(A||"boolean"!=typeof l),o=A||(!0===l||!0===i?"margin":"border");return L(this,(function(n,A,l){var i;return v(n)?0===t.indexOf("outer")?n["inner"+e]:n.document.documentElement["client"+e]:9===n.nodeType?(i=n.documentElement,Math.max(n.body["scroll"+e],i["scroll"+e],n.body["offset"+e],i["offset"+e],i["client"+e])):void 0===l?b.css(n,A,o):b.style(n,A,l,o)}),n,s?l:void 0,s)}}))})),b.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,n){b.fn[n]=function(e){return this.on(n,e)}})),b.fn.extend({bind:function(e,n,A){return this.on(e,null,n,A)},unbind:function(e,n){return this.off(e,null,n)},delegate:function(e,n,A,t){return this.on(n,e,A,t)},undelegate:function(e,n,A){return 1===arguments.length?this.off(e,"**"):this.off(n,e||"**",A)},hover:function(e,n){return this.mouseenter(e).mouseleave(n||e)}}),b.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,n){b.fn[n]=function(e,A){return arguments.length>0?this.on(n,null,e,A):this.trigger(n)}}));var zn=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;b.proxy=function(e,n){var A,t,l;if("string"==typeof n&&(A=e[n],n=e,e=A),h(e))return t=o.call(arguments,2),l=function(){return e.apply(n||this,t.concat(o.call(arguments)))},l.guid=e.guid=e.guid||b.guid++,l},b.holdReady=function(e){e?b.readyWait++:b.ready(!0)},b.isArray=Array.isArray,b.parseJSON=JSON.parse,b.nodeName=w,b.isFunction=h,b.isWindow=v,b.camelCase=R,b.type=I,b.now=Date.now,b.isNumeric=function(e){var n=b.type(e);return("number"===n||"string"===n)&&!isNaN(e-parseFloat(e))},b.trim=function(e){return null==e?"":(e+"").replace(zn,"")},void 0===(A=function(){return b}.apply(n,[]))||(e.exports=A);var Xn=t.jQuery,Zn=t.$;return b.noConflict=function(e){return t.$===b&&(t.$=Zn),e&&t.jQuery===b&&(t.jQuery=Xn),b},void 0===l&&(t.jQuery=t.$=b),b}))},"./src/plugin/Model sync recursive .ts$":(e,n,A)=>{var t={"./Model.ts":"./src/plugin/Model/Model.ts","./model.test.ts":"./src/plugin/Model/model.test.ts","./types.ts":"./src/plugin/Model/types.ts"};function l(e){var n=i(e);return A(n)}function i(e){if(!A.o(t,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t[e]}l.keys=function(){return Object.keys(t)},l.resolve=i,e.exports=l,l.id="./src/plugin/Model sync recursive .ts$"},"./src/plugin/Model sync recursive test.ts$":(e,n,A)=>{var t={"./model.test.ts":"./src/plugin/Model/model.test.ts"};function l(e){var n=i(e);return A(n)}function i(e){if(!A.o(t,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t[e]}l.keys=function(){return Object.keys(t)},l.resolve=i,e.exports=l,l.id="./src/plugin/Model sync recursive test.ts$"},"./src/plugin/Presenter sync recursive .ts$":(e,n,A)=>{var t={"./Presenter.ts":"./src/plugin/Presenter/Presenter.ts","./presenter.test.ts":"./src/plugin/Presenter/presenter.test.ts","./types.ts":"./src/plugin/Presenter/types.ts"};function l(e){var n=i(e);return A(n)}function i(e){if(!A.o(t,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t[e]}l.keys=function(){return Object.keys(t)},l.resolve=i,e.exports=l,l.id="./src/plugin/Presenter sync recursive .ts$"},"./src/plugin/Presenter sync recursive test.ts$":(e,n,A)=>{var t={"./presenter.test.ts":"./src/plugin/Presenter/presenter.test.ts"};function l(e){var n=i(e);return A(n)}function i(e){if(!A.o(t,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t[e]}l.keys=function(){return Object.keys(t)},l.resolve=i,e.exports=l,l.id="./src/plugin/Presenter sync recursive test.ts$"},"./src/plugin/View sync recursive .ts$":(e,n,A)=>{var t={"./Handles/Handles.ts":"./src/plugin/View/Handles/Handles.ts","./Handles/handles.test.ts":"./src/plugin/View/Handles/handles.test.ts","./Handles/types.ts":"./src/plugin/View/Handles/types.ts","./Movement/Movement.ts":"./src/plugin/View/Movement/Movement.ts","./Movement/movement.test.ts":"./src/plugin/View/Movement/movement.test.ts","./Movement/types.ts":"./src/plugin/View/Movement/types.ts","./SelectedInterval/SelectedInterval.ts":"./src/plugin/View/SelectedInterval/SelectedInterval.ts","./SelectedInterval/selectedInterval.test.ts":"./src/plugin/View/SelectedInterval/selectedInterval.test.ts","./SelectedInterval/types.ts":"./src/plugin/View/SelectedInterval/types.ts","./Slider/Slider.ts":"./src/plugin/View/Slider/Slider.ts","./Slider/slider.test.ts":"./src/plugin/View/Slider/slider.test.ts","./Slider/types.ts":"./src/plugin/View/Slider/types.ts","./ValuesScale/ValuesScale.ts":"./src/plugin/View/ValuesScale/ValuesScale.ts","./ValuesScale/interfaces.ts":"./src/plugin/View/ValuesScale/interfaces.ts","./ValuesScale/valueScale.test.ts":"./src/plugin/View/ValuesScale/valueScale.test.ts","./View.ts":"./src/plugin/View/View.ts","./types.ts":"./src/plugin/View/types.ts","./view.test.ts":"./src/plugin/View/view.test.ts"};function l(e){var n=i(e);return A(n)}function i(e){if(!A.o(t,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t[e]}l.keys=function(){return Object.keys(t)},l.resolve=i,e.exports=l,l.id="./src/plugin/View sync recursive .ts$"},"./src/plugin/View sync recursive test.ts$":(e,n,A)=>{var t={"./Handles/handles.test.ts":"./src/plugin/View/Handles/handles.test.ts","./Movement/movement.test.ts":"./src/plugin/View/Movement/movement.test.ts","./SelectedInterval/selectedInterval.test.ts":"./src/plugin/View/SelectedInterval/selectedInterval.test.ts","./Slider/slider.test.ts":"./src/plugin/View/Slider/slider.test.ts","./ValuesScale/valueScale.test.ts":"./src/plugin/View/ValuesScale/valueScale.test.ts","./view.test.ts":"./src/plugin/View/view.test.ts"};function l(e){var n=i(e);return A(n)}function i(e){if(!A.o(t,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t[e]}l.keys=function(){return Object.keys(t)},l.resolve=i,e.exports=l,l.id="./src/plugin/View sync recursive test.ts$"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,