(self["webpackChunktest"] = self["webpackChunktest"] || []).push([["commons"],{

/***/ "./node_modules/autobind-decorator/lib/esm/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/autobind-decorator/lib/esm/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "boundMethod": () => (/* binding */ boundMethod),
/* harmony export */   "boundClass": () => (/* binding */ boundClass),
/* harmony export */   "default": () => (/* binding */ autobind)
/* harmony export */ });
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Return a descriptor removing the value and returning a getter
 * The getter will return a .bind version of the function
 * and memoize the result against a symbol on the instance
 */
function boundMethod(target, key, descriptor) {
  var fn = descriptor.value;

  if (typeof fn !== 'function') {
    throw new TypeError("@boundMethod decorator can only be applied to methods not: ".concat(_typeof(fn)));
  } // In IE11 calling Object.defineProperty has a side-effect of evaluating the
  // getter for the property which is being replaced. This causes infinite
  // recursion and an "Out of stack space" error.


  var definingProperty = false;
  return {
    configurable: true,
    get: function get() {
      // eslint-disable-next-line no-prototype-builtins
      if (definingProperty || this === target.prototype || this.hasOwnProperty(key) || typeof fn !== 'function') {
        return fn;
      }

      var boundFn = fn.bind(this);
      definingProperty = true;
      Object.defineProperty(this, key, {
        configurable: true,
        get: function get() {
          return boundFn;
        },
        set: function set(value) {
          fn = value;
          delete this[key];
        }
      });
      definingProperty = false;
      return boundFn;
    },
    set: function set(value) {
      fn = value;
    }
  };
}
/**
 * Use boundMethod to bind all methods on the target.prototype
 */

function boundClass(target) {
  // (Using reflect to get all keys including symbols)
  var keys; // Use Reflect if exists

  if (typeof Reflect !== 'undefined' && typeof Reflect.ownKeys === 'function') {
    keys = Reflect.ownKeys(target.prototype);
  } else {
    keys = Object.getOwnPropertyNames(target.prototype); // Use symbols if support is provided

    if (typeof Object.getOwnPropertySymbols === 'function') {
      keys = keys.concat(Object.getOwnPropertySymbols(target.prototype));
    }
  }

  keys.forEach(function (key) {
    // Ignore special case target method
    if (key === 'constructor') {
      return;
    }

    var descriptor = Object.getOwnPropertyDescriptor(target.prototype, key); // Only methods need binding

    if (typeof descriptor.value === 'function') {
      Object.defineProperty(target.prototype, key, boundMethod(target, key, descriptor));
    }
  });
  return target;
}
function autobind() {
  if (arguments.length === 1) {
    return boundClass.apply(void 0, arguments);
  }

  return boundMethod.apply(void 0, arguments);
}

/***/ }),

/***/ "./src/Model/Model.ts":
/*!****************************!*\
  !*** ./src/Model/Model.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
var cov_2d1ci5q1n1=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\Model\\Model.ts",hash="d7ed0676310d9b0420dbb2f8ad84384c0d76dfe2",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\Model\\Model.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:23}},"2":{start:{line:6,column:8},end:{line:11,column:10}},"3":{start:{line:14,column:8},end:{line:14,column:46}},"4":{start:{line:17,column:27},end:{line:17,column:94}},"5":{start:{line:18,column:31},end:{line:18,column:71}},"6":{start:{line:19,column:26},end:{line:19,column:67}},"7":{start:{line:20,column:8},end:{line:27,column:9}},"8":{start:{line:22,column:16},end:{line:22,column:40}},"9":{start:{line:24,column:16},end:{line:24,column:40}},"10":{start:{line:26,column:16},end:{line:26,column:40}},"11":{start:{line:30,column:32},end:{line:33,column:9}},"12":{start:{line:31,column:27},end:{line:31,column:181}},"13":{start:{line:32,column:12},end:{line:32,column:57}},"14":{start:{line:34,column:8},end:{line:34,column:94}},"15":{start:{line:37,column:34},end:{line:37,column:134}},"16":{start:{line:37,column:46},end:{line:37,column:133}},"17":{start:{line:38,column:8},end:{line:45,column:10}},"18":{start:{line:48,column:31},end:{line:48,column:81}},"19":{start:{line:49,column:29},end:{line:49,column:77}},"20":{start:{line:50,column:37},end:{line:50,column:79}},"21":{start:{line:52,column:8},end:{line:57,column:9}},"22":{start:{line:53,column:12},end:{line:53,column:47}},"23":{start:{line:56,column:12},end:{line:56,column:45}},"24":{start:{line:58,column:8},end:{line:58,column:39}},"25":{start:{line:59,column:8},end:{line:64,column:10}},"26":{start:{line:67,column:45},end:{line:67,column:53}},"27":{start:{line:68,column:23},end:{line:68,column:31}},"28":{start:{line:69,column:22},end:{line:69,column:103}},"29":{start:{line:70,column:8},end:{line:71,column:27}},"30":{start:{line:71,column:12},end:{line:71,column:27}},"31":{start:{line:72,column:8},end:{line:73,column:27}},"32":{start:{line:73,column:12},end:{line:73,column:27}},"33":{start:{line:74,column:26},end:{line:74,column:124}},"34":{start:{line:75,column:8},end:{line:75,column:63}},"35":{start:{line:78,column:8},end:{line:78,column:55}},"36":{start:{line:81,column:8},end:{line:81,column:55}},"37":{start:{line:84,column:8},end:{line:84,column:108}},"38":{start:{line:87,column:8},end:{line:87,column:108}},"39":{start:{line:91,column:8},end:{line:96,column:9}},"40":{start:{line:92,column:12},end:{line:92,column:41}},"41":{start:{line:95,column:12},end:{line:95,column:91}},"42":{start:{line:97,column:29},end:{line:97,column:31}},"43":{start:{line:98,column:8},end:{line:103,column:9}},"44":{start:{line:99,column:12},end:{line:99,column:107}},"45":{start:{line:101,column:13},end:{line:103,column:9}},"46":{start:{line:102,column:12},end:{line:102,column:109}},"47":{start:{line:104,column:8},end:{line:104,column:30}},"48":{start:{line:107,column:21},end:{line:111,column:10}},"49":{start:{line:112,column:24},end:{line:112,column:32}},"50":{start:{line:113,column:8},end:{line:115,column:9}},"51":{start:{line:114,column:12},end:{line:114,column:71}},"52":{start:{line:116,column:8},end:{line:118,column:9}},"53":{start:{line:117,column:12},end:{line:117,column:73}},"54":{start:{line:119,column:8},end:{line:119,column:21}},"55":{start:{line:122,column:8},end:{line:123,column:45}},"56":{start:{line:123,column:12},end:{line:123,column:45}},"57":{start:{line:124,column:8},end:{line:125,column:45}},"58":{start:{line:125,column:12},end:{line:125,column:45}},"59":{start:{line:126,column:8},end:{line:127,column:65}},"60":{start:{line:127,column:12},end:{line:127,column:65}},"61":{start:{line:128,column:8},end:{line:128,column:81}},"62":{start:{line:129,column:8},end:{line:134,column:10}},"63":{start:{line:137,column:8},end:{line:138,column:56}},"64":{start:{line:138,column:12},end:{line:138,column:56}},"65":{start:{line:139,column:8},end:{line:139,column:21}},"66":{start:{line:142,column:8},end:{line:143,column:56}},"67":{start:{line:143,column:12},end:{line:143,column:56}},"68":{start:{line:144,column:8},end:{line:144,column:21}},"69":{start:{line:147,column:25},end:{line:147,column:33}},"70":{start:{line:148,column:24},end:{line:148,column:32}},"71":{start:{line:149,column:8},end:{line:160,column:9}},"72":{start:{line:151,column:16},end:{line:151,column:103}},"73":{start:{line:152,column:16},end:{line:152,column:40}},"74":{start:{line:153,column:16},end:{line:153,column:22}},"75":{start:{line:155,column:16},end:{line:155,column:101}},"76":{start:{line:156,column:16},end:{line:156,column:40}},"77":{start:{line:157,column:16},end:{line:157,column:22}},"78":{start:{line:159,column:16},end:{line:159,column:22}},"79":{start:{line:161,column:8},end:{line:162,column:47}},"80":{start:{line:162,column:12},end:{line:162,column:47}},"81":{start:{line:163,column:8},end:{line:164,column:45}},"82":{start:{line:164,column:12},end:{line:164,column:45}},"83":{start:{line:167,column:0},end:{line:167,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:26},end:{line:12,column:5}},line:5},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:28},end:{line:15,column:5}},line:13},"2":{name:"(anonymous_2)",decl:{start:{line:16,column:4},end:{line:16,column:5}},loc:{start:{line:16,column:43},end:{line:28,column:5}},line:16},"3":{name:"(anonymous_3)",decl:{start:{line:29,column:4},end:{line:29,column:5}},loc:{start:{line:29,column:40},end:{line:35,column:5}},line:29},"4":{name:"(anonymous_4)",decl:{start:{line:30,column:32},end:{line:30,column:33}},loc:{start:{line:30,column:53},end:{line:33,column:9}},line:30},"5":{name:"(anonymous_5)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:33},end:{line:46,column:5}},line:36},"6":{name:"(anonymous_6)",decl:{start:{line:37,column:34},end:{line:37,column:35}},loc:{start:{line:37,column:46},end:{line:37,column:133}},line:37},"7":{name:"(anonymous_7)",decl:{start:{line:47,column:4},end:{line:47,column:5}},loc:{start:{line:47,column:42},end:{line:65,column:5}},line:47},"8":{name:"(anonymous_8)",decl:{start:{line:66,column:4},end:{line:66,column:5}},loc:{start:{line:66,column:33},end:{line:76,column:5}},line:66},"9":{name:"(anonymous_9)",decl:{start:{line:77,column:4},end:{line:77,column:5}},loc:{start:{line:77,column:38},end:{line:79,column:5}},line:77},"10":{name:"(anonymous_10)",decl:{start:{line:80,column:4},end:{line:80,column:5}},loc:{start:{line:80,column:37},end:{line:82,column:5}},line:80},"11":{name:"(anonymous_11)",decl:{start:{line:83,column:4},end:{line:83,column:5}},loc:{start:{line:83,column:65},end:{line:85,column:5}},line:83},"12":{name:"(anonymous_12)",decl:{start:{line:86,column:4},end:{line:86,column:5}},loc:{start:{line:86,column:66},end:{line:88,column:5}},line:86},"13":{name:"(anonymous_13)",decl:{start:{line:89,column:4},end:{line:89,column:5}},loc:{start:{line:89,column:52},end:{line:105,column:5}},line:89},"14":{name:"(anonymous_14)",decl:{start:{line:106,column:4},end:{line:106,column:5}},loc:{start:{line:106,column:35},end:{line:120,column:5}},line:106},"15":{name:"(anonymous_15)",decl:{start:{line:121,column:4},end:{line:121,column:5}},loc:{start:{line:121,column:41},end:{line:135,column:5}},line:121},"16":{name:"(anonymous_16)",decl:{start:{line:136,column:4},end:{line:136,column:5}},loc:{start:{line:136,column:38},end:{line:140,column:5}},line:136},"17":{name:"(anonymous_17)",decl:{start:{line:141,column:4},end:{line:141,column:5}},loc:{start:{line:141,column:36},end:{line:145,column:5}},line:141},"18":{name:"(anonymous_18)",decl:{start:{line:146,column:4},end:{line:146,column:5}},loc:{start:{line:146,column:38},end:{line:165,column:5}},line:146}},branchMap:{"0":{loc:{start:{line:17,column:27},end:{line:17,column:94}},type:"binary-expr",locations:[{start:{line:17,column:27},end:{line:17,column:51}},{start:{line:17,column:55},end:{line:17,column:94}}],line:17},"1":{loc:{start:{line:19,column:26},end:{line:19,column:67}},type:"binary-expr",locations:[{start:{line:19,column:26},end:{line:19,column:49}},{start:{line:19,column:53},end:{line:19,column:67}}],line:19},"2":{loc:{start:{line:20,column:8},end:{line:27,column:9}},type:"switch",locations:[{start:{line:21,column:12},end:{line:22,column:40}},{start:{line:23,column:12},end:{line:24,column:40}},{start:{line:25,column:12},end:{line:26,column:40}}],line:20},"3":{loc:{start:{line:50,column:37},end:{line:50,column:79}},type:"binary-expr",locations:[{start:{line:50,column:37},end:{line:50,column:66}},{start:{line:50,column:70},end:{line:50,column:79}}],line:50},"4":{loc:{start:{line:52,column:8},end:{line:57,column:9}},type:"if",locations:[{start:{line:52,column:8},end:{line:57,column:9}},{start:{line:52,column:8},end:{line:57,column:9}}],line:52},"5":{loc:{start:{line:70,column:8},end:{line:71,column:27}},type:"if",locations:[{start:{line:70,column:8},end:{line:71,column:27}},{start:{line:70,column:8},end:{line:71,column:27}}],line:70},"6":{loc:{start:{line:72,column:8},end:{line:73,column:27}},type:"if",locations:[{start:{line:72,column:8},end:{line:73,column:27}},{start:{line:72,column:8},end:{line:73,column:27}}],line:72},"7":{loc:{start:{line:84,column:15},end:{line:84,column:107}},type:"binary-expr",locations:[{start:{line:84,column:16},end:{line:84,column:31}},{start:{line:84,column:37},end:{line:84,column:106}}],line:84},"8":{loc:{start:{line:87,column:15},end:{line:87,column:107}},type:"binary-expr",locations:[{start:{line:87,column:16},end:{line:87,column:29}},{start:{line:87,column:35},end:{line:87,column:106}}],line:87},"9":{loc:{start:{line:91,column:8},end:{line:96,column:9}},type:"if",locations:[{start:{line:91,column:8},end:{line:96,column:9}},{start:{line:91,column:8},end:{line:96,column:9}}],line:91},"10":{loc:{start:{line:98,column:8},end:{line:103,column:9}},type:"if",locations:[{start:{line:98,column:8},end:{line:103,column:9}},{start:{line:98,column:8},end:{line:103,column:9}}],line:98},"11":{loc:{start:{line:101,column:13},end:{line:103,column:9}},type:"if",locations:[{start:{line:101,column:13},end:{line:103,column:9}},{start:{line:101,column:13},end:{line:103,column:9}}],line:101},"12":{loc:{start:{line:113,column:8},end:{line:115,column:9}},type:"if",locations:[{start:{line:113,column:8},end:{line:115,column:9}},{start:{line:113,column:8},end:{line:115,column:9}}],line:113},"13":{loc:{start:{line:116,column:8},end:{line:118,column:9}},type:"if",locations:[{start:{line:116,column:8},end:{line:118,column:9}},{start:{line:116,column:8},end:{line:118,column:9}}],line:116},"14":{loc:{start:{line:122,column:8},end:{line:123,column:45}},type:"if",locations:[{start:{line:122,column:8},end:{line:123,column:45}},{start:{line:122,column:8},end:{line:123,column:45}}],line:122},"15":{loc:{start:{line:124,column:8},end:{line:125,column:45}},type:"if",locations:[{start:{line:124,column:8},end:{line:125,column:45}},{start:{line:124,column:8},end:{line:125,column:45}}],line:124},"16":{loc:{start:{line:126,column:8},end:{line:127,column:65}},type:"if",locations:[{start:{line:126,column:8},end:{line:127,column:65}},{start:{line:126,column:8},end:{line:127,column:65}}],line:126},"17":{loc:{start:{line:137,column:8},end:{line:138,column:56}},type:"if",locations:[{start:{line:137,column:8},end:{line:138,column:56}},{start:{line:137,column:8},end:{line:138,column:56}}],line:137},"18":{loc:{start:{line:142,column:8},end:{line:143,column:56}},type:"if",locations:[{start:{line:142,column:8},end:{line:143,column:56}},{start:{line:142,column:8},end:{line:143,column:56}}],line:142},"19":{loc:{start:{line:149,column:8},end:{line:160,column:9}},type:"switch",locations:[{start:{line:150,column:12},end:{line:153,column:22}},{start:{line:154,column:12},end:{line:157,column:22}},{start:{line:158,column:12},end:{line:159,column:22}}],line:149},"20":{loc:{start:{line:161,column:8},end:{line:162,column:47}},type:"if",locations:[{start:{line:161,column:8},end:{line:162,column:47}},{start:{line:161,column:8},end:{line:162,column:47}}],line:161},"21":{loc:{start:{line:163,column:8},end:{line:164,column:45}},type:"if",locations:[{start:{line:163,column:8},end:{line:164,column:45}},{start:{line:163,column:8},end:{line:164,column:45}}],line:163}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},b:{"0":[0,0],"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0,0],"20":[0,0],"21":[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\Model\\Model.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\Model\\Model.ts"],names:[],mappings:"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",sourcesContent:["import { DataForAdjustPosition, DataForAdjustPositionBasic } from '../View/Handles/types';\r\nimport {\r\n  BasicModelSettings,\r\n  CalculationData,\r\n  DataForPrepareValue,\r\n  DataForRefreshingModel,\r\n  DataForValueScale,\r\n  StepCalculateData,\r\n  StepInfoFromModel,\r\n  ValuesRangeData,\r\n} from './types';\r\n\r\nclass Model {\r\n  public values: BasicModelSettings;\r\n\r\n  constructor(settings: BasicModelSettings) {\r\n    this.values = {\r\n      min: Model.truncatesNumbersAfterDot(Number(settings.min)),\r\n      max: Model.truncatesNumbersAfterDot(Number(settings.max)),\r\n      from: Model.truncatesNumbersAfterDot(Number(settings.from)),\r\n      to: Model.truncatesNumbersAfterDot(Number(settings.to)),\r\n    };\r\n  }\r\n\r\n  private writesDataToModel(data: DataForRefreshingModel): void {\r\n    this.values[data.target] = data.value;\r\n  }\r\n\r\n  public static truncatesNumbersAfterDot(value: number): string {\r\n    const isLastZero: boolean = !Number.isInteger(value) && `${value.toFixed(2)}`.slice(-1) === '0';\r\n    const areLastTwoZero: boolean = `${value.toFixed(2)}`.slice(-2) === '00';\r\n    const isInteger: boolean = Number.isInteger(value) || areLastTwoZero;\r\n\r\n    switch (true) {\r\n      case isInteger:\r\n        return value.toFixed(0);\r\n      case isLastZero:\r\n        return value.toFixed(1);\r\n      default:\r\n        return value.toFixed(2);\r\n    }\r\n  }\r\n\r\n  public calculateValuesByPosition(settings: CalculationData): void {\r\n    const calculateValues = (calculationData: CalculationData): string => {\r\n      const value: number = (Number(this.values.min) + (Number(calculationData.position) / (\r\n        Number(calculationData.sliderWidth) / (Number(this.values.max) - Number(this.values.min)))\r\n      ));\r\n      return Model.truncatesNumbersAfterDot(value);\r\n    };\r\n\r\n    this.writesDataToModel({ target: settings.target, value: calculateValues(settings) });\r\n  }\r\n\r\n  public calculateDataForValueScale(): DataForValueScale {\r\n    const calculatePosition = (ratio: number) => (\r\n      ((Number(this.values.max) - Number(this.values.min)) * ratio) + Number(this.values.min)\r\n    );\r\n\r\n    return {\r\n      min: Model.truncatesNumbersAfterDot(Number(this.values.min)),\r\n      max: Model.truncatesNumbersAfterDot(Number(this.values.max)),\r\n      20: Model.truncatesNumbersAfterDot(calculatePosition(0.2)),\r\n      40: Model.truncatesNumbersAfterDot(calculatePosition(0.4)),\r\n      60: Model.truncatesNumbersAfterDot(calculatePosition(0.6)),\r\n      80: Model.truncatesNumbersAfterDot(calculatePosition(0.8)),\r\n    };\r\n  }\r\n\r\n  public assignValueFromScale(value: string, isDouble: boolean): DataForAdjustPosition {\r\n    const fromDifference = Math.abs(Number(this.values.from) - Number(value));\r\n    const toDifference = Math.abs(Number(this.values.to) - Number(value));\r\n    const isFromDifferenceLess = fromDifference < toDifference || !isDouble;\r\n    let result: DataForAdjustPositionBasic;\r\n\r\n    if (isFromDifferenceLess) {\r\n      result = { target: 'from', value };\r\n    } else {\r\n      result = { target: 'to', value };\r\n    }\r\n\r\n    this.writesDataToModel(result);\r\n    return {\r\n      target: result.target,\r\n      value: result.value,\r\n      totalValues: Number(this.values.max) - Number(this.values.min),\r\n      minValue: this.values.min,\r\n    };\r\n  }\r\n\r\n  public calculateStepWidth(settings: StepCalculateData): StepInfoFromModel {\r\n    const { sliderWidth, handleWidth } = settings;\r\n    let { step } = settings;\r\n    let minStep: number = (Number(this.values.max) - Number(this.values.min)) / (sliderWidth - handleWidth);\r\n\r\n    if (minStep <= 0) minStep = 0.01;\r\n    if (step < minStep) step = minStep;\r\n\r\n    const stepWidth: number = (\r\n      (sliderWidth - handleWidth) / (Number(this.values.max) - Number(this.values.min))\r\n    ) * Number(step);\r\n    return { minStep, stepWidth: String(stepWidth), step };\r\n  }\r\n\r\n  private checkIsValueSmallerThanMin(value: string): boolean {\r\n    return Number(value) < Number(this.values.min);\r\n  }\r\n\r\n  private checkIsValueBiggerThanMax(value: string): boolean {\r\n    return Number(value) > Number(this.values.max);\r\n  }\r\n\r\n  private checkIsFromValueBiggerThanTo(name: string, value: string, step: string, handleWidth: number): boolean {\r\n    return (name === 'from') && (Number(value) > Number(this.values.to) - (handleWidth / Number(step)));\r\n  }\r\n\r\n  private checkIsToValueSmallerThanFrom(name: string, value: string, step: string, handleWidth: number): boolean {\r\n    return (name === 'to') && (Number(value) < Number(this.values.from) + (handleWidth / Number(step)));\r\n  }\r\n\r\n  private correctFromBiggerThenTo(settings: DataForPrepareValue, step: StepInfoFromModel, target: string): string {\r\n    let adjustOffset: number;\r\n\r\n    if (typeof settings.step === 'number') {\r\n      adjustOffset = settings.step;\r\n    } else {\r\n      adjustOffset = Number(Math.round(settings.handleWidth * Number(step.minStep)));\r\n    }\r\n\r\n    let newHandleValue: string = '';\r\n\r\n    if (target === 'to') {\r\n      newHandleValue = String(Model.truncatesNumbersAfterDot(Number(this.values.to) - adjustOffset));\r\n    } else if (target === 'from') {\r\n      newHandleValue = String(Model.truncatesNumbersAfterDot(Number(this.values.from) + adjustOffset));\r\n    }\r\n\r\n    return newHandleValue;\r\n  }\r\n\r\n  private correctsDoubleValues(settings: DataForPrepareValue): string {\r\n    const step: StepInfoFromModel = this.calculateStepWidth({\r\n      step: 0.01,\r\n      sliderWidth: settings.sliderWidth,\r\n      handleWidth: settings.handleWidth,\r\n    });\r\n    let { value } = settings;\r\n\r\n    if (this.checkIsFromValueBiggerThanTo(settings.name, settings.value, step.stepWidth, settings.handleWidth)) {\r\n      value = this.correctFromBiggerThenTo(settings, step, 'to');\r\n    }\r\n\r\n    if (this.checkIsToValueSmallerThanFrom(settings.name, settings.value, step.stepWidth, settings.handleWidth)) {\r\n      value = this.correctFromBiggerThenTo(settings, step, 'from');\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  public prepareInputValueForRecord(settings: DataForPrepareValue): DataForAdjustPosition {\r\n    if (this.checkIsValueSmallerThanMin(settings.value)) settings.value = this.values.min;\r\n    if (this.checkIsValueBiggerThanMax(settings.value)) settings.value = this.values.max;\r\n    if (settings.isDouble) settings.value = this.correctsDoubleValues(settings);\r\n\r\n    this.writesDataToModel({ target: settings.name, value: settings.value });\r\n    return {\r\n      target: settings.name,\r\n      value: settings.value,\r\n      totalValues: Number(this.values.max) - Number(this.values.min),\r\n      minValue: this.values.min,\r\n    };\r\n  }\r\n\r\n  private correctsValueBiggerThanMax(value: string): string {\r\n    if (value >= this.values.max) value = String(Number(this.values.max) - 1);\r\n    return value;\r\n  }\r\n\r\n  private correctsValueLessThanMin(value: string): string {\r\n    if (value <= this.values.min) value = String(Number(this.values.min) + 1);\r\n    return value;\r\n  }\r\n\r\n  public changeSliderValuesRange(settings: ValuesRangeData) {\r\n    const { name } = settings;\r\n    let { value } = settings;\r\n\r\n    switch (name) {\r\n      case 'min':\r\n        value = Model.truncatesNumbersAfterDot(Number(\r\n          this.correctsValueBiggerThanMax(value),\r\n        ));\r\n        this.values.min = value;\r\n        break;\r\n      case 'max':\r\n        value = Model.truncatesNumbersAfterDot(Number(\r\n          this.correctsValueLessThanMin(value),\r\n        ));\r\n        this.values.max = value;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (Number(this.values.from) < Number(this.values.min)) this.values.from = this.values.min;\r\n    if (Number(this.values.to) > Number(this.values.max)) this.values.to = this.values.max;\r\n  }\r\n}\r\n\r\nexport { Model };\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_2d1ci5q1n1.s[0]++;Object.defineProperty(exports, "__esModule", ({value:true}));cov_2d1ci5q1n1.s[1]++;exports.Model=void 0;class Model{constructor(settings){cov_2d1ci5q1n1.f[0]++;cov_2d1ci5q1n1.s[2]++;this.values={min:Model.truncatesNumbersAfterDot(Number(settings.min)),max:Model.truncatesNumbersAfterDot(Number(settings.max)),from:Model.truncatesNumbersAfterDot(Number(settings.from)),to:Model.truncatesNumbersAfterDot(Number(settings.to))};}writesDataToModel(data){cov_2d1ci5q1n1.f[1]++;cov_2d1ci5q1n1.s[3]++;this.values[data.target]=data.value;}static truncatesNumbersAfterDot(value){cov_2d1ci5q1n1.f[2]++;const isLastZero=(cov_2d1ci5q1n1.s[4]++,(cov_2d1ci5q1n1.b[0][0]++,!Number.isInteger(value))&&(cov_2d1ci5q1n1.b[0][1]++,`${value.toFixed(2)}`.slice(-1)==='0'));const areLastTwoZero=(cov_2d1ci5q1n1.s[5]++,`${value.toFixed(2)}`.slice(-2)==='00');const isInteger=(cov_2d1ci5q1n1.s[6]++,(cov_2d1ci5q1n1.b[1][0]++,Number.isInteger(value))||(cov_2d1ci5q1n1.b[1][1]++,areLastTwoZero));cov_2d1ci5q1n1.s[7]++;switch(true){case isInteger:cov_2d1ci5q1n1.b[2][0]++;cov_2d1ci5q1n1.s[8]++;return value.toFixed(0);case isLastZero:cov_2d1ci5q1n1.b[2][1]++;cov_2d1ci5q1n1.s[9]++;return value.toFixed(1);default:cov_2d1ci5q1n1.b[2][2]++;cov_2d1ci5q1n1.s[10]++;return value.toFixed(2);}}calculateValuesByPosition(settings){cov_2d1ci5q1n1.f[3]++;cov_2d1ci5q1n1.s[11]++;const calculateValues=calculationData=>{cov_2d1ci5q1n1.f[4]++;const value=(cov_2d1ci5q1n1.s[12]++,Number(this.values.min)+Number(calculationData.position)/(Number(calculationData.sliderWidth)/(Number(this.values.max)-Number(this.values.min))));cov_2d1ci5q1n1.s[13]++;return Model.truncatesNumbersAfterDot(value);};cov_2d1ci5q1n1.s[14]++;this.writesDataToModel({target:settings.target,value:calculateValues(settings)});}calculateDataForValueScale(){cov_2d1ci5q1n1.f[5]++;cov_2d1ci5q1n1.s[15]++;const calculatePosition=ratio=>{cov_2d1ci5q1n1.f[6]++;cov_2d1ci5q1n1.s[16]++;return(Number(this.values.max)-Number(this.values.min))*ratio+Number(this.values.min);};cov_2d1ci5q1n1.s[17]++;return{min:Model.truncatesNumbersAfterDot(Number(this.values.min)),max:Model.truncatesNumbersAfterDot(Number(this.values.max)),20:Model.truncatesNumbersAfterDot(calculatePosition(0.2)),40:Model.truncatesNumbersAfterDot(calculatePosition(0.4)),60:Model.truncatesNumbersAfterDot(calculatePosition(0.6)),80:Model.truncatesNumbersAfterDot(calculatePosition(0.8))};}assignValueFromScale(value,isDouble){cov_2d1ci5q1n1.f[7]++;const fromDifference=(cov_2d1ci5q1n1.s[18]++,Math.abs(Number(this.values.from)-Number(value)));const toDifference=(cov_2d1ci5q1n1.s[19]++,Math.abs(Number(this.values.to)-Number(value)));const isFromDifferenceLess=(cov_2d1ci5q1n1.s[20]++,(cov_2d1ci5q1n1.b[3][0]++,fromDifference<toDifference)||(cov_2d1ci5q1n1.b[3][1]++,!isDouble));let result;cov_2d1ci5q1n1.s[21]++;if(isFromDifferenceLess){cov_2d1ci5q1n1.b[4][0]++;cov_2d1ci5q1n1.s[22]++;result={target:'from',value};}else{cov_2d1ci5q1n1.b[4][1]++;cov_2d1ci5q1n1.s[23]++;result={target:'to',value};}cov_2d1ci5q1n1.s[24]++;this.writesDataToModel(result);cov_2d1ci5q1n1.s[25]++;return{target:result.target,value:result.value,totalValues:Number(this.values.max)-Number(this.values.min),minValue:this.values.min};}calculateStepWidth(settings){cov_2d1ci5q1n1.f[8]++;const{sliderWidth,handleWidth}=(cov_2d1ci5q1n1.s[26]++,settings);let{step}=(cov_2d1ci5q1n1.s[27]++,settings);let minStep=(cov_2d1ci5q1n1.s[28]++,(Number(this.values.max)-Number(this.values.min))/(sliderWidth-handleWidth));cov_2d1ci5q1n1.s[29]++;if(minStep<=0){cov_2d1ci5q1n1.b[5][0]++;cov_2d1ci5q1n1.s[30]++;minStep=0.01;}else{cov_2d1ci5q1n1.b[5][1]++;}cov_2d1ci5q1n1.s[31]++;if(step<minStep){cov_2d1ci5q1n1.b[6][0]++;cov_2d1ci5q1n1.s[32]++;step=minStep;}else{cov_2d1ci5q1n1.b[6][1]++;}const stepWidth=(cov_2d1ci5q1n1.s[33]++,(sliderWidth-handleWidth)/(Number(this.values.max)-Number(this.values.min))*Number(step));cov_2d1ci5q1n1.s[34]++;return{minStep,stepWidth:String(stepWidth),step};}checkIsValueSmallerThanMin(value){cov_2d1ci5q1n1.f[9]++;cov_2d1ci5q1n1.s[35]++;return Number(value)<Number(this.values.min);}checkIsValueBiggerThanMax(value){cov_2d1ci5q1n1.f[10]++;cov_2d1ci5q1n1.s[36]++;return Number(value)>Number(this.values.max);}checkIsFromValueBiggerThanTo(name,value,step,handleWidth){cov_2d1ci5q1n1.f[11]++;cov_2d1ci5q1n1.s[37]++;return(cov_2d1ci5q1n1.b[7][0]++,name==='from')&&(cov_2d1ci5q1n1.b[7][1]++,Number(value)>Number(this.values.to)-handleWidth/Number(step));}checkIsToValueSmallerThanFrom(name,value,step,handleWidth){cov_2d1ci5q1n1.f[12]++;cov_2d1ci5q1n1.s[38]++;return(cov_2d1ci5q1n1.b[8][0]++,name==='to')&&(cov_2d1ci5q1n1.b[8][1]++,Number(value)<Number(this.values.from)+handleWidth/Number(step));}correctFromBiggerThenTo(settings,step,target){cov_2d1ci5q1n1.f[13]++;let adjustOffset;cov_2d1ci5q1n1.s[39]++;if(typeof settings.step==='number'){cov_2d1ci5q1n1.b[9][0]++;cov_2d1ci5q1n1.s[40]++;adjustOffset=settings.step;}else{cov_2d1ci5q1n1.b[9][1]++;cov_2d1ci5q1n1.s[41]++;adjustOffset=Number(Math.round(settings.handleWidth*Number(step.minStep)));}let newHandleValue=(cov_2d1ci5q1n1.s[42]++,'');cov_2d1ci5q1n1.s[43]++;if(target==='to'){cov_2d1ci5q1n1.b[10][0]++;cov_2d1ci5q1n1.s[44]++;newHandleValue=String(Model.truncatesNumbersAfterDot(Number(this.values.to)-adjustOffset));}else{cov_2d1ci5q1n1.b[10][1]++;cov_2d1ci5q1n1.s[45]++;if(target==='from'){cov_2d1ci5q1n1.b[11][0]++;cov_2d1ci5q1n1.s[46]++;newHandleValue=String(Model.truncatesNumbersAfterDot(Number(this.values.from)+adjustOffset));}else{cov_2d1ci5q1n1.b[11][1]++;}}cov_2d1ci5q1n1.s[47]++;return newHandleValue;}correctsDoubleValues(settings){cov_2d1ci5q1n1.f[14]++;const step=(cov_2d1ci5q1n1.s[48]++,this.calculateStepWidth({step:0.01,sliderWidth:settings.sliderWidth,handleWidth:settings.handleWidth}));let{value}=(cov_2d1ci5q1n1.s[49]++,settings);cov_2d1ci5q1n1.s[50]++;if(this.checkIsFromValueBiggerThanTo(settings.name,settings.value,step.stepWidth,settings.handleWidth)){cov_2d1ci5q1n1.b[12][0]++;cov_2d1ci5q1n1.s[51]++;value=this.correctFromBiggerThenTo(settings,step,'to');}else{cov_2d1ci5q1n1.b[12][1]++;}cov_2d1ci5q1n1.s[52]++;if(this.checkIsToValueSmallerThanFrom(settings.name,settings.value,step.stepWidth,settings.handleWidth)){cov_2d1ci5q1n1.b[13][0]++;cov_2d1ci5q1n1.s[53]++;value=this.correctFromBiggerThenTo(settings,step,'from');}else{cov_2d1ci5q1n1.b[13][1]++;}cov_2d1ci5q1n1.s[54]++;return value;}prepareInputValueForRecord(settings){cov_2d1ci5q1n1.f[15]++;cov_2d1ci5q1n1.s[55]++;if(this.checkIsValueSmallerThanMin(settings.value)){cov_2d1ci5q1n1.b[14][0]++;cov_2d1ci5q1n1.s[56]++;settings.value=this.values.min;}else{cov_2d1ci5q1n1.b[14][1]++;}cov_2d1ci5q1n1.s[57]++;if(this.checkIsValueBiggerThanMax(settings.value)){cov_2d1ci5q1n1.b[15][0]++;cov_2d1ci5q1n1.s[58]++;settings.value=this.values.max;}else{cov_2d1ci5q1n1.b[15][1]++;}cov_2d1ci5q1n1.s[59]++;if(settings.isDouble){cov_2d1ci5q1n1.b[16][0]++;cov_2d1ci5q1n1.s[60]++;settings.value=this.correctsDoubleValues(settings);}else{cov_2d1ci5q1n1.b[16][1]++;}cov_2d1ci5q1n1.s[61]++;this.writesDataToModel({target:settings.name,value:settings.value});cov_2d1ci5q1n1.s[62]++;return{target:settings.name,value:settings.value,totalValues:Number(this.values.max)-Number(this.values.min),minValue:this.values.min};}correctsValueBiggerThanMax(value){cov_2d1ci5q1n1.f[16]++;cov_2d1ci5q1n1.s[63]++;if(value>=this.values.max){cov_2d1ci5q1n1.b[17][0]++;cov_2d1ci5q1n1.s[64]++;value=String(Number(this.values.max)-1);}else{cov_2d1ci5q1n1.b[17][1]++;}cov_2d1ci5q1n1.s[65]++;return value;}correctsValueLessThanMin(value){cov_2d1ci5q1n1.f[17]++;cov_2d1ci5q1n1.s[66]++;if(value<=this.values.min){cov_2d1ci5q1n1.b[18][0]++;cov_2d1ci5q1n1.s[67]++;value=String(Number(this.values.min)+1);}else{cov_2d1ci5q1n1.b[18][1]++;}cov_2d1ci5q1n1.s[68]++;return value;}changeSliderValuesRange(settings){cov_2d1ci5q1n1.f[18]++;const{name}=(cov_2d1ci5q1n1.s[69]++,settings);let{value}=(cov_2d1ci5q1n1.s[70]++,settings);cov_2d1ci5q1n1.s[71]++;switch(name){case'min':cov_2d1ci5q1n1.b[19][0]++;cov_2d1ci5q1n1.s[72]++;value=Model.truncatesNumbersAfterDot(Number(this.correctsValueBiggerThanMax(value)));cov_2d1ci5q1n1.s[73]++;this.values.min=value;cov_2d1ci5q1n1.s[74]++;break;case'max':cov_2d1ci5q1n1.b[19][1]++;cov_2d1ci5q1n1.s[75]++;value=Model.truncatesNumbersAfterDot(Number(this.correctsValueLessThanMin(value)));cov_2d1ci5q1n1.s[76]++;this.values.max=value;cov_2d1ci5q1n1.s[77]++;break;default:cov_2d1ci5q1n1.b[19][2]++;cov_2d1ci5q1n1.s[78]++;break;}cov_2d1ci5q1n1.s[79]++;if(Number(this.values.from)<Number(this.values.min)){cov_2d1ci5q1n1.b[20][0]++;cov_2d1ci5q1n1.s[80]++;this.values.from=this.values.min;}else{cov_2d1ci5q1n1.b[20][1]++;}cov_2d1ci5q1n1.s[81]++;if(Number(this.values.to)>Number(this.values.max)){cov_2d1ci5q1n1.b[21][0]++;cov_2d1ci5q1n1.s[82]++;this.values.to=this.values.max;}else{cov_2d1ci5q1n1.b[21][1]++;}}}cov_2d1ci5q1n1.s[83]++;exports.Model=Model;

/***/ }),

/***/ "./src/Model/model.test.ts":
/*!*********************************!*\
  !*** ./src/Model/model.test.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var cov_d8quko7wd=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\Model\\model.test.ts",hash="e226e4073af97a1ea2d9aa687afafaf0abd4fc3e",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\Model\\model.test.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:16},end:{line:3,column:34}},"2":{start:{line:4,column:0},end:{line:158,column:3}},"3":{start:{line:6,column:4},end:{line:13,column:7}},"4":{start:{line:7,column:8},end:{line:12,column:11}},"5":{start:{line:14,column:4},end:{line:16,column:7}},"6":{start:{line:15,column:8},end:{line:15,column:35}},"7":{start:{line:17,column:4},end:{line:20,column:7}},"8":{start:{line:18,column:8},end:{line:18,column:94}},"9":{start:{line:19,column:8},end:{line:19,column:47}},"10":{start:{line:21,column:4},end:{line:24,column:7}},"11":{start:{line:22,column:8},end:{line:22,column:92}},"12":{start:{line:23,column:8},end:{line:23,column:45}},"13":{start:{line:25,column:4},end:{line:30,column:7}},"14":{start:{line:26,column:23},end:{line:26,column:57}},"15":{start:{line:27,column:8},end:{line:29,column:11}},"16":{start:{line:31,column:4},end:{line:34,column:7}},"17":{start:{line:32,column:8},end:{line:32,column:46}},"18":{start:{line:33,column:8},end:{line:33,column:47}},"19":{start:{line:35,column:4},end:{line:40,column:7}},"20":{start:{line:36,column:23},end:{line:36,column:60}},"21":{start:{line:37,column:8},end:{line:39,column:11}},"22":{start:{line:41,column:4},end:{line:44,column:7}},"23":{start:{line:42,column:8},end:{line:42,column:46}},"24":{start:{line:43,column:8},end:{line:43,column:45}},"25":{start:{line:45,column:4},end:{line:50,column:7}},"26":{start:{line:46,column:23},end:{line:46,column:60}},"27":{start:{line:47,column:8},end:{line:49,column:11}},"28":{start:{line:51,column:4},end:{line:58,column:7}},"29":{start:{line:52,column:23},end:{line:56,column:10}},"30":{start:{line:57,column:8},end:{line:57,column:75}},"31":{start:{line:59,column:4},end:{line:66,column:7}},"32":{start:{line:60,column:23},end:{line:64,column:10}},"33":{start:{line:65,column:8},end:{line:65,column:76}},"34":{start:{line:67,column:4},end:{line:81,column:7}},"35":{start:{line:68,column:23},end:{line:76,column:10}},"36":{start:{line:77,column:8},end:{line:77,column:47}},"37":{start:{line:78,column:8},end:{line:80,column:11}},"38":{start:{line:82,column:4},end:{line:96,column:7}},"39":{start:{line:83,column:23},end:{line:91,column:10}},"40":{start:{line:92,column:8},end:{line:92,column:47}},"41":{start:{line:93,column:8},end:{line:95,column:11}},"42":{start:{line:97,column:4},end:{line:111,column:7}},"43":{start:{line:98,column:23},end:{line:106,column:10}},"44":{start:{line:107,column:8},end:{line:107,column:48}},"45":{start:{line:108,column:8},end:{line:110,column:11}},"46":{start:{line:112,column:4},end:{line:126,column:7}},"47":{start:{line:113,column:23},end:{line:121,column:10}},"48":{start:{line:122,column:8},end:{line:122,column:47}},"49":{start:{line:123,column:8},end:{line:125,column:11}},"50":{start:{line:127,column:4},end:{line:141,column:7}},"51":{start:{line:128,column:23},end:{line:136,column:10}},"52":{start:{line:137,column:8},end:{line:137,column:45}},"53":{start:{line:138,column:8},end:{line:140,column:11}},"54":{start:{line:142,column:4},end:{line:149,column:7}},"55":{start:{line:143,column:21},end:{line:143,column:70}},"56":{start:{line:144,column:8},end:{line:144,column:39}},"57":{start:{line:145,column:8},end:{line:145,column:67}},"58":{start:{line:146,column:8},end:{line:146,column:38}},"59":{start:{line:147,column:8},end:{line:147,column:67}},"60":{start:{line:148,column:8},end:{line:148,column:36}},"61":{start:{line:150,column:4},end:{line:153,column:7}},"62":{start:{line:151,column:8},end:{line:151,column:68}},"63":{start:{line:152,column:8},end:{line:152,column:46}},"64":{start:{line:154,column:4},end:{line:157,column:7}},"65":{start:{line:155,column:8},end:{line:155,column:68}},"66":{start:{line:156,column:8},end:{line:156,column:46}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:4,column:18},end:{line:4,column:19}},loc:{start:{line:4,column:24},end:{line:158,column:1}},line:4},"1":{name:"(anonymous_1)",decl:{start:{line:6,column:15},end:{line:6,column:16}},loc:{start:{line:6,column:21},end:{line:13,column:5}},line:6},"2":{name:"(anonymous_2)",decl:{start:{line:14,column:30},end:{line:14,column:31}},loc:{start:{line:14,column:36},end:{line:16,column:5}},line:14},"3":{name:"(anonymous_3)",decl:{start:{line:17,column:65},end:{line:17,column:66}},loc:{start:{line:17,column:71},end:{line:20,column:5}},line:17},"4":{name:"(anonymous_4)",decl:{start:{line:21,column:63},end:{line:21,column:64}},loc:{start:{line:21,column:69},end:{line:24,column:5}},line:21},"5":{name:"(anonymous_5)",decl:{start:{line:25,column:66},end:{line:25,column:67}},loc:{start:{line:25,column:72},end:{line:30,column:5}},line:25},"6":{name:"(anonymous_6)",decl:{start:{line:31,column:79},end:{line:31,column:80}},loc:{start:{line:31,column:85},end:{line:34,column:5}},line:31},"7":{name:"(anonymous_7)",decl:{start:{line:35,column:80},end:{line:35,column:81}},loc:{start:{line:35,column:86},end:{line:40,column:5}},line:35},"8":{name:"(anonymous_8)",decl:{start:{line:41,column:77},end:{line:41,column:78}},loc:{start:{line:41,column:83},end:{line:44,column:5}},line:41},"9":{name:"(anonymous_9)",decl:{start:{line:45,column:78},end:{line:45,column:79}},loc:{start:{line:45,column:84},end:{line:50,column:5}},line:45},"10":{name:"(anonymous_10)",decl:{start:{line:51,column:78},end:{line:51,column:79}},loc:{start:{line:51,column:84},end:{line:58,column:5}},line:51},"11":{name:"(anonymous_11)",decl:{start:{line:59,column:88},end:{line:59,column:89}},loc:{start:{line:59,column:94},end:{line:66,column:5}},line:59},"12":{name:"(anonymous_12)",decl:{start:{line:67,column:92},end:{line:67,column:93}},loc:{start:{line:67,column:98},end:{line:81,column:5}},line:67},"13":{name:"(anonymous_13)",decl:{start:{line:82,column:101},end:{line:82,column:102}},loc:{start:{line:82,column:107},end:{line:96,column:5}},line:82},"14":{name:"(anonymous_14)",decl:{start:{line:97,column:103},end:{line:97,column:104}},loc:{start:{line:97,column:109},end:{line:111,column:5}},line:97},"15":{name:"(anonymous_15)",decl:{start:{line:112,column:110},end:{line:112,column:111}},loc:{start:{line:112,column:116},end:{line:126,column:5}},line:112},"16":{name:"(anonymous_16)",decl:{start:{line:127,column:106},end:{line:127,column:107}},loc:{start:{line:127,column:112},end:{line:141,column:5}},line:127},"17":{name:"(anonymous_17)",decl:{start:{line:142,column:59},end:{line:142,column:60}},loc:{start:{line:142,column:65},end:{line:149,column:5}},line:142},"18":{name:"(anonymous_18)",decl:{start:{line:150,column:75},end:{line:150,column:76}},loc:{start:{line:150,column:81},end:{line:153,column:5}},line:150},"19":{name:"(anonymous_19)",decl:{start:{line:154,column:76},end:{line:154,column:77}},loc:{start:{line:154,column:82},end:{line:157,column:5}},line:154}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\Model\\model.test.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\Model\\model.test.ts"],names:[],mappings:"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",sourcesContent:["import { StepInfoFromModel, DataForValueScale } from './types';\r\nimport { Model } from './Model';\r\nimport { DataForAdjustPosition } from '../View/Handles/types';\r\n\r\ndescribe('Model', () => {\r\n  let model: Model;\r\n\r\n  beforeEach(() => {\r\n    model = new Model({\r\n      min: '0',\r\n      max: '10',\r\n      from: '3',\r\n      to: '7',\r\n    });\r\n  });\r\n\r\n  it('model can be create', () => {\r\n    expect(model).toBeTruthy();\r\n  });\r\n\r\n  it('calculateValuesByPosition() calculate correct for from', () => {\r\n    model.calculateValuesByPosition({ target: 'from', position: '50', sliderWidth: 100 });\r\n    expect(model.values.from).toEqual('5');\r\n  });\r\n\r\n  it('calculateValuesByPosition() calculate correct for to', () => {\r\n    model.calculateValuesByPosition({ target: 'to', position: '50', sliderWidth: 100 });\r\n    expect(model.values.to).toEqual('5');\r\n  });\r\n\r\n  it('calculateDataForValueScale() return correct value scale', () => {\r\n    const result:DataForValueScale = model.calculateDataForValueScale();\r\n    expect(result).toEqual({\r\n      min: '0', max: '10', 20: '2', 40: '4', 60: '6', 80: '8',\r\n    });\r\n  });\r\n\r\n  it('assignValueFromScale() choose from handel and record result to Model', () => {\r\n    model.assignValueFromScale('2', true);\r\n    expect(model.values.from).toEqual('2');\r\n  });\r\n\r\n  it('assignValueFromScale() choose from handel and return correct settings', () => {\r\n    const result: DataForAdjustPosition = model.assignValueFromScale('2', true);\r\n    expect(result).toEqual({\r\n      target: 'from', value: '2', totalValues: 10, minValue: '0',\r\n    });\r\n  });\r\n\r\n  it('assignValueFromScale() choose to handel and record result to Model', () => {\r\n    model.assignValueFromScale('8', true);\r\n    expect(model.values.to).toEqual('8');\r\n  });\r\n\r\n  it('assignValueFromScale() choose to handel and return correct settings', () => {\r\n    const result: DataForAdjustPosition = model.assignValueFromScale('8', true);\r\n    expect(result).toEqual({\r\n      target: 'to', value: '8', totalValues: 10, minValue: '0',\r\n    });\r\n  });\r\n\r\n  it('calculateStepWidth() calculate correct step width with correct step', () => {\r\n    const result: StepInfoFromModel = model.calculateStepWidth({\r\n      step: 2,\r\n      sliderWidth: 120,\r\n      handleWidth: 20,\r\n    });\r\n    expect(result).toEqual({ stepWidth: '20', step: 2, minStep: 0.1 });\r\n  });\r\n\r\n  it('calculateStepWidth() calculate correct step width with step less that minimum', () => {\r\n    const result: StepInfoFromModel = model.calculateStepWidth({\r\n      step: -1,\r\n      sliderWidth: 120,\r\n      handleWidth: 20,\r\n    });\r\n    expect(result).toEqual({ stepWidth: '1', step: 0.1, minStep: 0.1 });\r\n  });\r\n\r\n  it('prepareInputValueForRecord() allow correct from value and return correct settings', () => {\r\n    const result: DataForAdjustPosition = model.prepareInputValueForRecord({\r\n      name: 'from',\r\n      value: '2',\r\n      isDouble: false,\r\n      positions: { from: 30, to: 70 },\r\n      handleWidth: 20,\r\n      sliderWidth: 120,\r\n      step: false,\r\n    });\r\n\r\n    expect(model.values.from).toEqual('2');\r\n    expect(result).toEqual({\r\n      target: 'from', value: '2', totalValues: 10, minValue: '0',\r\n    });\r\n  });\r\n\r\n  it('prepareInputValueForRecord() corrects from value less than min and return correct settings', () => {\r\n    const result: DataForAdjustPosition = model.prepareInputValueForRecord({\r\n      name: 'from',\r\n      value: '-5',\r\n      isDouble: false,\r\n      positions: { from: 30, to: 70 },\r\n      handleWidth: 20,\r\n      sliderWidth: 120,\r\n      step: false,\r\n    });\r\n\r\n    expect(model.values.from).toEqual('0');\r\n    expect(result).toEqual({\r\n      target: 'from', value: '0', totalValues: 10, minValue: '0',\r\n    });\r\n  });\r\n\r\n  it('prepareInputValueForRecord() corrects from value bigger than max and return correct settings', () => {\r\n    const result: DataForAdjustPosition = model.prepareInputValueForRecord({\r\n      name: 'from',\r\n      value: '15',\r\n      isDouble: false,\r\n      positions: { from: 30, to: 70 },\r\n      handleWidth: 20,\r\n      sliderWidth: 120,\r\n      step: false,\r\n    });\r\n\r\n    expect(model.values.from).toEqual('10');\r\n    expect(result).toEqual({\r\n      target: 'from', value: '10', totalValues: 10, minValue: '0',\r\n    });\r\n  });\r\n\r\n  it('prepareInputValueForRecord() corrects from value when it bigger than to and return correct settings', () => {\r\n    const result: DataForAdjustPosition = model.prepareInputValueForRecord({\r\n      name: 'from',\r\n      value: '15',\r\n      isDouble: true,\r\n      positions: { from: 30, to: 70 },\r\n      handleWidth: 20,\r\n      sliderWidth: 120,\r\n      step: false,\r\n    });\r\n\r\n    expect(model.values.from).toEqual('5');\r\n    expect(result).toEqual({\r\n      target: 'from', value: '5', totalValues: 10, minValue: '0',\r\n    });\r\n  });\r\n\r\n  it('prepareInputValueForRecord() corrects to value when it less than to and return correct settings', () => {\r\n    const result: DataForAdjustPosition = model.prepareInputValueForRecord({\r\n      name: 'to',\r\n      value: '0',\r\n      isDouble: true,\r\n      positions: { from: 30, to: 70 },\r\n      handleWidth: 20,\r\n      sliderWidth: 120,\r\n      step: false,\r\n    });\r\n\r\n    expect(model.values.to).toEqual('5');\r\n    expect(result).toEqual({\r\n      target: 'to', value: '5', totalValues: 10, minValue: '0',\r\n    });\r\n  });\r\n\r\n  it('truncatesNumbersAfterDot() cut numbers correctly', () => {\r\n    let result: string = Model.truncatesNumbersAfterDot(2.1222222);\r\n    expect(result).toEqual('2.12');\r\n\r\n    result = Model.truncatesNumbersAfterDot(2.1011111);\r\n    expect(result).toEqual('2.1');\r\n\r\n    result = Model.truncatesNumbersAfterDot(2.0000001);\r\n    expect(result).toEqual('2');\r\n  });\r\n\r\n  it('changeSliderValuesRange() record value bigger then max correctly', () => {\r\n    model.changeSliderValuesRange({ value: '11', name: 'min' });\r\n    expect(model.values.min).toEqual('9');\r\n  });\r\n\r\n  it('changeSliderValuesRange() record value smaller then min correctly', () => {\r\n    model.changeSliderValuesRange({ value: '-1', name: 'max' });\r\n    expect(model.values.max).toEqual('1');\r\n  });\r\n});\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_d8quko7wd.s[0]++;Object.defineProperty(exports, "__esModule", ({value:true}));const Model_1=(cov_d8quko7wd.s[1]++,__webpack_require__(/*! ./Model */ "./src/Model/Model.ts"));cov_d8quko7wd.s[2]++;describe('Model',()=>{cov_d8quko7wd.f[0]++;let model;cov_d8quko7wd.s[3]++;beforeEach(()=>{cov_d8quko7wd.f[1]++;cov_d8quko7wd.s[4]++;model=new Model_1.Model({min:'0',max:'10',from:'3',to:'7'});});cov_d8quko7wd.s[5]++;it('model can be create',()=>{cov_d8quko7wd.f[2]++;cov_d8quko7wd.s[6]++;expect(model).toBeTruthy();});cov_d8quko7wd.s[7]++;it('calculateValuesByPosition() calculate correct for from',()=>{cov_d8quko7wd.f[3]++;cov_d8quko7wd.s[8]++;model.calculateValuesByPosition({target:'from',position:'50',sliderWidth:100});cov_d8quko7wd.s[9]++;expect(model.values.from).toEqual('5');});cov_d8quko7wd.s[10]++;it('calculateValuesByPosition() calculate correct for to',()=>{cov_d8quko7wd.f[4]++;cov_d8quko7wd.s[11]++;model.calculateValuesByPosition({target:'to',position:'50',sliderWidth:100});cov_d8quko7wd.s[12]++;expect(model.values.to).toEqual('5');});cov_d8quko7wd.s[13]++;it('calculateDataForValueScale() return correct value scale',()=>{cov_d8quko7wd.f[5]++;const result=(cov_d8quko7wd.s[14]++,model.calculateDataForValueScale());cov_d8quko7wd.s[15]++;expect(result).toEqual({min:'0',max:'10',20:'2',40:'4',60:'6',80:'8'});});cov_d8quko7wd.s[16]++;it('assignValueFromScale() choose from handel and record result to Model',()=>{cov_d8quko7wd.f[6]++;cov_d8quko7wd.s[17]++;model.assignValueFromScale('2',true);cov_d8quko7wd.s[18]++;expect(model.values.from).toEqual('2');});cov_d8quko7wd.s[19]++;it('assignValueFromScale() choose from handel and return correct settings',()=>{cov_d8quko7wd.f[7]++;const result=(cov_d8quko7wd.s[20]++,model.assignValueFromScale('2',true));cov_d8quko7wd.s[21]++;expect(result).toEqual({target:'from',value:'2',totalValues:10,minValue:'0'});});cov_d8quko7wd.s[22]++;it('assignValueFromScale() choose to handel and record result to Model',()=>{cov_d8quko7wd.f[8]++;cov_d8quko7wd.s[23]++;model.assignValueFromScale('8',true);cov_d8quko7wd.s[24]++;expect(model.values.to).toEqual('8');});cov_d8quko7wd.s[25]++;it('assignValueFromScale() choose to handel and return correct settings',()=>{cov_d8quko7wd.f[9]++;const result=(cov_d8quko7wd.s[26]++,model.assignValueFromScale('8',true));cov_d8quko7wd.s[27]++;expect(result).toEqual({target:'to',value:'8',totalValues:10,minValue:'0'});});cov_d8quko7wd.s[28]++;it('calculateStepWidth() calculate correct step width with correct step',()=>{cov_d8quko7wd.f[10]++;const result=(cov_d8quko7wd.s[29]++,model.calculateStepWidth({step:2,sliderWidth:120,handleWidth:20}));cov_d8quko7wd.s[30]++;expect(result).toEqual({stepWidth:'20',step:2,minStep:0.1});});cov_d8quko7wd.s[31]++;it('calculateStepWidth() calculate correct step width with step less that minimum',()=>{cov_d8quko7wd.f[11]++;const result=(cov_d8quko7wd.s[32]++,model.calculateStepWidth({step:-1,sliderWidth:120,handleWidth:20}));cov_d8quko7wd.s[33]++;expect(result).toEqual({stepWidth:'1',step:0.1,minStep:0.1});});cov_d8quko7wd.s[34]++;it('prepareInputValueForRecord() allow correct from value and return correct settings',()=>{cov_d8quko7wd.f[12]++;const result=(cov_d8quko7wd.s[35]++,model.prepareInputValueForRecord({name:'from',value:'2',isDouble:false,positions:{from:30,to:70},handleWidth:20,sliderWidth:120,step:false}));cov_d8quko7wd.s[36]++;expect(model.values.from).toEqual('2');cov_d8quko7wd.s[37]++;expect(result).toEqual({target:'from',value:'2',totalValues:10,minValue:'0'});});cov_d8quko7wd.s[38]++;it('prepareInputValueForRecord() corrects from value less than min and return correct settings',()=>{cov_d8quko7wd.f[13]++;const result=(cov_d8quko7wd.s[39]++,model.prepareInputValueForRecord({name:'from',value:'-5',isDouble:false,positions:{from:30,to:70},handleWidth:20,sliderWidth:120,step:false}));cov_d8quko7wd.s[40]++;expect(model.values.from).toEqual('0');cov_d8quko7wd.s[41]++;expect(result).toEqual({target:'from',value:'0',totalValues:10,minValue:'0'});});cov_d8quko7wd.s[42]++;it('prepareInputValueForRecord() corrects from value bigger than max and return correct settings',()=>{cov_d8quko7wd.f[14]++;const result=(cov_d8quko7wd.s[43]++,model.prepareInputValueForRecord({name:'from',value:'15',isDouble:false,positions:{from:30,to:70},handleWidth:20,sliderWidth:120,step:false}));cov_d8quko7wd.s[44]++;expect(model.values.from).toEqual('10');cov_d8quko7wd.s[45]++;expect(result).toEqual({target:'from',value:'10',totalValues:10,minValue:'0'});});cov_d8quko7wd.s[46]++;it('prepareInputValueForRecord() corrects from value when it bigger than to and return correct settings',()=>{cov_d8quko7wd.f[15]++;const result=(cov_d8quko7wd.s[47]++,model.prepareInputValueForRecord({name:'from',value:'15',isDouble:true,positions:{from:30,to:70},handleWidth:20,sliderWidth:120,step:false}));cov_d8quko7wd.s[48]++;expect(model.values.from).toEqual('5');cov_d8quko7wd.s[49]++;expect(result).toEqual({target:'from',value:'5',totalValues:10,minValue:'0'});});cov_d8quko7wd.s[50]++;it('prepareInputValueForRecord() corrects to value when it less than to and return correct settings',()=>{cov_d8quko7wd.f[16]++;const result=(cov_d8quko7wd.s[51]++,model.prepareInputValueForRecord({name:'to',value:'0',isDouble:true,positions:{from:30,to:70},handleWidth:20,sliderWidth:120,step:false}));cov_d8quko7wd.s[52]++;expect(model.values.to).toEqual('5');cov_d8quko7wd.s[53]++;expect(result).toEqual({target:'to',value:'5',totalValues:10,minValue:'0'});});cov_d8quko7wd.s[54]++;it('truncatesNumbersAfterDot() cut numbers correctly',()=>{cov_d8quko7wd.f[17]++;let result=(cov_d8quko7wd.s[55]++,Model_1.Model.truncatesNumbersAfterDot(2.1222222));cov_d8quko7wd.s[56]++;expect(result).toEqual('2.12');cov_d8quko7wd.s[57]++;result=Model_1.Model.truncatesNumbersAfterDot(2.1011111);cov_d8quko7wd.s[58]++;expect(result).toEqual('2.1');cov_d8quko7wd.s[59]++;result=Model_1.Model.truncatesNumbersAfterDot(2.0000001);cov_d8quko7wd.s[60]++;expect(result).toEqual('2');});cov_d8quko7wd.s[61]++;it('changeSliderValuesRange() record value bigger then max correctly',()=>{cov_d8quko7wd.f[18]++;cov_d8quko7wd.s[62]++;model.changeSliderValuesRange({value:'11',name:'min'});cov_d8quko7wd.s[63]++;expect(model.values.min).toEqual('9');});cov_d8quko7wd.s[64]++;it('changeSliderValuesRange() record value smaller then min correctly',()=>{cov_d8quko7wd.f[19]++;cov_d8quko7wd.s[65]++;model.changeSliderValuesRange({value:'-1',name:'max'});cov_d8quko7wd.s[66]++;expect(model.values.max).toEqual('1');});});

/***/ }),

/***/ "./src/Model/types.ts":
/*!****************************!*\
  !*** ./src/Model/types.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
var cov_sy2xrebt5=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\Model\\types.ts",hash="0f3a9c9a8f84b19e8abc0c6ad3ecc17bedeabc9a",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\Model\\types.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}}},fnMap:{},branchMap:{},s:{"0":0},f:{},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\Model\\types.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\Model\\types.ts"],names:[],mappings:"",sourcesContent:["type CalculationData = {\r\n  target: 'from' | 'to' | 'min' | 'max';\r\n  position: string;\r\n  sliderWidth: number;\r\n};\r\n\r\ntype DataForPrepareValue = {\r\n  name: 'from' | 'to';\r\n  value: string;\r\n  isDouble: boolean;\r\n  positions: {\r\n    from: number;\r\n    to: number;\r\n  };\r\n  handleWidth: number;\r\n  sliderWidth: number;\r\n  step: boolean | number;\r\n};\r\n\r\ntype DataForRefreshingModel = {\r\n  target: 'from' | 'to' | 'min' | 'max';\r\n  value: string;\r\n};\r\n\r\ntype DataForValueScale = {\r\n  min: string;\r\n  max: string;\r\n  20: string;\r\n  40: string;\r\n  60: string;\r\n  80: string;\r\n};\r\n\r\ntype BasicModelSettings = {\r\n  min: string,\r\n  max: string,\r\n  from: string,\r\n  to: string\r\n};\r\n\r\ntype StepInfoFromModel = {\r\n  minStep: number;\r\n  stepWidth: string;\r\n  step: number;\r\n};\r\n\r\ntype StepCalculateData = {\r\n  step: number,\r\n  sliderWidth: number,\r\n  handleWidth: number,\r\n};\r\n\r\ntype ValuesRangeData = {\r\n  name: string,\r\n  value: string,\r\n};\r\n\r\nexport {\r\n  CalculationData,\r\n  DataForPrepareValue,\r\n  DataForRefreshingModel,\r\n  DataForValueScale,\r\n  BasicModelSettings,\r\n  StepInfoFromModel,\r\n  StepCalculateData,\r\n  ValuesRangeData,\r\n};\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_sy2xrebt5.s[0]++;Object.defineProperty(exports, "__esModule", ({value:true}));

/***/ }),

/***/ "./src/Presenter/Presenter.ts":
/*!************************************!*\
  !*** ./src/Presenter/Presenter.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
var cov_cqnkemp45=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\Presenter\\Presenter.ts",hash="841314653bf9e0d4c96d04803a6a68f54d85140b",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\Presenter\\Presenter.ts",statementMap:{"0":{start:{line:2,column:17},end:{line:7,column:1}},"1":{start:{line:3,column:12},end:{line:3,column:28}},"2":{start:{line:3,column:34},end:{line:3,column:125}},"3":{start:{line:4,column:4},end:{line:5,column:150}},"4":{start:{line:4,column:79},end:{line:4,column:131}},"5":{start:{line:5,column:9},end:{line:5,column:150}},"6":{start:{line:5,column:58},end:{line:5,column:150}},"7":{start:{line:5,column:81},end:{line:5,column:150}},"8":{start:{line:6,column:4},end:{line:6,column:66}},"9":{start:{line:8,column:0},end:{line:8,column:62}},"10":{start:{line:9,column:0},end:{line:9,column:27}},"11":{start:{line:10,column:29},end:{line:10,column:58}},"12":{start:{line:11,column:16},end:{line:179,column:1}},"13":{start:{line:13,column:8},end:{line:13,column:29}},"14":{start:{line:14,column:8},end:{line:14,column:31}},"15":{start:{line:17,column:8},end:{line:33,column:11}},"16":{start:{line:19,column:37},end:{line:19,column:126}},"17":{start:{line:20,column:33},end:{line:24,column:17}},"18":{start:{line:25,column:16},end:{line:28,column:17}},"19":{start:{line:26,column:20},end:{line:26,column:55}},"20":{start:{line:27,column:20},end:{line:27,column:56}},"21":{start:{line:29,column:16},end:{line:29,column:35}},"22":{start:{line:30,column:16},end:{line:30,column:58}},"23":{start:{line:31,column:16},end:{line:31,column:28}},"24":{start:{line:36,column:23},end:{line:36,column:62}},"25":{start:{line:37,column:8},end:{line:37,column:56}},"26":{start:{line:38,column:8},end:{line:38,column:166}},"27":{start:{line:41,column:8},end:{line:46,column:10}},"28":{start:{line:49,column:8},end:{line:49,column:98}},"29":{start:{line:52,column:28},end:{line:52,column:93}},"30":{start:{line:53,column:26},end:{line:53,column:87}},"31":{start:{line:54,column:26},end:{line:54,column:74}},"32":{start:{line:55,column:24},end:{line:55,column:70}},"33":{start:{line:56,column:32},end:{line:56,column:78}},"34":{start:{line:57,column:8},end:{line:57,column:35}},"35":{start:{line:58,column:8},end:{line:58,column:33}},"36":{start:{line:59,column:8},end:{line:59,column:71}},"37":{start:{line:60,column:8},end:{line:60,column:67}},"38":{start:{line:61,column:8},end:{line:65,column:11}},"39":{start:{line:66,column:8},end:{line:70,column:11}},"40":{start:{line:73,column:35},end:{line:82,column:9}},"41":{start:{line:74,column:40},end:{line:78,column:14}},"42":{start:{line:79,column:12},end:{line:79,column:53}},"43":{start:{line:80,column:12},end:{line:81,column:83}},"44":{start:{line:81,column:16},end:{line:81,column:83}},"45":{start:{line:83,column:8},end:{line:84,column:33}},"46":{start:{line:84,column:12},end:{line:84,column:33}},"47":{start:{line:87,column:23},end:{line:98,column:10}},"48":{start:{line:99,column:28},end:{line:99,column:106}},"49":{start:{line:100,column:8},end:{line:100,column:48}},"50":{start:{line:101,column:8},end:{line:101,column:49}},"51":{start:{line:102,column:8},end:{line:102,column:68}},"52":{start:{line:103,column:8},end:{line:103,column:88}},"53":{start:{line:106,column:23},end:{line:106,column:93}},"54":{start:{line:107,column:28},end:{line:107,column:106}},"55":{start:{line:108,column:8},end:{line:108,column:48}},"56":{start:{line:109,column:8},end:{line:109,column:49}},"57":{start:{line:110,column:8},end:{line:110,column:68}},"58":{start:{line:111,column:8},end:{line:112,column:77}},"59":{start:{line:112,column:12},end:{line:112,column:77}},"60":{start:{line:113,column:8},end:{line:114,column:75}},"61":{start:{line:114,column:12},end:{line:114,column:75}},"62":{start:{line:117,column:8},end:{line:120,column:11}},"63":{start:{line:121,column:8},end:{line:121,column:92}},"64":{start:{line:122,column:8},end:{line:122,column:84}},"65":{start:{line:123,column:8},end:{line:123,column:81}},"66":{start:{line:126,column:8},end:{line:147,column:9}},"67":{start:{line:128,column:16},end:{line:128,column:47}},"68":{start:{line:129,column:16},end:{line:129,column:22}},"69":{start:{line:131,column:16},end:{line:131,column:54}},"70":{start:{line:132,column:16},end:{line:132,column:22}},"71":{start:{line:134,column:16},end:{line:134,column:43}},"72":{start:{line:135,column:16},end:{line:135,column:22}},"73":{start:{line:137,column:16},end:{line:137,column:74}},"74":{start:{line:138,column:16},end:{line:138,column:22}},"75":{start:{line:140,column:16},end:{line:140,column:66}},"76":{start:{line:141,column:16},end:{line:141,column:22}},"77":{start:{line:143,column:16},end:{line:143,column:63}},"78":{start:{line:144,column:16},end:{line:144,column:22}},"79":{start:{line:146,column:16},end:{line:146,column:22}},"80":{start:{line:150,column:21},end:{line:150,column:25}},"81":{start:{line:151,column:8},end:{line:158,column:11}},"82":{start:{line:153,column:16},end:{line:154,column:33}},"83":{start:{line:154,column:20},end:{line:154,column:33}},"84":{start:{line:155,column:16},end:{line:155,column:62}},"85":{start:{line:156,column:16},end:{line:156,column:28}},"86":{start:{line:161,column:8},end:{line:171,column:11}},"87":{start:{line:163,column:16},end:{line:163,column:41}},"88":{start:{line:164,column:16},end:{line:168,column:19}},"89":{start:{line:169,column:16},end:{line:169,column:28}},"90":{start:{line:174,column:32},end:{line:174,column:36}},"91":{start:{line:175,column:8},end:{line:175,column:79}},"92":{start:{line:176,column:8},end:{line:176,column:65}},"93":{start:{line:177,column:8},end:{line:177,column:51}},"94":{start:{line:180,column:0},end:{line:182,column:14}},"95":{start:{line:183,column:0},end:{line:183,column:30}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:2,column:46},end:{line:2,column:47}},loc:{start:{line:2,column:87},end:{line:7,column:1}},line:2},"1":{name:"(anonymous_1)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:37},end:{line:15,column:5}},line:12},"2":{name:"(anonymous_2)",decl:{start:{line:16,column:4},end:{line:16,column:5}},loc:{start:{line:16,column:44},end:{line:34,column:5}},line:16},"3":{name:"(anonymous_3)",decl:{start:{line:35,column:4},end:{line:35,column:5}},loc:{start:{line:35,column:30},end:{line:39,column:5}},line:35},"4":{name:"(anonymous_4)",decl:{start:{line:40,column:4},end:{line:40,column:5}},loc:{start:{line:40,column:48},end:{line:47,column:5}},line:40},"5":{name:"(anonymous_5)",decl:{start:{line:48,column:4},end:{line:48,column:5}},loc:{start:{line:48,column:47},end:{line:50,column:5}},line:48},"6":{name:"(anonymous_6)",decl:{start:{line:51,column:4},end:{line:51,column:5}},loc:{start:{line:51,column:37},end:{line:71,column:5}},line:51},"7":{name:"(anonymous_7)",decl:{start:{line:72,column:4},end:{line:72,column:5}},loc:{start:{line:72,column:26},end:{line:85,column:5}},line:72},"8":{name:"(anonymous_8)",decl:{start:{line:73,column:35},end:{line:73,column:36}},loc:{start:{line:73,column:41},end:{line:82,column:9}},line:73},"9":{name:"(anonymous_9)",decl:{start:{line:86,column:4},end:{line:86,column:5}},loc:{start:{line:86,column:45},end:{line:104,column:5}},line:86},"10":{name:"(anonymous_10)",decl:{start:{line:105,column:4},end:{line:105,column:5}},loc:{start:{line:105,column:43},end:{line:115,column:5}},line:105},"11":{name:"(anonymous_11)",decl:{start:{line:116,column:4},end:{line:116,column:5}},loc:{start:{line:116,column:46},end:{line:124,column:5}},line:116},"12":{name:"(anonymous_12)",decl:{start:{line:125,column:4},end:{line:125,column:5}},loc:{start:{line:125,column:45},end:{line:148,column:5}},line:125},"13":{name:"(anonymous_13)",decl:{start:{line:149,column:4},end:{line:149,column:5}},loc:{start:{line:149,column:30},end:{line:159,column:5}},line:149},"14":{name:"(anonymous_14)",decl:{start:{line:160,column:4},end:{line:160,column:5}},loc:{start:{line:160,column:27},end:{line:172,column:5}},line:160},"15":{name:"(anonymous_15)",decl:{start:{line:173,column:4},end:{line:173,column:5}},loc:{start:{line:173,column:17},end:{line:178,column:5}},line:173}},branchMap:{"0":{loc:{start:{line:2,column:17},end:{line:7,column:1}},type:"binary-expr",locations:[{start:{line:2,column:18},end:{line:2,column:22}},{start:{line:2,column:26},end:{line:2,column:41}},{start:{line:2,column:46},end:{line:7,column:1}}],line:2},"1":{loc:{start:{line:3,column:34},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:42},end:{line:3,column:48}},{start:{line:3,column:51},end:{line:3,column:125}}],line:3},"2":{loc:{start:{line:3,column:51},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:67},end:{line:3,column:118}},{start:{line:3,column:121},end:{line:3,column:125}}],line:3},"3":{loc:{start:{line:4,column:4},end:{line:5,column:150}},type:"if",locations:[{start:{line:4,column:4},end:{line:5,column:150}},{start:{line:4,column:4},end:{line:5,column:150}}],line:4},"4":{loc:{start:{line:4,column:8},end:{line:4,column:77}},type:"binary-expr",locations:[{start:{line:4,column:8},end:{line:4,column:35}},{start:{line:4,column:39},end:{line:4,column:77}}],line:4},"5":{loc:{start:{line:5,column:58},end:{line:5,column:150}},type:"if",locations:[{start:{line:5,column:58},end:{line:5,column:150}},{start:{line:5,column:58},end:{line:5,column:150}}],line:5},"6":{loc:{start:{line:5,column:85},end:{line:5,column:149}},type:"binary-expr",locations:[{start:{line:5,column:86},end:{line:5,column:143}},{start:{line:5,column:148},end:{line:5,column:149}}],line:5},"7":{loc:{start:{line:5,column:86},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:94},end:{line:5,column:98}},{start:{line:5,column:101},end:{line:5,column:143}}],line:5},"8":{loc:{start:{line:5,column:101},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:109},end:{line:5,column:126}},{start:{line:5,column:129},end:{line:5,column:143}}],line:5},"9":{loc:{start:{line:6,column:11},end:{line:6,column:62}},type:"binary-expr",locations:[{start:{line:6,column:11},end:{line:6,column:16}},{start:{line:6,column:20},end:{line:6,column:21}},{start:{line:6,column:25},end:{line:6,column:62}}],line:6},"10":{loc:{start:{line:19,column:37},end:{line:19,column:126}},type:"binary-expr",locations:[{start:{line:19,column:37},end:{line:19,column:46}},{start:{line:19,column:50},end:{line:19,column:126}}],line:19},"11":{loc:{start:{line:25,column:16},end:{line:28,column:17}},type:"if",locations:[{start:{line:25,column:16},end:{line:28,column:17}},{start:{line:25,column:16},end:{line:28,column:17}}],line:25},"12":{loc:{start:{line:80,column:12},end:{line:81,column:83}},type:"if",locations:[{start:{line:80,column:12},end:{line:81,column:83}},{start:{line:80,column:12},end:{line:81,column:83}}],line:80},"13":{loc:{start:{line:83,column:8},end:{line:84,column:33}},type:"if",locations:[{start:{line:83,column:8},end:{line:84,column:33}},{start:{line:83,column:8},end:{line:84,column:33}}],line:83},"14":{loc:{start:{line:111,column:8},end:{line:112,column:77}},type:"if",locations:[{start:{line:111,column:8},end:{line:112,column:77}},{start:{line:111,column:8},end:{line:112,column:77}}],line:111},"15":{loc:{start:{line:113,column:8},end:{line:114,column:75}},type:"if",locations:[{start:{line:113,column:8},end:{line:114,column:75}},{start:{line:113,column:8},end:{line:114,column:75}}],line:113},"16":{loc:{start:{line:118,column:18},end:{line:118,column:74}},type:"cond-expr",locations:[{start:{line:118,column:55},end:{line:118,column:61}},{start:{line:118,column:64},end:{line:118,column:74}}],line:118},"17":{loc:{start:{line:118,column:18},end:{line:118,column:52}},type:"binary-expr",locations:[{start:{line:118,column:18},end:{line:118,column:32}},{start:{line:118,column:36},end:{line:118,column:52}}],line:118},"18":{loc:{start:{line:126,column:8},end:{line:147,column:9}},type:"switch",locations:[{start:{line:127,column:12},end:{line:129,column:22}},{start:{line:130,column:12},end:{line:132,column:22}},{start:{line:133,column:12},end:{line:135,column:22}},{start:{line:136,column:12},end:{line:138,column:22}},{start:{line:139,column:12},end:{line:141,column:22}},{start:{line:142,column:12},end:{line:144,column:22}},{start:{line:145,column:12},end:{line:146,column:22}}],line:126},"19":{loc:{start:{line:153,column:16},end:{line:154,column:33}},type:"if",locations:[{start:{line:153,column:16},end:{line:154,column:33}},{start:{line:153,column:16},end:{line:154,column:33}}],line:153}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},b:{"0":[0,0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0,0,0,0,0,0],"19":[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\Presenter\\Presenter.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\Presenter\\Presenter.ts"],names:[],mappings:"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",sourcesContent:["import autobind from 'autobind-decorator';\r\nimport { BasicModelSettings, CalculationData, DataForValueScale } from '../Model/types';\r\nimport { Model } from '../Model/Model';\r\nimport { DataForAdjustPosition } from '../View/Handles/types';\r\nimport { RefreshIntervalPositions } from '../View/SelectedInterval/types';\r\nimport { View } from '../View/View';\r\nimport { HandlesPosition } from '../View/Movement/types';\r\nimport { DataRequestToModel, DataRequestValue } from '../View/types';\r\n\r\n@autobind\r\nexport class Presenter {\r\n  private readonly view: View;\r\n\r\n  private readonly model: Model;\r\n\r\n  constructor(viewLink: View, modelLink: Model) {\r\n    this.view = viewLink;\r\n    this.model = modelLink;\r\n  }\r\n\r\n  private bindProxyToHandlesMovement(view: View, model: Model): HandlesPosition {\r\n    return new Proxy(this.view.movement.positions, {\r\n      set(target, prop: 'from' | 'to', val) {\r\n        const isExtraRange = val === 0 || val === view.slider.slider.offsetWidth - view.handles.fromHandle.offsetWidth;\r\n        const settings: CalculationData = {\r\n          position: String(val),\r\n          target: prop,\r\n          sliderWidth: view.slider.slider.offsetWidth - view.handles.fromHandle.offsetWidth,\r\n        };\r\n\r\n        if (isExtraRange) {\r\n          view.handles.isInputChanges = true;\r\n          view.sideMenu.isInputChanges = true;\r\n        }\r\n\r\n        target[prop] = val;\r\n        model.calculateValuesByPosition(settings);\r\n\r\n        return true;\r\n      },\r\n    });\r\n  }\r\n\r\n  private distributesDataForScale(): void {\r\n    const values: DataForValueScale = this.model.calculateDataForValueScale();\r\n    this.view.valuesScale.refreshValueScale(values);\r\n    this.view.valuesScale.centersValues(\r\n      this.view.slider.slider.offsetWidth - this.view.handles.fromHandle.offsetWidth,\r\n      this.view.handles.fromHandle.offsetWidth,\r\n    );\r\n  }\r\n\r\n  private prepareDataForAdjustPosition(target: 'from' | 'to', value: string): DataForAdjustPosition {\r\n    return {\r\n      target,\r\n      value,\r\n      totalValues: Number(this.model.values.max) - Number(this.model.values.min),\r\n      minValue: this.model.values.min,\r\n    };\r\n  }\r\n\r\n  private prepareNewHandlesPositionsData(handleData: DataForAdjustPosition): RefreshIntervalPositions {\r\n    return this.view.handles.adjustPositions(\r\n      handleData,\r\n      this.view.slider.slider.offsetWidth,\r\n    );\r\n  }\r\n\r\n  private distributeDataForStartPosition(): void {\r\n    const dataForFrom: DataForAdjustPosition = this.prepareDataForAdjustPosition('from', this.model.values.from);\r\n    const dataForTo: DataForAdjustPosition = this.prepareDataForAdjustPosition('to', this.model.values.to);\r\n    const startFrom: RefreshIntervalPositions = this.prepareNewHandlesPositionsData(dataForFrom);\r\n    const startTo: RefreshIntervalPositions = this.prepareNewHandlesPositionsData(dataForTo);\r\n    const adjustPositions = this.view.interval.adjustPositionRelativeValue;\r\n    adjustPositions(startFrom);\r\n    adjustPositions(startTo);\r\n    this.view.movement.positions.from = Number(startFrom.position);\r\n    this.view.movement.positions.to = Number(startTo.position);\r\n    this.view.refreshAllComponents({\r\n      value: this.model.values.min,\r\n      target: 'min',\r\n      isToFixed: this.view.basicSettings.integer,\r\n    });\r\n    this.view.refreshAllComponents({\r\n      value: this.model.values.max,\r\n      target: 'max',\r\n      isToFixed: this.view.basicSettings.integer,\r\n    });\r\n  }\r\n\r\n  private distributeStepWidth(): void {\r\n    const writesNewStepWidth = (): void => {\r\n      const { stepWidth, step } = this.model.calculateStepWidth({\r\n        step: Number(this.view.basicSettings.step),\r\n        sliderWidth: this.view.slider.slider.offsetWidth,\r\n        handleWidth: this.view.handles.fromHandle.offsetWidth,\r\n      });\r\n      this.view.movement.stepWidth = stepWidth;\r\n      if (this.view.basicSettings['side-menu']) this.view.sideMenu.sideMenuElements.stepInput!.value = String(step);\r\n    };\r\n\r\n    if (typeof this.view.basicSettings.step === 'number') writesNewStepWidth();\r\n  }\r\n\r\n  private distributeNewValuesForApply(name: 'from' | 'to', value: string): void {\r\n    const result: DataForAdjustPosition = this.model.prepareInputValueForRecord({\r\n      name,\r\n      value,\r\n      step: this.view.basicSettings.step,\r\n      isDouble: this.view.basicSettings.double,\r\n      positions: {\r\n        from: this.view.movement.positions.from,\r\n        to: this.view.movement.positions.to,\r\n      },\r\n      handleWidth: this.view.handles.toHandle.offsetWidth,\r\n      sliderWidth: this.view.slider.slider.offsetWidth,\r\n    });\r\n    const newPosition: RefreshIntervalPositions = this.view.handles.adjustPositions(\r\n      result,\r\n      this.view.slider.slider.offsetWidth,\r\n    );\r\n\r\n    this.view.handles.isInputChanges = true;\r\n    this.view.sideMenu.isInputChanges = true;\r\n    this.view.interval.adjustPositionRelativeValue(newPosition);\r\n    this.view.movement.positions[newPosition.target] = Number(newPosition.position);\r\n  }\r\n\r\n  private distributeValueFromScaleToApply(value: string): void {\r\n    const result: DataForAdjustPosition = this.model.assignValueFromScale(value, this.view.basicSettings.double);\r\n    const newPosition: RefreshIntervalPositions = this.view.handles.adjustPositions(\r\n      result,\r\n      this.view.slider.slider.offsetWidth,\r\n    );\r\n    this.view.handles.isInputChanges = true;\r\n    this.view.sideMenu.isInputChanges = true;\r\n    this.view.interval.adjustPositionRelativeValue(newPosition);\r\n    if (newPosition.target === 'from') this.view.movement.positions.from = Number(newPosition.position);\r\n    if (newPosition.target === 'to') this.view.movement.positions.to = Number(newPosition.position);\r\n  }\r\n\r\n  private distributeSliderValuesRangeToApply(value: DataRequestValue): void {\r\n    this.model.changeSliderValuesRange({\r\n      name: value?.name,\r\n      value: value.value,\r\n    });\r\n    this.view.dataRequestToModel.needDataForStartPosition = { name: '', value: 'true' };\r\n    this.view.dataRequestToModel.needDataForScale = { name: '', value: 'true' };\r\n    this.view.dataRequestToModel.needStepWidth = { name: '', value: 'true' };\r\n  }\r\n\r\n  private handlesRequestsFromView(property: string, value: DataRequestValue): void {\r\n    switch (property) {\r\n      case 'needDataForScale':\r\n        this.distributesDataForScale();\r\n        break;\r\n      case 'needDataForStartPosition':\r\n        this.distributeDataForStartPosition();\r\n        break;\r\n      case 'needStepWidth':\r\n        this.distributeStepWidth();\r\n        break;\r\n      case 'needApplyNewValue':\r\n        this.distributeNewValuesForApply(value.name as 'from' | 'to', value.value);\r\n        break;\r\n      case 'needApplyValueFromScale':\r\n        this.distributeValueFromScaleToApply(value.value);\r\n        break;\r\n      case 'needChangeSliderValuesRange':\r\n        this.distributeSliderValuesRangeToApply(value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  private bindProxyToViewRequests(): DataRequestToModel {\r\n    const that: this = this;\r\n    return new Proxy(this.view.dataRequestToModel, {\r\n      set(target: DataRequestToModel, property: string, value: DataRequestValue) {\r\n        if (!value) return false;\r\n        that.handlesRequestsFromView(property, value);\r\n        return true;\r\n      },\r\n    });\r\n  }\r\n\r\n  private bindProxyToModel(view: View): BasicModelSettings {\r\n    return new Proxy(this.model.values, {\r\n      set(target: BasicModelSettings, property: 'min' | 'max' | 'from' | 'to', value: string) {\r\n        target[property] = value;\r\n\r\n        view.refreshAllComponents({\r\n          value,\r\n          target: property,\r\n          isToFixed: view.basicSettings.integer,\r\n        });\r\n\r\n        return true;\r\n      },\r\n    });\r\n  }\r\n\r\n  public initialize(): void {\r\n    const { view, model } = this;\r\n\r\n    view.movement.positions = this.bindProxyToHandlesMovement(view, model);\r\n    view.dataRequestToModel = this.bindProxyToViewRequests();\r\n    model.values = this.bindProxyToModel(view);\r\n  }\r\n}\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();var __decorate=(cov_cqnkemp45.s[0]++,(cov_cqnkemp45.b[0][0]++,this)&&(cov_cqnkemp45.b[0][1]++,this.__decorate)||(cov_cqnkemp45.b[0][2]++,function(decorators,target,key,desc){cov_cqnkemp45.f[0]++;var c=(cov_cqnkemp45.s[1]++,arguments.length),r=(cov_cqnkemp45.s[2]++,c<3?(cov_cqnkemp45.b[1][0]++,target):(cov_cqnkemp45.b[1][1]++,desc===null?(cov_cqnkemp45.b[2][0]++,desc=Object.getOwnPropertyDescriptor(target,key)):(cov_cqnkemp45.b[2][1]++,desc))),d;cov_cqnkemp45.s[3]++;if((cov_cqnkemp45.b[4][0]++,typeof Reflect==="object")&&(cov_cqnkemp45.b[4][1]++,typeof Reflect.decorate==="function")){cov_cqnkemp45.b[3][0]++;cov_cqnkemp45.s[4]++;r=Reflect.decorate(decorators,target,key,desc);}else{cov_cqnkemp45.b[3][1]++;cov_cqnkemp45.s[5]++;for(var i=decorators.length-1;i>=0;i--){cov_cqnkemp45.s[6]++;if(d=decorators[i]){cov_cqnkemp45.b[5][0]++;cov_cqnkemp45.s[7]++;r=(cov_cqnkemp45.b[6][0]++,c<3?(cov_cqnkemp45.b[7][0]++,d(r)):(cov_cqnkemp45.b[7][1]++,c>3?(cov_cqnkemp45.b[8][0]++,d(target,key,r)):(cov_cqnkemp45.b[8][1]++,d(target,key))))||(cov_cqnkemp45.b[6][1]++,r);}else{cov_cqnkemp45.b[5][1]++;}}}cov_cqnkemp45.s[8]++;return(cov_cqnkemp45.b[9][0]++,c>3)&&(cov_cqnkemp45.b[9][1]++,r)&&(cov_cqnkemp45.b[9][2]++,Object.defineProperty(target,key,r)),r;}));cov_cqnkemp45.s[9]++;Object.defineProperty(exports, "__esModule", ({value:true}));cov_cqnkemp45.s[10]++;exports.Presenter=void 0;const autobind_decorator_1=(cov_cqnkemp45.s[11]++,__webpack_require__(/*! autobind-decorator */ "./node_modules/autobind-decorator/lib/esm/index.js"));cov_cqnkemp45.s[12]++;let Presenter=class Presenter{constructor(viewLink,modelLink){cov_cqnkemp45.f[1]++;cov_cqnkemp45.s[13]++;this.view=viewLink;cov_cqnkemp45.s[14]++;this.model=modelLink;}bindProxyToHandlesMovement(view,model){cov_cqnkemp45.f[2]++;cov_cqnkemp45.s[15]++;return new Proxy(this.view.movement.positions,{set(target,prop,val){const isExtraRange=(cov_cqnkemp45.s[16]++,(cov_cqnkemp45.b[10][0]++,val===0)||(cov_cqnkemp45.b[10][1]++,val===view.slider.slider.offsetWidth-view.handles.fromHandle.offsetWidth));const settings=(cov_cqnkemp45.s[17]++,{position:String(val),target:prop,sliderWidth:view.slider.slider.offsetWidth-view.handles.fromHandle.offsetWidth});cov_cqnkemp45.s[18]++;if(isExtraRange){cov_cqnkemp45.b[11][0]++;cov_cqnkemp45.s[19]++;view.handles.isInputChanges=true;cov_cqnkemp45.s[20]++;view.sideMenu.isInputChanges=true;}else{cov_cqnkemp45.b[11][1]++;}cov_cqnkemp45.s[21]++;target[prop]=val;cov_cqnkemp45.s[22]++;model.calculateValuesByPosition(settings);cov_cqnkemp45.s[23]++;return true;}});}distributesDataForScale(){cov_cqnkemp45.f[3]++;const values=(cov_cqnkemp45.s[24]++,this.model.calculateDataForValueScale());cov_cqnkemp45.s[25]++;this.view.valuesScale.refreshValueScale(values);cov_cqnkemp45.s[26]++;this.view.valuesScale.centersValues(this.view.slider.slider.offsetWidth-this.view.handles.fromHandle.offsetWidth,this.view.handles.fromHandle.offsetWidth);}prepareDataForAdjustPosition(target,value){cov_cqnkemp45.f[4]++;cov_cqnkemp45.s[27]++;return{target,value,totalValues:Number(this.model.values.max)-Number(this.model.values.min),minValue:this.model.values.min};}prepareNewHandlesPositionsData(handleData){cov_cqnkemp45.f[5]++;cov_cqnkemp45.s[28]++;return this.view.handles.adjustPositions(handleData,this.view.slider.slider.offsetWidth);}distributeDataForStartPosition(){cov_cqnkemp45.f[6]++;const dataForFrom=(cov_cqnkemp45.s[29]++,this.prepareDataForAdjustPosition('from',this.model.values.from));const dataForTo=(cov_cqnkemp45.s[30]++,this.prepareDataForAdjustPosition('to',this.model.values.to));const startFrom=(cov_cqnkemp45.s[31]++,this.prepareNewHandlesPositionsData(dataForFrom));const startTo=(cov_cqnkemp45.s[32]++,this.prepareNewHandlesPositionsData(dataForTo));const adjustPositions=(cov_cqnkemp45.s[33]++,this.view.interval.adjustPositionRelativeValue);cov_cqnkemp45.s[34]++;adjustPositions(startFrom);cov_cqnkemp45.s[35]++;adjustPositions(startTo);cov_cqnkemp45.s[36]++;this.view.movement.positions.from=Number(startFrom.position);cov_cqnkemp45.s[37]++;this.view.movement.positions.to=Number(startTo.position);cov_cqnkemp45.s[38]++;this.view.refreshAllComponents({value:this.model.values.min,target:'min',isToFixed:this.view.basicSettings.integer});cov_cqnkemp45.s[39]++;this.view.refreshAllComponents({value:this.model.values.max,target:'max',isToFixed:this.view.basicSettings.integer});}distributeStepWidth(){cov_cqnkemp45.f[7]++;cov_cqnkemp45.s[40]++;const writesNewStepWidth=()=>{cov_cqnkemp45.f[8]++;const{stepWidth,step}=(cov_cqnkemp45.s[41]++,this.model.calculateStepWidth({step:Number(this.view.basicSettings.step),sliderWidth:this.view.slider.slider.offsetWidth,handleWidth:this.view.handles.fromHandle.offsetWidth}));cov_cqnkemp45.s[42]++;this.view.movement.stepWidth=stepWidth;cov_cqnkemp45.s[43]++;if(this.view.basicSettings['side-menu']){cov_cqnkemp45.b[12][0]++;cov_cqnkemp45.s[44]++;this.view.sideMenu.sideMenuElements.stepInput.value=String(step);}else{cov_cqnkemp45.b[12][1]++;}};cov_cqnkemp45.s[45]++;if(typeof this.view.basicSettings.step==='number'){cov_cqnkemp45.b[13][0]++;cov_cqnkemp45.s[46]++;writesNewStepWidth();}else{cov_cqnkemp45.b[13][1]++;}}distributeNewValuesForApply(name,value){cov_cqnkemp45.f[9]++;const result=(cov_cqnkemp45.s[47]++,this.model.prepareInputValueForRecord({name,value,step:this.view.basicSettings.step,isDouble:this.view.basicSettings.double,positions:{from:this.view.movement.positions.from,to:this.view.movement.positions.to},handleWidth:this.view.handles.toHandle.offsetWidth,sliderWidth:this.view.slider.slider.offsetWidth}));const newPosition=(cov_cqnkemp45.s[48]++,this.view.handles.adjustPositions(result,this.view.slider.slider.offsetWidth));cov_cqnkemp45.s[49]++;this.view.handles.isInputChanges=true;cov_cqnkemp45.s[50]++;this.view.sideMenu.isInputChanges=true;cov_cqnkemp45.s[51]++;this.view.interval.adjustPositionRelativeValue(newPosition);cov_cqnkemp45.s[52]++;this.view.movement.positions[newPosition.target]=Number(newPosition.position);}distributeValueFromScaleToApply(value){cov_cqnkemp45.f[10]++;const result=(cov_cqnkemp45.s[53]++,this.model.assignValueFromScale(value,this.view.basicSettings.double));const newPosition=(cov_cqnkemp45.s[54]++,this.view.handles.adjustPositions(result,this.view.slider.slider.offsetWidth));cov_cqnkemp45.s[55]++;this.view.handles.isInputChanges=true;cov_cqnkemp45.s[56]++;this.view.sideMenu.isInputChanges=true;cov_cqnkemp45.s[57]++;this.view.interval.adjustPositionRelativeValue(newPosition);cov_cqnkemp45.s[58]++;if(newPosition.target==='from'){cov_cqnkemp45.b[14][0]++;cov_cqnkemp45.s[59]++;this.view.movement.positions.from=Number(newPosition.position);}else{cov_cqnkemp45.b[14][1]++;}cov_cqnkemp45.s[60]++;if(newPosition.target==='to'){cov_cqnkemp45.b[15][0]++;cov_cqnkemp45.s[61]++;this.view.movement.positions.to=Number(newPosition.position);}else{cov_cqnkemp45.b[15][1]++;}}distributeSliderValuesRangeToApply(value){cov_cqnkemp45.f[11]++;cov_cqnkemp45.s[62]++;this.model.changeSliderValuesRange({name:(cov_cqnkemp45.b[17][0]++,value===null)||(cov_cqnkemp45.b[17][1]++,value===void 0)?(cov_cqnkemp45.b[16][0]++,void 0):(cov_cqnkemp45.b[16][1]++,value.name),value:value.value});cov_cqnkemp45.s[63]++;this.view.dataRequestToModel.needDataForStartPosition={name:'',value:'true'};cov_cqnkemp45.s[64]++;this.view.dataRequestToModel.needDataForScale={name:'',value:'true'};cov_cqnkemp45.s[65]++;this.view.dataRequestToModel.needStepWidth={name:'',value:'true'};}handlesRequestsFromView(property,value){cov_cqnkemp45.f[12]++;cov_cqnkemp45.s[66]++;switch(property){case'needDataForScale':cov_cqnkemp45.b[18][0]++;cov_cqnkemp45.s[67]++;this.distributesDataForScale();cov_cqnkemp45.s[68]++;break;case'needDataForStartPosition':cov_cqnkemp45.b[18][1]++;cov_cqnkemp45.s[69]++;this.distributeDataForStartPosition();cov_cqnkemp45.s[70]++;break;case'needStepWidth':cov_cqnkemp45.b[18][2]++;cov_cqnkemp45.s[71]++;this.distributeStepWidth();cov_cqnkemp45.s[72]++;break;case'needApplyNewValue':cov_cqnkemp45.b[18][3]++;cov_cqnkemp45.s[73]++;this.distributeNewValuesForApply(value.name,value.value);cov_cqnkemp45.s[74]++;break;case'needApplyValueFromScale':cov_cqnkemp45.b[18][4]++;cov_cqnkemp45.s[75]++;this.distributeValueFromScaleToApply(value.value);cov_cqnkemp45.s[76]++;break;case'needChangeSliderValuesRange':cov_cqnkemp45.b[18][5]++;cov_cqnkemp45.s[77]++;this.distributeSliderValuesRangeToApply(value);cov_cqnkemp45.s[78]++;break;default:cov_cqnkemp45.b[18][6]++;cov_cqnkemp45.s[79]++;break;}}bindProxyToViewRequests(){cov_cqnkemp45.f[13]++;const that=(cov_cqnkemp45.s[80]++,this);cov_cqnkemp45.s[81]++;return new Proxy(this.view.dataRequestToModel,{set(target,property,value){cov_cqnkemp45.s[82]++;if(!value){cov_cqnkemp45.b[19][0]++;cov_cqnkemp45.s[83]++;return false;}else{cov_cqnkemp45.b[19][1]++;}cov_cqnkemp45.s[84]++;that.handlesRequestsFromView(property,value);cov_cqnkemp45.s[85]++;return true;}});}bindProxyToModel(view){cov_cqnkemp45.f[14]++;cov_cqnkemp45.s[86]++;return new Proxy(this.model.values,{set(target,property,value){cov_cqnkemp45.s[87]++;target[property]=value;cov_cqnkemp45.s[88]++;view.refreshAllComponents({value,target:property,isToFixed:view.basicSettings.integer});cov_cqnkemp45.s[89]++;return true;}});}initialize(){cov_cqnkemp45.f[15]++;const{view,model}=(cov_cqnkemp45.s[90]++,this);cov_cqnkemp45.s[91]++;view.movement.positions=this.bindProxyToHandlesMovement(view,model);cov_cqnkemp45.s[92]++;view.dataRequestToModel=this.bindProxyToViewRequests();cov_cqnkemp45.s[93]++;model.values=this.bindProxyToModel(view);}};cov_cqnkemp45.s[94]++;Presenter=__decorate([autobind_decorator_1.default],Presenter);cov_cqnkemp45.s[95]++;exports.Presenter=Presenter;

/***/ }),

/***/ "./src/Presenter/presenter.test.ts":
/*!*****************************************!*\
  !*** ./src/Presenter/presenter.test.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var cov_1j3prx2qfm=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\Presenter\\presenter.test.ts",hash="0df8605b638158dc262010d5d79a8be4b481acce",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\Presenter\\presenter.test.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:16},end:{line:3,column:41}},"2":{start:{line:4,column:20},end:{line:4,column:42}},"3":{start:{line:5,column:15},end:{line:5,column:38}},"4":{start:{line:6,column:0},end:{line:91,column:3}},"5":{start:{line:10,column:25},end:{line:18,column:5}},"6":{start:{line:19,column:23},end:{line:19,column:52}},"7":{start:{line:20,column:26},end:{line:25,column:5}},"8":{start:{line:26,column:4},end:{line:38,column:7}},"9":{start:{line:28,column:8},end:{line:28,column:49}},"10":{start:{line:29,column:8},end:{line:29,column:57}},"11":{start:{line:30,column:8},end:{line:30,column:59}},"12":{start:{line:31,column:8},end:{line:31,column:161}},"13":{start:{line:32,column:8},end:{line:32,column:49}},"14":{start:{line:33,column:8},end:{line:33,column:53}},"15":{start:{line:34,column:8},end:{line:34,column:51}},"16":{start:{line:35,column:8},end:{line:35,column:31}},"17":{start:{line:36,column:8},end:{line:36,column:35}},"18":{start:{line:37,column:8},end:{line:37,column:34}},"19":{start:{line:39,column:4},end:{line:41,column:7}},"20":{start:{line:40,column:8},end:{line:40,column:39}},"21":{start:{line:42,column:4},end:{line:46,column:7}},"22":{start:{line:43,column:8},end:{line:43,column:41}},"23":{start:{line:44,column:8},end:{line:44,column:63}},"24":{start:{line:45,column:8},end:{line:45,column:48}},"25":{start:{line:47,column:4},end:{line:51,column:7}},"26":{start:{line:48,column:8},end:{line:48,column:41}},"27":{start:{line:49,column:8},end:{line:49,column:63}},"28":{start:{line:50,column:8},end:{line:50,column:46}},"29":{start:{line:52,column:4},end:{line:60,column:7}},"30":{start:{line:53,column:8},end:{line:53,column:79}},"31":{start:{line:54,column:8},end:{line:54,column:65}},"32":{start:{line:55,column:8},end:{line:55,column:61}},"33":{start:{line:56,column:8},end:{line:56,column:61}},"34":{start:{line:57,column:8},end:{line:57,column:61}},"35":{start:{line:58,column:8},end:{line:58,column:61}},"36":{start:{line:59,column:8},end:{line:59,column:67}},"37":{start:{line:61,column:4},end:{line:65,column:7}},"38":{start:{line:62,column:8},end:{line:62,column:87}},"39":{start:{line:63,column:8},end:{line:63,column:57}},"40":{start:{line:64,column:8},end:{line:64,column:55}},"41":{start:{line:66,column:4},end:{line:70,column:7}},"42":{start:{line:67,column:8},end:{line:67,column:37}},"43":{start:{line:68,column:8},end:{line:68,column:76}},"44":{start:{line:69,column:8},end:{line:69,column:54}},"45":{start:{line:71,column:4},end:{line:75,column:7}},"46":{start:{line:72,column:8},end:{line:72,column:82}},"47":{start:{line:73,column:8},end:{line:73,column:57}},"48":{start:{line:74,column:8},end:{line:74,column:48}},"49":{start:{line:76,column:4},end:{line:80,column:7}},"50":{start:{line:77,column:8},end:{line:77,column:80}},"51":{start:{line:78,column:8},end:{line:78,column:55}},"52":{start:{line:79,column:8},end:{line:79,column:46}},"53":{start:{line:81,column:4},end:{line:90,column:7}},"54":{start:{line:82,column:8},end:{line:82,column:84}},"55":{start:{line:83,column:8},end:{line:83,column:48}},"56":{start:{line:84,column:8},end:{line:84,column:84}},"57":{start:{line:85,column:8},end:{line:85,column:48}},"58":{start:{line:86,column:8},end:{line:86,column:84}},"59":{start:{line:87,column:8},end:{line:87,column:46}},"60":{start:{line:88,column:8},end:{line:88,column:84}},"61":{start:{line:89,column:8},end:{line:89,column:46}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:22},end:{line:6,column:23}},loc:{start:{line:6,column:28},end:{line:91,column:1}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:26,column:15},end:{line:26,column:16}},loc:{start:{line:26,column:21},end:{line:38,column:5}},line:26},"2":{name:"(anonymous_2)",decl:{start:{line:39,column:34},end:{line:39,column:35}},loc:{start:{line:39,column:40},end:{line:41,column:5}},line:39},"3":{name:"(anonymous_3)",decl:{start:{line:42,column:54},end:{line:42,column:55}},loc:{start:{line:42,column:60},end:{line:46,column:5}},line:42},"4":{name:"(anonymous_4)",decl:{start:{line:47,column:52},end:{line:47,column:53}},loc:{start:{line:47,column:58},end:{line:51,column:5}},line:47},"5":{name:"(anonymous_5)",decl:{start:{line:52,column:66},end:{line:52,column:67}},loc:{start:{line:52,column:72},end:{line:60,column:5}},line:52},"6":{name:"(anonymous_6)",decl:{start:{line:61,column:59},end:{line:61,column:60}},loc:{start:{line:61,column:65},end:{line:65,column:5}},line:61},"7":{name:"(anonymous_7)",decl:{start:{line:66,column:48},end:{line:66,column:49}},loc:{start:{line:66,column:54},end:{line:70,column:5}},line:66},"8":{name:"(anonymous_8)",decl:{start:{line:71,column:65},end:{line:71,column:66}},loc:{start:{line:71,column:71},end:{line:75,column:5}},line:71},"9":{name:"(anonymous_9)",decl:{start:{line:76,column:63},end:{line:76,column:64}},loc:{start:{line:76,column:69},end:{line:80,column:5}},line:76},"10":{name:"(anonymous_10)",decl:{start:{line:81,column:69},end:{line:81,column:70}},loc:{start:{line:81,column:75},end:{line:90,column:5}},line:81}},branchMap:{"0":{loc:{start:{line:31,column:8},end:{line:31,column:160}},type:"cond-expr",locations:[{start:{line:31,column:74},end:{line:31,column:80}},{start:{line:31,column:83},end:{line:31,column:160}}],line:31},"1":{loc:{start:{line:31,column:8},end:{line:31,column:71}},type:"binary-expr",locations:[{start:{line:31,column:8},end:{line:31,column:54}},{start:{line:31,column:58},end:{line:31,column:71}}],line:31}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},b:{"0":[0,0],"1":[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\Presenter\\presenter.test.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\Presenter\\presenter.test.ts"],names:[],mappings:"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",sourcesContent:["import { BasicModelSettings } from '../Model/types';\r\nimport { Model } from '../Model/Model';\r\nimport { Presenter } from './Presenter';\r\nimport { BasicViewSettings } from '../View/types';\r\nimport { View } from '../View/View';\r\n\r\ndescribe('Presenter', () => {\r\n  let presenter: Presenter;\r\n  let view: View;\r\n  let model: Model;\r\n  const viewSettings: BasicViewSettings = {\r\n    'side-menu': true,\r\n    double: true,\r\n    handlesValues: true,\r\n    step: 10,\r\n    valueScale: true,\r\n    vertical: true,\r\n    integer: true,\r\n  };\r\n  const viewTarget: HTMLDivElement = document.createElement('div');\r\n  const modelSettings: BasicModelSettings = {\r\n    min: '0',\r\n    max: '100',\r\n    from: '30',\r\n    to: '70',\r\n  };\r\n  beforeEach(() => {\r\n    model = new Model(modelSettings);\r\n    view = new View(viewSettings, viewTarget);\r\n    presenter = new Presenter(view, model);\r\n\r\n    document.querySelector('body')?.append(view.slider.slider, view.handles.fromHandle, view.handles.toHandle);\r\n    view.slider.slider.style.width = '120px';\r\n    view.handles.fromHandle.style.width = '20px';\r\n    view.handles.toHandle.style.width = '20px';\r\n\r\n    presenter.initialize();\r\n    view.prepareSliderForUse();\r\n    view.bindEventListeners();\r\n  });\r\n\r\n  it('Presenter can be create', () => {\r\n    expect(presenter).toBeTruthy();\r\n  });\r\n\r\n  it('needApplyValueFromScale() choose from value', () => {\r\n    view.basicSettings.double = true;\r\n    view.valuesScale[20].dispatchEvent(new Event('click'));\r\n    expect(model.values.from).toEqual('20');\r\n  });\r\n\r\n  it('needApplyValueFromScale() choose to value', () => {\r\n    view.basicSettings.double = true;\r\n    view.valuesScale[80].dispatchEvent(new Event('click'));\r\n    expect(model.values.to).toEqual('80');\r\n  });\r\n\r\n  it('needDataForScale() fill value scale with correct values', () => {\r\n    view.dataRequestToModel.needDataForScale = { name: '', value: 'true' };\r\n    expect(view.valuesScale.minValue.innerText).toEqual('0');\r\n    expect(view.valuesScale[20].innerText).toEqual('20');\r\n    expect(view.valuesScale[40].innerText).toEqual('40');\r\n    expect(view.valuesScale[60].innerText).toEqual('60');\r\n    expect(view.valuesScale[80].innerText).toEqual('80');\r\n    expect(view.valuesScale.maxValue.innerText).toEqual('100');\r\n  });\r\n\r\n  it('needDataForStartPosition() set correct positions', () => {\r\n    view.dataRequestToModel.needDataForStartPosition = { name: '', value: 'true' };\r\n    expect(view.movement.positions.from).toEqual(30);\r\n    expect(view.movement.positions.to).toEqual(70);\r\n  });\r\n\r\n  it('needStepWidth() set correct stepWidth', () => {\r\n    view.basicSettings.step = 10;\r\n    view.dataRequestToModel.needStepWidth = { name: '', value: 'true' };\r\n    expect(view.movement.stepWidth).toEqual('10');\r\n  });\r\n\r\n  it('needApplyNewValue() apply new value for from correctly', () => {\r\n    view.dataRequestToModel.needApplyNewValue = { name: 'from', value: '40' };\r\n    expect(view.movement.positions.from).toEqual(40);\r\n    expect(model.values.from).toEqual('40');\r\n  });\r\n\r\n  it('needApplyNewValue() apply new value for to correctly', () => {\r\n    view.dataRequestToModel.needApplyNewValue = { name: 'to', value: '60' };\r\n    expect(view.movement.positions.to).toEqual(60);\r\n    expect(model.values.to).toEqual('60');\r\n  });\r\n\r\n  it('needApplyValueFromScale() apply value from scale correctly', () => {\r\n    view.dataRequestToModel.needApplyValueFromScale = { name: '', value: '20' };\r\n    expect(model.values.from).toEqual('20');\r\n    view.dataRequestToModel.needApplyValueFromScale = { name: '', value: '40' };\r\n    expect(model.values.from).toEqual('40');\r\n    view.dataRequestToModel.needApplyValueFromScale = { name: '', value: '80' };\r\n    expect(model.values.to).toEqual('80');\r\n    view.dataRequestToModel.needApplyValueFromScale = { name: '', value: '60' };\r\n    expect(model.values.to).toEqual('60');\r\n  });\r\n});\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_1j3prx2qfm.s[0]++;Object.defineProperty(exports, "__esModule", ({value:true}));const Model_1=(cov_1j3prx2qfm.s[1]++,__webpack_require__(/*! ../Model/Model */ "./src/Model/Model.ts"));const Presenter_1=(cov_1j3prx2qfm.s[2]++,__webpack_require__(/*! ./Presenter */ "./src/Presenter/Presenter.ts"));const View_1=(cov_1j3prx2qfm.s[3]++,__webpack_require__(/*! ../View/View */ "./src/View/View.ts"));cov_1j3prx2qfm.s[4]++;describe('Presenter',()=>{cov_1j3prx2qfm.f[0]++;let presenter;let view;let model;const viewSettings=(cov_1j3prx2qfm.s[5]++,{'side-menu':true,double:true,handlesValues:true,step:10,valueScale:true,vertical:true,integer:true});const viewTarget=(cov_1j3prx2qfm.s[6]++,document.createElement('div'));const modelSettings=(cov_1j3prx2qfm.s[7]++,{min:'0',max:'100',from:'30',to:'70'});cov_1j3prx2qfm.s[8]++;beforeEach(()=>{cov_1j3prx2qfm.f[1]++;var _a;cov_1j3prx2qfm.s[9]++;model=new Model_1.Model(modelSettings);cov_1j3prx2qfm.s[10]++;view=new View_1.View(viewSettings,viewTarget);cov_1j3prx2qfm.s[11]++;presenter=new Presenter_1.Presenter(view,model);cov_1j3prx2qfm.s[12]++;(cov_1j3prx2qfm.b[1][0]++,(_a=document.querySelector('body'))===null)||(cov_1j3prx2qfm.b[1][1]++,_a===void 0)?(cov_1j3prx2qfm.b[0][0]++,void 0):(cov_1j3prx2qfm.b[0][1]++,_a.append(view.slider.slider,view.handles.fromHandle,view.handles.toHandle));cov_1j3prx2qfm.s[13]++;view.slider.slider.style.width='120px';cov_1j3prx2qfm.s[14]++;view.handles.fromHandle.style.width='20px';cov_1j3prx2qfm.s[15]++;view.handles.toHandle.style.width='20px';cov_1j3prx2qfm.s[16]++;presenter.initialize();cov_1j3prx2qfm.s[17]++;view.prepareSliderForUse();cov_1j3prx2qfm.s[18]++;view.bindEventListeners();});cov_1j3prx2qfm.s[19]++;it('Presenter can be create',()=>{cov_1j3prx2qfm.f[2]++;cov_1j3prx2qfm.s[20]++;expect(presenter).toBeTruthy();});cov_1j3prx2qfm.s[21]++;it('needApplyValueFromScale() choose from value',()=>{cov_1j3prx2qfm.f[3]++;cov_1j3prx2qfm.s[22]++;view.basicSettings.double=true;cov_1j3prx2qfm.s[23]++;view.valuesScale[20].dispatchEvent(new Event('click'));cov_1j3prx2qfm.s[24]++;expect(model.values.from).toEqual('20');});cov_1j3prx2qfm.s[25]++;it('needApplyValueFromScale() choose to value',()=>{cov_1j3prx2qfm.f[4]++;cov_1j3prx2qfm.s[26]++;view.basicSettings.double=true;cov_1j3prx2qfm.s[27]++;view.valuesScale[80].dispatchEvent(new Event('click'));cov_1j3prx2qfm.s[28]++;expect(model.values.to).toEqual('80');});cov_1j3prx2qfm.s[29]++;it('needDataForScale() fill value scale with correct values',()=>{cov_1j3prx2qfm.f[5]++;cov_1j3prx2qfm.s[30]++;view.dataRequestToModel.needDataForScale={name:'',value:'true'};cov_1j3prx2qfm.s[31]++;expect(view.valuesScale.minValue.innerText).toEqual('0');cov_1j3prx2qfm.s[32]++;expect(view.valuesScale[20].innerText).toEqual('20');cov_1j3prx2qfm.s[33]++;expect(view.valuesScale[40].innerText).toEqual('40');cov_1j3prx2qfm.s[34]++;expect(view.valuesScale[60].innerText).toEqual('60');cov_1j3prx2qfm.s[35]++;expect(view.valuesScale[80].innerText).toEqual('80');cov_1j3prx2qfm.s[36]++;expect(view.valuesScale.maxValue.innerText).toEqual('100');});cov_1j3prx2qfm.s[37]++;it('needDataForStartPosition() set correct positions',()=>{cov_1j3prx2qfm.f[6]++;cov_1j3prx2qfm.s[38]++;view.dataRequestToModel.needDataForStartPosition={name:'',value:'true'};cov_1j3prx2qfm.s[39]++;expect(view.movement.positions.from).toEqual(30);cov_1j3prx2qfm.s[40]++;expect(view.movement.positions.to).toEqual(70);});cov_1j3prx2qfm.s[41]++;it('needStepWidth() set correct stepWidth',()=>{cov_1j3prx2qfm.f[7]++;cov_1j3prx2qfm.s[42]++;view.basicSettings.step=10;cov_1j3prx2qfm.s[43]++;view.dataRequestToModel.needStepWidth={name:'',value:'true'};cov_1j3prx2qfm.s[44]++;expect(view.movement.stepWidth).toEqual('10');});cov_1j3prx2qfm.s[45]++;it('needApplyNewValue() apply new value for from correctly',()=>{cov_1j3prx2qfm.f[8]++;cov_1j3prx2qfm.s[46]++;view.dataRequestToModel.needApplyNewValue={name:'from',value:'40'};cov_1j3prx2qfm.s[47]++;expect(view.movement.positions.from).toEqual(40);cov_1j3prx2qfm.s[48]++;expect(model.values.from).toEqual('40');});cov_1j3prx2qfm.s[49]++;it('needApplyNewValue() apply new value for to correctly',()=>{cov_1j3prx2qfm.f[9]++;cov_1j3prx2qfm.s[50]++;view.dataRequestToModel.needApplyNewValue={name:'to',value:'60'};cov_1j3prx2qfm.s[51]++;expect(view.movement.positions.to).toEqual(60);cov_1j3prx2qfm.s[52]++;expect(model.values.to).toEqual('60');});cov_1j3prx2qfm.s[53]++;it('needApplyValueFromScale() apply value from scale correctly',()=>{cov_1j3prx2qfm.f[10]++;cov_1j3prx2qfm.s[54]++;view.dataRequestToModel.needApplyValueFromScale={name:'',value:'20'};cov_1j3prx2qfm.s[55]++;expect(model.values.from).toEqual('20');cov_1j3prx2qfm.s[56]++;view.dataRequestToModel.needApplyValueFromScale={name:'',value:'40'};cov_1j3prx2qfm.s[57]++;expect(model.values.from).toEqual('40');cov_1j3prx2qfm.s[58]++;view.dataRequestToModel.needApplyValueFromScale={name:'',value:'80'};cov_1j3prx2qfm.s[59]++;expect(model.values.to).toEqual('80');cov_1j3prx2qfm.s[60]++;view.dataRequestToModel.needApplyValueFromScale={name:'',value:'60'};cov_1j3prx2qfm.s[61]++;expect(model.values.to).toEqual('60');});});

/***/ }),

/***/ "./src/View/Handles/Handles.ts":
/*!*************************************!*\
  !*** ./src/View/Handles/Handles.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
var cov_pdh3tflhv=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Handles\\Handles.ts",hash="917d5f9a946d4f736998302c3f057100ecd01d93",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Handles\\Handles.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:25}},"2":{start:{line:6,column:8},end:{line:6,column:36}},"3":{start:{line:7,column:8},end:{line:28,column:10}},"4":{start:{line:29,column:8},end:{line:29,column:83}},"5":{start:{line:30,column:8},end:{line:30,column:81}},"6":{start:{line:31,column:8},end:{line:31,column:82}},"7":{start:{line:32,column:8},end:{line:32,column:80}},"8":{start:{line:33,column:8},end:{line:33,column:47}},"9":{start:{line:34,column:8},end:{line:34,column:43}},"10":{start:{line:35,column:8},end:{line:35,column:36}},"11":{start:{line:38,column:8},end:{line:38,column:47}},"12":{start:{line:39,column:8},end:{line:39,column:43}},"13":{start:{line:45,column:58},end:{line:45,column:66}},"14":{start:{line:46,column:24},end:{line:46,column:54}},"15":{start:{line:47,column:8},end:{line:49,column:11}},"16":{start:{line:48,column:12},end:{line:48,column:44}},"17":{start:{line:50,column:35},end:{line:50,column:48}},"18":{start:{line:51,column:8},end:{line:52,column:46}},"19":{start:{line:52,column:12},end:{line:52,column:46}},"20":{start:{line:53,column:8},end:{line:53,column:23}},"21":{start:{line:56,column:43},end:{line:56,column:51}},"22":{start:{line:57,column:31},end:{line:57,column:85}},"23":{start:{line:58,column:8},end:{line:65,column:9}},"24":{start:{line:59,column:12},end:{line:59,column:91}},"25":{start:{line:60,column:12},end:{line:60,column:72}},"26":{start:{line:63,column:12},end:{line:63,column:91}},"27":{start:{line:64,column:12},end:{line:64,column:72}},"28":{start:{line:68,column:28},end:{line:68,column:32}},"29":{start:{line:69,column:23},end:{line:69,column:51}},"30":{start:{line:70,column:30},end:{line:70,column:68}},"31":{start:{line:71,column:43},end:{line:71,column:92}},"32":{start:{line:72,column:32},end:{line:73,column:93}},"33":{start:{line:74,column:34},end:{line:75,column:71}},"34":{start:{line:76,column:21},end:{line:76,column:25}},"35":{start:{line:77,column:8},end:{line:85,column:9}},"36":{start:{line:78,column:12},end:{line:78,column:52}},"37":{start:{line:79,column:12},end:{line:79,column:27}},"38":{start:{line:82,column:12},end:{line:82,column:102}},"39":{start:{line:83,column:12},end:{line:84,column:44}},"40":{start:{line:84,column:16},end:{line:84,column:44}},"41":{start:{line:86,column:8},end:{line:86,column:22}},"42":{start:{line:89,column:27},end:{line:89,column:58}},"43":{start:{line:90,column:23},end:{line:90,column:39}},"44":{start:{line:92,column:12},end:{line:93,column:82}},"45":{start:{line:95,column:28},end:{line:95,column:50}},"46":{start:{line:96,column:8},end:{line:96,column:47}},"47":{start:{line:97,column:8},end:{line:102,column:10}},"48":{start:{line:105,column:8},end:{line:106,column:110}},"49":{start:{line:109,column:8},end:{line:110,column:110}},"50":{start:{line:113,column:8},end:{line:113,column:79}},"51":{start:{line:116,column:8},end:{line:116,column:70}},"52":{start:{line:120,column:12},end:{line:120,column:78}},"53":{start:{line:121,column:12},end:{line:121,column:76}},"54":{start:{line:123,column:8},end:{line:132,column:9}},"55":{start:{line:125,column:16},end:{line:125,column:66}},"56":{start:{line:126,column:16},end:{line:126,column:22}},"57":{start:{line:128,column:16},end:{line:128,column:66}},"58":{start:{line:129,column:16},end:{line:129,column:22}},"59":{start:{line:131,column:16},end:{line:131,column:22}},"60":{start:{line:135,column:43},end:{line:135,column:51}},"61":{start:{line:136,column:28},end:{line:136,column:67}},"62":{start:{line:137,column:8},end:{line:137,column:54}},"63":{start:{line:138,column:8},end:{line:138,column:35}},"64":{start:{line:139,column:36},end:{line:139,column:122}},"65":{start:{line:140,column:8},end:{line:144,column:9}},"66":{start:{line:141,column:40},end:{line:141,column:117}},"67":{start:{line:142,column:12},end:{line:142,column:68}},"68":{start:{line:143,column:12},end:{line:143,column:57}},"69":{start:{line:147,column:29},end:{line:147,column:37}},"70":{start:{line:148,column:8},end:{line:154,column:9}},"71":{start:{line:149,column:12},end:{line:149,column:49}},"72":{start:{line:151,column:13},end:{line:154,column:9}},"73":{start:{line:152,column:12},end:{line:152,column:57}},"74":{start:{line:153,column:12},end:{line:153,column:50}},"75":{start:{line:157,column:8},end:{line:164,column:9}},"76":{start:{line:158,column:12},end:{line:158,column:48}},"77":{start:{line:159,column:12},end:{line:159,column:50}},"78":{start:{line:162,column:12},end:{line:162,column:56}},"79":{start:{line:163,column:12},end:{line:163,column:58}},"80":{start:{line:167,column:56},end:{line:167,column:64}},"81":{start:{line:168,column:31},end:{line:168,column:88}},"82":{start:{line:169,column:29},end:{line:169,column:84}},"83":{start:{line:170,column:37},end:{line:170,column:79}},"84":{start:{line:171,column:8},end:{line:172,column:35}},"85":{start:{line:172,column:12},end:{line:172,column:35}},"86":{start:{line:173,column:8},end:{line:173,column:29}},"87":{start:{line:176,column:45},end:{line:176,column:53}},"88":{start:{line:177,column:8},end:{line:184,column:9}},"89":{start:{line:178,column:12},end:{line:178,column:54}},"90":{start:{line:179,column:12},end:{line:179,column:35}},"91":{start:{line:182,column:12},end:{line:182,column:52}},"92":{start:{line:183,column:12},end:{line:183,column:33}},"93":{start:{line:187,column:0},end:{line:187,column:26}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:18},end:{line:36,column:5}},line:5},"1":{name:"(anonymous_1)",decl:{start:{line:37,column:4},end:{line:37,column:5}},loc:{start:{line:37,column:27},end:{line:40,column:5}},line:37},"2":{name:"(anonymous_2)",decl:{start:{line:41,column:4},end:{line:41,column:5}},loc:{start:{line:41,column:35},end:{line:54,column:5}},line:41},"3":{name:"(anonymous_3)",decl:{start:{line:47,column:27},end:{line:47,column:28}},loc:{start:{line:47,column:41},end:{line:49,column:9}},line:47},"4":{name:"(anonymous_4)",decl:{start:{line:55,column:4},end:{line:55,column:5}},loc:{start:{line:55,column:38},end:{line:66,column:5}},line:55},"5":{name:"(anonymous_5)",decl:{start:{line:67,column:4},end:{line:67,column:5}},loc:{start:{line:67,column:35},end:{line:87,column:5}},line:67},"6":{name:"(anonymous_6)",decl:{start:{line:88,column:4},end:{line:88,column:5}},loc:{start:{line:88,column:48},end:{line:103,column:5}},line:88},"7":{name:"calculateNewPosition",decl:{start:{line:91,column:17},end:{line:91,column:37}},loc:{start:{line:91,column:40},end:{line:94,column:9}},line:91},"8":{name:"(anonymous_8)",decl:{start:{line:104,column:4},end:{line:104,column:5}},loc:{start:{line:104,column:42},end:{line:107,column:5}},line:104},"9":{name:"(anonymous_9)",decl:{start:{line:108,column:4},end:{line:108,column:5}},loc:{start:{line:108,column:46},end:{line:111,column:5}},line:108},"10":{name:"(anonymous_10)",decl:{start:{line:112,column:4},end:{line:112,column:5}},loc:{start:{line:112,column:32},end:{line:114,column:5}},line:112},"11":{name:"(anonymous_11)",decl:{start:{line:115,column:4},end:{line:115,column:5}},loc:{start:{line:115,column:32},end:{line:117,column:5}},line:115},"12":{name:"(anonymous_12)",decl:{start:{line:118,column:4},end:{line:118,column:5}},loc:{start:{line:118,column:28},end:{line:133,column:5}},line:118},"13":{name:"changeVerticalClass",decl:{start:{line:119,column:17},end:{line:119,column:36}},loc:{start:{line:119,column:47},end:{line:122,column:9}},line:119},"14":{name:"(anonymous_14)",decl:{start:{line:134,column:4},end:{line:134,column:5}},loc:{start:{line:134,column:37},end:{line:145,column:5}},line:134},"15":{name:"(anonymous_15)",decl:{start:{line:146,column:4},end:{line:146,column:5}},loc:{start:{line:146,column:36},end:{line:155,column:5}},line:146},"16":{name:"(anonymous_16)",decl:{start:{line:156,column:4},end:{line:156,column:5}},loc:{start:{line:156,column:37},end:{line:165,column:5}},line:156},"17":{name:"(anonymous_17)",decl:{start:{line:166,column:4},end:{line:166,column:5}},loc:{start:{line:166,column:34},end:{line:174,column:5}},line:166},"18":{name:"(anonymous_18)",decl:{start:{line:175,column:4},end:{line:175,column:5}},loc:{start:{line:175,column:32},end:{line:185,column:5}},line:175}},branchMap:{"0":{loc:{start:{line:42,column:16},end:{line:45,column:9}},type:"default-arg",locations:[{start:{line:42,column:29},end:{line:45,column:9}}],line:42},"1":{loc:{start:{line:45,column:11},end:{line:45,column:30}},type:"default-arg",locations:[{start:{line:45,column:18},end:{line:45,column:30}}],line:45},"2":{loc:{start:{line:45,column:32},end:{line:45,column:52}},type:"default-arg",locations:[{start:{line:45,column:40},end:{line:45,column:52}}],line:45},"3":{loc:{start:{line:50,column:35},end:{line:50,column:48}},type:"binary-expr",locations:[{start:{line:50,column:35},end:{line:50,column:39}},{start:{line:50,column:43},end:{line:50,column:48}}],line:50},"4":{loc:{start:{line:51,column:8},end:{line:52,column:46}},type:"if",locations:[{start:{line:51,column:8},end:{line:52,column:46}},{start:{line:51,column:8},end:{line:52,column:46}}],line:51},"5":{loc:{start:{line:58,column:8},end:{line:65,column:9}},type:"if",locations:[{start:{line:58,column:8},end:{line:65,column:9}},{start:{line:58,column:8},end:{line:65,column:9}}],line:58},"6":{loc:{start:{line:70,column:30},end:{line:70,column:68}},type:"binary-expr",locations:[{start:{line:70,column:30},end:{line:70,column:44}},{start:{line:70,column:48},end:{line:70,column:68}}],line:70},"7":{loc:{start:{line:72,column:32},end:{line:73,column:93}},type:"binary-expr",locations:[{start:{line:72,column:32},end:{line:72,column:62}},{start:{line:73,column:15},end:{line:73,column:93}}],line:72},"8":{loc:{start:{line:74,column:34},end:{line:75,column:71}},type:"binary-expr",locations:[{start:{line:74,column:34},end:{line:74,column:49}},{start:{line:74,column:53},end:{line:74,column:71}},{start:{line:75,column:15},end:{line:75,column:71}}],line:74},"9":{loc:{start:{line:77,column:8},end:{line:85,column:9}},type:"if",locations:[{start:{line:77,column:8},end:{line:85,column:9}},{start:{line:77,column:8},end:{line:85,column:9}}],line:77},"10":{loc:{start:{line:82,column:37},end:{line:82,column:101}},type:"cond-expr",locations:[{start:{line:82,column:53},end:{line:82,column:88}},{start:{line:82,column:91},end:{line:82,column:101}}],line:82},"11":{loc:{start:{line:83,column:12},end:{line:84,column:44}},type:"if",locations:[{start:{line:83,column:12},end:{line:84,column:44}},{start:{line:83,column:12},end:{line:84,column:44}}],line:83},"12":{loc:{start:{line:105,column:15},end:{line:106,column:109}},type:"binary-expr",locations:[{start:{line:105,column:16},end:{line:105,column:94}},{start:{line:106,column:16},end:{line:106,column:92}},{start:{line:106,column:98},end:{line:106,column:108}}],line:105},"13":{loc:{start:{line:109,column:15},end:{line:110,column:109}},type:"binary-expr",locations:[{start:{line:109,column:16},end:{line:109,column:93}},{start:{line:110,column:16},end:{line:110,column:91}},{start:{line:110,column:97},end:{line:110,column:108}}],line:109},"14":{loc:{start:{line:113,column:15},end:{line:113,column:78}},type:"binary-expr",locations:[{start:{line:113,column:16},end:{line:113,column:25}},{start:{line:113,column:31},end:{line:113,column:77}}],line:113},"15":{loc:{start:{line:116,column:15},end:{line:116,column:69}},type:"binary-expr",locations:[{start:{line:116,column:16},end:{line:116,column:24}},{start:{line:116,column:30},end:{line:116,column:68}}],line:116},"16":{loc:{start:{line:123,column:8},end:{line:132,column:9}},type:"switch",locations:[{start:{line:124,column:12},end:{line:126,column:22}},{start:{line:127,column:12},end:{line:129,column:22}},{start:{line:130,column:12},end:{line:131,column:22}}],line:123},"17":{loc:{start:{line:140,column:8},end:{line:144,column:9}},type:"if",locations:[{start:{line:140,column:8},end:{line:144,column:9}},{start:{line:140,column:8},end:{line:144,column:9}}],line:140},"18":{loc:{start:{line:148,column:8},end:{line:154,column:9}},type:"if",locations:[{start:{line:148,column:8},end:{line:154,column:9}},{start:{line:148,column:8},end:{line:154,column:9}}],line:148},"19":{loc:{start:{line:151,column:13},end:{line:154,column:9}},type:"if",locations:[{start:{line:151,column:13},end:{line:154,column:9}},{start:{line:151,column:13},end:{line:154,column:9}}],line:151},"20":{loc:{start:{line:157,column:8},end:{line:164,column:9}},type:"if",locations:[{start:{line:157,column:8},end:{line:164,column:9}},{start:{line:157,column:8},end:{line:164,column:9}}],line:157},"21":{loc:{start:{line:170,column:37},end:{line:170,column:79}},type:"binary-expr",locations:[{start:{line:170,column:37},end:{line:170,column:66}},{start:{line:170,column:70},end:{line:170,column:79}}],line:170},"22":{loc:{start:{line:171,column:8},end:{line:172,column:35}},type:"if",locations:[{start:{line:171,column:8},end:{line:172,column:35}},{start:{line:171,column:8},end:{line:172,column:35}}],line:171},"23":{loc:{start:{line:177,column:8},end:{line:184,column:9}},type:"if",locations:[{start:{line:177,column:8},end:{line:184,column:9}},{start:{line:177,column:8},end:{line:184,column:9}}],line:177}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},b:{"0":[0],"1":[0],"2":[0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0],"13":[0,0,0],"14":[0,0],"15":[0,0],"16":[0,0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Handles\\Handles.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Handles\\Handles.ts"],names:[],mappings:"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",sourcesContent:["import { RefreshIntervalPositions } from '../SelectedInterval/types';\r\nimport {\r\n  DataForAdjustPosition,\r\n  HandlesElementsInfo,\r\n  StaticElementsDescription,\r\n  HandleHideData,\r\n  RefreshHandlesData,\r\n  HandlesOverlaps,\r\n} from './types';\r\nimport { RefreshData } from '../types';\r\nimport { HandlesPosition } from '../Movement/types';\r\n\r\nexport class Handles {\r\n  readonly fromHandle: HTMLSpanElement;\r\n\r\n  readonly toHandle: HTMLSpanElement;\r\n\r\n  readonly fromValue: HTMLSpanElement;\r\n\r\n  readonly toValue: HTMLSpanElement;\r\n\r\n  public isInputChanges = false;\r\n\r\n  readonly staticElementsDescription: StaticElementsDescription = [\r\n    {\r\n      cssClasses: ['goby-slider__handle', 'goby-slider__handle_type_from'],\r\n      name: 'style',\r\n      value: 'display: inline-block',\r\n    },\r\n    {\r\n      cssClasses: ['goby-slider__handle', 'goby-slider__handle_type_to'],\r\n      name: 'style',\r\n      value: 'display: inline-block',\r\n    },\r\n    {\r\n      cssClasses: ['goby-slider__handle-value', 'goby-slider__handle-value_type_from'],\r\n      name: 'style',\r\n      value: 'display: inline-block',\r\n    },\r\n    {\r\n      cssClasses: ['goby-slider__handle-value', 'goby-slider__handle-value_type_to'],\r\n      name: 'style',\r\n      value: 'display: inline-block',\r\n    },\r\n  ];\r\n\r\n  constructor() {\r\n    this.fromHandle = Handles.createElement(this.staticElementsDescription[0]);\r\n    this.toHandle = Handles.createElement(this.staticElementsDescription[1]);\r\n    this.fromValue = Handles.createElement(this.staticElementsDescription[2]);\r\n    this.toValue = Handles.createElement(this.staticElementsDescription[3]);\r\n    this.fromHandle.append(this.fromValue);\r\n    this.toHandle.append(this.toValue);\r\n    this.prepareClassElements();\r\n  }\r\n\r\n  private prepareClassElements(): void {\r\n    this.fromHandle.append(this.fromValue);\r\n    this.toHandle.append(this.toValue);\r\n  }\r\n\r\n  static createElement(settings: HandlesElementsInfo): HTMLSpanElement {\r\n    const {\r\n      cssClasses = [\r\n        'for-change',\r\n        'for-change',\r\n      ],\r\n      name = 'for-change',\r\n      value = 'for-change',\r\n    } = settings;\r\n    const element: HTMLSpanElement = document.createElement('span');\r\n\r\n    cssClasses.forEach((cssClass: string) => {\r\n      element.classList.add(cssClass);\r\n    });\r\n\r\n    const isAssignValuesNeed = name && value;\r\n    if (isAssignValuesNeed) element.setAttribute(name, value);\r\n\r\n    return element;\r\n  }\r\n\r\n  private correctsHandlesOverlaps(settings: HandlesOverlaps) {\r\n    const { positions, sliderWidth } = settings;\r\n    const isToNotInExtra: boolean = positions.to < sliderWidth - this.toHandle.offsetWidth;\r\n\r\n    if (isToNotInExtra) {\r\n      this.toHandle.style.left = `${positions.from + this.fromHandle.offsetWidth}px`;\r\n      positions.to = positions.from + this.fromHandle.offsetWidth;\r\n    } else {\r\n      this.fromHandle.style.left = `${positions.to - this.fromHandle.offsetWidth}px`;\r\n      positions.from = positions.to - this.fromHandle.offsetWidth;\r\n    }\r\n  }\r\n\r\n  public refreshValues(data: RefreshData, positions: HandlesOverlaps): boolean {\r\n    const handlesData: RefreshHandlesData = data as RefreshHandlesData;\r\n    const target: 'fromValue' | 'toValue' = `${handlesData.target}Value`;\r\n    const isRoundUpNeed: boolean = data.isToFixed && !this.isInputChanges;\r\n    const differenceBetweenPositions: number = positions.positions.to - positions.positions.from;\r\n    const isExtraPosition = positions.positions.from === 0\r\n      || positions.positions.to === positions.sliderWidth - this.fromHandle.offsetWidth;\r\n    const isHandlesOverlaps: boolean = isExtraPosition && positions.isDouble\r\n      && differenceBetweenPositions < this.fromHandle.offsetWidth;\r\n\r\n    let result: boolean = true;\r\n    if (isHandlesOverlaps) {\r\n      this.correctsHandlesOverlaps(positions);\r\n      result = false;\r\n    } else {\r\n      this[target].innerText = isRoundUpNeed ? `${Math.round(Number(data.value))}` : data.value;\r\n      if (this.isInputChanges) this.isInputChanges = false;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public adjustPositions(dataToRefresh: DataForAdjustPosition, sliderWidth: number): RefreshIntervalPositions {\r\n    const handleLink: 'fromHandle' | 'toHandle' = `${dataToRefresh.target}Handle`;\r\n    const target = this[handleLink];\r\n\r\n    function calculateNewPosition(): string {\r\n      return String(((sliderWidth - target.offsetWidth) / dataToRefresh.totalValues)\r\n        * (Number(dataToRefresh.value) - Number(dataToRefresh.minValue)));\r\n    }\r\n\r\n    const newPosition: string = calculateNewPosition();\r\n    target.style.left = `${newPosition}px`;\r\n\r\n    return {\r\n      target: dataToRefresh.target,\r\n      position: newPosition,\r\n      sliderWidth: sliderWidth - target.offsetWidth,\r\n      handleWidth: target.offsetWidth,\r\n    };\r\n  }\r\n\r\n  private checkIsNeedToMakeVertical(isVertical: boolean): boolean {\r\n    return (!this.fromValue.classList.contains('goby-slider__handle-value_state_vertical'))\r\n      && (!this.toValue.classList.contains('goby-slider__handle-value_state_vertical')) && (isVertical);\r\n  }\r\n\r\n  private checkIsNeedToMakeHorizontally(isVertical: boolean): boolean {\r\n    return (this.fromValue.classList.contains('goby-slider__handle-value_state_vertical'))\r\n      && (this.toValue.classList.contains('goby-slider__handle-value_state_vertical')) && (!isVertical);\r\n  }\r\n\r\n  private checkIsToNeedHide(isDouble: boolean): boolean {\r\n    return (!isDouble) && (this.toHandle.style.display === 'inline-block');\r\n  }\r\n\r\n  private checkIsToNeedShow(isDouble: boolean): boolean {\r\n    return (isDouble) && (this.toHandle.style.display === 'none');\r\n  }\r\n\r\n  public changePlane(isVertical: boolean): void {\r\n    function changeVerticalClass(from: HTMLSpanElement, to: HTMLSpanElement) {\r\n      from.classList.toggle('goby-slider__handle-value_state_vertical');\r\n      to.classList.toggle('goby-slider__handle-value_state_vertical');\r\n    }\r\n\r\n    switch (true) {\r\n      case this.checkIsNeedToMakeVertical(isVertical):\r\n        changeVerticalClass(this.fromValue, this.toValue);\r\n        break;\r\n      case this.checkIsNeedToMakeHorizontally(isVertical):\r\n        changeVerticalClass(this.fromValue, this.toValue);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  private controlHandlesPosition(settings: HandleHideData) {\r\n    const { sliderWidth, positions } = settings;\r\n\r\n    const newPosition: number = sliderWidth - this.toHandle.offsetWidth;\r\n    this.toHandle.style.left = `${newPosition}px`;\r\n    positions.to = newPosition;\r\n    const isWrongFromPosition = positions.from > sliderWidth - this.toHandle.offsetWidth - this.fromHandle.offsetWidth;\r\n\r\n    if (isWrongFromPosition) {\r\n      const extremeFromPosition = String(sliderWidth - this.toHandle.offsetWidth - this.fromHandle.offsetWidth);\r\n      this.fromHandle.style.left = `${extremeFromPosition}px`;\r\n      positions.from = Number(extremeFromPosition);\r\n    }\r\n  }\r\n\r\n  public controlHandlesDisplay(settings: HandleHideData): void {\r\n    const { isDouble } = settings;\r\n\r\n    if (this.checkIsToNeedHide(isDouble)) {\r\n      this.toHandle.style.display = 'none';\r\n    } else if (this.checkIsToNeedShow(isDouble)) {\r\n      this.toHandle.style.display = 'inline-block';\r\n      this.controlHandlesPosition(settings);\r\n    }\r\n  }\r\n\r\n  public hideHandleValues(isHandleValues: boolean): void {\r\n    if (!isHandleValues) {\r\n      this.toValue.style.display = 'none';\r\n      this.fromValue.style.display = 'none';\r\n    } else {\r\n      this.toValue.style.display = 'inline-block';\r\n      this.fromValue.style.display = 'inline-block';\r\n    }\r\n  }\r\n\r\n  public selectsHandleToMove(settings: {\r\n    targetPosition: number,\r\n    positions: HandlesPosition,\r\n    isDouble: boolean,\r\n  }): HTMLSpanElement {\r\n    const { targetPosition, positions, isDouble } = settings;\r\n    const fromDifference = Math.abs(Number(positions.from) - Number(targetPosition));\r\n    const toDifference = Math.abs(Number(positions.to) - Number(targetPosition));\r\n    const isFromDifferenceLess = fromDifference < toDifference || !isDouble;\r\n\r\n    if (isFromDifferenceLess) return this.fromHandle;\r\n    return this.toHandle;\r\n  }\r\n\r\n  public acceptNewPosition(settings: {\r\n    target: HTMLSpanElement,\r\n    value: number,\r\n    positions: HandlesPosition,\r\n  }): void {\r\n    const { target, value, positions } = settings;\r\n\r\n    if (target === this.fromHandle) {\r\n      this.fromHandle.style.left = `${value}px`;\r\n      positions.from = value;\r\n    } else {\r\n      this.toHandle.style.left = `${value}px`;\r\n      positions.to = value;\r\n    }\r\n  }\r\n}\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_pdh3tflhv.s[0]++;Object.defineProperty(exports, "__esModule", ({value:true}));cov_pdh3tflhv.s[1]++;exports.Handles=void 0;class Handles{constructor(){cov_pdh3tflhv.f[0]++;cov_pdh3tflhv.s[2]++;this.isInputChanges=false;cov_pdh3tflhv.s[3]++;this.staticElementsDescription=[{cssClasses:['goby-slider__handle','goby-slider__handle_type_from'],name:'style',value:'display: inline-block'},{cssClasses:['goby-slider__handle','goby-slider__handle_type_to'],name:'style',value:'display: inline-block'},{cssClasses:['goby-slider__handle-value','goby-slider__handle-value_type_from'],name:'style',value:'display: inline-block'},{cssClasses:['goby-slider__handle-value','goby-slider__handle-value_type_to'],name:'style',value:'display: inline-block'}];cov_pdh3tflhv.s[4]++;this.fromHandle=Handles.createElement(this.staticElementsDescription[0]);cov_pdh3tflhv.s[5]++;this.toHandle=Handles.createElement(this.staticElementsDescription[1]);cov_pdh3tflhv.s[6]++;this.fromValue=Handles.createElement(this.staticElementsDescription[2]);cov_pdh3tflhv.s[7]++;this.toValue=Handles.createElement(this.staticElementsDescription[3]);cov_pdh3tflhv.s[8]++;this.fromHandle.append(this.fromValue);cov_pdh3tflhv.s[9]++;this.toHandle.append(this.toValue);cov_pdh3tflhv.s[10]++;this.prepareClassElements();}prepareClassElements(){cov_pdh3tflhv.f[1]++;cov_pdh3tflhv.s[11]++;this.fromHandle.append(this.fromValue);cov_pdh3tflhv.s[12]++;this.toHandle.append(this.toValue);}static createElement(settings){cov_pdh3tflhv.f[2]++;const{cssClasses=(cov_pdh3tflhv.b[0][0]++,['for-change','for-change']),name=(cov_pdh3tflhv.b[1][0]++,'for-change'),value=(cov_pdh3tflhv.b[2][0]++,'for-change')}=(cov_pdh3tflhv.s[13]++,settings);const element=(cov_pdh3tflhv.s[14]++,document.createElement('span'));cov_pdh3tflhv.s[15]++;cssClasses.forEach(cssClass=>{cov_pdh3tflhv.f[3]++;cov_pdh3tflhv.s[16]++;element.classList.add(cssClass);});const isAssignValuesNeed=(cov_pdh3tflhv.s[17]++,(cov_pdh3tflhv.b[3][0]++,name)&&(cov_pdh3tflhv.b[3][1]++,value));cov_pdh3tflhv.s[18]++;if(isAssignValuesNeed){cov_pdh3tflhv.b[4][0]++;cov_pdh3tflhv.s[19]++;element.setAttribute(name,value);}else{cov_pdh3tflhv.b[4][1]++;}cov_pdh3tflhv.s[20]++;return element;}correctsHandlesOverlaps(settings){cov_pdh3tflhv.f[4]++;const{positions,sliderWidth}=(cov_pdh3tflhv.s[21]++,settings);const isToNotInExtra=(cov_pdh3tflhv.s[22]++,positions.to<sliderWidth-this.toHandle.offsetWidth);cov_pdh3tflhv.s[23]++;if(isToNotInExtra){cov_pdh3tflhv.b[5][0]++;cov_pdh3tflhv.s[24]++;this.toHandle.style.left=`${positions.from+this.fromHandle.offsetWidth}px`;cov_pdh3tflhv.s[25]++;positions.to=positions.from+this.fromHandle.offsetWidth;}else{cov_pdh3tflhv.b[5][1]++;cov_pdh3tflhv.s[26]++;this.fromHandle.style.left=`${positions.to-this.fromHandle.offsetWidth}px`;cov_pdh3tflhv.s[27]++;positions.from=positions.to-this.fromHandle.offsetWidth;}}refreshValues(data,positions){cov_pdh3tflhv.f[5]++;const handlesData=(cov_pdh3tflhv.s[28]++,data);const target=(cov_pdh3tflhv.s[29]++,`${handlesData.target}Value`);const isRoundUpNeed=(cov_pdh3tflhv.s[30]++,(cov_pdh3tflhv.b[6][0]++,data.isToFixed)&&(cov_pdh3tflhv.b[6][1]++,!this.isInputChanges));const differenceBetweenPositions=(cov_pdh3tflhv.s[31]++,positions.positions.to-positions.positions.from);const isExtraPosition=(cov_pdh3tflhv.s[32]++,(cov_pdh3tflhv.b[7][0]++,positions.positions.from===0)||(cov_pdh3tflhv.b[7][1]++,positions.positions.to===positions.sliderWidth-this.fromHandle.offsetWidth));const isHandlesOverlaps=(cov_pdh3tflhv.s[33]++,(cov_pdh3tflhv.b[8][0]++,isExtraPosition)&&(cov_pdh3tflhv.b[8][1]++,positions.isDouble)&&(cov_pdh3tflhv.b[8][2]++,differenceBetweenPositions<this.fromHandle.offsetWidth));let result=(cov_pdh3tflhv.s[34]++,true);cov_pdh3tflhv.s[35]++;if(isHandlesOverlaps){cov_pdh3tflhv.b[9][0]++;cov_pdh3tflhv.s[36]++;this.correctsHandlesOverlaps(positions);cov_pdh3tflhv.s[37]++;result=false;}else{cov_pdh3tflhv.b[9][1]++;cov_pdh3tflhv.s[38]++;this[target].innerText=isRoundUpNeed?(cov_pdh3tflhv.b[10][0]++,`${Math.round(Number(data.value))}`):(cov_pdh3tflhv.b[10][1]++,data.value);cov_pdh3tflhv.s[39]++;if(this.isInputChanges){cov_pdh3tflhv.b[11][0]++;cov_pdh3tflhv.s[40]++;this.isInputChanges=false;}else{cov_pdh3tflhv.b[11][1]++;}}cov_pdh3tflhv.s[41]++;return result;}adjustPositions(dataToRefresh,sliderWidth){cov_pdh3tflhv.f[6]++;const handleLink=(cov_pdh3tflhv.s[42]++,`${dataToRefresh.target}Handle`);const target=(cov_pdh3tflhv.s[43]++,this[handleLink]);function calculateNewPosition(){cov_pdh3tflhv.f[7]++;cov_pdh3tflhv.s[44]++;return String((sliderWidth-target.offsetWidth)/dataToRefresh.totalValues*(Number(dataToRefresh.value)-Number(dataToRefresh.minValue)));}const newPosition=(cov_pdh3tflhv.s[45]++,calculateNewPosition());cov_pdh3tflhv.s[46]++;target.style.left=`${newPosition}px`;cov_pdh3tflhv.s[47]++;return{target:dataToRefresh.target,position:newPosition,sliderWidth:sliderWidth-target.offsetWidth,handleWidth:target.offsetWidth};}checkIsNeedToMakeVertical(isVertical){cov_pdh3tflhv.f[8]++;cov_pdh3tflhv.s[48]++;return(cov_pdh3tflhv.b[12][0]++,!this.fromValue.classList.contains('goby-slider__handle-value_state_vertical'))&&(cov_pdh3tflhv.b[12][1]++,!this.toValue.classList.contains('goby-slider__handle-value_state_vertical'))&&(cov_pdh3tflhv.b[12][2]++,isVertical);}checkIsNeedToMakeHorizontally(isVertical){cov_pdh3tflhv.f[9]++;cov_pdh3tflhv.s[49]++;return(cov_pdh3tflhv.b[13][0]++,this.fromValue.classList.contains('goby-slider__handle-value_state_vertical'))&&(cov_pdh3tflhv.b[13][1]++,this.toValue.classList.contains('goby-slider__handle-value_state_vertical'))&&(cov_pdh3tflhv.b[13][2]++,!isVertical);}checkIsToNeedHide(isDouble){cov_pdh3tflhv.f[10]++;cov_pdh3tflhv.s[50]++;return(cov_pdh3tflhv.b[14][0]++,!isDouble)&&(cov_pdh3tflhv.b[14][1]++,this.toHandle.style.display==='inline-block');}checkIsToNeedShow(isDouble){cov_pdh3tflhv.f[11]++;cov_pdh3tflhv.s[51]++;return(cov_pdh3tflhv.b[15][0]++,isDouble)&&(cov_pdh3tflhv.b[15][1]++,this.toHandle.style.display==='none');}changePlane(isVertical){cov_pdh3tflhv.f[12]++;function changeVerticalClass(from,to){cov_pdh3tflhv.f[13]++;cov_pdh3tflhv.s[52]++;from.classList.toggle('goby-slider__handle-value_state_vertical');cov_pdh3tflhv.s[53]++;to.classList.toggle('goby-slider__handle-value_state_vertical');}cov_pdh3tflhv.s[54]++;switch(true){case this.checkIsNeedToMakeVertical(isVertical):cov_pdh3tflhv.b[16][0]++;cov_pdh3tflhv.s[55]++;changeVerticalClass(this.fromValue,this.toValue);cov_pdh3tflhv.s[56]++;break;case this.checkIsNeedToMakeHorizontally(isVertical):cov_pdh3tflhv.b[16][1]++;cov_pdh3tflhv.s[57]++;changeVerticalClass(this.fromValue,this.toValue);cov_pdh3tflhv.s[58]++;break;default:cov_pdh3tflhv.b[16][2]++;cov_pdh3tflhv.s[59]++;break;}}controlHandlesPosition(settings){cov_pdh3tflhv.f[14]++;const{sliderWidth,positions}=(cov_pdh3tflhv.s[60]++,settings);const newPosition=(cov_pdh3tflhv.s[61]++,sliderWidth-this.toHandle.offsetWidth);cov_pdh3tflhv.s[62]++;this.toHandle.style.left=`${newPosition}px`;cov_pdh3tflhv.s[63]++;positions.to=newPosition;const isWrongFromPosition=(cov_pdh3tflhv.s[64]++,positions.from>sliderWidth-this.toHandle.offsetWidth-this.fromHandle.offsetWidth);cov_pdh3tflhv.s[65]++;if(isWrongFromPosition){cov_pdh3tflhv.b[17][0]++;const extremeFromPosition=(cov_pdh3tflhv.s[66]++,String(sliderWidth-this.toHandle.offsetWidth-this.fromHandle.offsetWidth));cov_pdh3tflhv.s[67]++;this.fromHandle.style.left=`${extremeFromPosition}px`;cov_pdh3tflhv.s[68]++;positions.from=Number(extremeFromPosition);}else{cov_pdh3tflhv.b[17][1]++;}}controlHandlesDisplay(settings){cov_pdh3tflhv.f[15]++;const{isDouble}=(cov_pdh3tflhv.s[69]++,settings);cov_pdh3tflhv.s[70]++;if(this.checkIsToNeedHide(isDouble)){cov_pdh3tflhv.b[18][0]++;cov_pdh3tflhv.s[71]++;this.toHandle.style.display='none';}else{cov_pdh3tflhv.b[18][1]++;cov_pdh3tflhv.s[72]++;if(this.checkIsToNeedShow(isDouble)){cov_pdh3tflhv.b[19][0]++;cov_pdh3tflhv.s[73]++;this.toHandle.style.display='inline-block';cov_pdh3tflhv.s[74]++;this.controlHandlesPosition(settings);}else{cov_pdh3tflhv.b[19][1]++;}}}hideHandleValues(isHandleValues){cov_pdh3tflhv.f[16]++;cov_pdh3tflhv.s[75]++;if(!isHandleValues){cov_pdh3tflhv.b[20][0]++;cov_pdh3tflhv.s[76]++;this.toValue.style.display='none';cov_pdh3tflhv.s[77]++;this.fromValue.style.display='none';}else{cov_pdh3tflhv.b[20][1]++;cov_pdh3tflhv.s[78]++;this.toValue.style.display='inline-block';cov_pdh3tflhv.s[79]++;this.fromValue.style.display='inline-block';}}selectsHandleToMove(settings){cov_pdh3tflhv.f[17]++;const{targetPosition,positions,isDouble}=(cov_pdh3tflhv.s[80]++,settings);const fromDifference=(cov_pdh3tflhv.s[81]++,Math.abs(Number(positions.from)-Number(targetPosition)));const toDifference=(cov_pdh3tflhv.s[82]++,Math.abs(Number(positions.to)-Number(targetPosition)));const isFromDifferenceLess=(cov_pdh3tflhv.s[83]++,(cov_pdh3tflhv.b[21][0]++,fromDifference<toDifference)||(cov_pdh3tflhv.b[21][1]++,!isDouble));cov_pdh3tflhv.s[84]++;if(isFromDifferenceLess){cov_pdh3tflhv.b[22][0]++;cov_pdh3tflhv.s[85]++;return this.fromHandle;}else{cov_pdh3tflhv.b[22][1]++;}cov_pdh3tflhv.s[86]++;return this.toHandle;}acceptNewPosition(settings){cov_pdh3tflhv.f[18]++;const{target,value,positions}=(cov_pdh3tflhv.s[87]++,settings);cov_pdh3tflhv.s[88]++;if(target===this.fromHandle){cov_pdh3tflhv.b[23][0]++;cov_pdh3tflhv.s[89]++;this.fromHandle.style.left=`${value}px`;cov_pdh3tflhv.s[90]++;positions.from=value;}else{cov_pdh3tflhv.b[23][1]++;cov_pdh3tflhv.s[91]++;this.toHandle.style.left=`${value}px`;cov_pdh3tflhv.s[92]++;positions.to=value;}}}cov_pdh3tflhv.s[93]++;exports.Handles=Handles;

/***/ }),

/***/ "./src/View/Handles/handles.test.ts":
/*!******************************************!*\
  !*** ./src/View/Handles/handles.test.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var cov_efxpamsom=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Handles\\handles.test.ts",hash="d5ef9c80d81488e2ec07c40e59d03add465b52c4",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Handles\\handles.test.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:18},end:{line:3,column:38}},"2":{start:{line:4,column:0},end:{line:151,column:3}},"3":{start:{line:6,column:4},end:{line:8,column:7}},"4":{start:{line:7,column:8},end:{line:7,column:42}},"5":{start:{line:9,column:4},end:{line:11,column:7}},"6":{start:{line:10,column:8},end:{line:10,column:37}},"7":{start:{line:12,column:4},end:{line:23,column:7}},"8":{start:{line:13,column:8},end:{line:21,column:11}},"9":{start:{line:22,column:8},end:{line:22,column:57}},"10":{start:{line:24,column:4},end:{line:35,column:7}},"11":{start:{line:25,column:8},end:{line:33,column:11}},"12":{start:{line:34,column:8},end:{line:34,column:56}},"13":{start:{line:36,column:4},end:{line:44,column:7}},"14":{start:{line:37,column:23},end:{line:39,column:15}},"15":{start:{line:40,column:8},end:{line:40,column:62}},"16":{start:{line:41,column:8},end:{line:43,column:11}},"17":{start:{line:45,column:4},end:{line:53,column:7}},"18":{start:{line:46,column:23},end:{line:48,column:15}},"19":{start:{line:49,column:8},end:{line:49,column:60}},"20":{start:{line:50,column:8},end:{line:52,column:11}},"21":{start:{line:54,column:4},end:{line:61,column:7}},"22":{start:{line:55,column:8},end:{line:55,column:34}},"23":{start:{line:56,column:8},end:{line:56,column:90}},"24":{start:{line:57,column:8},end:{line:57,column:88}},"25":{start:{line:58,column:8},end:{line:58,column:35}},"26":{start:{line:59,column:8},end:{line:59,column:94}},"27":{start:{line:60,column:8},end:{line:60,column:92}},"28":{start:{line:62,column:4},end:{line:69,column:7}},"29":{start:{line:63,column:8},end:{line:63,column:40}},"30":{start:{line:64,column:8},end:{line:64,column:64}},"31":{start:{line:65,column:8},end:{line:65,column:62}},"32":{start:{line:66,column:8},end:{line:66,column:39}},"33":{start:{line:67,column:8},end:{line:67,column:72}},"34":{start:{line:68,column:8},end:{line:68,column:70}},"35":{start:{line:70,column:4},end:{line:73,column:7}},"36":{start:{line:71,column:8},end:{line:71,column:110}},"37":{start:{line:72,column:8},end:{line:72,column:63}},"38":{start:{line:74,column:4},end:{line:79,column:7}},"39":{start:{line:75,column:8},end:{line:75,column:48}},"40":{start:{line:76,column:8},end:{line:76,column:109}},"41":{start:{line:77,column:8},end:{line:77,column:71}},"42":{start:{line:78,column:8},end:{line:78,column:61}},"43":{start:{line:80,column:4},end:{line:86,column:7}},"44":{start:{line:81,column:8},end:{line:81,column:48}},"45":{start:{line:82,column:8},end:{line:82,column:110}},"46":{start:{line:83,column:8},end:{line:83,column:71}},"47":{start:{line:84,column:8},end:{line:84,column:61}},"48":{start:{line:85,column:8},end:{line:85,column:63}},"49":{start:{line:87,column:4},end:{line:102,column:7}},"50":{start:{line:88,column:33},end:{line:88,column:52}},"51":{start:{line:89,column:8},end:{line:89,column:49}},"52":{start:{line:90,column:8},end:{line:90,column:48}},"53":{start:{line:91,column:23},end:{line:99,column:10}},"54":{start:{line:100,column:8},end:{line:100,column:35}},"55":{start:{line:101,column:8},end:{line:101,column:48}},"56":{start:{line:103,column:4},end:{line:119,column:7}},"57":{start:{line:104,column:33},end:{line:104,column:53}},"58":{start:{line:105,column:8},end:{line:105,column:67}},"59":{start:{line:106,column:8},end:{line:106,column:48}},"60":{start:{line:107,column:8},end:{line:107,column:46}},"61":{start:{line:108,column:23},end:{line:116,column:10}},"62":{start:{line:117,column:8},end:{line:117,column:35}},"63":{start:{line:118,column:8},end:{line:118,column:50}},"64":{start:{line:120,column:4},end:{line:127,column:7}},"65":{start:{line:121,column:23},end:{line:125,column:10}},"66":{start:{line:126,column:8},end:{line:126,column:51}},"67":{start:{line:128,column:4},end:{line:135,column:7}},"68":{start:{line:129,column:23},end:{line:133,column:10}},"69":{start:{line:134,column:8},end:{line:134,column:49}},"70":{start:{line:136,column:4},end:{line:150,column:7}},"71":{start:{line:137,column:33},end:{line:137,column:53}},"72":{start:{line:138,column:8},end:{line:142,column:11}},"73":{start:{line:143,column:8},end:{line:143,column:50}},"74":{start:{line:144,column:8},end:{line:148,column:11}},"75":{start:{line:149,column:8},end:{line:149,column:48}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:4,column:20},end:{line:4,column:21}},loc:{start:{line:4,column:26},end:{line:151,column:1}},line:4},"1":{name:"(anonymous_1)",decl:{start:{line:6,column:15},end:{line:6,column:16}},loc:{start:{line:6,column:21},end:{line:8,column:5}},line:6},"2":{name:"(anonymous_2)",decl:{start:{line:9,column:32},end:{line:9,column:33}},loc:{start:{line:9,column:38},end:{line:11,column:5}},line:9},"3":{name:"(anonymous_3)",decl:{start:{line:12,column:49},end:{line:12,column:50}},loc:{start:{line:12,column:55},end:{line:23,column:5}},line:12},"4":{name:"(anonymous_4)",decl:{start:{line:24,column:47},end:{line:24,column:48}},loc:{start:{line:24,column:53},end:{line:35,column:5}},line:24},"5":{name:"(anonymous_5)",decl:{start:{line:36,column:99},end:{line:36,column:100}},loc:{start:{line:36,column:105},end:{line:44,column:5}},line:36},"6":{name:"(anonymous_6)",decl:{start:{line:45,column:97},end:{line:45,column:98}},loc:{start:{line:45,column:103},end:{line:53,column:5}},line:45},"7":{name:"(anonymous_7)",decl:{start:{line:54,column:49},end:{line:54,column:50}},loc:{start:{line:54,column:55},end:{line:61,column:5}},line:54},"8":{name:"(anonymous_8)",decl:{start:{line:62,column:54},end:{line:62,column:55}},loc:{start:{line:62,column:60},end:{line:69,column:5}},line:62},"9":{name:"(anonymous_9)",decl:{start:{line:70,column:41},end:{line:70,column:42}},loc:{start:{line:70,column:47},end:{line:73,column:5}},line:70},"10":{name:"(anonymous_10)",decl:{start:{line:74,column:41},end:{line:74,column:42}},loc:{start:{line:74,column:47},end:{line:79,column:5}},line:74},"11":{name:"(anonymous_11)",decl:{start:{line:80,column:65},end:{line:80,column:66}},loc:{start:{line:80,column:71},end:{line:86,column:5}},line:80},"12":{name:"(anonymous_12)",decl:{start:{line:87,column:70},end:{line:87,column:71}},loc:{start:{line:87,column:76},end:{line:102,column:5}},line:87},"13":{name:"(anonymous_13)",decl:{start:{line:103,column:68},end:{line:103,column:69}},loc:{start:{line:103,column:74},end:{line:119,column:5}},line:103},"14":{name:"(anonymous_14)",decl:{start:{line:120,column:51},end:{line:120,column:52}},loc:{start:{line:120,column:57},end:{line:127,column:5}},line:120},"15":{name:"(anonymous_15)",decl:{start:{line:128,column:49},end:{line:128,column:50}},loc:{start:{line:128,column:55},end:{line:135,column:5}},line:128},"16":{name:"(anonymous_16)",decl:{start:{line:136,column:52},end:{line:136,column:53}},loc:{start:{line:136,column:58},end:{line:150,column:5}},line:136}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Handles\\handles.test.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Handles\\handles.test.ts"],names:[],mappings:"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",sourcesContent:["import { Handles } from './Handles';\r\nimport { RefreshIntervalPositions } from '../SelectedInterval/types';\r\nimport { HandlesPosition } from '../Movement/types';\r\n\r\ndescribe('Handles', () => {\r\n  let handles: Handles;\r\n\r\n  beforeEach(() => {\r\n    handles = new Handles();\r\n  });\r\n\r\n  it('Handles can be create', () => {\r\n    expect(handles).toBeTruthy();\r\n  });\r\n\r\n  it('refreshValues() refresh value for from', () => {\r\n    handles.refreshValues({\r\n      target: 'from',\r\n      value: '5',\r\n      isToFixed: false,\r\n    }, {\r\n      positions: { from: 0, to: 0 },\r\n      sliderWidth: 0,\r\n      isDouble: false,\r\n    });\r\n    expect(handles.fromValue.innerText).toEqual('5');\r\n  });\r\n\r\n  it('refreshValues() refresh value for to', () => {\r\n    handles.refreshValues({\r\n      target: 'to',\r\n      value: '5',\r\n      isToFixed: false,\r\n    }, {\r\n      positions: { from: 0, to: 0 },\r\n      sliderWidth: 0,\r\n      isDouble: false,\r\n    });\r\n    expect(handles.toHandle.innerText).toEqual('5');\r\n  });\r\n\r\n  it('adjustPositionRelativeValue() adjust from position correctly and return correct settings', () => {\r\n    const result: RefreshIntervalPositions = handles.adjustPositions({\r\n      target: 'from', minValue: '0', totalValues: 10, value: '5',\r\n    }, 100);\r\n    expect(handles.fromHandle.style.left).toEqual('50px');\r\n    expect(result).toEqual({\r\n      target: 'from', position: '50', sliderWidth: 100, handleWidth: 0,\r\n    });\r\n  });\r\n\r\n  it('adjustPositionRelativeValue() adjust to position correctly and return correct settings', () => {\r\n    const result: RefreshIntervalPositions = handles.adjustPositions({\r\n      target: 'to', minValue: '0', totalValues: 10, value: '5',\r\n    }, 100);\r\n    expect(handles.toHandle.style.left).toEqual('50px');\r\n    expect(result).toEqual({\r\n      target: 'to', position: '50', sliderWidth: 100, handleWidth: 0,\r\n    });\r\n  });\r\n\r\n  it('changePlane() change classes correctly', () => {\r\n    handles.changePlane(true);\r\n    expect(handles.fromValue).toHaveClass('goby-slider__handle-value_state_vertical');\r\n    expect(handles.toValue).toHaveClass('goby-slider__handle-value_state_vertical');\r\n    handles.changePlane(false);\r\n    expect(handles.fromValue).not.toHaveClass('goby-slider__handle-value_state_vertical');\r\n    expect(handles.toValue).not.toHaveClass('goby-slider__handle-value_state_vertical');\r\n  });\r\n\r\n  it('hideHandleValues() manage display correctly', () => {\r\n    handles.hideHandleValues(false);\r\n    expect(handles.fromValue.style.display).toEqual('none');\r\n    expect(handles.toValue.style.display).toEqual('none');\r\n    handles.hideHandleValues(true);\r\n    expect(handles.fromValue.style.display).toEqual('inline-block');\r\n    expect(handles.toValue.style.display).toEqual('inline-block');\r\n  });\r\n\r\n  it('hideToHandel() if need to hide', () => {\r\n    handles.controlHandlesDisplay({ isDouble: false, positions: { from: 30, to: 70 }, sliderWidth: 100 });\r\n    expect(handles.toHandle.style.display).toEqual('none');\r\n  });\r\n\r\n  it('hideToHandel() if need to show', () => {\r\n    handles.toHandle.style.display = 'none';\r\n    handles.controlHandlesDisplay({ isDouble: true, positions: { from: 30, to: 70 }, sliderWidth: 100 });\r\n    expect(handles.toHandle.style.display).toEqual('inline-block');\r\n    expect(handles.toHandle.style.left).toEqual('100px');\r\n  });\r\n\r\n  it('hideToHandel() if need to show ane from bigger than to', () => {\r\n    handles.toHandle.style.display = 'none';\r\n    handles.controlHandlesDisplay({ isDouble: true, positions: { from: 101, to: 70 }, sliderWidth: 100 });\r\n    expect(handles.toHandle.style.display).toEqual('inline-block');\r\n    expect(handles.toHandle.style.left).toEqual('100px');\r\n    expect(handles.fromHandle.style.left).toEqual('100px');\r\n  });\r\n\r\n  it('correctsHandlesOverlaps() fix from extra position correctly', () => {\r\n    const positionImitator: HandlesPosition = { from: 0, to: 10 };\r\n    document.body.append(handles.fromHandle);\r\n    handles.fromHandle.style.width = '20px';\r\n\r\n    const result: boolean = handles.refreshValues({\r\n      isToFixed: true,\r\n      target: 'from',\r\n      value: '4',\r\n    }, {\r\n      sliderWidth: 100,\r\n      positions: positionImitator,\r\n      isDouble: true,\r\n    });\r\n\r\n    expect(result).toBeFalse();\r\n    expect(positionImitator.to).toEqual(20);\r\n  });\r\n\r\n  it('correctsHandlesOverlaps() fix to extra position correctly', () => {\r\n    const positionImitator: HandlesPosition = { from: 70, to: 80 };\r\n    document.body.append(handles.fromHandle, handles.toHandle);\r\n    handles.fromHandle.style.width = '20px';\r\n    handles.toHandle.style.width = '20px';\r\n\r\n    const result: boolean = handles.refreshValues({\r\n      isToFixed: true,\r\n      target: 'from',\r\n      value: '4',\r\n    }, {\r\n      sliderWidth: 100,\r\n      positions: positionImitator,\r\n      isDouble: true,\r\n    });\r\n\r\n    expect(result).toBeFalse();\r\n    expect(positionImitator.from).toEqual(60);\r\n  });\r\n\r\n  it('selectsHandleToMove() choose from handle', () => {\r\n    const result: HTMLSpanElement = handles.selectsHandleToMove({\r\n      positions: { from: 70, to: 80 },\r\n      isDouble: true,\r\n      targetPosition: 74,\r\n    });\r\n\r\n    expect(result).toEqual(handles.fromHandle);\r\n  });\r\n\r\n  it('selectsHandleToMove() choose to handle', () => {\r\n    const result: HTMLSpanElement = handles.selectsHandleToMove({\r\n      positions: { from: 70, to: 80 },\r\n      isDouble: true,\r\n      targetPosition: 76,\r\n    });\r\n\r\n    expect(result).toEqual(handles.toHandle);\r\n  });\r\n\r\n  it('acceptNewPosition() record data correctly', () => {\r\n    const positionImitator: HandlesPosition = { from: 70, to: 80 };\r\n\r\n    handles.acceptNewPosition({\r\n      positions: positionImitator,\r\n      value: 40,\r\n      target: handles.fromHandle,\r\n    });\r\n\r\n    expect(positionImitator.from).toEqual(40);\r\n\r\n    handles.acceptNewPosition({\r\n      positions: positionImitator,\r\n      value: 50,\r\n      target: handles.toHandle,\r\n    });\r\n\r\n    expect(positionImitator.to).toEqual(50);\r\n  });\r\n});\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_efxpamsom.s[0]++;Object.defineProperty(exports, "__esModule", ({value:true}));const Handles_1=(cov_efxpamsom.s[1]++,__webpack_require__(/*! ./Handles */ "./src/View/Handles/Handles.ts"));cov_efxpamsom.s[2]++;describe('Handles',()=>{cov_efxpamsom.f[0]++;let handles;cov_efxpamsom.s[3]++;beforeEach(()=>{cov_efxpamsom.f[1]++;cov_efxpamsom.s[4]++;handles=new Handles_1.Handles();});cov_efxpamsom.s[5]++;it('Handles can be create',()=>{cov_efxpamsom.f[2]++;cov_efxpamsom.s[6]++;expect(handles).toBeTruthy();});cov_efxpamsom.s[7]++;it('refreshValues() refresh value for from',()=>{cov_efxpamsom.f[3]++;cov_efxpamsom.s[8]++;handles.refreshValues({target:'from',value:'5',isToFixed:false},{positions:{from:0,to:0},sliderWidth:0,isDouble:false});cov_efxpamsom.s[9]++;expect(handles.fromValue.innerText).toEqual('5');});cov_efxpamsom.s[10]++;it('refreshValues() refresh value for to',()=>{cov_efxpamsom.f[4]++;cov_efxpamsom.s[11]++;handles.refreshValues({target:'to',value:'5',isToFixed:false},{positions:{from:0,to:0},sliderWidth:0,isDouble:false});cov_efxpamsom.s[12]++;expect(handles.toHandle.innerText).toEqual('5');});cov_efxpamsom.s[13]++;it('adjustPositionRelativeValue() adjust from position correctly and return correct settings',()=>{cov_efxpamsom.f[5]++;const result=(cov_efxpamsom.s[14]++,handles.adjustPositions({target:'from',minValue:'0',totalValues:10,value:'5'},100));cov_efxpamsom.s[15]++;expect(handles.fromHandle.style.left).toEqual('50px');cov_efxpamsom.s[16]++;expect(result).toEqual({target:'from',position:'50',sliderWidth:100,handleWidth:0});});cov_efxpamsom.s[17]++;it('adjustPositionRelativeValue() adjust to position correctly and return correct settings',()=>{cov_efxpamsom.f[6]++;const result=(cov_efxpamsom.s[18]++,handles.adjustPositions({target:'to',minValue:'0',totalValues:10,value:'5'},100));cov_efxpamsom.s[19]++;expect(handles.toHandle.style.left).toEqual('50px');cov_efxpamsom.s[20]++;expect(result).toEqual({target:'to',position:'50',sliderWidth:100,handleWidth:0});});cov_efxpamsom.s[21]++;it('changePlane() change classes correctly',()=>{cov_efxpamsom.f[7]++;cov_efxpamsom.s[22]++;handles.changePlane(true);cov_efxpamsom.s[23]++;expect(handles.fromValue).toHaveClass('goby-slider__handle-value_state_vertical');cov_efxpamsom.s[24]++;expect(handles.toValue).toHaveClass('goby-slider__handle-value_state_vertical');cov_efxpamsom.s[25]++;handles.changePlane(false);cov_efxpamsom.s[26]++;expect(handles.fromValue).not.toHaveClass('goby-slider__handle-value_state_vertical');cov_efxpamsom.s[27]++;expect(handles.toValue).not.toHaveClass('goby-slider__handle-value_state_vertical');});cov_efxpamsom.s[28]++;it('hideHandleValues() manage display correctly',()=>{cov_efxpamsom.f[8]++;cov_efxpamsom.s[29]++;handles.hideHandleValues(false);cov_efxpamsom.s[30]++;expect(handles.fromValue.style.display).toEqual('none');cov_efxpamsom.s[31]++;expect(handles.toValue.style.display).toEqual('none');cov_efxpamsom.s[32]++;handles.hideHandleValues(true);cov_efxpamsom.s[33]++;expect(handles.fromValue.style.display).toEqual('inline-block');cov_efxpamsom.s[34]++;expect(handles.toValue.style.display).toEqual('inline-block');});cov_efxpamsom.s[35]++;it('hideToHandel() if need to hide',()=>{cov_efxpamsom.f[9]++;cov_efxpamsom.s[36]++;handles.controlHandlesDisplay({isDouble:false,positions:{from:30,to:70},sliderWidth:100});cov_efxpamsom.s[37]++;expect(handles.toHandle.style.display).toEqual('none');});cov_efxpamsom.s[38]++;it('hideToHandel() if need to show',()=>{cov_efxpamsom.f[10]++;cov_efxpamsom.s[39]++;handles.toHandle.style.display='none';cov_efxpamsom.s[40]++;handles.controlHandlesDisplay({isDouble:true,positions:{from:30,to:70},sliderWidth:100});cov_efxpamsom.s[41]++;expect(handles.toHandle.style.display).toEqual('inline-block');cov_efxpamsom.s[42]++;expect(handles.toHandle.style.left).toEqual('100px');});cov_efxpamsom.s[43]++;it('hideToHandel() if need to show ane from bigger than to',()=>{cov_efxpamsom.f[11]++;cov_efxpamsom.s[44]++;handles.toHandle.style.display='none';cov_efxpamsom.s[45]++;handles.controlHandlesDisplay({isDouble:true,positions:{from:101,to:70},sliderWidth:100});cov_efxpamsom.s[46]++;expect(handles.toHandle.style.display).toEqual('inline-block');cov_efxpamsom.s[47]++;expect(handles.toHandle.style.left).toEqual('100px');cov_efxpamsom.s[48]++;expect(handles.fromHandle.style.left).toEqual('100px');});cov_efxpamsom.s[49]++;it('correctsHandlesOverlaps() fix from extra position correctly',()=>{cov_efxpamsom.f[12]++;const positionImitator=(cov_efxpamsom.s[50]++,{from:0,to:10});cov_efxpamsom.s[51]++;document.body.append(handles.fromHandle);cov_efxpamsom.s[52]++;handles.fromHandle.style.width='20px';const result=(cov_efxpamsom.s[53]++,handles.refreshValues({isToFixed:true,target:'from',value:'4'},{sliderWidth:100,positions:positionImitator,isDouble:true}));cov_efxpamsom.s[54]++;expect(result).toBeFalse();cov_efxpamsom.s[55]++;expect(positionImitator.to).toEqual(20);});cov_efxpamsom.s[56]++;it('correctsHandlesOverlaps() fix to extra position correctly',()=>{cov_efxpamsom.f[13]++;const positionImitator=(cov_efxpamsom.s[57]++,{from:70,to:80});cov_efxpamsom.s[58]++;document.body.append(handles.fromHandle,handles.toHandle);cov_efxpamsom.s[59]++;handles.fromHandle.style.width='20px';cov_efxpamsom.s[60]++;handles.toHandle.style.width='20px';const result=(cov_efxpamsom.s[61]++,handles.refreshValues({isToFixed:true,target:'from',value:'4'},{sliderWidth:100,positions:positionImitator,isDouble:true}));cov_efxpamsom.s[62]++;expect(result).toBeFalse();cov_efxpamsom.s[63]++;expect(positionImitator.from).toEqual(60);});cov_efxpamsom.s[64]++;it('selectsHandleToMove() choose from handle',()=>{cov_efxpamsom.f[14]++;const result=(cov_efxpamsom.s[65]++,handles.selectsHandleToMove({positions:{from:70,to:80},isDouble:true,targetPosition:74}));cov_efxpamsom.s[66]++;expect(result).toEqual(handles.fromHandle);});cov_efxpamsom.s[67]++;it('selectsHandleToMove() choose to handle',()=>{cov_efxpamsom.f[15]++;const result=(cov_efxpamsom.s[68]++,handles.selectsHandleToMove({positions:{from:70,to:80},isDouble:true,targetPosition:76}));cov_efxpamsom.s[69]++;expect(result).toEqual(handles.toHandle);});cov_efxpamsom.s[70]++;it('acceptNewPosition() record data correctly',()=>{cov_efxpamsom.f[16]++;const positionImitator=(cov_efxpamsom.s[71]++,{from:70,to:80});cov_efxpamsom.s[72]++;handles.acceptNewPosition({positions:positionImitator,value:40,target:handles.fromHandle});cov_efxpamsom.s[73]++;expect(positionImitator.from).toEqual(40);cov_efxpamsom.s[74]++;handles.acceptNewPosition({positions:positionImitator,value:50,target:handles.toHandle});cov_efxpamsom.s[75]++;expect(positionImitator.to).toEqual(50);});});

/***/ }),

/***/ "./src/View/Handles/types.ts":
/*!***********************************!*\
  !*** ./src/View/Handles/types.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
var cov_28f13x3h0f=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Handles\\types.ts",hash="349f33e28fa7b1dce7bdfeb9793efdf6bdbf6e32",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Handles\\types.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}}},fnMap:{},branchMap:{},s:{"0":0},f:{},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Handles\\types.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Handles\\types.ts"],names:[],mappings:"",sourcesContent:["import { HandlesPosition } from '../Movement/types';\r\n\r\ntype DataForAdjustPositionBasic = {\r\n  target: 'from' | 'to';\r\n  value: string;\r\n};\r\n\r\ntype DataForAdjustPosition = DataForAdjustPositionBasic & {\r\n  totalValues: number;\r\n  minValue: string;\r\n};\r\n\r\ntype HandlesElementsInfo = {\r\n  cssClasses: Array<string>,\r\n  name: string,\r\n  value: string\r\n};\r\n\r\ntype HandleHideData = {\r\n  isDouble: boolean,\r\n  positions: HandlesPosition,\r\n  sliderWidth: number\r\n};\r\n\r\ntype RefreshHandlesData = {\r\n  value: string;\r\n  target: 'from' | 'to';\r\n};\r\n\r\ntype HandlesOverlaps = {\r\n  positions: HandlesPosition,\r\n  isDouble: boolean,\r\n  sliderWidth: number,\r\n};\r\n\r\ntype StaticElementsDescription = Array<HandlesElementsInfo>;\r\n\r\nexport {\r\n  DataForAdjustPosition,\r\n  HandlesElementsInfo,\r\n  StaticElementsDescription,\r\n  HandleHideData,\r\n  DataForAdjustPositionBasic,\r\n  RefreshHandlesData,\r\n  HandlesOverlaps,\r\n};\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_28f13x3h0f.s[0]++;Object.defineProperty(exports, "__esModule", ({value:true}));

/***/ }),

/***/ "./src/View/Movement/Movement.ts":
/*!***************************************!*\
  !*** ./src/View/Movement/Movement.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
var cov_wypzho07z=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Movement\\Movement.ts",hash="42bfe032e1168efdf3578182f44fa06dfc9c42a2",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Movement\\Movement.ts",statementMap:{"0":{start:{line:2,column:17},end:{line:7,column:1}},"1":{start:{line:3,column:12},end:{line:3,column:28}},"2":{start:{line:3,column:34},end:{line:3,column:125}},"3":{start:{line:4,column:4},end:{line:5,column:150}},"4":{start:{line:4,column:79},end:{line:4,column:131}},"5":{start:{line:5,column:9},end:{line:5,column:150}},"6":{start:{line:5,column:58},end:{line:5,column:150}},"7":{start:{line:5,column:81},end:{line:5,column:150}},"8":{start:{line:6,column:4},end:{line:6,column:66}},"9":{start:{line:8,column:0},end:{line:8,column:62}},"10":{start:{line:9,column:0},end:{line:9,column:26}},"11":{start:{line:10,column:29},end:{line:10,column:58}},"12":{start:{line:11,column:15},end:{line:181,column:1}},"13":{start:{line:13,column:8},end:{line:13,column:38}},"14":{start:{line:14,column:8},end:{line:14,column:40}},"15":{start:{line:15,column:8},end:{line:15,column:36}},"16":{start:{line:16,column:8},end:{line:16,column:47}},"17":{start:{line:17,column:8},end:{line:17,column:42}},"18":{start:{line:18,column:8},end:{line:18,column:46}},"19":{start:{line:19,column:8},end:{line:24,column:9}},"20":{start:{line:20,column:12},end:{line:20,column:35}},"21":{start:{line:23,column:12},end:{line:23,column:32}},"22":{start:{line:25,column:8},end:{line:28,column:10}},"23":{start:{line:31,column:8},end:{line:31,column:88}},"24":{start:{line:34,column:8},end:{line:34,column:90}},"25":{start:{line:37,column:8},end:{line:37,column:36}},"26":{start:{line:40,column:8},end:{line:41,column:91}},"27":{start:{line:44,column:8},end:{line:45,column:93}},"28":{start:{line:48,column:8},end:{line:48,column:119}},"29":{start:{line:51,column:34},end:{line:51,column:102}},"30":{start:{line:52,column:25},end:{line:52,column:65}},"31":{start:{line:53,column:33},end:{line:53,column:60}},"32":{start:{line:54,column:35},end:{line:55,column:76}},"33":{start:{line:56,column:8},end:{line:56,column:77}},"34":{start:{line:59,column:20},end:{line:59,column:31}},"35":{start:{line:60,column:39},end:{line:68,column:9}},"36":{start:{line:61,column:12},end:{line:62,column:84}},"37":{start:{line:62,column:16},end:{line:62,column:84}},"38":{start:{line:63,column:12},end:{line:65,column:13}},"39":{start:{line:64,column:16},end:{line:64,column:86}},"40":{start:{line:66,column:12},end:{line:67,column:40}},"41":{start:{line:67,column:16},end:{line:67,column:40}},"42":{start:{line:69,column:8},end:{line:70,column:22}},"43":{start:{line:70,column:12},end:{line:70,column:22}},"44":{start:{line:71,column:8},end:{line:72,column:36}},"45":{start:{line:72,column:12},end:{line:72,column:36}},"46":{start:{line:73,column:8},end:{line:75,column:9}},"47":{start:{line:74,column:12},end:{line:74,column:37}},"48":{start:{line:76,column:8},end:{line:76,column:21}},"49":{start:{line:79,column:8},end:{line:79,column:112}},"50":{start:{line:80,column:8},end:{line:81,column:64}},"51":{start:{line:84,column:27},end:{line:84,column:47}},"52":{start:{line:85,column:8},end:{line:85,column:47}},"53":{start:{line:86,column:8},end:{line:91,column:9}},"54":{start:{line:87,column:12},end:{line:87,column:46}},"55":{start:{line:90,column:12},end:{line:90,column:44}},"56":{start:{line:92,column:8},end:{line:92,column:40}},"57":{start:{line:95,column:8},end:{line:95,column:122}},"58":{start:{line:98,column:27},end:{line:98,column:55}},"59":{start:{line:99,column:34},end:{line:100,column:63}},"60":{start:{line:101,column:8},end:{line:110,column:9}},"61":{start:{line:103,column:16},end:{line:103,column:51}},"62":{start:{line:104,column:16},end:{line:104,column:22}},"63":{start:{line:106,column:16},end:{line:106,column:119}},"64":{start:{line:107,column:16},end:{line:107,column:22}},"65":{start:{line:109,column:16},end:{line:109,column:22}},"66":{start:{line:113,column:18},end:{line:113,column:31}},"67":{start:{line:114,column:18},end:{line:114,column:31}},"68":{start:{line:115,column:32},end:{line:115,column:97}},"69":{start:{line:117,column:8},end:{line:122,column:9}},"70":{start:{line:118,column:12},end:{line:118,column:49}},"71":{start:{line:121,column:12},end:{line:121,column:47}},"72":{start:{line:124,column:8},end:{line:129,column:9}},"73":{start:{line:125,column:12},end:{line:125,column:138}},"74":{start:{line:128,column:12},end:{line:128,column:111}},"75":{start:{line:130,column:8},end:{line:130,column:84}},"76":{start:{line:131,column:8},end:{line:136,column:9}},"77":{start:{line:132,column:12},end:{line:132,column:66}},"78":{start:{line:135,column:12},end:{line:135,column:47}},"79":{start:{line:143,column:29},end:{line:143,column:36}},"80":{start:{line:145,column:8},end:{line:150,column:9}},"81":{start:{line:146,column:12},end:{line:146,column:31}},"82":{start:{line:149,column:12},end:{line:149,column:29}},"83":{start:{line:152,column:8},end:{line:157,column:9}},"84":{start:{line:153,column:12},end:{line:153,column:103}},"85":{start:{line:156,column:12},end:{line:156,column:81}},"86":{start:{line:158,column:8},end:{line:163,column:9}},"87":{start:{line:159,column:12},end:{line:162,column:15}},"88":{start:{line:164,column:8},end:{line:167,column:10}},"89":{start:{line:168,column:8},end:{line:168,column:34}},"90":{start:{line:171,column:8},end:{line:171,column:80}},"91":{start:{line:172,column:8},end:{line:172,column:76}},"92":{start:{line:175,column:8},end:{line:175,column:36}},"93":{start:{line:178,column:8},end:{line:178,column:77}},"94":{start:{line:179,column:8},end:{line:179,column:73}},"95":{start:{line:182,column:0},end:{line:184,column:13}},"96":{start:{line:185,column:0},end:{line:185,column:28}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:2,column:46},end:{line:2,column:47}},loc:{start:{line:2,column:87},end:{line:7,column:1}},line:2},"1":{name:"(anonymous_1)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:26},end:{line:29,column:5}},line:12},"2":{name:"(anonymous_2)",decl:{start:{line:30,column:4},end:{line:30,column:5}},loc:{start:{line:30,column:63},end:{line:32,column:5}},line:30},"3":{name:"(anonymous_3)",decl:{start:{line:33,column:4},end:{line:33,column:5}},loc:{start:{line:33,column:65},end:{line:35,column:5}},line:33},"4":{name:"(anonymous_4)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:20},end:{line:38,column:5}},line:36},"5":{name:"(anonymous_5)",decl:{start:{line:39,column:4},end:{line:39,column:5}},loc:{start:{line:39,column:41},end:{line:42,column:5}},line:39},"6":{name:"(anonymous_6)",decl:{start:{line:43,column:4},end:{line:43,column:5}},loc:{start:{line:43,column:42},end:{line:46,column:5}},line:43},"7":{name:"(anonymous_7)",decl:{start:{line:47,column:4},end:{line:47,column:5}},loc:{start:{line:47,column:30},end:{line:49,column:5}},line:47},"8":{name:"(anonymous_8)",decl:{start:{line:50,column:4},end:{line:50,column:5}},loc:{start:{line:50,column:60},end:{line:57,column:5}},line:50},"9":{name:"(anonymous_9)",decl:{start:{line:58,column:4},end:{line:58,column:5}},loc:{start:{line:58,column:61},end:{line:77,column:5}},line:58},"10":{name:"(anonymous_10)",decl:{start:{line:60,column:39},end:{line:60,column:40}},loc:{start:{line:60,column:45},end:{line:68,column:9}},line:60},"11":{name:"(anonymous_11)",decl:{start:{line:78,column:4},end:{line:78,column:5}},loc:{start:{line:78,column:31},end:{line:82,column:5}},line:78},"12":{name:"(anonymous_12)",decl:{start:{line:83,column:4},end:{line:83,column:5}},loc:{start:{line:83,column:34},end:{line:93,column:5}},line:83},"13":{name:"(anonymous_13)",decl:{start:{line:94,column:4},end:{line:94,column:5}},loc:{start:{line:94,column:37},end:{line:96,column:5}},line:94},"14":{name:"(anonymous_14)",decl:{start:{line:97,column:4},end:{line:97,column:5}},loc:{start:{line:97,column:53},end:{line:111,column:5}},line:97},"15":{name:"(anonymous_15)",decl:{start:{line:112,column:4},end:{line:112,column:5}},loc:{start:{line:112,column:35},end:{line:137,column:5}},line:112},"16":{name:"(anonymous_16)",decl:{start:{line:138,column:4},end:{line:138,column:5}},loc:{start:{line:138,column:28},end:{line:169,column:5}},line:138},"17":{name:"(anonymous_17)",decl:{start:{line:170,column:4},end:{line:170,column:5}},loc:{start:{line:170,column:27},end:{line:173,column:5}},line:170},"18":{name:"(anonymous_18)",decl:{start:{line:174,column:4},end:{line:174,column:5}},loc:{start:{line:174,column:28},end:{line:176,column:5}},line:174},"19":{name:"(anonymous_19)",decl:{start:{line:177,column:4},end:{line:177,column:5}},loc:{start:{line:177,column:25},end:{line:180,column:5}},line:177}},branchMap:{"0":{loc:{start:{line:2,column:17},end:{line:7,column:1}},type:"binary-expr",locations:[{start:{line:2,column:18},end:{line:2,column:22}},{start:{line:2,column:26},end:{line:2,column:41}},{start:{line:2,column:46},end:{line:7,column:1}}],line:2},"1":{loc:{start:{line:3,column:34},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:42},end:{line:3,column:48}},{start:{line:3,column:51},end:{line:3,column:125}}],line:3},"2":{loc:{start:{line:3,column:51},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:67},end:{line:3,column:118}},{start:{line:3,column:121},end:{line:3,column:125}}],line:3},"3":{loc:{start:{line:4,column:4},end:{line:5,column:150}},type:"if",locations:[{start:{line:4,column:4},end:{line:5,column:150}},{start:{line:4,column:4},end:{line:5,column:150}}],line:4},"4":{loc:{start:{line:4,column:8},end:{line:4,column:77}},type:"binary-expr",locations:[{start:{line:4,column:8},end:{line:4,column:35}},{start:{line:4,column:39},end:{line:4,column:77}}],line:4},"5":{loc:{start:{line:5,column:58},end:{line:5,column:150}},type:"if",locations:[{start:{line:5,column:58},end:{line:5,column:150}},{start:{line:5,column:58},end:{line:5,column:150}}],line:5},"6":{loc:{start:{line:5,column:85},end:{line:5,column:149}},type:"binary-expr",locations:[{start:{line:5,column:86},end:{line:5,column:143}},{start:{line:5,column:148},end:{line:5,column:149}}],line:5},"7":{loc:{start:{line:5,column:86},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:94},end:{line:5,column:98}},{start:{line:5,column:101},end:{line:5,column:143}}],line:5},"8":{loc:{start:{line:5,column:101},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:109},end:{line:5,column:126}},{start:{line:5,column:129},end:{line:5,column:143}}],line:5},"9":{loc:{start:{line:6,column:11},end:{line:6,column:62}},type:"binary-expr",locations:[{start:{line:6,column:11},end:{line:6,column:16}},{start:{line:6,column:20},end:{line:6,column:21}},{start:{line:6,column:25},end:{line:6,column:62}}],line:6},"10":{loc:{start:{line:19,column:8},end:{line:24,column:9}},type:"if",locations:[{start:{line:19,column:8},end:{line:24,column:9}},{start:{line:19,column:8},end:{line:24,column:9}}],line:19},"11":{loc:{start:{line:31,column:15},end:{line:31,column:87}},type:"binary-expr",locations:[{start:{line:31,column:15},end:{line:31,column:44}},{start:{line:31,column:48},end:{line:31,column:87}}],line:31},"12":{loc:{start:{line:34,column:15},end:{line:34,column:89}},type:"binary-expr",locations:[{start:{line:34,column:15},end:{line:34,column:44}},{start:{line:34,column:48},end:{line:34,column:89}}],line:34},"13":{loc:{start:{line:40,column:15},end:{line:41,column:90}},type:"binary-expr",locations:[{start:{line:40,column:16},end:{line:40,column:57}},{start:{line:41,column:16},end:{line:41,column:89}}],line:40},"14":{loc:{start:{line:44,column:15},end:{line:45,column:92}},type:"binary-expr",locations:[{start:{line:44,column:16},end:{line:44,column:55}},{start:{line:45,column:16},end:{line:45,column:91}}],line:44},"15":{loc:{start:{line:48,column:15},end:{line:48,column:118}},type:"binary-expr",locations:[{start:{line:48,column:16},end:{line:48,column:44}},{start:{line:48,column:50},end:{line:48,column:84}},{start:{line:48,column:90},end:{line:48,column:117}}],line:48},"16":{loc:{start:{line:54,column:35},end:{line:55,column:76}},type:"binary-expr",locations:[{start:{line:54,column:35},end:{line:54,column:97}},{start:{line:55,column:15},end:{line:55,column:76}}],line:54},"17":{loc:{start:{line:56,column:15},end:{line:56,column:76}},type:"binary-expr",locations:[{start:{line:56,column:15},end:{line:56,column:32}},{start:{line:56,column:37},end:{line:56,column:53}},{start:{line:56,column:57},end:{line:56,column:75}}],line:56},"18":{loc:{start:{line:61,column:12},end:{line:62,column:84}},type:"if",locations:[{start:{line:61,column:12},end:{line:62,column:84}},{start:{line:61,column:12},end:{line:62,column:84}}],line:61},"19":{loc:{start:{line:63,column:12},end:{line:65,column:13}},type:"if",locations:[{start:{line:63,column:12},end:{line:65,column:13}},{start:{line:63,column:12},end:{line:65,column:13}}],line:63},"20":{loc:{start:{line:66,column:12},end:{line:67,column:40}},type:"if",locations:[{start:{line:66,column:12},end:{line:67,column:40}},{start:{line:66,column:12},end:{line:67,column:40}}],line:66},"21":{loc:{start:{line:69,column:8},end:{line:70,column:22}},type:"if",locations:[{start:{line:69,column:8},end:{line:70,column:22}},{start:{line:69,column:8},end:{line:70,column:22}}],line:69},"22":{loc:{start:{line:71,column:8},end:{line:72,column:36}},type:"if",locations:[{start:{line:71,column:8},end:{line:72,column:36}},{start:{line:71,column:8},end:{line:72,column:36}}],line:71},"23":{loc:{start:{line:73,column:8},end:{line:75,column:9}},type:"if",locations:[{start:{line:73,column:8},end:{line:75,column:9}},{start:{line:73,column:8},end:{line:75,column:9}}],line:73},"24":{loc:{start:{line:86,column:8},end:{line:91,column:9}},type:"if",locations:[{start:{line:86,column:8},end:{line:91,column:9}},{start:{line:86,column:8},end:{line:91,column:9}}],line:86},"25":{loc:{start:{line:95,column:15},end:{line:95,column:121}},type:"binary-expr",locations:[{start:{line:95,column:16},end:{line:95,column:33}},{start:{line:95,column:39},end:{line:95,column:120}}],line:95},"26":{loc:{start:{line:101,column:8},end:{line:110,column:9}},type:"switch",locations:[{start:{line:102,column:12},end:{line:104,column:22}},{start:{line:105,column:12},end:{line:107,column:22}},{start:{line:108,column:12},end:{line:109,column:22}}],line:101},"27":{loc:{start:{line:117,column:8},end:{line:122,column:9}},type:"if",locations:[{start:{line:117,column:8},end:{line:122,column:9}},{start:{line:117,column:8},end:{line:122,column:9}}],line:117},"28":{loc:{start:{line:124,column:8},end:{line:129,column:9}},type:"if",locations:[{start:{line:124,column:8},end:{line:129,column:9}},{start:{line:124,column:8},end:{line:129,column:9}}],line:124},"29":{loc:{start:{line:131,column:8},end:{line:136,column:9}},type:"if",locations:[{start:{line:131,column:8},end:{line:136,column:9}},{start:{line:131,column:8},end:{line:136,column:9}}],line:131},"30":{loc:{start:{line:139,column:16},end:{line:143,column:9}},type:"default-arg",locations:[{start:{line:139,column:28},end:{line:143,column:9}}],line:139},"31":{loc:{start:{line:143,column:11},end:{line:143,column:23}},type:"default-arg",locations:[{start:{line:143,column:18},end:{line:143,column:23}}],line:143},"32":{loc:{start:{line:145,column:8},end:{line:150,column:9}},type:"if",locations:[{start:{line:145,column:8},end:{line:150,column:9}},{start:{line:145,column:8},end:{line:150,column:9}}],line:145},"33":{loc:{start:{line:152,column:8},end:{line:157,column:9}},type:"if",locations:[{start:{line:152,column:8},end:{line:157,column:9}},{start:{line:152,column:8},end:{line:157,column:9}}],line:152},"34":{loc:{start:{line:158,column:8},end:{line:163,column:9}},type:"if",locations:[{start:{line:158,column:8},end:{line:163,column:9}},{start:{line:158,column:8},end:{line:163,column:9}}],line:158}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},b:{"0":[0,0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0,0],"16":[0,0],"17":[0,0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0],"31":[0],"32":[0,0],"33":[0,0],"34":[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Movement\\Movement.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Movement\\Movement.ts"],names:[],mappings:"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",sourcesContent:["import autobind from 'autobind-decorator';\r\nimport { BasicViewSettings } from '../types';\r\nimport {\r\n  HandleClickData,\r\n  HandlesPosition,\r\n  MovementEvent,\r\n  MovementSettings,\r\n  TestMouseEvent,\r\n} from './types';\r\n\r\n@autobind\r\nexport class Movement {\r\n  readonly slider: HTMLDivElement;\r\n\r\n  readonly from: HTMLSpanElement;\r\n\r\n  readonly to: HTMLSpanElement;\r\n\r\n  readonly settings: BasicViewSettings;\r\n\r\n  readonly interval: HTMLDivElement;\r\n\r\n  public stepWidth: string | boolean;\r\n\r\n  public positions: HandlesPosition;\r\n\r\n  public dataForMovement: HandleClickData;\r\n\r\n  constructor(settings: MovementSettings) {\r\n    this.slider = settings.slider;\r\n    this.from = settings.fromHandle;\r\n    this.to = settings.toHandle;\r\n    this.settings = settings.basicSettings;\r\n    this.interval = settings.interval;\r\n    this.positions = { from: 0, to: 100 };\r\n    if (!this.settings.step) {\r\n      this.stepWidth = false;\r\n    } else {\r\n      this.stepWidth = '';\r\n    }\r\n    this.dataForMovement = {\r\n      distanceToCursor: 0,\r\n      target: this.from,\r\n    };\r\n  }\r\n\r\n  private checkIsToBiggerThanRightEdge(rightSliderEdge: number, newPosition: number): boolean {\r\n    return newPosition > rightSliderEdge && this.dataForMovement.target === this.to;\r\n  }\r\n\r\n  private checkIsFromBiggerThanRightEdge(rightSliderEdge: number, newPosition: number): boolean {\r\n    return newPosition > rightSliderEdge && this.dataForMovement.target === this.from;\r\n  }\r\n\r\n  private checkIsDouble(): boolean {\r\n    return this.settings.double;\r\n  }\r\n\r\n  private checkIsFromBiggerThanTo(newPosition: number): boolean {\r\n    return (this.dataForMovement.target === this.from)\r\n      && (newPosition > this.positions.to - this.dataForMovement.target.offsetWidth);\r\n  }\r\n\r\n  private checkIsToSmallerThanFrom(newPosition: number): boolean {\r\n    return (this.dataForMovement.target === this.to)\r\n      && (newPosition < this.positions.from + this.dataForMovement.target.offsetWidth);\r\n  }\r\n\r\n  private checkIsStepSetCorrectly(): boolean {\r\n    return (this.settings.step !== false) && (typeof this.stepWidth === 'string') && (Number(this.stepWidth) >= 1);\r\n  }\r\n\r\n  private checkIsStepWidthPassed(targetPosition: number, currentPosition: number): boolean {\r\n    const correctStepPassed = Math.abs(targetPosition - currentPosition) >= Number(this.stepWidth);\r\n    const stepRate: number = currentPosition / Number(this.stepWidth);\r\n    const isNotInStepRange: boolean = !Number.isInteger(stepRate);\r\n    const isRangeWherePassed: boolean = Math.floor(stepRate) * Number(this.stepWidth) > targetPosition\r\n      || Math.ceil(stepRate) * Number(this.stepWidth) < targetPosition;\r\n\r\n    return correctStepPassed || (isNotInStepRange && isRangeWherePassed);\r\n  }\r\n\r\n  public correctsImpossiblePosition(rightSliderEdge: number, newPosition: number): number {\r\n    let value: number = newPosition;\r\n\r\n    const correctDoublePositions = (): void => {\r\n      if (this.checkIsFromBiggerThanTo(newPosition)) value = this.positions.to - this.dataForMovement.target.offsetWidth;\r\n      if (this.checkIsToSmallerThanFrom(newPosition)) {\r\n        value = this.positions.from + this.dataForMovement.target.offsetWidth;\r\n      }\r\n      if (this.checkIsToBiggerThanRightEdge(rightSliderEdge, newPosition)) value = rightSliderEdge;\r\n    };\r\n\r\n    if (newPosition < 0) value = 0;\r\n    if (this.checkIsFromBiggerThanRightEdge(rightSliderEdge, newPosition)) value = rightSliderEdge;\r\n    if (this.checkIsDouble()) {\r\n      correctDoublePositions();\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  public correctsIntervalPosition(): void {\r\n    this.interval.style.left = `${(this.positions.from + (this.dataForMovement.target.offsetWidth / 2))}px`;\r\n    this.interval.style.right = `${(this.slider.offsetWidth - this.positions.to)\r\n    - (this.dataForMovement.target.offsetWidth / 2)}px`;\r\n  }\r\n\r\n  private applyNewPosition(newPosition: number): void {\r\n    const { target } = this.dataForMovement;\r\n    target.style.left = `${newPosition}px`;\r\n\r\n    if (this.dataForMovement.target === this.from) {\r\n      this.positions.from = newPosition;\r\n    } else {\r\n      this.positions.to = newPosition;\r\n    }\r\n\r\n    this.correctsIntervalPosition();\r\n  }\r\n\r\n  private checkIsEdgePosition(newPosition: number): boolean {\r\n    return (newPosition === 0) || (newPosition === this.slider.offsetWidth - this.dataForMovement.target.offsetWidth);\r\n  }\r\n\r\n  private controlStepMovement(newPosition: number, targetPosition: number): void {\r\n    const difference = newPosition - targetPosition;\r\n    const newTargetPosition: number = targetPosition + Number(this.stepWidth)\r\n      * (Math.trunc(difference / Number(this.stepWidth)));\r\n\r\n    switch (true) {\r\n      case this.checkIsEdgePosition(newPosition):\r\n        this.applyNewPosition(newPosition);\r\n        break;\r\n      case this.checkIsStepWidthPassed(newPosition, targetPosition):\r\n        this.applyNewPosition(\r\n          Math.round(newTargetPosition / Number(this.stepWidth)) * Number(this.stepWidth),\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  private handleDocumentMouseMove(event: MouseEvent | TestMouseEvent): void {\r\n    const x: number = event.clientX;\r\n    const y: number = event.clientY;\r\n    const rightSliderEdge: number = this.slider.offsetWidth - this.dataForMovement.target.offsetWidth;\r\n    let targetPosition: number;\r\n\r\n    if (this.dataForMovement.target === this.from) {\r\n      targetPosition = this.positions.from;\r\n    } else {\r\n      targetPosition = this.positions.to;\r\n    }\r\n\r\n    let newPosition: number;\r\n\r\n    if (this.settings.vertical) {\r\n      newPosition = this.slider.offsetWidth - (\r\n        y - this.dataForMovement.distanceToCursor - this.slider.getBoundingClientRect().top\r\n      );\r\n    } else {\r\n      newPosition = x - this.dataForMovement.distanceToCursor - this.slider.getBoundingClientRect().left;\r\n    }\r\n\r\n    newPosition = this.correctsImpossiblePosition(rightSliderEdge, newPosition);\r\n\r\n    if (this.checkIsStepSetCorrectly()) {\r\n      this.controlStepMovement(newPosition, targetPosition);\r\n    } else {\r\n      this.applyNewPosition(newPosition);\r\n    }\r\n  }\r\n\r\n  public handleListener(setting: MovementEvent): void {\r\n    const {\r\n      eventInfo = {\r\n        x: 0,\r\n        y: 0,\r\n        target: false,\r\n      },\r\n      test = false,\r\n    } = setting;\r\n\r\n    let target: HTMLSpanElement;\r\n    if (eventInfo.target === this.from) {\r\n      target = this.from;\r\n    } else {\r\n      target = this.to;\r\n    }\r\n\r\n    let distanceToCursor: number;\r\n    if (this.settings.vertical) {\r\n      distanceToCursor = eventInfo.y - target.getBoundingClientRect().top - (target.offsetWidth);\r\n    } else {\r\n      distanceToCursor = eventInfo.x - target.getBoundingClientRect().left;\r\n    }\r\n\r\n    if (test) {\r\n      this.handleDocumentMouseMove({\r\n        clientX: test.x,\r\n        clientY: test.y,\r\n      });\r\n    }\r\n\r\n    this.dataForMovement = {\r\n      target,\r\n      distanceToCursor,\r\n    };\r\n\r\n    this.bindEventListeners();\r\n  }\r\n\r\n  private removeEventListeners(): void {\r\n    document.removeEventListener('mousemove', this.handleDocumentMouseMove);\r\n    document.removeEventListener('mouseup', this.handleDocumentMouseUp);\r\n  }\r\n\r\n  private handleDocumentMouseUp(): void {\r\n    this.removeEventListeners();\r\n  }\r\n\r\n  private bindEventListeners(): void {\r\n    document.addEventListener('mousemove', this.handleDocumentMouseMove);\r\n    document.addEventListener('mouseup', this.handleDocumentMouseUp);\r\n  }\r\n}\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();var __decorate=(cov_wypzho07z.s[0]++,(cov_wypzho07z.b[0][0]++,this)&&(cov_wypzho07z.b[0][1]++,this.__decorate)||(cov_wypzho07z.b[0][2]++,function(decorators,target,key,desc){cov_wypzho07z.f[0]++;var c=(cov_wypzho07z.s[1]++,arguments.length),r=(cov_wypzho07z.s[2]++,c<3?(cov_wypzho07z.b[1][0]++,target):(cov_wypzho07z.b[1][1]++,desc===null?(cov_wypzho07z.b[2][0]++,desc=Object.getOwnPropertyDescriptor(target,key)):(cov_wypzho07z.b[2][1]++,desc))),d;cov_wypzho07z.s[3]++;if((cov_wypzho07z.b[4][0]++,typeof Reflect==="object")&&(cov_wypzho07z.b[4][1]++,typeof Reflect.decorate==="function")){cov_wypzho07z.b[3][0]++;cov_wypzho07z.s[4]++;r=Reflect.decorate(decorators,target,key,desc);}else{cov_wypzho07z.b[3][1]++;cov_wypzho07z.s[5]++;for(var i=decorators.length-1;i>=0;i--){cov_wypzho07z.s[6]++;if(d=decorators[i]){cov_wypzho07z.b[5][0]++;cov_wypzho07z.s[7]++;r=(cov_wypzho07z.b[6][0]++,c<3?(cov_wypzho07z.b[7][0]++,d(r)):(cov_wypzho07z.b[7][1]++,c>3?(cov_wypzho07z.b[8][0]++,d(target,key,r)):(cov_wypzho07z.b[8][1]++,d(target,key))))||(cov_wypzho07z.b[6][1]++,r);}else{cov_wypzho07z.b[5][1]++;}}}cov_wypzho07z.s[8]++;return(cov_wypzho07z.b[9][0]++,c>3)&&(cov_wypzho07z.b[9][1]++,r)&&(cov_wypzho07z.b[9][2]++,Object.defineProperty(target,key,r)),r;}));cov_wypzho07z.s[9]++;Object.defineProperty(exports, "__esModule", ({value:true}));cov_wypzho07z.s[10]++;exports.Movement=void 0;const autobind_decorator_1=(cov_wypzho07z.s[11]++,__webpack_require__(/*! autobind-decorator */ "./node_modules/autobind-decorator/lib/esm/index.js"));cov_wypzho07z.s[12]++;let Movement=class Movement{constructor(settings){cov_wypzho07z.f[1]++;cov_wypzho07z.s[13]++;this.slider=settings.slider;cov_wypzho07z.s[14]++;this.from=settings.fromHandle;cov_wypzho07z.s[15]++;this.to=settings.toHandle;cov_wypzho07z.s[16]++;this.settings=settings.basicSettings;cov_wypzho07z.s[17]++;this.interval=settings.interval;cov_wypzho07z.s[18]++;this.positions={from:0,to:100};cov_wypzho07z.s[19]++;if(!this.settings.step){cov_wypzho07z.b[10][0]++;cov_wypzho07z.s[20]++;this.stepWidth=false;}else{cov_wypzho07z.b[10][1]++;cov_wypzho07z.s[21]++;this.stepWidth='';}cov_wypzho07z.s[22]++;this.dataForMovement={distanceToCursor:0,target:this.from};}checkIsToBiggerThanRightEdge(rightSliderEdge,newPosition){cov_wypzho07z.f[2]++;cov_wypzho07z.s[23]++;return(cov_wypzho07z.b[11][0]++,newPosition>rightSliderEdge)&&(cov_wypzho07z.b[11][1]++,this.dataForMovement.target===this.to);}checkIsFromBiggerThanRightEdge(rightSliderEdge,newPosition){cov_wypzho07z.f[3]++;cov_wypzho07z.s[24]++;return(cov_wypzho07z.b[12][0]++,newPosition>rightSliderEdge)&&(cov_wypzho07z.b[12][1]++,this.dataForMovement.target===this.from);}checkIsDouble(){cov_wypzho07z.f[4]++;cov_wypzho07z.s[25]++;return this.settings.double;}checkIsFromBiggerThanTo(newPosition){cov_wypzho07z.f[5]++;cov_wypzho07z.s[26]++;return(cov_wypzho07z.b[13][0]++,this.dataForMovement.target===this.from)&&(cov_wypzho07z.b[13][1]++,newPosition>this.positions.to-this.dataForMovement.target.offsetWidth);}checkIsToSmallerThanFrom(newPosition){cov_wypzho07z.f[6]++;cov_wypzho07z.s[27]++;return(cov_wypzho07z.b[14][0]++,this.dataForMovement.target===this.to)&&(cov_wypzho07z.b[14][1]++,newPosition<this.positions.from+this.dataForMovement.target.offsetWidth);}checkIsStepSetCorrectly(){cov_wypzho07z.f[7]++;cov_wypzho07z.s[28]++;return(cov_wypzho07z.b[15][0]++,this.settings.step!==false)&&(cov_wypzho07z.b[15][1]++,typeof this.stepWidth==='string')&&(cov_wypzho07z.b[15][2]++,Number(this.stepWidth)>=1);}checkIsStepWidthPassed(targetPosition,currentPosition){cov_wypzho07z.f[8]++;const correctStepPassed=(cov_wypzho07z.s[29]++,Math.abs(targetPosition-currentPosition)>=Number(this.stepWidth));const stepRate=(cov_wypzho07z.s[30]++,currentPosition/Number(this.stepWidth));const isNotInStepRange=(cov_wypzho07z.s[31]++,!Number.isInteger(stepRate));const isRangeWherePassed=(cov_wypzho07z.s[32]++,(cov_wypzho07z.b[16][0]++,Math.floor(stepRate)*Number(this.stepWidth)>targetPosition)||(cov_wypzho07z.b[16][1]++,Math.ceil(stepRate)*Number(this.stepWidth)<targetPosition));cov_wypzho07z.s[33]++;return(cov_wypzho07z.b[17][0]++,correctStepPassed)||(cov_wypzho07z.b[17][1]++,isNotInStepRange)&&(cov_wypzho07z.b[17][2]++,isRangeWherePassed);}correctsImpossiblePosition(rightSliderEdge,newPosition){cov_wypzho07z.f[9]++;let value=(cov_wypzho07z.s[34]++,newPosition);cov_wypzho07z.s[35]++;const correctDoublePositions=()=>{cov_wypzho07z.f[10]++;cov_wypzho07z.s[36]++;if(this.checkIsFromBiggerThanTo(newPosition)){cov_wypzho07z.b[18][0]++;cov_wypzho07z.s[37]++;value=this.positions.to-this.dataForMovement.target.offsetWidth;}else{cov_wypzho07z.b[18][1]++;}cov_wypzho07z.s[38]++;if(this.checkIsToSmallerThanFrom(newPosition)){cov_wypzho07z.b[19][0]++;cov_wypzho07z.s[39]++;value=this.positions.from+this.dataForMovement.target.offsetWidth;}else{cov_wypzho07z.b[19][1]++;}cov_wypzho07z.s[40]++;if(this.checkIsToBiggerThanRightEdge(rightSliderEdge,newPosition)){cov_wypzho07z.b[20][0]++;cov_wypzho07z.s[41]++;value=rightSliderEdge;}else{cov_wypzho07z.b[20][1]++;}};cov_wypzho07z.s[42]++;if(newPosition<0){cov_wypzho07z.b[21][0]++;cov_wypzho07z.s[43]++;value=0;}else{cov_wypzho07z.b[21][1]++;}cov_wypzho07z.s[44]++;if(this.checkIsFromBiggerThanRightEdge(rightSliderEdge,newPosition)){cov_wypzho07z.b[22][0]++;cov_wypzho07z.s[45]++;value=rightSliderEdge;}else{cov_wypzho07z.b[22][1]++;}cov_wypzho07z.s[46]++;if(this.checkIsDouble()){cov_wypzho07z.b[23][0]++;cov_wypzho07z.s[47]++;correctDoublePositions();}else{cov_wypzho07z.b[23][1]++;}cov_wypzho07z.s[48]++;return value;}correctsIntervalPosition(){cov_wypzho07z.f[11]++;cov_wypzho07z.s[49]++;this.interval.style.left=`${this.positions.from+this.dataForMovement.target.offsetWidth/2}px`;cov_wypzho07z.s[50]++;this.interval.style.right=`${this.slider.offsetWidth-this.positions.to-this.dataForMovement.target.offsetWidth/2}px`;}applyNewPosition(newPosition){cov_wypzho07z.f[12]++;const{target}=(cov_wypzho07z.s[51]++,this.dataForMovement);cov_wypzho07z.s[52]++;target.style.left=`${newPosition}px`;cov_wypzho07z.s[53]++;if(this.dataForMovement.target===this.from){cov_wypzho07z.b[24][0]++;cov_wypzho07z.s[54]++;this.positions.from=newPosition;}else{cov_wypzho07z.b[24][1]++;cov_wypzho07z.s[55]++;this.positions.to=newPosition;}cov_wypzho07z.s[56]++;this.correctsIntervalPosition();}checkIsEdgePosition(newPosition){cov_wypzho07z.f[13]++;cov_wypzho07z.s[57]++;return(cov_wypzho07z.b[25][0]++,newPosition===0)||(cov_wypzho07z.b[25][1]++,newPosition===this.slider.offsetWidth-this.dataForMovement.target.offsetWidth);}controlStepMovement(newPosition,targetPosition){cov_wypzho07z.f[14]++;const difference=(cov_wypzho07z.s[58]++,newPosition-targetPosition);const newTargetPosition=(cov_wypzho07z.s[59]++,targetPosition+Number(this.stepWidth)*Math.trunc(difference/Number(this.stepWidth)));cov_wypzho07z.s[60]++;switch(true){case this.checkIsEdgePosition(newPosition):cov_wypzho07z.b[26][0]++;cov_wypzho07z.s[61]++;this.applyNewPosition(newPosition);cov_wypzho07z.s[62]++;break;case this.checkIsStepWidthPassed(newPosition,targetPosition):cov_wypzho07z.b[26][1]++;cov_wypzho07z.s[63]++;this.applyNewPosition(Math.round(newTargetPosition/Number(this.stepWidth))*Number(this.stepWidth));cov_wypzho07z.s[64]++;break;default:cov_wypzho07z.b[26][2]++;cov_wypzho07z.s[65]++;break;}}handleDocumentMouseMove(event){cov_wypzho07z.f[15]++;const x=(cov_wypzho07z.s[66]++,event.clientX);const y=(cov_wypzho07z.s[67]++,event.clientY);const rightSliderEdge=(cov_wypzho07z.s[68]++,this.slider.offsetWidth-this.dataForMovement.target.offsetWidth);let targetPosition;cov_wypzho07z.s[69]++;if(this.dataForMovement.target===this.from){cov_wypzho07z.b[27][0]++;cov_wypzho07z.s[70]++;targetPosition=this.positions.from;}else{cov_wypzho07z.b[27][1]++;cov_wypzho07z.s[71]++;targetPosition=this.positions.to;}let newPosition;cov_wypzho07z.s[72]++;if(this.settings.vertical){cov_wypzho07z.b[28][0]++;cov_wypzho07z.s[73]++;newPosition=this.slider.offsetWidth-(y-this.dataForMovement.distanceToCursor-this.slider.getBoundingClientRect().top);}else{cov_wypzho07z.b[28][1]++;cov_wypzho07z.s[74]++;newPosition=x-this.dataForMovement.distanceToCursor-this.slider.getBoundingClientRect().left;}cov_wypzho07z.s[75]++;newPosition=this.correctsImpossiblePosition(rightSliderEdge,newPosition);cov_wypzho07z.s[76]++;if(this.checkIsStepSetCorrectly()){cov_wypzho07z.b[29][0]++;cov_wypzho07z.s[77]++;this.controlStepMovement(newPosition,targetPosition);}else{cov_wypzho07z.b[29][1]++;cov_wypzho07z.s[78]++;this.applyNewPosition(newPosition);}}handleListener(setting){cov_wypzho07z.f[16]++;const{eventInfo=(cov_wypzho07z.b[30][0]++,{x:0,y:0,target:false}),test=(cov_wypzho07z.b[31][0]++,false)}=(cov_wypzho07z.s[79]++,setting);let target;cov_wypzho07z.s[80]++;if(eventInfo.target===this.from){cov_wypzho07z.b[32][0]++;cov_wypzho07z.s[81]++;target=this.from;}else{cov_wypzho07z.b[32][1]++;cov_wypzho07z.s[82]++;target=this.to;}let distanceToCursor;cov_wypzho07z.s[83]++;if(this.settings.vertical){cov_wypzho07z.b[33][0]++;cov_wypzho07z.s[84]++;distanceToCursor=eventInfo.y-target.getBoundingClientRect().top-target.offsetWidth;}else{cov_wypzho07z.b[33][1]++;cov_wypzho07z.s[85]++;distanceToCursor=eventInfo.x-target.getBoundingClientRect().left;}cov_wypzho07z.s[86]++;if(test){cov_wypzho07z.b[34][0]++;cov_wypzho07z.s[87]++;this.handleDocumentMouseMove({clientX:test.x,clientY:test.y});}else{cov_wypzho07z.b[34][1]++;}cov_wypzho07z.s[88]++;this.dataForMovement={target,distanceToCursor};cov_wypzho07z.s[89]++;this.bindEventListeners();}removeEventListeners(){cov_wypzho07z.f[17]++;cov_wypzho07z.s[90]++;document.removeEventListener('mousemove',this.handleDocumentMouseMove);cov_wypzho07z.s[91]++;document.removeEventListener('mouseup',this.handleDocumentMouseUp);}handleDocumentMouseUp(){cov_wypzho07z.f[18]++;cov_wypzho07z.s[92]++;this.removeEventListeners();}bindEventListeners(){cov_wypzho07z.f[19]++;cov_wypzho07z.s[93]++;document.addEventListener('mousemove',this.handleDocumentMouseMove);cov_wypzho07z.s[94]++;document.addEventListener('mouseup',this.handleDocumentMouseUp);}};cov_wypzho07z.s[95]++;Movement=__decorate([autobind_decorator_1.default],Movement);cov_wypzho07z.s[96]++;exports.Movement=Movement;

/***/ }),

/***/ "./src/View/Movement/movement.test.ts":
/*!********************************************!*\
  !*** ./src/View/Movement/movement.test.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var cov_2dldu6qa67=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Movement\\movement.test.ts",hash="519fd0222976670ae5022f84e4af212bb6c85718",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Movement\\movement.test.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:18},end:{line:3,column:47}},"2":{start:{line:4,column:19},end:{line:4,column:40}},"3":{start:{line:5,column:27},end:{line:5,column:74}},"4":{start:{line:6,column:17},end:{line:6,column:44}},"5":{start:{line:7,column:0},end:{line:77,column:3}},"6":{start:{line:9,column:4},end:{line:40,column:7}},"7":{start:{line:11,column:8},end:{line:25,column:11}},"8":{start:{line:26,column:8},end:{line:26,column:50}},"9":{start:{line:27,column:8},end:{line:27,column:138}},"10":{start:{line:28,column:8},end:{line:28,column:46}},"11":{start:{line:29,column:8},end:{line:29,column:43}},"12":{start:{line:30,column:8},end:{line:30,column:41}},"13":{start:{line:31,column:8},end:{line:31,column:52}},"14":{start:{line:32,column:8},end:{line:32,column:43}},"15":{start:{line:33,column:8},end:{line:33,column:42}},"16":{start:{line:34,column:8},end:{line:34,column:50}},"17":{start:{line:35,column:8},end:{line:35,column:41}},"18":{start:{line:36,column:8},end:{line:36,column:40}},"19":{start:{line:37,column:8},end:{line:37,column:48}},"20":{start:{line:38,column:8},end:{line:38,column:39}},"21":{start:{line:39,column:8},end:{line:39,column:38}},"22":{start:{line:41,column:4},end:{line:45,column:7}},"23":{start:{line:42,column:8},end:{line:42,column:33}},"24":{start:{line:43,column:8},end:{line:43,column:31}},"25":{start:{line:44,column:8},end:{line:44,column:29}},"26":{start:{line:46,column:4},end:{line:48,column:7}},"27":{start:{line:47,column:8},end:{line:47,column:38}},"28":{start:{line:49,column:4},end:{line:56,column:7}},"29":{start:{line:51,column:8},end:{line:51,column:41}},"30":{start:{line:52,column:8},end:{line:52,column:111}},"31":{start:{line:53,column:8},end:{line:53,column:58}},"32":{start:{line:54,column:8},end:{line:54,column:62}},"33":{start:{line:55,column:8},end:{line:55,column:53}},"34":{start:{line:57,column:4},end:{line:64,column:7}},"35":{start:{line:59,column:8},end:{line:59,column:41}},"36":{start:{line:60,column:8},end:{line:60,column:112}},"37":{start:{line:61,column:8},end:{line:61,column:56}},"38":{start:{line:62,column:8},end:{line:62,column:61}},"39":{start:{line:63,column:8},end:{line:63,column:51}},"40":{start:{line:65,column:4},end:{line:71,column:7}},"41":{start:{line:67,column:8},end:{line:67,column:111}},"42":{start:{line:68,column:8},end:{line:68,column:57}},"43":{start:{line:69,column:8},end:{line:69,column:61}},"44":{start:{line:70,column:8},end:{line:70,column:52}},"45":{start:{line:72,column:4},end:{line:76,column:7}},"46":{start:{line:73,column:8},end:{line:73,column:54}},"47":{start:{line:74,column:23},end:{line:74,column:67}},"48":{start:{line:75,column:8},end:{line:75,column:35}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:7,column:21},end:{line:7,column:22}},loc:{start:{line:7,column:27},end:{line:77,column:1}},line:7},"1":{name:"(anonymous_1)",decl:{start:{line:9,column:15},end:{line:9,column:16}},loc:{start:{line:9,column:21},end:{line:40,column:5}},line:9},"2":{name:"(anonymous_2)",decl:{start:{line:41,column:14},end:{line:41,column:15}},loc:{start:{line:41,column:20},end:{line:45,column:5}},line:41},"3":{name:"(anonymous_3)",decl:{start:{line:46,column:33},end:{line:46,column:34}},loc:{start:{line:46,column:39},end:{line:48,column:5}},line:46},"4":{name:"(anonymous_4)",decl:{start:{line:50,column:82},end:{line:50,column:83}},loc:{start:{line:50,column:88},end:{line:56,column:5}},line:50},"5":{name:"(anonymous_5)",decl:{start:{line:58,column:51},end:{line:58,column:52}},loc:{start:{line:58,column:57},end:{line:64,column:5}},line:58},"6":{name:"(anonymous_6)",decl:{start:{line:66,column:51},end:{line:66,column:52}},loc:{start:{line:66,column:57},end:{line:71,column:5}},line:66},"7":{name:"(anonymous_7)",decl:{start:{line:72,column:77},end:{line:72,column:78}},loc:{start:{line:72,column:83},end:{line:76,column:5}},line:72}},branchMap:{"0":{loc:{start:{line:27,column:8},end:{line:27,column:137}},type:"cond-expr",locations:[{start:{line:27,column:74},end:{line:27,column:80}},{start:{line:27,column:83},end:{line:27,column:137}}],line:27},"1":{loc:{start:{line:27,column:8},end:{line:27,column:71}},type:"binary-expr",locations:[{start:{line:27,column:8},end:{line:27,column:54}},{start:{line:27,column:58},end:{line:27,column:71}}],line:27}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{"0":[0,0],"1":[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Movement\\movement.test.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Movement\\movement.test.ts"],names:[],mappings:"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",sourcesContent:["import { Handles } from '../Handles/Handles';\r\nimport { Movement } from './Movement';\r\nimport { SelectedInterval } from '../SelectedInterval/SelectedInterval';\r\nimport { Slider } from '../Slider/Slider';\r\n\r\ndescribe('Movement', () => {\r\n  let movement: Movement;\r\n\r\n  beforeEach(() => {\r\n    movement = new Movement({\r\n      basicSettings: {\r\n        'side-menu': true,\r\n        double: true,\r\n        handlesValues: true,\r\n        step: false,\r\n        valueScale: true,\r\n        vertical: false,\r\n        integer: true,\r\n      },\r\n      fromHandle: new Handles().fromHandle,\r\n      toHandle: new Handles().toHandle,\r\n      slider: new Slider().slider,\r\n      interval: new SelectedInterval().interval,\r\n    });\r\n    movement.positions = { from: 30, to: 70 };\r\n    document.querySelector('body')?.append(movement.slider, movement.from, movement.to);\r\n    movement.slider.style.width = '120px';\r\n    movement.from.style.width = '20px';\r\n    movement.to.style.width = '20px';\r\n    movement.slider.style.position = 'absolute';\r\n    movement.slider.style.left = '0px';\r\n    movement.slider.style.top = '0px';\r\n    movement.from.style.position = 'absolute';\r\n    movement.from.style.left = '0px';\r\n    movement.from.style.top = '0px';\r\n    movement.to.style.position = 'absolute';\r\n    movement.to.style.left = '0px';\r\n    movement.to.style.top = '0px';\r\n  });\r\n\r\n  afterEach(() => {\r\n    movement.slider.remove();\r\n    movement.from.remove();\r\n    movement.to.remove();\r\n  });\r\n\r\n  it('Movement can be create', () => {\r\n    expect(movement).toBeTruthy();\r\n  });\r\n\r\n  it('handelListener() move from and interval to '\r\n    + 'position bigger than right edge and record the position after fixing', () => {\r\n    movement.settings.double = false;\r\n    movement.handleListener({ eventInfo: { target: movement.from, x: 50, y: 0 }, test: { x: 200, y: 0 } });\r\n\r\n    expect(movement.from.style.left).toEqual('100px');\r\n    expect(movement.interval.style.left).toEqual('110px');\r\n    expect(movement.positions.from).toEqual(100);\r\n  });\r\n\r\n  it('handelListener() move from and interval to position less than left edge'\r\n    + ' and record the position after fixing', () => {\r\n    movement.settings.double = false;\r\n    movement.handleListener({ eventInfo: { target: movement.from, x: 50, y: 0 }, test: { x: -100, y: 0 } });\r\n\r\n    expect(movement.from.style.left).toEqual('0px');\r\n    expect(movement.interval.style.left).toEqual('10px');\r\n    expect(movement.positions.from).toEqual(0);\r\n  });\r\n\r\n  it('handelListener() move from and interval to position bigger than to position'\r\n    + ' and record the position after fixing', () => {\r\n    movement.handleListener({ eventInfo: { target: movement.from, x: 50, y: 0 }, test: { x: 200, y: 0 } });\r\n\r\n    expect(movement.from.style.left).toEqual('50px');\r\n    expect(movement.interval.style.left).toEqual('60px');\r\n    expect(movement.positions.from).toEqual(50);\r\n  });\r\n\r\n  it('correctsImpossiblePosition() fix value smaller then from correctly', () => {\r\n    movement.dataForMovement.target = movement.to;\r\n    const result: number = movement.correctsImpossiblePosition(100, 20);\r\n\r\n    expect(result).toEqual(50);\r\n  });\r\n});\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_2dldu6qa67.s[0]++;Object.defineProperty(exports, "__esModule", ({value:true}));const Handles_1=(cov_2dldu6qa67.s[1]++,__webpack_require__(/*! ../Handles/Handles */ "./src/View/Handles/Handles.ts"));const Movement_1=(cov_2dldu6qa67.s[2]++,__webpack_require__(/*! ./Movement */ "./src/View/Movement/Movement.ts"));const SelectedInterval_1=(cov_2dldu6qa67.s[3]++,__webpack_require__(/*! ../SelectedInterval/SelectedInterval */ "./src/View/SelectedInterval/SelectedInterval.ts"));const Slider_1=(cov_2dldu6qa67.s[4]++,__webpack_require__(/*! ../Slider/Slider */ "./src/View/Slider/Slider.ts"));cov_2dldu6qa67.s[5]++;describe('Movement',()=>{cov_2dldu6qa67.f[0]++;let movement;cov_2dldu6qa67.s[6]++;beforeEach(()=>{cov_2dldu6qa67.f[1]++;var _a;cov_2dldu6qa67.s[7]++;movement=new Movement_1.Movement({basicSettings:{'side-menu':true,double:true,handlesValues:true,step:false,valueScale:true,vertical:false,integer:true},fromHandle:new Handles_1.Handles().fromHandle,toHandle:new Handles_1.Handles().toHandle,slider:new Slider_1.Slider().slider,interval:new SelectedInterval_1.SelectedInterval().interval});cov_2dldu6qa67.s[8]++;movement.positions={from:30,to:70};cov_2dldu6qa67.s[9]++;(cov_2dldu6qa67.b[1][0]++,(_a=document.querySelector('body'))===null)||(cov_2dldu6qa67.b[1][1]++,_a===void 0)?(cov_2dldu6qa67.b[0][0]++,void 0):(cov_2dldu6qa67.b[0][1]++,_a.append(movement.slider,movement.from,movement.to));cov_2dldu6qa67.s[10]++;movement.slider.style.width='120px';cov_2dldu6qa67.s[11]++;movement.from.style.width='20px';cov_2dldu6qa67.s[12]++;movement.to.style.width='20px';cov_2dldu6qa67.s[13]++;movement.slider.style.position='absolute';cov_2dldu6qa67.s[14]++;movement.slider.style.left='0px';cov_2dldu6qa67.s[15]++;movement.slider.style.top='0px';cov_2dldu6qa67.s[16]++;movement.from.style.position='absolute';cov_2dldu6qa67.s[17]++;movement.from.style.left='0px';cov_2dldu6qa67.s[18]++;movement.from.style.top='0px';cov_2dldu6qa67.s[19]++;movement.to.style.position='absolute';cov_2dldu6qa67.s[20]++;movement.to.style.left='0px';cov_2dldu6qa67.s[21]++;movement.to.style.top='0px';});cov_2dldu6qa67.s[22]++;afterEach(()=>{cov_2dldu6qa67.f[2]++;cov_2dldu6qa67.s[23]++;movement.slider.remove();cov_2dldu6qa67.s[24]++;movement.from.remove();cov_2dldu6qa67.s[25]++;movement.to.remove();});cov_2dldu6qa67.s[26]++;it('Movement can be create',()=>{cov_2dldu6qa67.f[3]++;cov_2dldu6qa67.s[27]++;expect(movement).toBeTruthy();});cov_2dldu6qa67.s[28]++;it('handelListener() move from and interval to '+'position bigger than right edge and record the position after fixing',()=>{cov_2dldu6qa67.f[4]++;cov_2dldu6qa67.s[29]++;movement.settings.double=false;cov_2dldu6qa67.s[30]++;movement.handleListener({eventInfo:{target:movement.from,x:50,y:0},test:{x:200,y:0}});cov_2dldu6qa67.s[31]++;expect(movement.from.style.left).toEqual('100px');cov_2dldu6qa67.s[32]++;expect(movement.interval.style.left).toEqual('110px');cov_2dldu6qa67.s[33]++;expect(movement.positions.from).toEqual(100);});cov_2dldu6qa67.s[34]++;it('handelListener() move from and interval to position less than left edge'+' and record the position after fixing',()=>{cov_2dldu6qa67.f[5]++;cov_2dldu6qa67.s[35]++;movement.settings.double=false;cov_2dldu6qa67.s[36]++;movement.handleListener({eventInfo:{target:movement.from,x:50,y:0},test:{x:-100,y:0}});cov_2dldu6qa67.s[37]++;expect(movement.from.style.left).toEqual('0px');cov_2dldu6qa67.s[38]++;expect(movement.interval.style.left).toEqual('10px');cov_2dldu6qa67.s[39]++;expect(movement.positions.from).toEqual(0);});cov_2dldu6qa67.s[40]++;it('handelListener() move from and interval to position bigger than to position'+' and record the position after fixing',()=>{cov_2dldu6qa67.f[6]++;cov_2dldu6qa67.s[41]++;movement.handleListener({eventInfo:{target:movement.from,x:50,y:0},test:{x:200,y:0}});cov_2dldu6qa67.s[42]++;expect(movement.from.style.left).toEqual('50px');cov_2dldu6qa67.s[43]++;expect(movement.interval.style.left).toEqual('60px');cov_2dldu6qa67.s[44]++;expect(movement.positions.from).toEqual(50);});cov_2dldu6qa67.s[45]++;it('correctsImpossiblePosition() fix value smaller then from correctly',()=>{cov_2dldu6qa67.f[7]++;cov_2dldu6qa67.s[46]++;movement.dataForMovement.target=movement.to;const result=(cov_2dldu6qa67.s[47]++,movement.correctsImpossiblePosition(100,20));cov_2dldu6qa67.s[48]++;expect(result).toEqual(50);});});

/***/ }),

/***/ "./src/View/Movement/types.ts":
/*!************************************!*\
  !*** ./src/View/Movement/types.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
var cov_2jgq0pnhrk=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Movement\\types.ts",hash="944fbbaac61315fbd8380206abcc2f63151f27af",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Movement\\types.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}}},fnMap:{},branchMap:{},s:{"0":0},f:{},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Movement\\types.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Movement\\types.ts"],names:[],mappings:"",sourcesContent:["import { BasicViewSettings } from '../types';\r\n\r\ntype EventInfo = {\r\n  readonly target: EventTarget,\r\n  readonly x: number,\r\n  readonly y: number\r\n};\r\n\r\ntype HandlesPosition = {\r\n  from: number;\r\n  to: number;\r\n};\r\n\r\ntype MovementSettings = {\r\n  slider: HTMLDivElement;\r\n  fromHandle: HTMLSpanElement;\r\n  toHandle: HTMLSpanElement;\r\n  basicSettings: BasicViewSettings;\r\n  interval: HTMLDivElement;\r\n  positions?: HandlesPosition;\r\n  stepWidth?: string | boolean;\r\n};\r\n\r\ntype TestMouseEvent = {\r\n  clientX: number,\r\n  clientY: number,\r\n};\r\n\r\ntype MovementEvent = {\r\n  eventInfo: EventInfo,\r\n  test?: {\r\n    x: number,\r\n    y: number,\r\n  },\r\n};\r\n\r\ntype HandleClickData = {\r\n  target: HTMLSpanElement,\r\n  distanceToCursor: number,\r\n};\r\n\r\nexport {\r\n  EventInfo,\r\n  HandlesPosition,\r\n  MovementSettings,\r\n  TestMouseEvent,\r\n  MovementEvent,\r\n  HandleClickData,\r\n};\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_2jgq0pnhrk.s[0]++;Object.defineProperty(exports, "__esModule", ({value:true}));

/***/ }),

/***/ "./src/View/SelectedInterval/SelectedInterval.ts":
/*!*******************************************************!*\
  !*** ./src/View/SelectedInterval/SelectedInterval.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
var cov_1nrtwghayn=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SelectedInterval\\SelectedInterval.ts",hash="181f764b39de39323d5105608207a705b9bf9c09",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SelectedInterval\\SelectedInterval.ts",statementMap:{"0":{start:{line:2,column:17},end:{line:7,column:1}},"1":{start:{line:3,column:12},end:{line:3,column:28}},"2":{start:{line:3,column:34},end:{line:3,column:125}},"3":{start:{line:4,column:4},end:{line:5,column:150}},"4":{start:{line:4,column:79},end:{line:4,column:131}},"5":{start:{line:5,column:9},end:{line:5,column:150}},"6":{start:{line:5,column:58},end:{line:5,column:150}},"7":{start:{line:5,column:81},end:{line:5,column:150}},"8":{start:{line:6,column:4},end:{line:6,column:66}},"9":{start:{line:8,column:0},end:{line:8,column:62}},"10":{start:{line:9,column:0},end:{line:9,column:34}},"11":{start:{line:10,column:29},end:{line:10,column:58}},"12":{start:{line:11,column:23},end:{line:46,column:1}},"13":{start:{line:13,column:8},end:{line:13,column:54}},"14":{start:{line:14,column:8},end:{line:14,column:61}},"15":{start:{line:15,column:8},end:{line:15,column:62}},"16":{start:{line:18,column:8},end:{line:24,column:9}},"17":{start:{line:19,column:12},end:{line:19,column:111}},"18":{start:{line:22,column:12},end:{line:23,column:54}},"19":{start:{line:27,column:8},end:{line:27,column:72}},"20":{start:{line:30,column:8},end:{line:30,column:70}},"21":{start:{line:33,column:42},end:{line:33,column:50}},"22":{start:{line:34,column:8},end:{line:44,column:9}},"23":{start:{line:36,column:16},end:{line:36,column:53}},"24":{start:{line:37,column:16},end:{line:37,column:22}},"25":{start:{line:39,column:16},end:{line:39,column:54}},"26":{start:{line:40,column:16},end:{line:40,column:67}},"27":{start:{line:41,column:16},end:{line:41,column:22}},"28":{start:{line:43,column:16},end:{line:43,column:22}},"29":{start:{line:47,column:0},end:{line:49,column:21}},"30":{start:{line:50,column:0},end:{line:50,column:44}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:2,column:46},end:{line:2,column:47}},loc:{start:{line:2,column:87},end:{line:7,column:1}},line:2},"1":{name:"(anonymous_1)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:18},end:{line:16,column:5}},line:12},"2":{name:"(anonymous_2)",decl:{start:{line:17,column:4},end:{line:17,column:5}},loc:{start:{line:17,column:47},end:{line:25,column:5}},line:17},"3":{name:"(anonymous_3)",decl:{start:{line:26,column:4},end:{line:26,column:5}},loc:{start:{line:26,column:38},end:{line:28,column:5}},line:26},"4":{name:"(anonymous_4)",decl:{start:{line:29,column:4},end:{line:29,column:5}},loc:{start:{line:29,column:38},end:{line:31,column:5}},line:29},"5":{name:"(anonymous_5)",decl:{start:{line:32,column:4},end:{line:32,column:5}},loc:{start:{line:32,column:35},end:{line:45,column:5}},line:32}},branchMap:{"0":{loc:{start:{line:2,column:17},end:{line:7,column:1}},type:"binary-expr",locations:[{start:{line:2,column:18},end:{line:2,column:22}},{start:{line:2,column:26},end:{line:2,column:41}},{start:{line:2,column:46},end:{line:7,column:1}}],line:2},"1":{loc:{start:{line:3,column:34},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:42},end:{line:3,column:48}},{start:{line:3,column:51},end:{line:3,column:125}}],line:3},"2":{loc:{start:{line:3,column:51},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:67},end:{line:3,column:118}},{start:{line:3,column:121},end:{line:3,column:125}}],line:3},"3":{loc:{start:{line:4,column:4},end:{line:5,column:150}},type:"if",locations:[{start:{line:4,column:4},end:{line:5,column:150}},{start:{line:4,column:4},end:{line:5,column:150}}],line:4},"4":{loc:{start:{line:4,column:8},end:{line:4,column:77}},type:"binary-expr",locations:[{start:{line:4,column:8},end:{line:4,column:35}},{start:{line:4,column:39},end:{line:4,column:77}}],line:4},"5":{loc:{start:{line:5,column:58},end:{line:5,column:150}},type:"if",locations:[{start:{line:5,column:58},end:{line:5,column:150}},{start:{line:5,column:58},end:{line:5,column:150}}],line:5},"6":{loc:{start:{line:5,column:85},end:{line:5,column:149}},type:"binary-expr",locations:[{start:{line:5,column:86},end:{line:5,column:143}},{start:{line:5,column:148},end:{line:5,column:149}}],line:5},"7":{loc:{start:{line:5,column:86},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:94},end:{line:5,column:98}},{start:{line:5,column:101},end:{line:5,column:143}}],line:5},"8":{loc:{start:{line:5,column:101},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:109},end:{line:5,column:126}},{start:{line:5,column:129},end:{line:5,column:143}}],line:5},"9":{loc:{start:{line:6,column:11},end:{line:6,column:62}},type:"binary-expr",locations:[{start:{line:6,column:11},end:{line:6,column:16}},{start:{line:6,column:20},end:{line:6,column:21}},{start:{line:6,column:25},end:{line:6,column:62}}],line:6},"10":{loc:{start:{line:18,column:8},end:{line:24,column:9}},type:"if",locations:[{start:{line:18,column:8},end:{line:24,column:9}},{start:{line:18,column:8},end:{line:24,column:9}}],line:18},"11":{loc:{start:{line:27,column:15},end:{line:27,column:71}},type:"binary-expr",locations:[{start:{line:27,column:16},end:{line:27,column:25}},{start:{line:27,column:31},end:{line:27,column:70}}],line:27},"12":{loc:{start:{line:30,column:15},end:{line:30,column:69}},type:"binary-expr",locations:[{start:{line:30,column:16},end:{line:30,column:24}},{start:{line:30,column:30},end:{line:30,column:68}}],line:30},"13":{loc:{start:{line:34,column:8},end:{line:44,column:9}},type:"switch",locations:[{start:{line:35,column:12},end:{line:37,column:22}},{start:{line:38,column:12},end:{line:41,column:22}},{start:{line:42,column:12},end:{line:43,column:22}}],line:34}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{"0":[0,0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SelectedInterval\\SelectedInterval.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SelectedInterval\\SelectedInterval.ts"],names:[],mappings:";;;;;;;;;AAAA,2DAA0C;AAI1C,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;IAG3B;QACE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;QACrD,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;IACxD,CAAC;IAEM,2BAA2B,CAAC,aAAuC;QACxE,IAAI,aAAa,CAAC,MAAM,KAAK,MAAM,EAAE;YACnC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC;SACpG;aAAM;YACL,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,aAAa,CAAC,WAAW,GAAG,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;kBACrF,CAAC,aAAa,CAAC,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC;SACzC;IACH,CAAC;IAEO,uBAAuB,CAAC,QAAiB;QAC/C,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,KAAK,OAAO,CAAC,CAAC;IAClE,CAAC;IAEO,uBAAuB,CAAC,QAAiB;QAC/C,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,KAAK,MAAM,CAAC,CAAC;IAChE,CAAC;IAEM,oBAAoB,CAAC,QAA6B;QACvD,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,QAAQ,CAAC;QAE3C,QAAQ,IAAI,EAAE;YACZ,KAAK,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC;gBACzC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;gBACrC,MAAM;YACR,KAAK,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC;gBACzC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;gBACtC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,WAAW,GAAG,CAAC,IAAI,CAAC;gBACnD,MAAM;YACR;gBACE,MAAM;SACT;IACH,CAAC;CACF,CAAA;AAzCY,gBAAgB;IAD5B,4BAAQ;GACI,gBAAgB,CAyC5B;AAzCY,4CAAgB",sourcesContent:["import autobind from 'autobind-decorator';\r\nimport { IntervalDisplayData, RefreshIntervalPositions } from './types';\r\n\r\n@autobind\r\nexport class SelectedInterval {\r\n  readonly interval: HTMLDivElement;\r\n\r\n  constructor() {\r\n    this.interval = document.createElement('div');\r\n    this.interval.classList.add('goby-slider__interval');\r\n    this.interval.setAttribute('style', 'display: block');\r\n  }\r\n\r\n  public adjustPositionRelativeValue(dataToRefresh: RefreshIntervalPositions): void {\r\n    if (dataToRefresh.target === 'from') {\r\n      this.interval.style.left = `${Number(dataToRefresh.position) + (dataToRefresh.handleWidth / 2)}px`;\r\n    } else {\r\n      this.interval.style.right = `${dataToRefresh.sliderWidth - Number(dataToRefresh.position)\r\n        + (dataToRefresh.handleWidth / 2)}px`;\r\n    }\r\n  }\r\n\r\n  private checkIsIntervalNeedHide(isDouble: boolean): boolean {\r\n    return (!isDouble) && (this.interval.style.display === 'block');\r\n  }\r\n\r\n  private checkIsIntervalNeedShow(isDouble: boolean): boolean {\r\n    return (isDouble) && (this.interval.style.display === 'none');\r\n  }\r\n\r\n  public hideSelectedInterval(settings: IntervalDisplayData): void {\r\n    const { isDouble, handleWidth } = settings;\r\n\r\n    switch (true) {\r\n      case this.checkIsIntervalNeedHide(isDouble):\r\n        this.interval.style.display = 'none';\r\n        break;\r\n      case this.checkIsIntervalNeedShow(isDouble):\r\n        this.interval.style.display = 'block';\r\n        this.interval.style.right = `${handleWidth / 2}px`;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n}\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();var __decorate=(cov_1nrtwghayn.s[0]++,(cov_1nrtwghayn.b[0][0]++,this)&&(cov_1nrtwghayn.b[0][1]++,this.__decorate)||(cov_1nrtwghayn.b[0][2]++,function(decorators,target,key,desc){cov_1nrtwghayn.f[0]++;var c=(cov_1nrtwghayn.s[1]++,arguments.length),r=(cov_1nrtwghayn.s[2]++,c<3?(cov_1nrtwghayn.b[1][0]++,target):(cov_1nrtwghayn.b[1][1]++,desc===null?(cov_1nrtwghayn.b[2][0]++,desc=Object.getOwnPropertyDescriptor(target,key)):(cov_1nrtwghayn.b[2][1]++,desc))),d;cov_1nrtwghayn.s[3]++;if((cov_1nrtwghayn.b[4][0]++,typeof Reflect==="object")&&(cov_1nrtwghayn.b[4][1]++,typeof Reflect.decorate==="function")){cov_1nrtwghayn.b[3][0]++;cov_1nrtwghayn.s[4]++;r=Reflect.decorate(decorators,target,key,desc);}else{cov_1nrtwghayn.b[3][1]++;cov_1nrtwghayn.s[5]++;for(var i=decorators.length-1;i>=0;i--){cov_1nrtwghayn.s[6]++;if(d=decorators[i]){cov_1nrtwghayn.b[5][0]++;cov_1nrtwghayn.s[7]++;r=(cov_1nrtwghayn.b[6][0]++,c<3?(cov_1nrtwghayn.b[7][0]++,d(r)):(cov_1nrtwghayn.b[7][1]++,c>3?(cov_1nrtwghayn.b[8][0]++,d(target,key,r)):(cov_1nrtwghayn.b[8][1]++,d(target,key))))||(cov_1nrtwghayn.b[6][1]++,r);}else{cov_1nrtwghayn.b[5][1]++;}}}cov_1nrtwghayn.s[8]++;return(cov_1nrtwghayn.b[9][0]++,c>3)&&(cov_1nrtwghayn.b[9][1]++,r)&&(cov_1nrtwghayn.b[9][2]++,Object.defineProperty(target,key,r)),r;}));cov_1nrtwghayn.s[9]++;Object.defineProperty(exports, "__esModule", ({value:true}));cov_1nrtwghayn.s[10]++;exports.SelectedInterval=void 0;const autobind_decorator_1=(cov_1nrtwghayn.s[11]++,__webpack_require__(/*! autobind-decorator */ "./node_modules/autobind-decorator/lib/esm/index.js"));cov_1nrtwghayn.s[12]++;let SelectedInterval=class SelectedInterval{constructor(){cov_1nrtwghayn.f[1]++;cov_1nrtwghayn.s[13]++;this.interval=document.createElement('div');cov_1nrtwghayn.s[14]++;this.interval.classList.add('goby-slider__interval');cov_1nrtwghayn.s[15]++;this.interval.setAttribute('style','display: block');}adjustPositionRelativeValue(dataToRefresh){cov_1nrtwghayn.f[2]++;cov_1nrtwghayn.s[16]++;if(dataToRefresh.target==='from'){cov_1nrtwghayn.b[10][0]++;cov_1nrtwghayn.s[17]++;this.interval.style.left=`${Number(dataToRefresh.position)+dataToRefresh.handleWidth/2}px`;}else{cov_1nrtwghayn.b[10][1]++;cov_1nrtwghayn.s[18]++;this.interval.style.right=`${dataToRefresh.sliderWidth-Number(dataToRefresh.position)+dataToRefresh.handleWidth/2}px`;}}checkIsIntervalNeedHide(isDouble){cov_1nrtwghayn.f[3]++;cov_1nrtwghayn.s[19]++;return(cov_1nrtwghayn.b[11][0]++,!isDouble)&&(cov_1nrtwghayn.b[11][1]++,this.interval.style.display==='block');}checkIsIntervalNeedShow(isDouble){cov_1nrtwghayn.f[4]++;cov_1nrtwghayn.s[20]++;return(cov_1nrtwghayn.b[12][0]++,isDouble)&&(cov_1nrtwghayn.b[12][1]++,this.interval.style.display==='none');}hideSelectedInterval(settings){cov_1nrtwghayn.f[5]++;const{isDouble,handleWidth}=(cov_1nrtwghayn.s[21]++,settings);cov_1nrtwghayn.s[22]++;switch(true){case this.checkIsIntervalNeedHide(isDouble):cov_1nrtwghayn.b[13][0]++;cov_1nrtwghayn.s[23]++;this.interval.style.display='none';cov_1nrtwghayn.s[24]++;break;case this.checkIsIntervalNeedShow(isDouble):cov_1nrtwghayn.b[13][1]++;cov_1nrtwghayn.s[25]++;this.interval.style.display='block';cov_1nrtwghayn.s[26]++;this.interval.style.right=`${handleWidth/2}px`;cov_1nrtwghayn.s[27]++;break;default:cov_1nrtwghayn.b[13][2]++;cov_1nrtwghayn.s[28]++;break;}}};cov_1nrtwghayn.s[29]++;SelectedInterval=__decorate([autobind_decorator_1.default],SelectedInterval);cov_1nrtwghayn.s[30]++;exports.SelectedInterval=SelectedInterval;

/***/ }),

/***/ "./src/View/SelectedInterval/selectedInterval.test.ts":
/*!************************************************************!*\
  !*** ./src/View/SelectedInterval/selectedInterval.test.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var cov_yca6v8zox=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SelectedInterval\\selectedInterval.test.ts",hash="ea3629e41696c4e4af2f62533c3fb860d07d3e89",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SelectedInterval\\selectedInterval.test.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:27},end:{line:3,column:56}},"2":{start:{line:4,column:0},end:{line:37,column:3}},"3":{start:{line:6,column:4},end:{line:8,column:7}},"4":{start:{line:7,column:8},end:{line:7,column:61}},"5":{start:{line:9,column:4},end:{line:11,column:7}},"6":{start:{line:10,column:8},end:{line:10,column:38}},"7":{start:{line:12,column:4},end:{line:20,column:7}},"8":{start:{line:13,column:8},end:{line:18,column:11}},"9":{start:{line:19,column:8},end:{line:19,column:61}},"10":{start:{line:21,column:4},end:{line:29,column:7}},"11":{start:{line:22,column:8},end:{line:27,column:11}},"12":{start:{line:28,column:8},end:{line:28,column:62}},"13":{start:{line:30,column:4},end:{line:36,column:7}},"14":{start:{line:31,column:8},end:{line:31,column:76}},"15":{start:{line:32,column:8},end:{line:32,column:64}},"16":{start:{line:33,column:8},end:{line:33,column:75}},"17":{start:{line:34,column:8},end:{line:34,column:65}},"18":{start:{line:35,column:8},end:{line:35,column:62}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:4,column:29},end:{line:4,column:30}},loc:{start:{line:4,column:35},end:{line:37,column:1}},line:4},"1":{name:"(anonymous_1)",decl:{start:{line:6,column:15},end:{line:6,column:16}},loc:{start:{line:6,column:21},end:{line:8,column:5}},line:6},"2":{name:"(anonymous_2)",decl:{start:{line:9,column:34},end:{line:9,column:35}},loc:{start:{line:9,column:40},end:{line:11,column:5}},line:9},"3":{name:"(anonymous_3)",decl:{start:{line:12,column:80},end:{line:12,column:81}},loc:{start:{line:12,column:86},end:{line:20,column:5}},line:12},"4":{name:"(anonymous_4)",decl:{start:{line:21,column:81},end:{line:21,column:82}},loc:{start:{line:21,column:87},end:{line:29,column:5}},line:21},"5":{name:"(anonymous_5)",decl:{start:{line:30,column:73},end:{line:30,column:74}},loc:{start:{line:30,column:79},end:{line:36,column:5}},line:30}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SelectedInterval\\selectedInterval.test.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SelectedInterval\\selectedInterval.test.ts"],names:[],mappings:";;AAAA,yDAAsD;AAEtD,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,IAAI,QAA0B,CAAC;IAE/B,UAAU,CAAC,GAAG,EAAE;QACd,QAAQ,GAAG,IAAI,mCAAgB,EAAE,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACjC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uEAAuE,EAAE,GAAG,EAAE;QAC/E,QAAQ,CAAC,2BAA2B,CAAC;YACnC,MAAM,EAAE,MAAM;YACd,QAAQ,EAAE,IAAI;YACd,WAAW,EAAE,EAAE;YACf,WAAW,EAAE,GAAG;SACjB,CAAC,CAAC;QACH,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wEAAwE,EAAE,GAAG,EAAE;QAChF,QAAQ,CAAC,2BAA2B,CAAC;YACnC,MAAM,EAAE,IAAI;YACZ,QAAQ,EAAE,IAAI;YACd,WAAW,EAAE,EAAE;YACf,WAAW,EAAE,GAAG;SACjB,CAAC,CAAC;QACH,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;QACxE,QAAQ,CAAC,oBAAoB,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAAC;QACpE,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACxD,QAAQ,CAAC,oBAAoB,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAAC;QACnE,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACzD,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC",sourcesContent:["import { SelectedInterval } from './SelectedInterval';\r\n\r\ndescribe('SelectedInterval', () => {\r\n  let interval: SelectedInterval;\r\n\r\n  beforeEach(() => {\r\n    interval = new SelectedInterval();\r\n  });\r\n\r\n  it('Interval cal be created', () => {\r\n    expect(interval).toBeTruthy();\r\n  });\r\n\r\n  it('adjustPositionRelativeValue() adjust position correctly for left side', () => {\r\n    interval.adjustPositionRelativeValue({\r\n      target: 'from',\r\n      position: '50',\r\n      handleWidth: 20,\r\n      sliderWidth: 120,\r\n    });\r\n    expect(interval.interval.style.left).toEqual('60px');\r\n  });\r\n\r\n  it('adjustPositionRelativeValue() adjust position correctly for right side', () => {\r\n    interval.adjustPositionRelativeValue({\r\n      target: 'to',\r\n      position: '50',\r\n      handleWidth: 20,\r\n      sliderWidth: 100,\r\n    });\r\n    expect(interval.interval.style.right).toEqual('60px');\r\n  });\r\n\r\n  it('hideSelectedInterval() operates the display function correctly', () => {\r\n    interval.hideSelectedInterval({ isDouble: false, handleWidth: 20 });\r\n    expect(interval.interval.style.display).toEqual('none');\r\n    interval.hideSelectedInterval({ isDouble: true, handleWidth: 20 });\r\n    expect(interval.interval.style.display).toEqual('block');\r\n    expect(interval.interval.style.right).toEqual('10px');\r\n  });\r\n});\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_yca6v8zox.s[0]++;Object.defineProperty(exports, "__esModule", ({value:true}));const SelectedInterval_1=(cov_yca6v8zox.s[1]++,__webpack_require__(/*! ./SelectedInterval */ "./src/View/SelectedInterval/SelectedInterval.ts"));cov_yca6v8zox.s[2]++;describe('SelectedInterval',()=>{cov_yca6v8zox.f[0]++;let interval;cov_yca6v8zox.s[3]++;beforeEach(()=>{cov_yca6v8zox.f[1]++;cov_yca6v8zox.s[4]++;interval=new SelectedInterval_1.SelectedInterval();});cov_yca6v8zox.s[5]++;it('Interval cal be created',()=>{cov_yca6v8zox.f[2]++;cov_yca6v8zox.s[6]++;expect(interval).toBeTruthy();});cov_yca6v8zox.s[7]++;it('adjustPositionRelativeValue() adjust position correctly for left side',()=>{cov_yca6v8zox.f[3]++;cov_yca6v8zox.s[8]++;interval.adjustPositionRelativeValue({target:'from',position:'50',handleWidth:20,sliderWidth:120});cov_yca6v8zox.s[9]++;expect(interval.interval.style.left).toEqual('60px');});cov_yca6v8zox.s[10]++;it('adjustPositionRelativeValue() adjust position correctly for right side',()=>{cov_yca6v8zox.f[4]++;cov_yca6v8zox.s[11]++;interval.adjustPositionRelativeValue({target:'to',position:'50',handleWidth:20,sliderWidth:100});cov_yca6v8zox.s[12]++;expect(interval.interval.style.right).toEqual('60px');});cov_yca6v8zox.s[13]++;it('hideSelectedInterval() operates the display function correctly',()=>{cov_yca6v8zox.f[5]++;cov_yca6v8zox.s[14]++;interval.hideSelectedInterval({isDouble:false,handleWidth:20});cov_yca6v8zox.s[15]++;expect(interval.interval.style.display).toEqual('none');cov_yca6v8zox.s[16]++;interval.hideSelectedInterval({isDouble:true,handleWidth:20});cov_yca6v8zox.s[17]++;expect(interval.interval.style.display).toEqual('block');cov_yca6v8zox.s[18]++;expect(interval.interval.style.right).toEqual('10px');});});

/***/ }),

/***/ "./src/View/SelectedInterval/types.ts":
/*!********************************************!*\
  !*** ./src/View/SelectedInterval/types.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
var cov_7lywlnqg7=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SelectedInterval\\types.ts",hash="a34d2232883c47296652821da8596542b4bcc504",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SelectedInterval\\types.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}}},fnMap:{},branchMap:{},s:{"0":0},f:{},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SelectedInterval\\types.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SelectedInterval\\types.ts"],names:[],mappings:"",sourcesContent:["type RefreshIntervalPositions = {\r\n  target: 'from' | 'to';\r\n  position: string;\r\n  sliderWidth: number;\r\n  handleWidth: number;\r\n};\r\n\r\ntype IntervalDisplayData = {\r\n  isDouble: boolean,\r\n  handleWidth: number\r\n};\r\n\r\nexport {\r\n  RefreshIntervalPositions,\r\n  IntervalDisplayData,\r\n};\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_7lywlnqg7.s[0]++;Object.defineProperty(exports, "__esModule", ({value:true}));

/***/ }),

/***/ "./src/View/SideMenu/SideMenu.ts":
/*!***************************************!*\
  !*** ./src/View/SideMenu/SideMenu.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
var cov_2mfzjxt4aw=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SideMenu\\SideMenu.ts",hash="224f3b32359071da0e16678f6efb3d2b6a5b7364",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SideMenu\\SideMenu.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:26}},"2":{start:{line:6,column:8},end:{line:6,column:36}},"3":{start:{line:7,column:8},end:{line:7,column:35}},"4":{start:{line:8,column:8},end:{line:8,column:34}},"5":{start:{line:11,column:8},end:{line:14,column:11}},"6":{start:{line:15,column:8},end:{line:19,column:11}},"7":{start:{line:20,column:8},end:{line:23,column:11}},"8":{start:{line:24,column:8},end:{line:28,column:11}},"9":{start:{line:31,column:8},end:{line:34,column:11}},"10":{start:{line:35,column:8},end:{line:38,column:11}},"11":{start:{line:39,column:8},end:{line:42,column:11}},"12":{start:{line:43,column:8},end:{line:47,column:11}},"13":{start:{line:48,column:8},end:{line:52,column:11}},"14":{start:{line:53,column:8},end:{line:57,column:11}},"15":{start:{line:58,column:8},end:{line:62,column:11}},"16":{start:{line:63,column:8},end:{line:68,column:11}},"17":{start:{line:69,column:8},end:{line:72,column:11}},"18":{start:{line:73,column:8},end:{line:76,column:11}},"19":{start:{line:77,column:8},end:{line:80,column:11}},"20":{start:{line:81,column:8},end:{line:84,column:11}},"21":{start:{line:85,column:29},end:{line:85,column:78}},"22":{start:{line:86,column:8},end:{line:86,column:83}},"23":{start:{line:87,column:8},end:{line:87,column:81}},"24":{start:{line:88,column:8},end:{line:88,column:76}},"25":{start:{line:89,column:8},end:{line:89,column:78}},"26":{start:{line:92,column:8},end:{line:96,column:11}},"27":{start:{line:97,column:8},end:{line:101,column:11}},"28":{start:{line:102,column:8},end:{line:106,column:11}},"29":{start:{line:107,column:8},end:{line:111,column:11}},"30":{start:{line:112,column:8},end:{line:116,column:11}},"31":{start:{line:117,column:8},end:{line:121,column:11}},"32":{start:{line:124,column:8},end:{line:128,column:11}},"33":{start:{line:129,column:8},end:{line:133,column:11}},"34":{start:{line:134,column:29},end:{line:134,column:71}},"35":{start:{line:135,column:8},end:{line:135,column:76}},"36":{start:{line:136,column:8},end:{line:136,column:74}},"37":{start:{line:137,column:8},end:{line:137,column:71}},"38":{start:{line:138,column:8},end:{line:141,column:11}},"39":{start:{line:142,column:8},end:{line:145,column:11}},"40":{start:{line:146,column:8},end:{line:149,column:11}},"41":{start:{line:150,column:8},end:{line:153,column:11}},"42":{start:{line:154,column:8},end:{line:158,column:11}},"43":{start:{line:159,column:8},end:{line:162,column:11}},"44":{start:{line:165,column:8},end:{line:169,column:11}},"45":{start:{line:170,column:8},end:{line:174,column:11}},"46":{start:{line:175,column:8},end:{line:179,column:11}},"47":{start:{line:180,column:8},end:{line:184,column:11}},"48":{start:{line:187,column:8},end:{line:187,column:29}},"49":{start:{line:188,column:8},end:{line:188,column:30}},"50":{start:{line:189,column:8},end:{line:189,column:28}},"51":{start:{line:190,column:8},end:{line:190,column:29}},"52":{start:{line:191,column:8},end:{line:191,column:32}},"53":{start:{line:192,column:8},end:{line:195,column:11}},"54":{start:{line:198,column:24},end:{line:198,column:66}},"55":{start:{line:199,column:8},end:{line:201,column:11}},"56":{start:{line:200,column:12},end:{line:200,column:44}},"57":{start:{line:202,column:8},end:{line:203,column:53}},"58":{start:{line:203,column:12},end:{line:203,column:53}},"59":{start:{line:204,column:8},end:{line:205,column:84}},"60":{start:{line:205,column:12},end:{line:205,column:84}},"61":{start:{line:206,column:8},end:{line:206,column:23}},"62":{start:{line:209,column:8},end:{line:209,column:170}},"63":{start:{line:212,column:8},end:{line:212,column:87}},"64":{start:{line:213,column:8},end:{line:213,column:83}},"65":{start:{line:214,column:8},end:{line:214,column:87}},"66":{start:{line:215,column:8},end:{line:215,column:89}},"67":{start:{line:216,column:8},end:{line:216,column:89}},"68":{start:{line:217,column:8},end:{line:217,column:284}},"69":{start:{line:220,column:8},end:{line:220,column:123}},"70":{start:{line:221,column:8},end:{line:221,column:127}},"71":{start:{line:224,column:8},end:{line:224,column:153}},"72":{start:{line:225,column:8},end:{line:225,column:151}},"73":{start:{line:228,column:8},end:{line:228,column:147}},"74":{start:{line:229,column:8},end:{line:229,column:145}},"75":{start:{line:232,column:8},end:{line:232,column:132}},"76":{start:{line:233,column:8},end:{line:233,column:130}},"77":{start:{line:236,column:8},end:{line:236,column:138}},"78":{start:{line:237,column:8},end:{line:237,column:136}},"79":{start:{line:240,column:8},end:{line:240,column:28}},"80":{start:{line:241,column:8},end:{line:241,column:39}},"81":{start:{line:242,column:8},end:{line:242,column:29}},"82":{start:{line:243,column:8},end:{line:243,column:40}},"83":{start:{line:244,column:8},end:{line:244,column:38}},"84":{start:{line:245,column:8},end:{line:245,column:32}},"85":{start:{line:246,column:8},end:{line:246,column:34}},"86":{start:{line:247,column:8},end:{line:247,column:326}},"87":{start:{line:250,column:30},end:{line:250,column:75}},"88":{start:{line:251,column:35},end:{line:251,column:102}},"89":{start:{line:251,column:47},end:{line:251,column:101}},"90":{start:{line:252,column:8},end:{line:269,column:9}},"91":{start:{line:254,column:16},end:{line:254,column:95}},"92":{start:{line:255,column:16},end:{line:255,column:94}},"93":{start:{line:256,column:16},end:{line:256,column:22}},"94":{start:{line:258,column:16},end:{line:258,column:101}},"95":{start:{line:259,column:16},end:{line:259,column:92}},"96":{start:{line:260,column:16},end:{line:260,column:22}},"97":{start:{line:262,column:16},end:{line:262,column:77}},"98":{start:{line:263,column:16},end:{line:263,column:22}},"99":{start:{line:265,column:16},end:{line:265,column:77}},"100":{start:{line:266,column:16},end:{line:266,column:22}},"101":{start:{line:268,column:16},end:{line:268,column:22}},"102":{start:{line:270,column:8},end:{line:270,column:36}},"103":{start:{line:273,column:30},end:{line:276,column:9}},"104":{start:{line:274,column:12},end:{line:274,column:71}},"105":{start:{line:275,column:12},end:{line:275,column:66}},"106":{start:{line:277,column:8},end:{line:282,column:9}},"107":{start:{line:278,column:12},end:{line:278,column:42}},"108":{start:{line:281,column:12},end:{line:281,column:45}},"109":{start:{line:285,column:0},end:{line:285,column:28}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:18},end:{line:9,column:5}},line:5},"1":{name:"(anonymous_1)",decl:{start:{line:10,column:4},end:{line:10,column:5}},loc:{start:{line:10,column:20},end:{line:29,column:5}},line:10},"2":{name:"(anonymous_2)",decl:{start:{line:30,column:4},end:{line:30,column:5}},loc:{start:{line:30,column:21},end:{line:90,column:5}},line:30},"3":{name:"(anonymous_3)",decl:{start:{line:91,column:4},end:{line:91,column:5}},loc:{start:{line:91,column:19},end:{line:122,column:5}},line:91},"4":{name:"(anonymous_4)",decl:{start:{line:123,column:4},end:{line:123,column:5}},loc:{start:{line:123,column:20},end:{line:163,column:5}},line:123},"5":{name:"(anonymous_5)",decl:{start:{line:164,column:4},end:{line:164,column:5}},loc:{start:{line:164,column:23},end:{line:185,column:5}},line:164},"6":{name:"(anonymous_6)",decl:{start:{line:186,column:4},end:{line:186,column:5}},loc:{start:{line:186,column:25},end:{line:196,column:5}},line:186},"7":{name:"(anonymous_7)",decl:{start:{line:197,column:4},end:{line:197,column:5}},loc:{start:{line:197,column:40},end:{line:207,column:5}},line:197},"8":{name:"(anonymous_8)",decl:{start:{line:199,column:41},end:{line:199,column:42}},loc:{start:{line:199,column:55},end:{line:201,column:9}},line:199},"9":{name:"(anonymous_9)",decl:{start:{line:208,column:4},end:{line:208,column:5}},loc:{start:{line:208,column:19},end:{line:210,column:5}},line:208},"10":{name:"(anonymous_10)",decl:{start:{line:211,column:4},end:{line:211,column:5}},loc:{start:{line:211,column:30},end:{line:218,column:5}},line:211},"11":{name:"(anonymous_11)",decl:{start:{line:219,column:4},end:{line:219,column:5}},loc:{start:{line:219,column:20},end:{line:222,column:5}},line:219},"12":{name:"(anonymous_12)",decl:{start:{line:223,column:4},end:{line:223,column:5}},loc:{start:{line:223,column:31},end:{line:226,column:5}},line:223},"13":{name:"(anonymous_13)",decl:{start:{line:227,column:4},end:{line:227,column:5}},loc:{start:{line:227,column:29},end:{line:230,column:5}},line:227},"14":{name:"(anonymous_14)",decl:{start:{line:231,column:4},end:{line:231,column:5}},loc:{start:{line:231,column:23},end:{line:234,column:5}},line:231},"15":{name:"(anonymous_15)",decl:{start:{line:235,column:4},end:{line:235,column:5}},loc:{start:{line:235,column:25},end:{line:238,column:5}},line:235},"16":{name:"(anonymous_16)",decl:{start:{line:239,column:4},end:{line:239,column:5}},loc:{start:{line:239,column:22},end:{line:248,column:5}},line:239},"17":{name:"(anonymous_17)",decl:{start:{line:249,column:4},end:{line:249,column:5}},loc:{start:{line:249,column:31},end:{line:271,column:5}},line:249},"18":{name:"(anonymous_18)",decl:{start:{line:251,column:35},end:{line:251,column:36}},loc:{start:{line:251,column:47},end:{line:251,column:101}},line:251},"19":{name:"(anonymous_19)",decl:{start:{line:272,column:4},end:{line:272,column:5}},loc:{start:{line:272,column:33},end:{line:283,column:5}},line:272},"20":{name:"(anonymous_20)",decl:{start:{line:273,column:30},end:{line:273,column:31}},loc:{start:{line:273,column:49},end:{line:276,column:9}},line:273}},branchMap:{"0":{loc:{start:{line:202,column:8},end:{line:203,column:53}},type:"if",locations:[{start:{line:202,column:8},end:{line:203,column:53}},{start:{line:202,column:8},end:{line:203,column:53}}],line:202},"1":{loc:{start:{line:204,column:8},end:{line:205,column:84}},type:"if",locations:[{start:{line:204,column:8},end:{line:205,column:84}},{start:{line:204,column:8},end:{line:205,column:84}}],line:204},"2":{loc:{start:{line:250,column:30},end:{line:250,column:75}},type:"binary-expr",locations:[{start:{line:250,column:30},end:{line:250,column:51}},{start:{line:250,column:55},end:{line:250,column:75}}],line:250},"3":{loc:{start:{line:251,column:47},end:{line:251,column:101}},type:"cond-expr",locations:[{start:{line:251,column:63},end:{line:251,column:93}},{start:{line:251,column:96},end:{line:251,column:101}}],line:251},"4":{loc:{start:{line:252,column:8},end:{line:269,column:9}},type:"switch",locations:[{start:{line:253,column:12},end:{line:256,column:22}},{start:{line:257,column:12},end:{line:260,column:22}},{start:{line:261,column:12},end:{line:263,column:22}},{start:{line:264,column:12},end:{line:266,column:22}},{start:{line:267,column:12},end:{line:268,column:22}}],line:252},"5":{loc:{start:{line:277,column:8},end:{line:282,column:9}},type:"if",locations:[{start:{line:277,column:8},end:{line:282,column:9}},{start:{line:277,column:8},end:{line:282,column:9}}],line:277}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0,0,0],"5":[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SideMenu\\SideMenu.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SideMenu\\SideMenu.ts"],names:[],mappings:"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",sourcesContent:["import { RefreshData } from '../types';\r\nimport { ElementParams, SideMenuElements } from './types';\r\n\r\nexport class SideMenu {\r\n  readonly sideMenuElements: SideMenuElements;\r\n\r\n  public isInputChanges = false;\r\n\r\n  constructor() {\r\n    this.sideMenuElements = {};\r\n    this.initializeSideMenu();\r\n  }\r\n\r\n  private createOutputs(): void {\r\n    this.sideMenuElements.currentValuesWrapper = SideMenu.createElement({\r\n      name: 'div',\r\n      cssClasses: ['goby-side-menu__item-wrapper'],\r\n    }) as HTMLDivElement;\r\n    this.sideMenuElements.currentValuesObjective = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-objective'],\r\n      text: '\u0422\u0435\u043A\u0443\u0449\u0435\u0435 \u0437\u0430\u043D\u0447\u0435\u043D\u0438\u0435: ',\r\n    }) as HTMLSpanElement;\r\n    this.sideMenuElements.fromOutput = SideMenu.createElement({\r\n      name: 'output',\r\n      cssClasses: ['goby-side-menu__value', 'goby-side-menu__value_type_from'],\r\n    }) as HTMLOutputElement;\r\n    this.sideMenuElements.toOutput = SideMenu.createElement({\r\n      name: 'output',\r\n      cssClasses: ['goby-side-menu__value', 'goby-side-menu__value_type_to'],\r\n      attr: { name: 'style', value: 'display: inline' },\r\n    }) as HTMLOutputElement;\r\n  }\r\n\r\n  private createWrappers(): void {\r\n    this.sideMenuElements.toWrapper = SideMenu.createElement({\r\n      name: 'div',\r\n      cssClasses: ['goby-side-menu__item-wrapper'],\r\n    }) as HTMLDivElement;\r\n\r\n    this.sideMenuElements.toToggleWrapper = SideMenu.createElement({\r\n      name: 'label',\r\n      cssClasses: ['goby-side-menu__item-toggle-wrapper'],\r\n    }) as HTMLLabelElement;\r\n\r\n    this.sideMenuElements.inputWrapper = SideMenu.createElement({\r\n      name: 'div',\r\n      cssClasses: ['goby-side-menu__item-wrapper'],\r\n    }) as HTMLDivElement;\r\n\r\n    this.sideMenuElements.fromInputWrapper = SideMenu.createElement({\r\n      name: 'label',\r\n      cssClasses: ['goby-side-menu__input-wrapper'],\r\n      text: '\u041E\u0442: ',\r\n    }) as HTMLLabelElement;\r\n\r\n    this.sideMenuElements.stepInputWrapper = SideMenu.createElement({\r\n      name: 'label',\r\n      cssClasses: ['goby-side-menu__input-wrapper'],\r\n      text: '\u0428\u0430\u0433: ',\r\n    }) as HTMLLabelElement;\r\n\r\n    this.sideMenuElements.minInputWrapper = SideMenu.createElement({\r\n      name: 'label',\r\n      cssClasses: ['goby-side-menu__input-wrapper'],\r\n      text: '\u041C\u0438\u043D: ',\r\n    }) as HTMLLabelElement;\r\n\r\n    this.sideMenuElements.maxInputWrapper = SideMenu.createElement({\r\n      name: 'label',\r\n      cssClasses: ['goby-side-menu__input-wrapper'],\r\n      text: '\u041C\u0430\u043A\u0441: ',\r\n    }) as HTMLLabelElement;\r\n\r\n    this.sideMenuElements.toInputWrapper = SideMenu.createElement({\r\n      name: 'label',\r\n      cssClasses: ['goby-side-menu__input-wrapper'],\r\n      text: '\u0414\u043E: ',\r\n      attr: { name: 'style', value: 'display: block' },\r\n    }) as HTMLLabelElement;\r\n\r\n    this.sideMenuElements.handleValuesWrapper = SideMenu.createElement({\r\n      name: 'div',\r\n      cssClasses: ['goby-side-menu__item-wrapper'],\r\n    }) as HTMLDivElement;\r\n\r\n    this.sideMenuElements.valueScaleWrapper = SideMenu.createElement({\r\n      name: 'div',\r\n      cssClasses: ['goby-side-menu__item-wrapper'],\r\n    }) as HTMLDivElement;\r\n\r\n    this.sideMenuElements.planeWrapper = SideMenu.createElement({\r\n      name: 'div',\r\n      cssClasses: ['goby-side-menu__item-wrapper'],\r\n    }) as HTMLDivElement;\r\n\r\n    this.sideMenuElements.integerWrapper = SideMenu.createElement({\r\n      name: 'div',\r\n      cssClasses: ['goby-side-menu__item-wrapper'],\r\n    }) as HTMLDivElement;\r\n\r\n    const labelElement: Node = this.sideMenuElements.toToggleWrapper.cloneNode();\r\n    this.sideMenuElements.handleValuesToggleWrapper = labelElement.cloneNode() as HTMLLabelElement;\r\n    this.sideMenuElements.valueScaleToggleWrapper = labelElement.cloneNode() as HTMLLabelElement;\r\n    this.sideMenuElements.planeToggleWrapper = labelElement.cloneNode() as HTMLLabelElement;\r\n    this.sideMenuElements.integerToggleWrapper = labelElement.cloneNode() as HTMLLabelElement;\r\n  }\r\n\r\n  private createInputs(): void {\r\n    this.sideMenuElements.inputObjective = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-objective'],\r\n      text: '\u0418\u0437\u043C\u0435\u043D\u0438\u0442\u044C \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: ',\r\n    }) as HTMLSpanElement;\r\n    this.sideMenuElements.fromInput = SideMenu.createElement({\r\n      name: 'input',\r\n      cssClasses: ['goby-side-menu__input'],\r\n      attr: { name: 'type', value: 'number' },\r\n    }) as HTMLInputElement;\r\n    this.sideMenuElements.toInput = SideMenu.createElement({\r\n      name: 'input',\r\n      cssClasses: ['goby-side-menu__input'],\r\n      attr: { name: 'type', value: 'number' },\r\n    }) as HTMLInputElement;\r\n    this.sideMenuElements.stepInput = SideMenu.createElement({\r\n      name: 'input',\r\n      cssClasses: ['goby-side-menu__input'],\r\n      attr: { name: 'type', value: 'number' },\r\n    }) as HTMLInputElement;\r\n    this.sideMenuElements.minimumInput = SideMenu.createElement({\r\n      name: 'input',\r\n      cssClasses: ['goby-side-menu__input'],\r\n      attr: { name: 'type', value: 'number' },\r\n    }) as HTMLInputElement;\r\n    this.sideMenuElements.maximumInput = SideMenu.createElement({\r\n      name: 'input',\r\n      cssClasses: ['goby-side-menu__input'],\r\n      attr: { name: 'type', value: 'number' },\r\n    }) as HTMLInputElement;\r\n  }\r\n\r\n  private createToggles():void {\r\n    this.sideMenuElements.toToggleObjective = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-objective'],\r\n      text: '\u0412\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0432\u0442\u043E\u0440\u043E\u0439 \u043F\u043E\u043B\u0437\u0443\u043D\u043E\u043A: ',\r\n    }) as HTMLSpanElement;\r\n\r\n    this.sideMenuElements.toToggle = SideMenu.createElement({\r\n      name: 'input',\r\n      cssClasses: ['goby-side-menu__item-toggle'],\r\n      attr: { name: 'type', value: 'checkbox' },\r\n    }) as HTMLInputElement;\r\n    const inputElement: Node = this.sideMenuElements!.toToggle!.cloneNode();\r\n    this.sideMenuElements.handleValuesToggle = inputElement.cloneNode() as HTMLInputElement;\r\n    this.sideMenuElements.valueScaleToggle = inputElement.cloneNode() as HTMLInputElement;\r\n    this.sideMenuElements.integerToggle = inputElement.cloneNode() as HTMLInputElement;\r\n\r\n    this.sideMenuElements.toToggleBorder = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-toggle-border'],\r\n    }) as HTMLSpanElement;\r\n\r\n    this.sideMenuElements.handleValuesToggleBorder = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-toggle-border'],\r\n    }) as HTMLSpanElement;\r\n\r\n    this.sideMenuElements.valueScaleToggleBorder = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-toggle-border'],\r\n    }) as HTMLSpanElement;\r\n\r\n    this.sideMenuElements.integerToggleBorder = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-toggle-border'],\r\n    }) as HTMLSpanElement;\r\n\r\n    this.sideMenuElements.planeToggle = SideMenu.createElement({\r\n      name: 'input',\r\n      cssClasses: ['goby-side-menu__item-toggle'],\r\n      attr: { name: 'type', value: 'checkbox' },\r\n    }) as HTMLInputElement;\r\n\r\n    this.sideMenuElements.planeToggleBorder = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-toggle-border'],\r\n    }) as HTMLSpanElement;\r\n  }\r\n\r\n  private createObjectives(): void {\r\n    this.sideMenuElements.handleValuesObjective = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-objective'],\r\n      text: '\u0412\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F \u043F\u043E\u0434 \u043F\u043E\u043B\u0437\u0443\u043D\u043A\u0430\u043C\u0438: ',\r\n    }) as HTMLSpanElement;\r\n\r\n    this.sideMenuElements.valueScaleObjective = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-objective'],\r\n      text: '\u0412\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0448\u043A\u0430\u043B\u0443 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439: ',\r\n    }) as HTMLSpanElement;\r\n\r\n    this.sideMenuElements.planeObjective = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-objective'],\r\n      text: '\u0418\u0437\u043C\u0435\u043D\u0438\u0442\u044C \u043F\u043B\u043E\u0441\u043A\u043E\u0441\u0442\u044C: ',\r\n    }) as HTMLSpanElement;\r\n\r\n    this.sideMenuElements.integerObjective = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-objective'],\r\n      text: '\u0422\u043E\u043B\u044C\u043A\u043E \u0446\u0435\u043B\u044B\u0435 \u0447\u0438\u0441\u043B\u0430: ',\r\n    }) as HTMLSpanElement;\r\n  }\r\n\r\n  private initializeSideMenu(): void {\r\n    this.createOutputs();\r\n    this.createWrappers();\r\n    this.createInputs();\r\n    this.createToggles();\r\n    this.createObjectives();\r\n\r\n    this.sideMenuElements.sideMenuContainer = SideMenu.createElement({\r\n      name: 'div',\r\n      cssClasses: ['goby-side-menu'],\r\n    }) as HTMLDivElement;\r\n  }\r\n\r\n  private static createElement(elementParams: ElementParams): HTMLSpanElement {\r\n    const element: HTMLElement = document.createElement(elementParams.name);\r\n\r\n    elementParams.cssClasses.forEach((cssClass: string): void => {\r\n      element.classList.add(cssClass);\r\n    });\r\n\r\n    if (elementParams.text) element.textContent = elementParams.text;\r\n    if (elementParams.attr) element.setAttribute(elementParams.attr.name, elementParams.attr.value);\r\n\r\n    return element;\r\n  }\r\n\r\n  private wrapsOutputs(): void {\r\n    this.sideMenuElements.currentValuesWrapper!.append(\r\n      this.sideMenuElements.currentValuesObjective!,\r\n      this.sideMenuElements.fromOutput!,\r\n      this.sideMenuElements.toOutput!,\r\n    );\r\n  }\r\n\r\n  private wrapsElementsInWrappers(): void {\r\n    this.sideMenuElements.fromInputWrapper!.append(this.sideMenuElements.fromInput!);\r\n    this.sideMenuElements.toInputWrapper!.append(this.sideMenuElements.toInput!);\r\n    this.sideMenuElements.stepInputWrapper!.append(this.sideMenuElements.stepInput!);\r\n    this.sideMenuElements.minInputWrapper!.append(this.sideMenuElements.minimumInput!);\r\n    this.sideMenuElements.maxInputWrapper!.append(this.sideMenuElements.maximumInput!);\r\n    this.sideMenuElements.inputWrapper!.append(\r\n      this.sideMenuElements.inputObjective!,\r\n      this.sideMenuElements.fromInputWrapper!,\r\n      this.sideMenuElements.toInputWrapper!,\r\n      this.sideMenuElements.stepInputWrapper!,\r\n      this.sideMenuElements.minInputWrapper!,\r\n      this.sideMenuElements.maxInputWrapper!,\r\n    );\r\n  }\r\n\r\n  private wrapsToToggle(): void {\r\n    this.sideMenuElements.toToggleWrapper!.append(\r\n      this.sideMenuElements.toToggle!,\r\n      this.sideMenuElements.toToggleBorder!,\r\n    );\r\n    this.sideMenuElements.toWrapper!.append(\r\n      this.sideMenuElements.toToggleObjective!,\r\n      this.sideMenuElements.toToggleWrapper!,\r\n    );\r\n  }\r\n\r\n  private wrapsHandlesValuesToggle(): void {\r\n    this.sideMenuElements.handleValuesToggleWrapper!.append(\r\n      this.sideMenuElements.handleValuesToggle!,\r\n      this.sideMenuElements.handleValuesToggleBorder!,\r\n    );\r\n    this.sideMenuElements.handleValuesWrapper!.append(\r\n      this.sideMenuElements.handleValuesObjective!,\r\n      this.sideMenuElements.handleValuesToggleWrapper!,\r\n    );\r\n  }\r\n\r\n  private wrapsValuesScaleToggle(): void {\r\n    this.sideMenuElements.valueScaleToggleWrapper!.append(\r\n      this.sideMenuElements.valueScaleToggle!,\r\n      this.sideMenuElements.valueScaleToggleBorder!,\r\n    );\r\n    this.sideMenuElements.valueScaleWrapper!.append(\r\n      this.sideMenuElements.valueScaleObjective!,\r\n      this.sideMenuElements.valueScaleToggleWrapper!,\r\n    );\r\n  }\r\n\r\n  private wrapsPlaneToggle(): void {\r\n    this.sideMenuElements.planeToggleWrapper!.append(\r\n      this.sideMenuElements.planeToggle!,\r\n      this.sideMenuElements.planeToggleBorder!,\r\n    );\r\n    this.sideMenuElements.planeWrapper!.append(\r\n      this.sideMenuElements.planeObjective!,\r\n      this.sideMenuElements.planeToggleWrapper!,\r\n    );\r\n  }\r\n\r\n  private wrapsIntegerToggle(): void {\r\n    this.sideMenuElements.integerToggleWrapper!.append(\r\n      this.sideMenuElements.integerToggle!,\r\n      this.sideMenuElements.integerToggleBorder!,\r\n    );\r\n    this.sideMenuElements.integerWrapper!.append(\r\n      this.sideMenuElements.integerObjective!,\r\n      this.sideMenuElements.integerToggleWrapper!,\r\n    );\r\n  }\r\n\r\n  public collectSideMenu(): void {\r\n    this.wrapsOutputs();\r\n    this.wrapsElementsInWrappers();\r\n    this.wrapsToToggle();\r\n    this.wrapsHandlesValuesToggle();\r\n    this.wrapsValuesScaleToggle();\r\n    this.wrapsPlaneToggle();\r\n    this.wrapsIntegerToggle();\r\n\r\n    this.sideMenuElements.sideMenuContainer!.append(\r\n      this.sideMenuElements.currentValuesWrapper!,\r\n      this.sideMenuElements.inputWrapper!,\r\n      this.sideMenuElements.toWrapper!,\r\n      this.sideMenuElements.handleValuesWrapper!,\r\n      this.sideMenuElements.valueScaleWrapper!,\r\n      this.sideMenuElements.planeWrapper!,\r\n      this.sideMenuElements.integerWrapper!,\r\n    );\r\n  }\r\n\r\n  public refreshValues(refreshData: RefreshData): void {\r\n    const isRoundUpNeed = refreshData.isToFixed && !this.isInputChanges;\r\n    const bringsValuesToForm = (value: string): string => (\r\n      isRoundUpNeed ? `${Math.round(Number(value))}` : value\r\n    );\r\n\r\n    switch (refreshData.target) {\r\n      case 'from':\r\n        this.sideMenuElements.fromOutput!.value = bringsValuesToForm(refreshData.value);\r\n        this.sideMenuElements.fromInput!.value = bringsValuesToForm(refreshData.value);\r\n        break;\r\n      case 'to':\r\n        this.sideMenuElements.toOutput!.value = ` - ${bringsValuesToForm(refreshData.value)}`;\r\n        this.sideMenuElements.toInput!.value = bringsValuesToForm(refreshData.value);\r\n        break;\r\n      case 'min':\r\n        this.sideMenuElements.minimumInput!.value = refreshData.value;\r\n        break;\r\n      case 'max':\r\n        this.sideMenuElements.maximumInput!.value = refreshData.value;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    this.isInputChanges = false;\r\n  }\r\n\r\n  public hideToValues(isHideToValues: boolean): void {\r\n    const changeDisplay = (input: string, output: string): void => {\r\n      this.sideMenuElements.toInputWrapper!.style.display = input;\r\n      this.sideMenuElements.toOutput!.style.display = output;\r\n    };\r\n\r\n    if (!isHideToValues) {\r\n      changeDisplay('none', 'none');\r\n    } else {\r\n      changeDisplay('block', 'inline');\r\n    }\r\n  }\r\n}\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_2mfzjxt4aw.s[0]++;Object.defineProperty(exports, "__esModule", ({value:true}));cov_2mfzjxt4aw.s[1]++;exports.SideMenu=void 0;class SideMenu{constructor(){cov_2mfzjxt4aw.f[0]++;cov_2mfzjxt4aw.s[2]++;this.isInputChanges=false;cov_2mfzjxt4aw.s[3]++;this.sideMenuElements={};cov_2mfzjxt4aw.s[4]++;this.initializeSideMenu();}createOutputs(){cov_2mfzjxt4aw.f[1]++;cov_2mfzjxt4aw.s[5]++;this.sideMenuElements.currentValuesWrapper=SideMenu.createElement({name:'div',cssClasses:['goby-side-menu__item-wrapper']});cov_2mfzjxt4aw.s[6]++;this.sideMenuElements.currentValuesObjective=SideMenu.createElement({name:'span',cssClasses:['goby-side-menu__item-objective'],text:'Текущее занчение: '});cov_2mfzjxt4aw.s[7]++;this.sideMenuElements.fromOutput=SideMenu.createElement({name:'output',cssClasses:['goby-side-menu__value','goby-side-menu__value_type_from']});cov_2mfzjxt4aw.s[8]++;this.sideMenuElements.toOutput=SideMenu.createElement({name:'output',cssClasses:['goby-side-menu__value','goby-side-menu__value_type_to'],attr:{name:'style',value:'display: inline'}});}createWrappers(){cov_2mfzjxt4aw.f[2]++;cov_2mfzjxt4aw.s[9]++;this.sideMenuElements.toWrapper=SideMenu.createElement({name:'div',cssClasses:['goby-side-menu__item-wrapper']});cov_2mfzjxt4aw.s[10]++;this.sideMenuElements.toToggleWrapper=SideMenu.createElement({name:'label',cssClasses:['goby-side-menu__item-toggle-wrapper']});cov_2mfzjxt4aw.s[11]++;this.sideMenuElements.inputWrapper=SideMenu.createElement({name:'div',cssClasses:['goby-side-menu__item-wrapper']});cov_2mfzjxt4aw.s[12]++;this.sideMenuElements.fromInputWrapper=SideMenu.createElement({name:'label',cssClasses:['goby-side-menu__input-wrapper'],text:'От: '});cov_2mfzjxt4aw.s[13]++;this.sideMenuElements.stepInputWrapper=SideMenu.createElement({name:'label',cssClasses:['goby-side-menu__input-wrapper'],text:'Шаг: '});cov_2mfzjxt4aw.s[14]++;this.sideMenuElements.minInputWrapper=SideMenu.createElement({name:'label',cssClasses:['goby-side-menu__input-wrapper'],text:'Мин: '});cov_2mfzjxt4aw.s[15]++;this.sideMenuElements.maxInputWrapper=SideMenu.createElement({name:'label',cssClasses:['goby-side-menu__input-wrapper'],text:'Макс: '});cov_2mfzjxt4aw.s[16]++;this.sideMenuElements.toInputWrapper=SideMenu.createElement({name:'label',cssClasses:['goby-side-menu__input-wrapper'],text:'До: ',attr:{name:'style',value:'display: block'}});cov_2mfzjxt4aw.s[17]++;this.sideMenuElements.handleValuesWrapper=SideMenu.createElement({name:'div',cssClasses:['goby-side-menu__item-wrapper']});cov_2mfzjxt4aw.s[18]++;this.sideMenuElements.valueScaleWrapper=SideMenu.createElement({name:'div',cssClasses:['goby-side-menu__item-wrapper']});cov_2mfzjxt4aw.s[19]++;this.sideMenuElements.planeWrapper=SideMenu.createElement({name:'div',cssClasses:['goby-side-menu__item-wrapper']});cov_2mfzjxt4aw.s[20]++;this.sideMenuElements.integerWrapper=SideMenu.createElement({name:'div',cssClasses:['goby-side-menu__item-wrapper']});const labelElement=(cov_2mfzjxt4aw.s[21]++,this.sideMenuElements.toToggleWrapper.cloneNode());cov_2mfzjxt4aw.s[22]++;this.sideMenuElements.handleValuesToggleWrapper=labelElement.cloneNode();cov_2mfzjxt4aw.s[23]++;this.sideMenuElements.valueScaleToggleWrapper=labelElement.cloneNode();cov_2mfzjxt4aw.s[24]++;this.sideMenuElements.planeToggleWrapper=labelElement.cloneNode();cov_2mfzjxt4aw.s[25]++;this.sideMenuElements.integerToggleWrapper=labelElement.cloneNode();}createInputs(){cov_2mfzjxt4aw.f[3]++;cov_2mfzjxt4aw.s[26]++;this.sideMenuElements.inputObjective=SideMenu.createElement({name:'span',cssClasses:['goby-side-menu__item-objective'],text:'Изменить значение: '});cov_2mfzjxt4aw.s[27]++;this.sideMenuElements.fromInput=SideMenu.createElement({name:'input',cssClasses:['goby-side-menu__input'],attr:{name:'type',value:'number'}});cov_2mfzjxt4aw.s[28]++;this.sideMenuElements.toInput=SideMenu.createElement({name:'input',cssClasses:['goby-side-menu__input'],attr:{name:'type',value:'number'}});cov_2mfzjxt4aw.s[29]++;this.sideMenuElements.stepInput=SideMenu.createElement({name:'input',cssClasses:['goby-side-menu__input'],attr:{name:'type',value:'number'}});cov_2mfzjxt4aw.s[30]++;this.sideMenuElements.minimumInput=SideMenu.createElement({name:'input',cssClasses:['goby-side-menu__input'],attr:{name:'type',value:'number'}});cov_2mfzjxt4aw.s[31]++;this.sideMenuElements.maximumInput=SideMenu.createElement({name:'input',cssClasses:['goby-side-menu__input'],attr:{name:'type',value:'number'}});}createToggles(){cov_2mfzjxt4aw.f[4]++;cov_2mfzjxt4aw.s[32]++;this.sideMenuElements.toToggleObjective=SideMenu.createElement({name:'span',cssClasses:['goby-side-menu__item-objective'],text:'Включить второй ползунок: '});cov_2mfzjxt4aw.s[33]++;this.sideMenuElements.toToggle=SideMenu.createElement({name:'input',cssClasses:['goby-side-menu__item-toggle'],attr:{name:'type',value:'checkbox'}});const inputElement=(cov_2mfzjxt4aw.s[34]++,this.sideMenuElements.toToggle.cloneNode());cov_2mfzjxt4aw.s[35]++;this.sideMenuElements.handleValuesToggle=inputElement.cloneNode();cov_2mfzjxt4aw.s[36]++;this.sideMenuElements.valueScaleToggle=inputElement.cloneNode();cov_2mfzjxt4aw.s[37]++;this.sideMenuElements.integerToggle=inputElement.cloneNode();cov_2mfzjxt4aw.s[38]++;this.sideMenuElements.toToggleBorder=SideMenu.createElement({name:'span',cssClasses:['goby-side-menu__item-toggle-border']});cov_2mfzjxt4aw.s[39]++;this.sideMenuElements.handleValuesToggleBorder=SideMenu.createElement({name:'span',cssClasses:['goby-side-menu__item-toggle-border']});cov_2mfzjxt4aw.s[40]++;this.sideMenuElements.valueScaleToggleBorder=SideMenu.createElement({name:'span',cssClasses:['goby-side-menu__item-toggle-border']});cov_2mfzjxt4aw.s[41]++;this.sideMenuElements.integerToggleBorder=SideMenu.createElement({name:'span',cssClasses:['goby-side-menu__item-toggle-border']});cov_2mfzjxt4aw.s[42]++;this.sideMenuElements.planeToggle=SideMenu.createElement({name:'input',cssClasses:['goby-side-menu__item-toggle'],attr:{name:'type',value:'checkbox'}});cov_2mfzjxt4aw.s[43]++;this.sideMenuElements.planeToggleBorder=SideMenu.createElement({name:'span',cssClasses:['goby-side-menu__item-toggle-border']});}createObjectives(){cov_2mfzjxt4aw.f[5]++;cov_2mfzjxt4aw.s[44]++;this.sideMenuElements.handleValuesObjective=SideMenu.createElement({name:'span',cssClasses:['goby-side-menu__item-objective'],text:'Включить значения под ползунками: '});cov_2mfzjxt4aw.s[45]++;this.sideMenuElements.valueScaleObjective=SideMenu.createElement({name:'span',cssClasses:['goby-side-menu__item-objective'],text:'Включить шкалу значений: '});cov_2mfzjxt4aw.s[46]++;this.sideMenuElements.planeObjective=SideMenu.createElement({name:'span',cssClasses:['goby-side-menu__item-objective'],text:'Изменить плоскость: '});cov_2mfzjxt4aw.s[47]++;this.sideMenuElements.integerObjective=SideMenu.createElement({name:'span',cssClasses:['goby-side-menu__item-objective'],text:'Только целые числа: '});}initializeSideMenu(){cov_2mfzjxt4aw.f[6]++;cov_2mfzjxt4aw.s[48]++;this.createOutputs();cov_2mfzjxt4aw.s[49]++;this.createWrappers();cov_2mfzjxt4aw.s[50]++;this.createInputs();cov_2mfzjxt4aw.s[51]++;this.createToggles();cov_2mfzjxt4aw.s[52]++;this.createObjectives();cov_2mfzjxt4aw.s[53]++;this.sideMenuElements.sideMenuContainer=SideMenu.createElement({name:'div',cssClasses:['goby-side-menu']});}static createElement(elementParams){cov_2mfzjxt4aw.f[7]++;const element=(cov_2mfzjxt4aw.s[54]++,document.createElement(elementParams.name));cov_2mfzjxt4aw.s[55]++;elementParams.cssClasses.forEach(cssClass=>{cov_2mfzjxt4aw.f[8]++;cov_2mfzjxt4aw.s[56]++;element.classList.add(cssClass);});cov_2mfzjxt4aw.s[57]++;if(elementParams.text){cov_2mfzjxt4aw.b[0][0]++;cov_2mfzjxt4aw.s[58]++;element.textContent=elementParams.text;}else{cov_2mfzjxt4aw.b[0][1]++;}cov_2mfzjxt4aw.s[59]++;if(elementParams.attr){cov_2mfzjxt4aw.b[1][0]++;cov_2mfzjxt4aw.s[60]++;element.setAttribute(elementParams.attr.name,elementParams.attr.value);}else{cov_2mfzjxt4aw.b[1][1]++;}cov_2mfzjxt4aw.s[61]++;return element;}wrapsOutputs(){cov_2mfzjxt4aw.f[9]++;cov_2mfzjxt4aw.s[62]++;this.sideMenuElements.currentValuesWrapper.append(this.sideMenuElements.currentValuesObjective,this.sideMenuElements.fromOutput,this.sideMenuElements.toOutput);}wrapsElementsInWrappers(){cov_2mfzjxt4aw.f[10]++;cov_2mfzjxt4aw.s[63]++;this.sideMenuElements.fromInputWrapper.append(this.sideMenuElements.fromInput);cov_2mfzjxt4aw.s[64]++;this.sideMenuElements.toInputWrapper.append(this.sideMenuElements.toInput);cov_2mfzjxt4aw.s[65]++;this.sideMenuElements.stepInputWrapper.append(this.sideMenuElements.stepInput);cov_2mfzjxt4aw.s[66]++;this.sideMenuElements.minInputWrapper.append(this.sideMenuElements.minimumInput);cov_2mfzjxt4aw.s[67]++;this.sideMenuElements.maxInputWrapper.append(this.sideMenuElements.maximumInput);cov_2mfzjxt4aw.s[68]++;this.sideMenuElements.inputWrapper.append(this.sideMenuElements.inputObjective,this.sideMenuElements.fromInputWrapper,this.sideMenuElements.toInputWrapper,this.sideMenuElements.stepInputWrapper,this.sideMenuElements.minInputWrapper,this.sideMenuElements.maxInputWrapper);}wrapsToToggle(){cov_2mfzjxt4aw.f[11]++;cov_2mfzjxt4aw.s[69]++;this.sideMenuElements.toToggleWrapper.append(this.sideMenuElements.toToggle,this.sideMenuElements.toToggleBorder);cov_2mfzjxt4aw.s[70]++;this.sideMenuElements.toWrapper.append(this.sideMenuElements.toToggleObjective,this.sideMenuElements.toToggleWrapper);}wrapsHandlesValuesToggle(){cov_2mfzjxt4aw.f[12]++;cov_2mfzjxt4aw.s[71]++;this.sideMenuElements.handleValuesToggleWrapper.append(this.sideMenuElements.handleValuesToggle,this.sideMenuElements.handleValuesToggleBorder);cov_2mfzjxt4aw.s[72]++;this.sideMenuElements.handleValuesWrapper.append(this.sideMenuElements.handleValuesObjective,this.sideMenuElements.handleValuesToggleWrapper);}wrapsValuesScaleToggle(){cov_2mfzjxt4aw.f[13]++;cov_2mfzjxt4aw.s[73]++;this.sideMenuElements.valueScaleToggleWrapper.append(this.sideMenuElements.valueScaleToggle,this.sideMenuElements.valueScaleToggleBorder);cov_2mfzjxt4aw.s[74]++;this.sideMenuElements.valueScaleWrapper.append(this.sideMenuElements.valueScaleObjective,this.sideMenuElements.valueScaleToggleWrapper);}wrapsPlaneToggle(){cov_2mfzjxt4aw.f[14]++;cov_2mfzjxt4aw.s[75]++;this.sideMenuElements.planeToggleWrapper.append(this.sideMenuElements.planeToggle,this.sideMenuElements.planeToggleBorder);cov_2mfzjxt4aw.s[76]++;this.sideMenuElements.planeWrapper.append(this.sideMenuElements.planeObjective,this.sideMenuElements.planeToggleWrapper);}wrapsIntegerToggle(){cov_2mfzjxt4aw.f[15]++;cov_2mfzjxt4aw.s[77]++;this.sideMenuElements.integerToggleWrapper.append(this.sideMenuElements.integerToggle,this.sideMenuElements.integerToggleBorder);cov_2mfzjxt4aw.s[78]++;this.sideMenuElements.integerWrapper.append(this.sideMenuElements.integerObjective,this.sideMenuElements.integerToggleWrapper);}collectSideMenu(){cov_2mfzjxt4aw.f[16]++;cov_2mfzjxt4aw.s[79]++;this.wrapsOutputs();cov_2mfzjxt4aw.s[80]++;this.wrapsElementsInWrappers();cov_2mfzjxt4aw.s[81]++;this.wrapsToToggle();cov_2mfzjxt4aw.s[82]++;this.wrapsHandlesValuesToggle();cov_2mfzjxt4aw.s[83]++;this.wrapsValuesScaleToggle();cov_2mfzjxt4aw.s[84]++;this.wrapsPlaneToggle();cov_2mfzjxt4aw.s[85]++;this.wrapsIntegerToggle();cov_2mfzjxt4aw.s[86]++;this.sideMenuElements.sideMenuContainer.append(this.sideMenuElements.currentValuesWrapper,this.sideMenuElements.inputWrapper,this.sideMenuElements.toWrapper,this.sideMenuElements.handleValuesWrapper,this.sideMenuElements.valueScaleWrapper,this.sideMenuElements.planeWrapper,this.sideMenuElements.integerWrapper);}refreshValues(refreshData){cov_2mfzjxt4aw.f[17]++;const isRoundUpNeed=(cov_2mfzjxt4aw.s[87]++,(cov_2mfzjxt4aw.b[2][0]++,refreshData.isToFixed)&&(cov_2mfzjxt4aw.b[2][1]++,!this.isInputChanges));cov_2mfzjxt4aw.s[88]++;const bringsValuesToForm=value=>{cov_2mfzjxt4aw.f[18]++;cov_2mfzjxt4aw.s[89]++;return isRoundUpNeed?(cov_2mfzjxt4aw.b[3][0]++,`${Math.round(Number(value))}`):(cov_2mfzjxt4aw.b[3][1]++,value);};cov_2mfzjxt4aw.s[90]++;switch(refreshData.target){case'from':cov_2mfzjxt4aw.b[4][0]++;cov_2mfzjxt4aw.s[91]++;this.sideMenuElements.fromOutput.value=bringsValuesToForm(refreshData.value);cov_2mfzjxt4aw.s[92]++;this.sideMenuElements.fromInput.value=bringsValuesToForm(refreshData.value);cov_2mfzjxt4aw.s[93]++;break;case'to':cov_2mfzjxt4aw.b[4][1]++;cov_2mfzjxt4aw.s[94]++;this.sideMenuElements.toOutput.value=` - ${bringsValuesToForm(refreshData.value)}`;cov_2mfzjxt4aw.s[95]++;this.sideMenuElements.toInput.value=bringsValuesToForm(refreshData.value);cov_2mfzjxt4aw.s[96]++;break;case'min':cov_2mfzjxt4aw.b[4][2]++;cov_2mfzjxt4aw.s[97]++;this.sideMenuElements.minimumInput.value=refreshData.value;cov_2mfzjxt4aw.s[98]++;break;case'max':cov_2mfzjxt4aw.b[4][3]++;cov_2mfzjxt4aw.s[99]++;this.sideMenuElements.maximumInput.value=refreshData.value;cov_2mfzjxt4aw.s[100]++;break;default:cov_2mfzjxt4aw.b[4][4]++;cov_2mfzjxt4aw.s[101]++;break;}cov_2mfzjxt4aw.s[102]++;this.isInputChanges=false;}hideToValues(isHideToValues){cov_2mfzjxt4aw.f[19]++;cov_2mfzjxt4aw.s[103]++;const changeDisplay=(input,output)=>{cov_2mfzjxt4aw.f[20]++;cov_2mfzjxt4aw.s[104]++;this.sideMenuElements.toInputWrapper.style.display=input;cov_2mfzjxt4aw.s[105]++;this.sideMenuElements.toOutput.style.display=output;};cov_2mfzjxt4aw.s[106]++;if(!isHideToValues){cov_2mfzjxt4aw.b[5][0]++;cov_2mfzjxt4aw.s[107]++;changeDisplay('none','none');}else{cov_2mfzjxt4aw.b[5][1]++;cov_2mfzjxt4aw.s[108]++;changeDisplay('block','inline');}}}cov_2mfzjxt4aw.s[109]++;exports.SideMenu=SideMenu;

/***/ }),

/***/ "./src/View/SideMenu/sideMenu.test.ts":
/*!********************************************!*\
  !*** ./src/View/SideMenu/sideMenu.test.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var cov_kjo8tkpmr=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SideMenu\\sideMenu.test.ts",hash="0a0a19f4a2426f17081538afca8d84ab1ec7303f",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SideMenu\\sideMenu.test.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:19},end:{line:3,column:40}},"2":{start:{line:4,column:0},end:{line:34,column:3}},"3":{start:{line:6,column:4},end:{line:8,column:7}},"4":{start:{line:7,column:8},end:{line:7,column:45}},"5":{start:{line:9,column:4},end:{line:11,column:7}},"6":{start:{line:10,column:8},end:{line:10,column:38}},"7":{start:{line:12,column:4},end:{line:15,column:7}},"8":{start:{line:13,column:8},end:{line:13,column:35}},"9":{start:{line:14,column:8},end:{line:14,column:73}},"10":{start:{line:16,column:4},end:{line:20,column:7}},"11":{start:{line:17,column:8},end:{line:17,column:81}},"12":{start:{line:18,column:8},end:{line:18,column:73}},"13":{start:{line:19,column:8},end:{line:19,column:72}},"14":{start:{line:21,column:4},end:{line:25,column:7}},"15":{start:{line:22,column:8},end:{line:22,column:79}},"16":{start:{line:23,column:8},end:{line:23,column:74}},"17":{start:{line:24,column:8},end:{line:24,column:70}},"18":{start:{line:26,column:4},end:{line:33,column:7}},"19":{start:{line:27,column:8},end:{line:27,column:37}},"20":{start:{line:28,column:8},end:{line:28,column:87}},"21":{start:{line:29,column:8},end:{line:29,column:81}},"22":{start:{line:30,column:8},end:{line:30,column:36}},"23":{start:{line:31,column:8},end:{line:31,column:88}},"24":{start:{line:32,column:8},end:{line:32,column:83}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:4,column:21},end:{line:4,column:22}},loc:{start:{line:4,column:27},end:{line:34,column:1}},line:4},"1":{name:"(anonymous_1)",decl:{start:{line:6,column:15},end:{line:6,column:16}},loc:{start:{line:6,column:21},end:{line:8,column:5}},line:6},"2":{name:"(anonymous_2)",decl:{start:{line:9,column:33},end:{line:9,column:34}},loc:{start:{line:9,column:39},end:{line:11,column:5}},line:9},"3":{name:"(anonymous_3)",decl:{start:{line:12,column:34},end:{line:12,column:35}},loc:{start:{line:12,column:40},end:{line:15,column:5}},line:12},"4":{name:"(anonymous_4)",decl:{start:{line:16,column:56},end:{line:16,column:57}},loc:{start:{line:16,column:62},end:{line:20,column:5}},line:16},"5":{name:"(anonymous_5)",decl:{start:{line:21,column:54},end:{line:21,column:55}},loc:{start:{line:21,column:60},end:{line:25,column:5}},line:21},"6":{name:"(anonymous_6)",decl:{start:{line:26,column:65},end:{line:26,column:66}},loc:{start:{line:26,column:71},end:{line:33,column:5}},line:26}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SideMenu\\sideMenu.test.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SideMenu\\sideMenu.test.ts"],names:[],mappings:";;AAAA,yCAAsC;AAEtC,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;IACxB,IAAI,QAAkB,CAAC;IAEvB,UAAU,CAAC,GAAG,EAAE;QACd,QAAQ,GAAG,IAAI,mBAAQ,EAAE,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACjC,QAAQ,CAAC,eAAe,EAAE,CAAC;QAC3B,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC,UAAU,EAAE,CAAC;IACnE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACvD,QAAQ,CAAC,aAAa,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QACzE,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,UAAW,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAClE,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,SAAU,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACrD,QAAQ,CAAC,aAAa,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QACvE,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,QAAS,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACnE,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,OAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;QAChE,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAC7B,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,cAAe,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAChF,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,QAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAE1E,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC5B,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,cAAe,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACjF,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,QAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC9E,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC",sourcesContent:["import { SideMenu } from './SideMenu';\r\n\r\ndescribe('SideMenu', () => {\r\n  let sideMenu: SideMenu;\r\n\r\n  beforeEach(() => {\r\n    sideMenu = new SideMenu();\r\n  });\r\n\r\n  it('SideMenu can be create', () => {\r\n    expect(sideMenu).toBeTruthy();\r\n  });\r\n\r\n  it('SideMenu can be collect', () => {\r\n    sideMenu.collectSideMenu();\r\n    expect(sideMenu.sideMenuElements.sideMenuContainer).toBeTruthy();\r\n  });\r\n\r\n  it('refreshValues() refresh from values correctly', () => {\r\n    sideMenu.refreshValues({ target: 'from', value: '50', isToFixed: true });\r\n    expect(sideMenu.sideMenuElements.fromOutput!.value).toEqual('50');\r\n    expect(sideMenu.sideMenuElements.fromInput!.value).toEqual('50');\r\n  });\r\n\r\n  it('refreshValues() refresh to values correctly', () => {\r\n    sideMenu.refreshValues({ target: 'to', value: '50', isToFixed: true });\r\n    expect(sideMenu.sideMenuElements.toOutput!.value).toEqual(' - 50');\r\n    expect(sideMenu.sideMenuElements.toInput!.value).toEqual('50');\r\n  });\r\n\r\n  it('hideToValues() operates the display function correctly', () => {\r\n    sideMenu.hideToValues(false);\r\n    expect(sideMenu.sideMenuElements.toInputWrapper!.style.display).toEqual('none');\r\n    expect(sideMenu.sideMenuElements.toOutput!.style.display).toEqual('none');\r\n\r\n    sideMenu.hideToValues(true);\r\n    expect(sideMenu.sideMenuElements.toInputWrapper!.style.display).toEqual('block');\r\n    expect(sideMenu.sideMenuElements.toOutput!.style.display).toEqual('inline');\r\n  });\r\n});\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_kjo8tkpmr.s[0]++;Object.defineProperty(exports, "__esModule", ({value:true}));const SideMenu_1=(cov_kjo8tkpmr.s[1]++,__webpack_require__(/*! ./SideMenu */ "./src/View/SideMenu/SideMenu.ts"));cov_kjo8tkpmr.s[2]++;describe('SideMenu',()=>{cov_kjo8tkpmr.f[0]++;let sideMenu;cov_kjo8tkpmr.s[3]++;beforeEach(()=>{cov_kjo8tkpmr.f[1]++;cov_kjo8tkpmr.s[4]++;sideMenu=new SideMenu_1.SideMenu();});cov_kjo8tkpmr.s[5]++;it('SideMenu can be create',()=>{cov_kjo8tkpmr.f[2]++;cov_kjo8tkpmr.s[6]++;expect(sideMenu).toBeTruthy();});cov_kjo8tkpmr.s[7]++;it('SideMenu can be collect',()=>{cov_kjo8tkpmr.f[3]++;cov_kjo8tkpmr.s[8]++;sideMenu.collectSideMenu();cov_kjo8tkpmr.s[9]++;expect(sideMenu.sideMenuElements.sideMenuContainer).toBeTruthy();});cov_kjo8tkpmr.s[10]++;it('refreshValues() refresh from values correctly',()=>{cov_kjo8tkpmr.f[4]++;cov_kjo8tkpmr.s[11]++;sideMenu.refreshValues({target:'from',value:'50',isToFixed:true});cov_kjo8tkpmr.s[12]++;expect(sideMenu.sideMenuElements.fromOutput.value).toEqual('50');cov_kjo8tkpmr.s[13]++;expect(sideMenu.sideMenuElements.fromInput.value).toEqual('50');});cov_kjo8tkpmr.s[14]++;it('refreshValues() refresh to values correctly',()=>{cov_kjo8tkpmr.f[5]++;cov_kjo8tkpmr.s[15]++;sideMenu.refreshValues({target:'to',value:'50',isToFixed:true});cov_kjo8tkpmr.s[16]++;expect(sideMenu.sideMenuElements.toOutput.value).toEqual(' - 50');cov_kjo8tkpmr.s[17]++;expect(sideMenu.sideMenuElements.toInput.value).toEqual('50');});cov_kjo8tkpmr.s[18]++;it('hideToValues() operates the display function correctly',()=>{cov_kjo8tkpmr.f[6]++;cov_kjo8tkpmr.s[19]++;sideMenu.hideToValues(false);cov_kjo8tkpmr.s[20]++;expect(sideMenu.sideMenuElements.toInputWrapper.style.display).toEqual('none');cov_kjo8tkpmr.s[21]++;expect(sideMenu.sideMenuElements.toOutput.style.display).toEqual('none');cov_kjo8tkpmr.s[22]++;sideMenu.hideToValues(true);cov_kjo8tkpmr.s[23]++;expect(sideMenu.sideMenuElements.toInputWrapper.style.display).toEqual('block');cov_kjo8tkpmr.s[24]++;expect(sideMenu.sideMenuElements.toOutput.style.display).toEqual('inline');});});

/***/ }),

/***/ "./src/View/SideMenu/types.ts":
/*!************************************!*\
  !*** ./src/View/SideMenu/types.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
var cov_2xlrxjnq9=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SideMenu\\types.ts",hash="47358406dcd199dde9ac1761ecde2d142e986839",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SideMenu\\types.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}}},fnMap:{},branchMap:{},s:{"0":0},f:{},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SideMenu\\types.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\SideMenu\\types.ts"],names:[],mappings:"",sourcesContent:["type ElementParams = {\r\n  name: string;\r\n  cssClasses: Array<string>;\r\n  text?: string;\r\n  attr?: {\r\n    name: string,\r\n    value: string\r\n  };\r\n};\r\n\r\ntype SideMenuElements = {\r\n  sideMenuContainer?: HTMLDivElement;\r\n  currentValuesWrapper?: HTMLDivElement;\r\n  currentValuesObjective?: HTMLSpanElement;\r\n  fromOutput?: HTMLOutputElement;\r\n  toOutput?: HTMLOutputElement;\r\n  toWrapper?: HTMLDivElement;\r\n  toToggleObjective?: HTMLSpanElement;\r\n  toToggleWrapper?: HTMLLabelElement;\r\n  toToggle?: HTMLInputElement;\r\n  toToggleBorder?: HTMLSpanElement;\r\n  inputWrapper?: HTMLDivElement;\r\n  inputObjective?: HTMLSpanElement;\r\n  toInputWrapper?: HTMLLabelElement;\r\n  fromInputWrapper?: HTMLLabelElement;\r\n  stepInputWrapper?: HTMLLabelElement;\r\n  minInputWrapper?: HTMLLabelElement;\r\n  maxInputWrapper?: HTMLLabelElement;\r\n  fromInput?: HTMLInputElement;\r\n  toInput?: HTMLInputElement;\r\n  stepInput?: HTMLInputElement;\r\n  minimumInput?: HTMLInputElement;\r\n  maximumInput?: HTMLInputElement;\r\n  handleValuesWrapper?: HTMLDivElement;\r\n  handleValuesObjective?: HTMLSpanElement;\r\n  handleValuesToggleWrapper?: HTMLLabelElement;\r\n  handleValuesToggle?: HTMLInputElement;\r\n  handleValuesToggleBorder?: HTMLSpanElement;\r\n  valueScaleWrapper?: HTMLDivElement;\r\n  valueScaleObjective?: HTMLSpanElement;\r\n  valueScaleToggleWrapper?: HTMLLabelElement;\r\n  valueScaleToggle?: HTMLInputElement;\r\n  valueScaleToggleBorder?: HTMLSpanElement;\r\n  planeWrapper?: HTMLDivElement;\r\n  planeObjective?: HTMLSpanElement;\r\n  planeToggleWrapper?: HTMLLabelElement;\r\n  planeToggle?: HTMLInputElement;\r\n  planeToggleBorder?: HTMLSpanElement;\r\n  integerToggle?: HTMLInputElement;\r\n  integerToggleBorder?: HTMLSpanElement;\r\n  integerObjective?: HTMLSpanElement;\r\n  integerWrapper?: HTMLDivElement;\r\n  integerToggleWrapper?: HTMLLabelElement;\r\n};\r\n\r\nexport {\r\n  ElementParams,\r\n  SideMenuElements,\r\n};\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_2xlrxjnq9.s[0]++;Object.defineProperty(exports, "__esModule", ({value:true}));

/***/ }),

/***/ "./src/View/Slider/Slider.ts":
/*!***********************************!*\
  !*** ./src/View/Slider/Slider.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
var cov_2pbjy9cvsk=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Slider\\Slider.ts",hash="f42268aabf4f86fe47c88a94a8aed60924bdb8d0",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Slider\\Slider.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:24}},"2":{start:{line:6,column:8},end:{line:6,column:52}},"3":{start:{line:7,column:8},end:{line:7,column:49}},"4":{start:{line:8,column:8},end:{line:8,column:59}},"5":{start:{line:9,column:8},end:{line:9,column:64}},"6":{start:{line:10,column:8},end:{line:10,column:47}},"7":{start:{line:13,column:8},end:{line:13,column:234}},"8":{start:{line:16,column:8},end:{line:16,column:97}},"9":{start:{line:19,column:8},end:{line:19,column:97}},"10":{start:{line:22,column:49},end:{line:22,column:57}},"11":{start:{line:24,column:12},end:{line:24,column:68}},"12":{start:{line:25,column:12},end:{line:25,column:76}},"13":{start:{line:26,column:12},end:{line:27,column:69}},"14":{start:{line:27,column:16},end:{line:27,column:69}},"15":{start:{line:29,column:8},end:{line:42,column:9}},"16":{start:{line:31,column:16},end:{line:31,column:75}},"17":{start:{line:32,column:16},end:{line:32,column:75}},"18":{start:{line:33,column:16},end:{line:33,column:81}},"19":{start:{line:34,column:16},end:{line:34,column:22}},"20":{start:{line:36,column:16},end:{line:36,column:75}},"21":{start:{line:37,column:16},end:{line:37,column:43}},"22":{start:{line:38,column:16},end:{line:38,column:53}},"23":{start:{line:39,column:16},end:{line:39,column:22}},"24":{start:{line:41,column:16},end:{line:41,column:22}},"25":{start:{line:43,column:8},end:{line:43,column:29}},"26":{start:{line:46,column:0},end:{line:46,column:24}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:18},end:{line:11,column:5}},line:5},"1":{name:"(anonymous_1)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:28},end:{line:14,column:5}},line:12},"2":{name:"(anonymous_2)",decl:{start:{line:15,column:4},end:{line:15,column:5}},loc:{start:{line:15,column:46},end:{line:17,column:5}},line:15},"3":{name:"(anonymous_3)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:42},end:{line:20,column:5}},line:18},"4":{name:"(anonymous_4)",decl:{start:{line:21,column:4},end:{line:21,column:5}},loc:{start:{line:21,column:26},end:{line:44,column:5}},line:21},"5":{name:"refreshAfterResize",decl:{start:{line:23,column:17},end:{line:23,column:35}},loc:{start:{line:23,column:38},end:{line:28,column:9}},line:23}},branchMap:{"0":{loc:{start:{line:16,column:16},end:{line:16,column:95}},type:"binary-expr",locations:[{start:{line:16,column:17},end:{line:16,column:77}},{start:{line:16,column:83},end:{line:16,column:94}}],line:16},"1":{loc:{start:{line:19,column:16},end:{line:19,column:95}},type:"binary-expr",locations:[{start:{line:19,column:17},end:{line:19,column:78}},{start:{line:19,column:84},end:{line:19,column:94}}],line:19},"2":{loc:{start:{line:26,column:12},end:{line:27,column:69}},type:"if",locations:[{start:{line:26,column:12},end:{line:27,column:69}},{start:{line:26,column:12},end:{line:27,column:69}}],line:26},"3":{loc:{start:{line:29,column:8},end:{line:42,column:9}},type:"switch",locations:[{start:{line:30,column:12},end:{line:34,column:22}},{start:{line:35,column:12},end:{line:39,column:22}},{start:{line:40,column:12},end:{line:41,column:22}}],line:29}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Slider\\Slider.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Slider\\Slider.ts"],names:[],mappings:";;;AAEA,MAAa,MAAM;IAKjB;QACE,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC5C,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QACzC,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACnD,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACxD,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACzC,CAAC;IAEM,aAAa,CAAC,QAAiC;QACpD,IAAI,CAAC,MAAM,CAAC,MAAM,CAChB,QAAQ,CAAC,IAAI,EACb,QAAQ,CAAC,EAAE,EACX,QAAQ,CAAC,QAAQ,EACjB,QAAQ,CAAC,UAAU,CAAC,QAAQ,EAC5B,QAAQ,CAAC,UAAU,CAAC,QAAQ,EAC5B,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,EACvB,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,EACvB,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,EACvB,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,CACxB,CAAC;IACJ,CAAC;IAEO,6BAA6B,CAAC,UAAmB;QACvD,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,4BAA4B,CAAC,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3F,CAAC;IAEO,yBAAyB,CAAC,UAAmB;QACnD,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,4BAA4B,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3F,CAAC;IAEM,WAAW,CAAC,QAA6B;QAC9C,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,QAAQ,CAAC;QAElD,SAAS,kBAAkB;YACzB,QAAQ,CAAC,gBAAgB,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;YACxD,QAAQ,CAAC,wBAAwB,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;YAChE,IAAI,MAAM;gBAAE,QAAQ,CAAC,aAAa,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;QACnE,CAAC;QAED,QAAQ,IAAI,EAAE;YACZ,KAAK,IAAI,CAAC,yBAAyB,CAAC,UAAU,CAAC;gBAC7C,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,4BAA4B,CAAC,CAAC;gBAC3D,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC;gBAC3D,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,IAAI,CAAC;gBACjE,MAAM;YACR,KAAK,IAAI,CAAC,6BAA6B,CAAC,UAAU,CAAC;gBACjD,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,4BAA4B,CAAC,CAAC;gBAC3D,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,EAAE,CAAC;gBAC3B,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC;gBACrC,MAAM;YACR;gBACE,MAAM;SACT;QAED,kBAAkB,EAAE,CAAC;IACvB,CAAC;CACF;AA7DD,wBA6DC",sourcesContent:["import { SliderAssemblerSettings, SliderPlaneSettings } from './types';\r\n\r\nexport class Slider {\r\n  readonly slider: HTMLDivElement;\r\n\r\n  readonly sliderWrapper: HTMLDivElement;\r\n\r\n  constructor() {\r\n    this.slider = document.createElement('div');\r\n    this.slider.classList.add('goby-slider');\r\n    this.sliderWrapper = document.createElement('div');\r\n    this.sliderWrapper.classList.add('goby-slider-wrapper');\r\n    this.sliderWrapper.append(this.slider);\r\n  }\r\n\r\n  public collectSlider(settings: SliderAssemblerSettings): void {\r\n    this.slider.append(\r\n      settings.from,\r\n      settings.to,\r\n      settings.interval,\r\n      settings.valueScale.minValue,\r\n      settings.valueScale.maxValue,\r\n      settings.valueScale[20],\r\n      settings.valueScale[40],\r\n      settings.valueScale[60],\r\n      settings.valueScale[80],\r\n    );\r\n  }\r\n\r\n  private checkIsNeedToMakeHorizontally(isVertical: boolean): boolean {\r\n    return ((this.slider.classList.contains('goby-slider_state_vertical')) && (!isVertical));\r\n  }\r\n\r\n  private checkIsNeedToMakeVertical(isVertical: boolean): boolean {\r\n    return ((!this.slider.classList.contains('goby-slider_state_vertical')) && (isVertical));\r\n  }\r\n\r\n  public changePlane(settings: SliderPlaneSettings): void {\r\n    const { isStep, isVertical, requests } = settings;\r\n\r\n    function refreshAfterResize(): void {\r\n      requests.needDataForScale = { name: '', value: 'true' };\r\n      requests.needDataForStartPosition = { name: '', value: 'true' };\r\n      if (isStep) requests.needStepWidth = { name: '', value: 'true' };\r\n    }\r\n\r\n    switch (true) {\r\n      case this.checkIsNeedToMakeVertical(isVertical):\r\n        this.slider.classList.toggle('goby-slider_state_vertical');\r\n        this.slider.style.top = `${this.slider.offsetWidth / 2}px`;\r\n        this.sliderWrapper.style.height = `${this.slider.offsetWidth}px`;\r\n        break;\r\n      case this.checkIsNeedToMakeHorizontally(isVertical):\r\n        this.slider.classList.toggle('goby-slider_state_vertical');\r\n        this.slider.style.top = '';\r\n        this.sliderWrapper.style.height = '';\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    refreshAfterResize();\r\n  }\r\n}\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_2pbjy9cvsk.s[0]++;Object.defineProperty(exports, "__esModule", ({value:true}));cov_2pbjy9cvsk.s[1]++;exports.Slider=void 0;class Slider{constructor(){cov_2pbjy9cvsk.f[0]++;cov_2pbjy9cvsk.s[2]++;this.slider=document.createElement('div');cov_2pbjy9cvsk.s[3]++;this.slider.classList.add('goby-slider');cov_2pbjy9cvsk.s[4]++;this.sliderWrapper=document.createElement('div');cov_2pbjy9cvsk.s[5]++;this.sliderWrapper.classList.add('goby-slider-wrapper');cov_2pbjy9cvsk.s[6]++;this.sliderWrapper.append(this.slider);}collectSlider(settings){cov_2pbjy9cvsk.f[1]++;cov_2pbjy9cvsk.s[7]++;this.slider.append(settings.from,settings.to,settings.interval,settings.valueScale.minValue,settings.valueScale.maxValue,settings.valueScale[20],settings.valueScale[40],settings.valueScale[60],settings.valueScale[80]);}checkIsNeedToMakeHorizontally(isVertical){cov_2pbjy9cvsk.f[2]++;cov_2pbjy9cvsk.s[8]++;return(cov_2pbjy9cvsk.b[0][0]++,this.slider.classList.contains('goby-slider_state_vertical'))&&(cov_2pbjy9cvsk.b[0][1]++,!isVertical);}checkIsNeedToMakeVertical(isVertical){cov_2pbjy9cvsk.f[3]++;cov_2pbjy9cvsk.s[9]++;return(cov_2pbjy9cvsk.b[1][0]++,!this.slider.classList.contains('goby-slider_state_vertical'))&&(cov_2pbjy9cvsk.b[1][1]++,isVertical);}changePlane(settings){cov_2pbjy9cvsk.f[4]++;const{isStep,isVertical,requests}=(cov_2pbjy9cvsk.s[10]++,settings);function refreshAfterResize(){cov_2pbjy9cvsk.f[5]++;cov_2pbjy9cvsk.s[11]++;requests.needDataForScale={name:'',value:'true'};cov_2pbjy9cvsk.s[12]++;requests.needDataForStartPosition={name:'',value:'true'};cov_2pbjy9cvsk.s[13]++;if(isStep){cov_2pbjy9cvsk.b[2][0]++;cov_2pbjy9cvsk.s[14]++;requests.needStepWidth={name:'',value:'true'};}else{cov_2pbjy9cvsk.b[2][1]++;}}cov_2pbjy9cvsk.s[15]++;switch(true){case this.checkIsNeedToMakeVertical(isVertical):cov_2pbjy9cvsk.b[3][0]++;cov_2pbjy9cvsk.s[16]++;this.slider.classList.toggle('goby-slider_state_vertical');cov_2pbjy9cvsk.s[17]++;this.slider.style.top=`${this.slider.offsetWidth/2}px`;cov_2pbjy9cvsk.s[18]++;this.sliderWrapper.style.height=`${this.slider.offsetWidth}px`;cov_2pbjy9cvsk.s[19]++;break;case this.checkIsNeedToMakeHorizontally(isVertical):cov_2pbjy9cvsk.b[3][1]++;cov_2pbjy9cvsk.s[20]++;this.slider.classList.toggle('goby-slider_state_vertical');cov_2pbjy9cvsk.s[21]++;this.slider.style.top='';cov_2pbjy9cvsk.s[22]++;this.sliderWrapper.style.height='';cov_2pbjy9cvsk.s[23]++;break;default:cov_2pbjy9cvsk.b[3][2]++;cov_2pbjy9cvsk.s[24]++;break;}cov_2pbjy9cvsk.s[25]++;refreshAfterResize();}}cov_2pbjy9cvsk.s[26]++;exports.Slider=Slider;

/***/ }),

/***/ "./src/View/Slider/slider.test.ts":
/*!****************************************!*\
  !*** ./src/View/Slider/slider.test.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var cov_1569ntuflf=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Slider\\slider.test.ts",hash="79fe5ea6a50c858847a62bc946c767d13c70a32d",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Slider\\slider.test.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:18},end:{line:3,column:47}},"2":{start:{line:4,column:27},end:{line:4,column:74}},"3":{start:{line:5,column:17},end:{line:5,column:36}},"4":{start:{line:6,column:22},end:{line:6,column:59}},"5":{start:{line:7,column:0},end:{line:47,column:3}},"6":{start:{line:9,column:21},end:{line:16,column:5}},"7":{start:{line:17,column:4},end:{line:19,column:7}},"8":{start:{line:18,column:8},end:{line:18,column:39}},"9":{start:{line:20,column:4},end:{line:22,column:7}},"10":{start:{line:21,column:8},end:{line:21,column:36}},"11":{start:{line:23,column:4},end:{line:32,column:7}},"12":{start:{line:24,column:25},end:{line:29,column:9}},"13":{start:{line:30,column:8},end:{line:30,column:39}},"14":{start:{line:31,column:8},end:{line:31,column:43}},"15":{start:{line:33,column:4},end:{line:46,column:7}},"16":{start:{line:34,column:8},end:{line:38,column:11}},"17":{start:{line:39,column:8},end:{line:39,column:72}},"18":{start:{line:40,column:8},end:{line:44,column:11}},"19":{start:{line:45,column:8},end:{line:45,column:76}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:7,column:19},end:{line:7,column:20}},loc:{start:{line:7,column:25},end:{line:47,column:1}},line:7},"1":{name:"(anonymous_1)",decl:{start:{line:17,column:15},end:{line:17,column:16}},loc:{start:{line:17,column:21},end:{line:19,column:5}},line:17},"2":{name:"(anonymous_2)",decl:{start:{line:20,column:31},end:{line:20,column:32}},loc:{start:{line:20,column:37},end:{line:22,column:5}},line:20},"3":{name:"(anonymous_3)",decl:{start:{line:23,column:47},end:{line:23,column:48}},loc:{start:{line:23,column:53},end:{line:32,column:5}},line:23},"4":{name:"(anonymous_4)",decl:{start:{line:33,column:64},end:{line:33,column:65}},loc:{start:{line:33,column:70},end:{line:46,column:5}},line:33}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Slider\\slider.test.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Slider\\slider.test.ts"],names:[],mappings:";;AAAA,gDAA6C;AAC7C,2EAAwE;AAExE,qCAAkC;AAClC,4DAAyD;AAGzD,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;IACtB,IAAI,MAAc,CAAC;IACnB,MAAM,QAAQ,GAAuB;QACnC,aAAa,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;QACtC,iBAAiB,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;QAC1C,uBAAuB,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;QAChD,2BAA2B,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;QACpD,gBAAgB,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;QACzC,wBAAwB,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;KAClD,CAAC;IAEF,UAAU,CAAC,GAAG,EAAE;QACd,MAAM,GAAG,IAAI,eAAM,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE,GAAG,EAAE;QAC9B,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAC9C,MAAM,QAAQ,GAA4B;YACxC,IAAI,EAAE,IAAI,iBAAO,EAAE,CAAC,UAAU;YAC9B,EAAE,EAAE,IAAI,iBAAO,EAAE,CAAC,QAAQ;YAC1B,QAAQ,EAAE,IAAI,mCAAgB,EAAE,CAAC,QAAQ;YACzC,UAAU,EAAE,IAAI,yBAAW,EAAE;SAC9B,CAAC;QACF,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC/B,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;QAC/D,MAAM,CAAC,WAAW,CAAC;YACjB,QAAQ;YACR,MAAM,EAAE,KAAK;YACb,UAAU,EAAE,IAAI;SACjB,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,4BAA4B,CAAC,CAAC;QAEhE,MAAM,CAAC,WAAW,CAAC;YACjB,QAAQ;YACR,MAAM,EAAE,KAAK;YACb,UAAU,EAAE,KAAK;SAClB,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,4BAA4B,CAAC,CAAC;IACtE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC",sourcesContent:["import { Handles } from '../Handles/Handles';\r\nimport { SelectedInterval } from '../SelectedInterval/SelectedInterval';\r\nimport { SliderAssemblerSettings } from './types';\r\nimport { Slider } from './Slider';\r\nimport { ValuesScale } from '../ValuesScale/ValuesScale';\r\nimport { DataRequestToModel } from '../types';\r\n\r\ndescribe('Slider', () => {\r\n  let slider: Slider;\r\n  const requests: DataRequestToModel = {\r\n    needStepWidth: { value: '', name: '' },\r\n    needApplyNewValue: { value: '', name: '' },\r\n    needApplyValueFromScale: { value: '', name: '' },\r\n    needChangeSliderValuesRange: { value: '', name: '' },\r\n    needDataForScale: { value: '', name: '' },\r\n    needDataForStartPosition: { value: '', name: '' },\r\n  };\r\n\r\n  beforeEach(() => {\r\n    slider = new Slider();\r\n  });\r\n\r\n  it('Slider can be create', () => {\r\n    expect(slider).toBeTruthy();\r\n  });\r\n\r\n  it('collectSlider() can collect elements', () => {\r\n    const settings: SliderAssemblerSettings = {\r\n      from: new Handles().fromHandle,\r\n      to: new Handles().toHandle,\r\n      interval: new SelectedInterval().interval,\r\n      valueScale: new ValuesScale(),\r\n    };\r\n    slider.collectSlider(settings);\r\n    expect(slider.slider).toBeTruthy();\r\n  });\r\n\r\n  it('changePlane() operates the display function correctly', () => {\r\n    slider.changePlane({\r\n      requests,\r\n      isStep: false,\r\n      isVertical: true,\r\n    });\r\n    expect(slider.slider).toHaveClass('goby-slider_state_vertical');\r\n\r\n    slider.changePlane({\r\n      requests,\r\n      isStep: false,\r\n      isVertical: false,\r\n    });\r\n    expect(slider.slider).not.toHaveClass('goby-slider_state_vertical');\r\n  });\r\n});\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_1569ntuflf.s[0]++;Object.defineProperty(exports, "__esModule", ({value:true}));const Handles_1=(cov_1569ntuflf.s[1]++,__webpack_require__(/*! ../Handles/Handles */ "./src/View/Handles/Handles.ts"));const SelectedInterval_1=(cov_1569ntuflf.s[2]++,__webpack_require__(/*! ../SelectedInterval/SelectedInterval */ "./src/View/SelectedInterval/SelectedInterval.ts"));const Slider_1=(cov_1569ntuflf.s[3]++,__webpack_require__(/*! ./Slider */ "./src/View/Slider/Slider.ts"));const ValuesScale_1=(cov_1569ntuflf.s[4]++,__webpack_require__(/*! ../ValuesScale/ValuesScale */ "./src/View/ValuesScale/ValuesScale.ts"));cov_1569ntuflf.s[5]++;describe('Slider',()=>{cov_1569ntuflf.f[0]++;let slider;const requests=(cov_1569ntuflf.s[6]++,{needStepWidth:{value:'',name:''},needApplyNewValue:{value:'',name:''},needApplyValueFromScale:{value:'',name:''},needChangeSliderValuesRange:{value:'',name:''},needDataForScale:{value:'',name:''},needDataForStartPosition:{value:'',name:''}});cov_1569ntuflf.s[7]++;beforeEach(()=>{cov_1569ntuflf.f[1]++;cov_1569ntuflf.s[8]++;slider=new Slider_1.Slider();});cov_1569ntuflf.s[9]++;it('Slider can be create',()=>{cov_1569ntuflf.f[2]++;cov_1569ntuflf.s[10]++;expect(slider).toBeTruthy();});cov_1569ntuflf.s[11]++;it('collectSlider() can collect elements',()=>{cov_1569ntuflf.f[3]++;const settings=(cov_1569ntuflf.s[12]++,{from:new Handles_1.Handles().fromHandle,to:new Handles_1.Handles().toHandle,interval:new SelectedInterval_1.SelectedInterval().interval,valueScale:new ValuesScale_1.ValuesScale()});cov_1569ntuflf.s[13]++;slider.collectSlider(settings);cov_1569ntuflf.s[14]++;expect(slider.slider).toBeTruthy();});cov_1569ntuflf.s[15]++;it('changePlane() operates the display function correctly',()=>{cov_1569ntuflf.f[4]++;cov_1569ntuflf.s[16]++;slider.changePlane({requests,isStep:false,isVertical:true});cov_1569ntuflf.s[17]++;expect(slider.slider).toHaveClass('goby-slider_state_vertical');cov_1569ntuflf.s[18]++;slider.changePlane({requests,isStep:false,isVertical:false});cov_1569ntuflf.s[19]++;expect(slider.slider).not.toHaveClass('goby-slider_state_vertical');});});

/***/ }),

/***/ "./src/View/Slider/types.ts":
/*!**********************************!*\
  !*** ./src/View/Slider/types.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
var cov_nc2xpkmup=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Slider\\types.ts",hash="dab602716fcca01cbd2a28e4f13291ebc9bf859e",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Slider\\types.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}}},fnMap:{},branchMap:{},s:{"0":0},f:{},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Slider\\types.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\Slider\\types.ts"],names:[],mappings:"",sourcesContent:["import { IValuesScale } from '../ValuesScale/interfaces';\r\nimport { DataRequestToModel } from '../types';\r\n\r\ntype SliderAssemblerSettings = {\r\n  readonly from: HTMLSpanElement;\r\n  readonly to: HTMLSpanElement;\r\n  readonly interval: HTMLDivElement;\r\n  readonly valueScale: IValuesScale;\r\n};\r\n\r\ntype SliderPlaneSettings = {\r\n  isVertical: boolean;\r\n  requests: DataRequestToModel;\r\n  isStep: boolean;\r\n};\r\n\r\nexport {\r\n  SliderAssemblerSettings,\r\n  SliderPlaneSettings,\r\n};\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_nc2xpkmup.s[0]++;Object.defineProperty(exports, "__esModule", ({value:true}));

/***/ }),

/***/ "./src/View/ValuesScale/ValuesScale.ts":
/*!*********************************************!*\
  !*** ./src/View/ValuesScale/ValuesScale.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
var cov_d1wop0msz=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\ValuesScale\\ValuesScale.ts",hash="b3f741da147b0faeeb9f1e1f44862ec3954c70c6",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\ValuesScale\\ValuesScale.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:29}},"2":{start:{line:6,column:8},end:{line:6,column:62}},"3":{start:{line:7,column:8},end:{line:7,column:62}},"4":{start:{line:8,column:8},end:{line:8,column:59}},"5":{start:{line:9,column:8},end:{line:9,column:59}},"6":{start:{line:10,column:8},end:{line:10,column:59}},"7":{start:{line:11,column:8},end:{line:11,column:59}},"8":{start:{line:14,column:24},end:{line:14,column:54}},"9":{start:{line:15,column:8},end:{line:15,column:91}},"10":{start:{line:16,column:8},end:{line:16,column:23}},"11":{start:{line:19,column:8},end:{line:26,column:20}},"12":{start:{line:29,column:46},end:{line:29,column:111}},"13":{start:{line:29,column:59},end:{line:29,column:111}},"14":{start:{line:30,column:39},end:{line:30,column:141}},"15":{start:{line:30,column:65},end:{line:30,column:141}},"16":{start:{line:31,column:8},end:{line:31,column:80}},"17":{start:{line:32,column:8},end:{line:32,column:81}},"18":{start:{line:33,column:8},end:{line:33,column:68}},"19":{start:{line:34,column:8},end:{line:34,column:68}},"20":{start:{line:35,column:8},end:{line:35,column:68}},"21":{start:{line:36,column:8},end:{line:36,column:68}},"22":{start:{line:39,column:8},end:{line:45,column:29}},"23":{start:{line:48,column:8},end:{line:54,column:28}},"24":{start:{line:57,column:30},end:{line:64,column:9}},"25":{start:{line:58,column:12},end:{line:58,column:80}},"26":{start:{line:59,column:12},end:{line:59,column:80}},"27":{start:{line:60,column:12},end:{line:60,column:75}},"28":{start:{line:61,column:12},end:{line:61,column:75}},"29":{start:{line:62,column:12},end:{line:62,column:75}},"30":{start:{line:63,column:12},end:{line:63,column:75}},"31":{start:{line:65,column:38},end:{line:66,column:61}},"32":{start:{line:67,column:8},end:{line:68,column:28}},"33":{start:{line:68,column:12},end:{line:68,column:28}},"34":{start:{line:71,column:30},end:{line:78,column:9}},"35":{start:{line:72,column:12},end:{line:72,column:48}},"36":{start:{line:73,column:12},end:{line:73,column:48}},"37":{start:{line:74,column:12},end:{line:74,column:43}},"38":{start:{line:75,column:12},end:{line:75,column:43}},"39":{start:{line:76,column:12},end:{line:76,column:43}},"40":{start:{line:77,column:12},end:{line:77,column:43}},"41":{start:{line:79,column:8},end:{line:84,column:9}},"42":{start:{line:80,column:12},end:{line:80,column:34}},"43":{start:{line:83,column:12},end:{line:83,column:42}},"44":{start:{line:87,column:0},end:{line:87,column:34}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:18},end:{line:12,column:5}},line:5},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:40},end:{line:17,column:5}},line:13},"2":{name:"(anonymous_2)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:30},end:{line:27,column:5}},line:18},"3":{name:"(anonymous_3)",decl:{start:{line:28,column:4},end:{line:28,column:5}},loc:{start:{line:28,column:44},end:{line:37,column:5}},line:28},"4":{name:"(anonymous_4)",decl:{start:{line:29,column:46},end:{line:29,column:47}},loc:{start:{line:29,column:59},end:{line:29,column:111}},line:29},"5":{name:"(anonymous_5)",decl:{start:{line:30,column:39},end:{line:30,column:40}},loc:{start:{line:30,column:65},end:{line:30,column:141}},line:30},"6":{name:"(anonymous_6)",decl:{start:{line:38,column:4},end:{line:38,column:5}},loc:{start:{line:38,column:46},end:{line:46,column:5}},line:38},"7":{name:"(anonymous_7)",decl:{start:{line:47,column:4},end:{line:47,column:5}},loc:{start:{line:47,column:42},end:{line:55,column:5}},line:47},"8":{name:"(anonymous_8)",decl:{start:{line:56,column:4},end:{line:56,column:5}},loc:{start:{line:56,column:28},end:{line:69,column:5}},line:56},"9":{name:"(anonymous_9)",decl:{start:{line:57,column:30},end:{line:57,column:31}},loc:{start:{line:57,column:36},end:{line:64,column:9}},line:57},"10":{name:"(anonymous_10)",decl:{start:{line:70,column:4},end:{line:70,column:5}},loc:{start:{line:70,column:33},end:{line:85,column:5}},line:70},"11":{name:"(anonymous_11)",decl:{start:{line:71,column:30},end:{line:71,column:31}},loc:{start:{line:71,column:41},end:{line:78,column:9}},line:71}},branchMap:{"0":{loc:{start:{line:39,column:15},end:{line:45,column:28}},type:"binary-expr",locations:[{start:{line:39,column:16},end:{line:39,column:85}},{start:{line:40,column:16},end:{line:40,column:85}},{start:{line:41,column:16},end:{line:41,column:80}},{start:{line:42,column:16},end:{line:42,column:80}},{start:{line:43,column:16},end:{line:43,column:80}},{start:{line:44,column:16},end:{line:44,column:80}},{start:{line:45,column:16},end:{line:45,column:27}}],line:39},"1":{loc:{start:{line:48,column:15},end:{line:54,column:27}},type:"binary-expr",locations:[{start:{line:48,column:16},end:{line:48,column:86}},{start:{line:49,column:16},end:{line:49,column:86}},{start:{line:50,column:16},end:{line:50,column:81}},{start:{line:51,column:16},end:{line:51,column:81}},{start:{line:52,column:16},end:{line:52,column:81}},{start:{line:53,column:16},end:{line:53,column:81}},{start:{line:54,column:16},end:{line:54,column:26}}],line:48},"2":{loc:{start:{line:65,column:38},end:{line:66,column:61}},type:"binary-expr",locations:[{start:{line:65,column:38},end:{line:65,column:80}},{start:{line:66,column:15},end:{line:66,column:61}}],line:65},"3":{loc:{start:{line:67,column:8},end:{line:68,column:28}},type:"if",locations:[{start:{line:67,column:8},end:{line:68,column:28}},{start:{line:67,column:8},end:{line:68,column:28}}],line:67},"4":{loc:{start:{line:79,column:8},end:{line:84,column:9}},type:"if",locations:[{start:{line:79,column:8},end:{line:84,column:9}},{start:{line:79,column:8},end:{line:84,column:9}}],line:79}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},b:{"0":[0,0,0,0,0,0,0],"1":[0,0,0,0,0,0,0],"2":[0,0],"3":[0,0],"4":[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\ValuesScale\\ValuesScale.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\ValuesScale\\ValuesScale.ts"],names:[],mappings:"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",sourcesContent:["import { DataForValueScale } from '../../Model/types';\r\nimport { IValuesScale } from './interfaces';\r\n\r\nexport class ValuesScale implements IValuesScale {\r\n  readonly minValue: HTMLSpanElement;\r\n\r\n  readonly maxValue: HTMLSpanElement;\r\n\r\n  readonly 20: HTMLSpanElement;\r\n\r\n  readonly 40: HTMLSpanElement;\r\n\r\n  readonly 60: HTMLSpanElement;\r\n\r\n  readonly 80: HTMLSpanElement;\r\n\r\n  constructor() {\r\n    this.minValue = ValuesScale.createElement('type_min');\r\n    this.maxValue = ValuesScale.createElement('type_max');\r\n    this[20] = ValuesScale.createElement('percent_20');\r\n    this[40] = ValuesScale.createElement('percent_40');\r\n    this[60] = ValuesScale.createElement('percent_60');\r\n    this[80] = ValuesScale.createElement('percent_80');\r\n  }\r\n\r\n  private static createElement(classModifier: string): HTMLSpanElement {\r\n    const element: HTMLSpanElement = document.createElement('span');\r\n\r\n    element.classList.add('goby-slider__value', `goby-slider__value_${classModifier}`);\r\n\r\n    return element;\r\n  }\r\n\r\n  public refreshValueScale(values: DataForValueScale): void {\r\n    ({\r\n      min: this.minValue.innerText,\r\n      max: this.maxValue.innerText,\r\n      20: this[20].innerText,\r\n      40: this[40].innerText,\r\n      60: this[60].innerText,\r\n      80: this[80].innerText,\r\n    } = values);\r\n  }\r\n\r\n  public centersValues(sliderWidth: number, handleWidth: number): void {\r\n    const calculateExtremeValuePosition = (element: HTMLSpanElement): string => `${\r\n      0 - ((element.offsetWidth - handleWidth) / 2)\r\n    }px`;\r\n    const calculateValuePosition = (coefficient: number, element: HTMLSpanElement): string => `${\r\n      sliderWidth * coefficient - ((element.offsetWidth - handleWidth) / 2)\r\n    }px`;\r\n\r\n    this.minValue.style.left = calculateExtremeValuePosition(this.minValue);\r\n    this.maxValue.style.right = calculateExtremeValuePosition(this.maxValue);\r\n    this[20].style.left = calculateValuePosition(0.2, this[20]);\r\n    this[40].style.left = calculateValuePosition(0.4, this[40]);\r\n    this[60].style.left = calculateValuePosition(0.6, this[60]);\r\n    this[80].style.left = calculateValuePosition(0.8, this[80]);\r\n  }\r\n\r\n  private checkIsNeedToMakeHorizontally(isVertical: boolean): boolean {\r\n    return (this.minValue.classList.contains('goby-slider__value_state_vertical'))\r\n      && (this.maxValue.classList.contains('goby-slider__value_state_vertical'))\r\n      && (this[20].classList.contains('goby-slider__value_state_vertical'))\r\n      && (this[40].classList.contains('goby-slider__value_state_vertical'))\r\n      && (this[60].classList.contains('goby-slider__value_state_vertical'))\r\n      && (this[80].classList.contains('goby-slider__value_state_vertical'))\r\n      && (!isVertical);\r\n  }\r\n\r\n  private checkIsNeedToMakeVertical(isVertical: boolean): boolean {\r\n    return (!this.minValue.classList.contains('goby-slider__value_state_vertical'))\r\n      && (!this.maxValue.classList.contains('goby-slider__value_state_vertical'))\r\n      && (!this[20].classList.contains('goby-slider__value_state_vertical'))\r\n      && (!this[40].classList.contains('goby-slider__value_state_vertical'))\r\n      && (!this[60].classList.contains('goby-slider__value_state_vertical'))\r\n      && (!this[80].classList.contains('goby-slider__value_state_vertical'))\r\n      && (isVertical);\r\n  }\r\n\r\n  public changePlane(isVertical: boolean): void {\r\n    const changeClasses = (): void => {\r\n      this.minValue.classList.toggle('goby-slider__value_state_vertical');\r\n      this.maxValue.classList.toggle('goby-slider__value_state_vertical');\r\n      this[20].classList.toggle('goby-slider__value_state_vertical');\r\n      this[40].classList.toggle('goby-slider__value_state_vertical');\r\n      this[60].classList.toggle('goby-slider__value_state_vertical');\r\n      this[80].classList.toggle('goby-slider__value_state_vertical');\r\n    };\r\n\r\n    const isNeedToChangeClasses = this.checkIsNeedToMakeVertical(isVertical)\r\n      || this.checkIsNeedToMakeHorizontally(isVertical);\r\n\r\n    if (isNeedToChangeClasses) changeClasses();\r\n  }\r\n\r\n  public hideValueScale(isValueScale: boolean): void {\r\n    const changeDisplay = (value: string): void => {\r\n      this.minValue.style.display = value;\r\n      this.maxValue.style.display = value;\r\n      this[20].style.display = value;\r\n      this[40].style.display = value;\r\n      this[60].style.display = value;\r\n      this[80].style.display = value;\r\n    };\r\n\r\n    if (!isValueScale) {\r\n      changeDisplay('none');\r\n    } else {\r\n      changeDisplay('inline-block');\r\n    }\r\n  }\r\n}\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_d1wop0msz.s[0]++;Object.defineProperty(exports, "__esModule", ({value:true}));cov_d1wop0msz.s[1]++;exports.ValuesScale=void 0;class ValuesScale{constructor(){cov_d1wop0msz.f[0]++;cov_d1wop0msz.s[2]++;this.minValue=ValuesScale.createElement('type_min');cov_d1wop0msz.s[3]++;this.maxValue=ValuesScale.createElement('type_max');cov_d1wop0msz.s[4]++;this[20]=ValuesScale.createElement('percent_20');cov_d1wop0msz.s[5]++;this[40]=ValuesScale.createElement('percent_40');cov_d1wop0msz.s[6]++;this[60]=ValuesScale.createElement('percent_60');cov_d1wop0msz.s[7]++;this[80]=ValuesScale.createElement('percent_80');}static createElement(classModifier){cov_d1wop0msz.f[1]++;const element=(cov_d1wop0msz.s[8]++,document.createElement('span'));cov_d1wop0msz.s[9]++;element.classList.add('goby-slider__value',`goby-slider__value_${classModifier}`);cov_d1wop0msz.s[10]++;return element;}refreshValueScale(values){cov_d1wop0msz.f[2]++;cov_d1wop0msz.s[11]++;({min:this.minValue.innerText,max:this.maxValue.innerText,20:this[20].innerText,40:this[40].innerText,60:this[60].innerText,80:this[80].innerText}=values);}centersValues(sliderWidth,handleWidth){cov_d1wop0msz.f[3]++;cov_d1wop0msz.s[12]++;const calculateExtremeValuePosition=element=>{cov_d1wop0msz.f[4]++;cov_d1wop0msz.s[13]++;return`${0-(element.offsetWidth-handleWidth)/2}px`;};cov_d1wop0msz.s[14]++;const calculateValuePosition=(coefficient,element)=>{cov_d1wop0msz.f[5]++;cov_d1wop0msz.s[15]++;return`${sliderWidth*coefficient-(element.offsetWidth-handleWidth)/2}px`;};cov_d1wop0msz.s[16]++;this.minValue.style.left=calculateExtremeValuePosition(this.minValue);cov_d1wop0msz.s[17]++;this.maxValue.style.right=calculateExtremeValuePosition(this.maxValue);cov_d1wop0msz.s[18]++;this[20].style.left=calculateValuePosition(0.2,this[20]);cov_d1wop0msz.s[19]++;this[40].style.left=calculateValuePosition(0.4,this[40]);cov_d1wop0msz.s[20]++;this[60].style.left=calculateValuePosition(0.6,this[60]);cov_d1wop0msz.s[21]++;this[80].style.left=calculateValuePosition(0.8,this[80]);}checkIsNeedToMakeHorizontally(isVertical){cov_d1wop0msz.f[6]++;cov_d1wop0msz.s[22]++;return(cov_d1wop0msz.b[0][0]++,this.minValue.classList.contains('goby-slider__value_state_vertical'))&&(cov_d1wop0msz.b[0][1]++,this.maxValue.classList.contains('goby-slider__value_state_vertical'))&&(cov_d1wop0msz.b[0][2]++,this[20].classList.contains('goby-slider__value_state_vertical'))&&(cov_d1wop0msz.b[0][3]++,this[40].classList.contains('goby-slider__value_state_vertical'))&&(cov_d1wop0msz.b[0][4]++,this[60].classList.contains('goby-slider__value_state_vertical'))&&(cov_d1wop0msz.b[0][5]++,this[80].classList.contains('goby-slider__value_state_vertical'))&&(cov_d1wop0msz.b[0][6]++,!isVertical);}checkIsNeedToMakeVertical(isVertical){cov_d1wop0msz.f[7]++;cov_d1wop0msz.s[23]++;return(cov_d1wop0msz.b[1][0]++,!this.minValue.classList.contains('goby-slider__value_state_vertical'))&&(cov_d1wop0msz.b[1][1]++,!this.maxValue.classList.contains('goby-slider__value_state_vertical'))&&(cov_d1wop0msz.b[1][2]++,!this[20].classList.contains('goby-slider__value_state_vertical'))&&(cov_d1wop0msz.b[1][3]++,!this[40].classList.contains('goby-slider__value_state_vertical'))&&(cov_d1wop0msz.b[1][4]++,!this[60].classList.contains('goby-slider__value_state_vertical'))&&(cov_d1wop0msz.b[1][5]++,!this[80].classList.contains('goby-slider__value_state_vertical'))&&(cov_d1wop0msz.b[1][6]++,isVertical);}changePlane(isVertical){cov_d1wop0msz.f[8]++;cov_d1wop0msz.s[24]++;const changeClasses=()=>{cov_d1wop0msz.f[9]++;cov_d1wop0msz.s[25]++;this.minValue.classList.toggle('goby-slider__value_state_vertical');cov_d1wop0msz.s[26]++;this.maxValue.classList.toggle('goby-slider__value_state_vertical');cov_d1wop0msz.s[27]++;this[20].classList.toggle('goby-slider__value_state_vertical');cov_d1wop0msz.s[28]++;this[40].classList.toggle('goby-slider__value_state_vertical');cov_d1wop0msz.s[29]++;this[60].classList.toggle('goby-slider__value_state_vertical');cov_d1wop0msz.s[30]++;this[80].classList.toggle('goby-slider__value_state_vertical');};const isNeedToChangeClasses=(cov_d1wop0msz.s[31]++,(cov_d1wop0msz.b[2][0]++,this.checkIsNeedToMakeVertical(isVertical))||(cov_d1wop0msz.b[2][1]++,this.checkIsNeedToMakeHorizontally(isVertical)));cov_d1wop0msz.s[32]++;if(isNeedToChangeClasses){cov_d1wop0msz.b[3][0]++;cov_d1wop0msz.s[33]++;changeClasses();}else{cov_d1wop0msz.b[3][1]++;}}hideValueScale(isValueScale){cov_d1wop0msz.f[10]++;cov_d1wop0msz.s[34]++;const changeDisplay=value=>{cov_d1wop0msz.f[11]++;cov_d1wop0msz.s[35]++;this.minValue.style.display=value;cov_d1wop0msz.s[36]++;this.maxValue.style.display=value;cov_d1wop0msz.s[37]++;this[20].style.display=value;cov_d1wop0msz.s[38]++;this[40].style.display=value;cov_d1wop0msz.s[39]++;this[60].style.display=value;cov_d1wop0msz.s[40]++;this[80].style.display=value;};cov_d1wop0msz.s[41]++;if(!isValueScale){cov_d1wop0msz.b[4][0]++;cov_d1wop0msz.s[42]++;changeDisplay('none');}else{cov_d1wop0msz.b[4][1]++;cov_d1wop0msz.s[43]++;changeDisplay('inline-block');}}}cov_d1wop0msz.s[44]++;exports.ValuesScale=ValuesScale;

/***/ }),

/***/ "./src/View/ValuesScale/interfaces.ts":
/*!********************************************!*\
  !*** ./src/View/ValuesScale/interfaces.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
var cov_157txb1uzl=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\ValuesScale\\interfaces.ts",hash="e908864988aeb17a5cf8dbc2084e440a50218ad3",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\ValuesScale\\interfaces.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}}},fnMap:{},branchMap:{},s:{"0":0},f:{},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\ValuesScale\\interfaces.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\ValuesScale\\interfaces.ts"],names:[],mappings:"",sourcesContent:["import { DataForValueScale } from '../../Model/types';\r\n\r\ninterface IValuesScale {\r\n  minValue: HTMLSpanElement;\r\n  maxValue: HTMLSpanElement;\r\n  20: HTMLSpanElement;\r\n  40: HTMLSpanElement;\r\n  60: HTMLSpanElement;\r\n  80: HTMLSpanElement;\r\n  refreshValueScale: (values: DataForValueScale) => void;\r\n  centersValues: (sliderWidth: number, handleWidth: number) => void;\r\n  changePlane: (isVertical: boolean) => void;\r\n  hideValueScale: (isValueScale: boolean) => void;\r\n}\r\n\r\nexport { IValuesScale };\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_157txb1uzl.s[0]++;Object.defineProperty(exports, "__esModule", ({value:true}));

/***/ }),

/***/ "./src/View/ValuesScale/valueScale.test.ts":
/*!*************************************************!*\
  !*** ./src/View/ValuesScale/valueScale.test.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var cov_qan30v7ha=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\ValuesScale\\valueScale.test.ts",hash="ad774ec49bdebbb80d98a13847a0ab3b91235134",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\ValuesScale\\valueScale.test.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:22},end:{line:3,column:46}},"2":{start:{line:4,column:0},end:{line:64,column:3}},"3":{start:{line:6,column:4},end:{line:8,column:7}},"4":{start:{line:7,column:8},end:{line:7,column:54}},"5":{start:{line:9,column:4},end:{line:11,column:7}},"6":{start:{line:10,column:8},end:{line:10,column:41}},"7":{start:{line:12,column:4},end:{line:22,column:7}},"8":{start:{line:13,column:8},end:{line:15,column:11}},"9":{start:{line:16,column:8},end:{line:16,column:60}},"10":{start:{line:17,column:8},end:{line:17,column:62}},"11":{start:{line:18,column:8},end:{line:18,column:56}},"12":{start:{line:19,column:8},end:{line:19,column:56}},"13":{start:{line:20,column:8},end:{line:20,column:56}},"14":{start:{line:21,column:8},end:{line:21,column:56}},"15":{start:{line:23,column:4},end:{line:31,column:7}},"16":{start:{line:24,column:8},end:{line:24,column:43}},"17":{start:{line:25,column:8},end:{line:25,column:64}},"18":{start:{line:26,column:8},end:{line:26,column:65}},"19":{start:{line:27,column:8},end:{line:27,column:59}},"20":{start:{line:28,column:8},end:{line:28,column:59}},"21":{start:{line:29,column:8},end:{line:29,column:59}},"22":{start:{line:30,column:8},end:{line:30,column:59}},"23":{start:{line:32,column:4},end:{line:47,column:7}},"24":{start:{line:33,column:8},end:{line:33,column:38}},"25":{start:{line:34,column:8},end:{line:34,column:86}},"26":{start:{line:35,column:8},end:{line:35,column:86}},"27":{start:{line:36,column:8},end:{line:36,column:81}},"28":{start:{line:37,column:8},end:{line:37,column:81}},"29":{start:{line:38,column:8},end:{line:38,column:81}},"30":{start:{line:39,column:8},end:{line:39,column:81}},"31":{start:{line:40,column:8},end:{line:40,column:39}},"32":{start:{line:41,column:8},end:{line:41,column:90}},"33":{start:{line:42,column:8},end:{line:42,column:90}},"34":{start:{line:43,column:8},end:{line:43,column:85}},"35":{start:{line:44,column:8},end:{line:44,column:85}},"36":{start:{line:45,column:8},end:{line:45,column:85}},"37":{start:{line:46,column:8},end:{line:46,column:85}},"38":{start:{line:48,column:4},end:{line:63,column:7}},"39":{start:{line:49,column:8},end:{line:49,column:42}},"40":{start:{line:50,column:8},end:{line:50,column:67}},"41":{start:{line:51,column:8},end:{line:51,column:67}},"42":{start:{line:52,column:8},end:{line:52,column:62}},"43":{start:{line:53,column:8},end:{line:53,column:62}},"44":{start:{line:54,column:8},end:{line:54,column:62}},"45":{start:{line:55,column:8},end:{line:55,column:62}},"46":{start:{line:56,column:8},end:{line:56,column:41}},"47":{start:{line:57,column:8},end:{line:57,column:75}},"48":{start:{line:58,column:8},end:{line:58,column:75}},"49":{start:{line:59,column:8},end:{line:59,column:70}},"50":{start:{line:60,column:8},end:{line:60,column:70}},"51":{start:{line:61,column:8},end:{line:61,column:70}},"52":{start:{line:62,column:8},end:{line:62,column:70}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:4,column:23},end:{line:4,column:24}},loc:{start:{line:4,column:29},end:{line:64,column:1}},line:4},"1":{name:"(anonymous_1)",decl:{start:{line:6,column:15},end:{line:6,column:16}},loc:{start:{line:6,column:21},end:{line:8,column:5}},line:6},"2":{name:"(anonymous_2)",decl:{start:{line:9,column:35},end:{line:9,column:36}},loc:{start:{line:9,column:41},end:{line:11,column:5}},line:9},"3":{name:"(anonymous_3)",decl:{start:{line:12,column:54},end:{line:12,column:55}},loc:{start:{line:12,column:60},end:{line:22,column:5}},line:12},"4":{name:"(anonymous_4)",decl:{start:{line:23,column:46},end:{line:23,column:47}},loc:{start:{line:23,column:52},end:{line:31,column:5}},line:23},"5":{name:"(anonymous_5)",decl:{start:{line:32,column:62},end:{line:32,column:63}},loc:{start:{line:32,column:68},end:{line:47,column:5}},line:32},"6":{name:"(anonymous_6)",decl:{start:{line:48,column:67},end:{line:48,column:68}},loc:{start:{line:48,column:73},end:{line:63,column:5}},line:48}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\ValuesScale\\valueScale.test.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\ValuesScale\\valueScale.test.ts"],names:[],mappings:"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",sourcesContent:["import { ValuesScale } from './ValuesScale';\r\n\r\ndescribe('ValueScale', () => {\r\n  let valuesScale: ValuesScale;\r\n\r\n  beforeEach(() => {\r\n    valuesScale = new ValuesScale();\r\n  });\r\n\r\n  it('ValueScale can be create', () => {\r\n    expect(valuesScale).toBeTruthy();\r\n  });\r\n\r\n  it('refreshValueScale() refresh scale correctly', () => {\r\n    valuesScale.refreshValueScale({\r\n      min: '0', max: '100', 20: '20', 40: '40', 60: '60', 80: '80',\r\n    });\r\n    expect(valuesScale.minValue.innerText).toEqual('0');\r\n    expect(valuesScale.maxValue.innerText).toEqual('100');\r\n    expect(valuesScale[20].innerText).toEqual('20');\r\n    expect(valuesScale[40].innerText).toEqual('40');\r\n    expect(valuesScale[60].innerText).toEqual('60');\r\n    expect(valuesScale[80].innerText).toEqual('80');\r\n  });\r\n\r\n  it('centersValues() calculate correctly', () => {\r\n    valuesScale.centersValues(100, 20);\r\n    expect(valuesScale.minValue.style.left).toEqual('10px');\r\n    expect(valuesScale.maxValue.style.right).toEqual('10px');\r\n    expect(valuesScale[20].style.left).toEqual('30px');\r\n    expect(valuesScale[40].style.left).toEqual('50px');\r\n    expect(valuesScale[60].style.left).toEqual('70px');\r\n    expect(valuesScale[80].style.left).toEqual('90px');\r\n  });\r\n\r\n  it('changePlane() operates the plane function correctly', () => {\r\n    valuesScale.changePlane(true);\r\n    expect(valuesScale.minValue).toHaveClass('goby-slider__value_state_vertical');\r\n    expect(valuesScale.maxValue).toHaveClass('goby-slider__value_state_vertical');\r\n    expect(valuesScale[20]).toHaveClass('goby-slider__value_state_vertical');\r\n    expect(valuesScale[40]).toHaveClass('goby-slider__value_state_vertical');\r\n    expect(valuesScale[60]).toHaveClass('goby-slider__value_state_vertical');\r\n    expect(valuesScale[80]).toHaveClass('goby-slider__value_state_vertical');\r\n    valuesScale.changePlane(false);\r\n    expect(valuesScale.minValue).not.toHaveClass('goby-slider__value_state_vertical');\r\n    expect(valuesScale.maxValue).not.toHaveClass('goby-slider__value_state_vertical');\r\n    expect(valuesScale[20]).not.toHaveClass('goby-slider__value_state_vertical');\r\n    expect(valuesScale[40]).not.toHaveClass('goby-slider__value_state_vertical');\r\n    expect(valuesScale[60]).not.toHaveClass('goby-slider__value_state_vertical');\r\n    expect(valuesScale[80]).not.toHaveClass('goby-slider__value_state_vertical');\r\n  });\r\n\r\n  it('hideValueScale() operates the display function correctly', () => {\r\n    valuesScale.hideValueScale(false);\r\n    expect(valuesScale.minValue.style.display).toEqual('none');\r\n    expect(valuesScale.maxValue.style.display).toEqual('none');\r\n    expect(valuesScale[20].style.display).toEqual('none');\r\n    expect(valuesScale[40].style.display).toEqual('none');\r\n    expect(valuesScale[60].style.display).toEqual('none');\r\n    expect(valuesScale[80].style.display).toEqual('none');\r\n    valuesScale.hideValueScale(true);\r\n    expect(valuesScale.minValue.style.display).toEqual('inline-block');\r\n    expect(valuesScale.maxValue.style.display).toEqual('inline-block');\r\n    expect(valuesScale[20].style.display).toEqual('inline-block');\r\n    expect(valuesScale[40].style.display).toEqual('inline-block');\r\n    expect(valuesScale[60].style.display).toEqual('inline-block');\r\n    expect(valuesScale[80].style.display).toEqual('inline-block');\r\n  });\r\n});\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_qan30v7ha.s[0]++;Object.defineProperty(exports, "__esModule", ({value:true}));const ValuesScale_1=(cov_qan30v7ha.s[1]++,__webpack_require__(/*! ./ValuesScale */ "./src/View/ValuesScale/ValuesScale.ts"));cov_qan30v7ha.s[2]++;describe('ValueScale',()=>{cov_qan30v7ha.f[0]++;let valuesScale;cov_qan30v7ha.s[3]++;beforeEach(()=>{cov_qan30v7ha.f[1]++;cov_qan30v7ha.s[4]++;valuesScale=new ValuesScale_1.ValuesScale();});cov_qan30v7ha.s[5]++;it('ValueScale can be create',()=>{cov_qan30v7ha.f[2]++;cov_qan30v7ha.s[6]++;expect(valuesScale).toBeTruthy();});cov_qan30v7ha.s[7]++;it('refreshValueScale() refresh scale correctly',()=>{cov_qan30v7ha.f[3]++;cov_qan30v7ha.s[8]++;valuesScale.refreshValueScale({min:'0',max:'100',20:'20',40:'40',60:'60',80:'80'});cov_qan30v7ha.s[9]++;expect(valuesScale.minValue.innerText).toEqual('0');cov_qan30v7ha.s[10]++;expect(valuesScale.maxValue.innerText).toEqual('100');cov_qan30v7ha.s[11]++;expect(valuesScale[20].innerText).toEqual('20');cov_qan30v7ha.s[12]++;expect(valuesScale[40].innerText).toEqual('40');cov_qan30v7ha.s[13]++;expect(valuesScale[60].innerText).toEqual('60');cov_qan30v7ha.s[14]++;expect(valuesScale[80].innerText).toEqual('80');});cov_qan30v7ha.s[15]++;it('centersValues() calculate correctly',()=>{cov_qan30v7ha.f[4]++;cov_qan30v7ha.s[16]++;valuesScale.centersValues(100,20);cov_qan30v7ha.s[17]++;expect(valuesScale.minValue.style.left).toEqual('10px');cov_qan30v7ha.s[18]++;expect(valuesScale.maxValue.style.right).toEqual('10px');cov_qan30v7ha.s[19]++;expect(valuesScale[20].style.left).toEqual('30px');cov_qan30v7ha.s[20]++;expect(valuesScale[40].style.left).toEqual('50px');cov_qan30v7ha.s[21]++;expect(valuesScale[60].style.left).toEqual('70px');cov_qan30v7ha.s[22]++;expect(valuesScale[80].style.left).toEqual('90px');});cov_qan30v7ha.s[23]++;it('changePlane() operates the plane function correctly',()=>{cov_qan30v7ha.f[5]++;cov_qan30v7ha.s[24]++;valuesScale.changePlane(true);cov_qan30v7ha.s[25]++;expect(valuesScale.minValue).toHaveClass('goby-slider__value_state_vertical');cov_qan30v7ha.s[26]++;expect(valuesScale.maxValue).toHaveClass('goby-slider__value_state_vertical');cov_qan30v7ha.s[27]++;expect(valuesScale[20]).toHaveClass('goby-slider__value_state_vertical');cov_qan30v7ha.s[28]++;expect(valuesScale[40]).toHaveClass('goby-slider__value_state_vertical');cov_qan30v7ha.s[29]++;expect(valuesScale[60]).toHaveClass('goby-slider__value_state_vertical');cov_qan30v7ha.s[30]++;expect(valuesScale[80]).toHaveClass('goby-slider__value_state_vertical');cov_qan30v7ha.s[31]++;valuesScale.changePlane(false);cov_qan30v7ha.s[32]++;expect(valuesScale.minValue).not.toHaveClass('goby-slider__value_state_vertical');cov_qan30v7ha.s[33]++;expect(valuesScale.maxValue).not.toHaveClass('goby-slider__value_state_vertical');cov_qan30v7ha.s[34]++;expect(valuesScale[20]).not.toHaveClass('goby-slider__value_state_vertical');cov_qan30v7ha.s[35]++;expect(valuesScale[40]).not.toHaveClass('goby-slider__value_state_vertical');cov_qan30v7ha.s[36]++;expect(valuesScale[60]).not.toHaveClass('goby-slider__value_state_vertical');cov_qan30v7ha.s[37]++;expect(valuesScale[80]).not.toHaveClass('goby-slider__value_state_vertical');});cov_qan30v7ha.s[38]++;it('hideValueScale() operates the display function correctly',()=>{cov_qan30v7ha.f[6]++;cov_qan30v7ha.s[39]++;valuesScale.hideValueScale(false);cov_qan30v7ha.s[40]++;expect(valuesScale.minValue.style.display).toEqual('none');cov_qan30v7ha.s[41]++;expect(valuesScale.maxValue.style.display).toEqual('none');cov_qan30v7ha.s[42]++;expect(valuesScale[20].style.display).toEqual('none');cov_qan30v7ha.s[43]++;expect(valuesScale[40].style.display).toEqual('none');cov_qan30v7ha.s[44]++;expect(valuesScale[60].style.display).toEqual('none');cov_qan30v7ha.s[45]++;expect(valuesScale[80].style.display).toEqual('none');cov_qan30v7ha.s[46]++;valuesScale.hideValueScale(true);cov_qan30v7ha.s[47]++;expect(valuesScale.minValue.style.display).toEqual('inline-block');cov_qan30v7ha.s[48]++;expect(valuesScale.maxValue.style.display).toEqual('inline-block');cov_qan30v7ha.s[49]++;expect(valuesScale[20].style.display).toEqual('inline-block');cov_qan30v7ha.s[50]++;expect(valuesScale[40].style.display).toEqual('inline-block');cov_qan30v7ha.s[51]++;expect(valuesScale[60].style.display).toEqual('inline-block');cov_qan30v7ha.s[52]++;expect(valuesScale[80].style.display).toEqual('inline-block');});});

/***/ }),

/***/ "./src/View/View.ts":
/*!**************************!*\
  !*** ./src/View/View.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
var cov_1czcrejyvk=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\View.ts",hash="b7fae1f6f9e4403f92b1294a81065e42c175a004",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\View.ts",statementMap:{"0":{start:{line:2,column:17},end:{line:7,column:1}},"1":{start:{line:3,column:12},end:{line:3,column:28}},"2":{start:{line:3,column:34},end:{line:3,column:125}},"3":{start:{line:4,column:4},end:{line:5,column:150}},"4":{start:{line:4,column:79},end:{line:4,column:131}},"5":{start:{line:5,column:9},end:{line:5,column:150}},"6":{start:{line:5,column:58},end:{line:5,column:150}},"7":{start:{line:5,column:81},end:{line:5,column:150}},"8":{start:{line:6,column:4},end:{line:6,column:66}},"9":{start:{line:8,column:0},end:{line:8,column:62}},"10":{start:{line:9,column:0},end:{line:9,column:22}},"11":{start:{line:10,column:29},end:{line:10,column:58}},"12":{start:{line:11,column:17},end:{line:11,column:43}},"13":{start:{line:12,column:18},end:{line:12,column:46}},"14":{start:{line:13,column:19},end:{line:13,column:49}},"15":{start:{line:14,column:27},end:{line:14,column:73}},"16":{start:{line:15,column:22},end:{line:15,column:58}},"17":{start:{line:16,column:19},end:{line:16,column:49}},"18":{start:{line:17,column:11},end:{line:274,column:1}},"19":{start:{line:19,column:8},end:{line:26,column:10}},"20":{start:{line:27,column:8},end:{line:27,column:29}},"21":{start:{line:28,column:8},end:{line:28,column:44}},"22":{start:{line:29,column:8},end:{line:29,column:47}},"23":{start:{line:30,column:8},end:{line:30,column:66}},"24":{start:{line:31,column:8},end:{line:31,column:59}},"25":{start:{line:32,column:8},end:{line:32,column:50}},"26":{start:{line:33,column:8},end:{line:33,column:38}},"27":{start:{line:34,column:8},end:{line:40,column:11}},"28":{start:{line:43,column:8},end:{line:48,column:11}},"29":{start:{line:49,column:8},end:{line:49,column:54}},"30":{start:{line:53,column:8},end:{line:53,column:40}},"31":{start:{line:54,column:8},end:{line:59,column:9}},"32":{start:{line:55,column:12},end:{line:55,column:172}},"33":{start:{line:58,column:12},end:{line:58,column:81}},"34":{start:{line:62,column:8},end:{line:63,column:59}},"35":{start:{line:66,column:8},end:{line:66,column:30}},"36":{start:{line:67,column:8},end:{line:68,column:36}},"37":{start:{line:68,column:12},end:{line:68,column:36}},"38":{start:{line:69,column:8},end:{line:69,column:79}},"39":{start:{line:70,column:8},end:{line:70,column:87}},"40":{start:{line:71,column:8},end:{line:72,column:80}},"41":{start:{line:72,column:12},end:{line:72,column:80}},"42":{start:{line:73,column:8},end:{line:80,column:11}},"43":{start:{line:83,column:8},end:{line:84,column:70}},"44":{start:{line:84,column:12},end:{line:84,column:70}},"45":{start:{line:85,column:8},end:{line:86,column:67}},"46":{start:{line:86,column:12},end:{line:86,column:67}},"47":{start:{line:87,column:8},end:{line:88,column:77}},"48":{start:{line:88,column:12},end:{line:88,column:77}},"49":{start:{line:89,column:8},end:{line:90,column:75}},"50":{start:{line:90,column:12},end:{line:90,column:75}},"51":{start:{line:91,column:8},end:{line:92,column:72}},"52":{start:{line:92,column:12},end:{line:92,column:72}},"53":{start:{line:95,column:8},end:{line:103,column:9}},"54":{start:{line:96,column:12},end:{line:100,column:15}},"55":{start:{line:101,column:12},end:{line:101,column:55}},"56":{start:{line:102,column:12},end:{line:102,column:59}},"57":{start:{line:104,column:8},end:{line:115,column:9}},"58":{start:{line:105,column:12},end:{line:109,column:15}},"59":{start:{line:110,column:12},end:{line:113,column:15}},"60":{start:{line:114,column:12},end:{line:114,column:66}},"61":{start:{line:116,column:8},end:{line:117,column:75}},"62":{start:{line:117,column:12},end:{line:117,column:75}},"63":{start:{line:118,column:8},end:{line:119,column:76}},"64":{start:{line:119,column:12},end:{line:119,column:76}},"65":{start:{line:120,column:8},end:{line:122,column:9}},"66":{start:{line:121,column:12},end:{line:121,column:44}},"67":{start:{line:125,column:33},end:{line:125,column:87}},"68":{start:{line:126,column:35},end:{line:126,column:39}},"69":{start:{line:127,column:8},end:{line:133,column:9}},"70":{start:{line:128,column:12},end:{line:132,column:15}},"71":{start:{line:134,column:37},end:{line:134,column:92}},"72":{start:{line:135,column:8},end:{line:136,column:50}},"73":{start:{line:136,column:12},end:{line:136,column:50}},"74":{start:{line:139,column:8},end:{line:141,column:11}},"75":{start:{line:140,column:12},end:{line:140,column:77}},"76":{start:{line:142,column:8},end:{line:142,column:102}},"77":{start:{line:143,column:8},end:{line:143,column:108}},"78":{start:{line:144,column:8},end:{line:144,column:118}},"79":{start:{line:145,column:8},end:{line:145,column:116}},"80":{start:{line:146,column:8},end:{line:146,column:112}},"81":{start:{line:147,column:8},end:{line:149,column:11}},"82":{start:{line:148,column:12},end:{line:148,column:79}},"83":{start:{line:150,column:8},end:{line:152,column:11}},"84":{start:{line:151,column:12},end:{line:151,column:79}},"85":{start:{line:153,column:8},end:{line:153,column:104}},"86":{start:{line:154,column:8},end:{line:156,column:11}},"87":{start:{line:155,column:12},end:{line:155,column:73}},"88":{start:{line:157,column:8},end:{line:157,column:81}},"89":{start:{line:158,column:8},end:{line:158,column:67}},"90":{start:{line:161,column:23},end:{line:161,column:35}},"91":{start:{line:162,column:8},end:{line:168,column:11}},"92":{start:{line:171,column:24},end:{line:171,column:36}},"93":{start:{line:172,column:8},end:{line:172,column:97}},"94":{start:{line:175,column:24},end:{line:175,column:36}},"95":{start:{line:176,column:8},end:{line:176,column:52}},"96":{start:{line:177,column:8},end:{line:181,column:11}},"97":{start:{line:182,column:8},end:{line:185,column:11}},"98":{start:{line:186,column:8},end:{line:186,column:62}},"99":{start:{line:189,column:24},end:{line:189,column:36}},"100":{start:{line:190,column:8},end:{line:190,column:54}},"101":{start:{line:191,column:8},end:{line:195,column:11}},"102":{start:{line:196,column:8},end:{line:196,column:62}},"103":{start:{line:197,column:8},end:{line:197,column:66}},"104":{start:{line:200,column:24},end:{line:200,column:36}},"105":{start:{line:201,column:8},end:{line:201,column:56}},"106":{start:{line:202,column:8},end:{line:202,column:71}},"107":{start:{line:205,column:24},end:{line:205,column:36}},"108":{start:{line:206,column:8},end:{line:206,column:59}},"109":{start:{line:207,column:8},end:{line:207,column:72}},"110":{start:{line:210,column:24},end:{line:210,column:36}},"111":{start:{line:212,column:8},end:{line:217,column:9}},"112":{start:{line:213,column:12},end:{line:213,column:28}},"113":{start:{line:216,column:12},end:{line:216,column:26}},"114":{start:{line:218,column:8},end:{line:218,column:91}},"115":{start:{line:221,column:24},end:{line:221,column:36}},"116":{start:{line:222,column:8},end:{line:222,column:56}},"117":{start:{line:223,column:8},end:{line:229,column:9}},"118":{start:{line:224,column:12},end:{line:224,column:64}},"119":{start:{line:225,column:12},end:{line:225,column:44}},"120":{start:{line:228,column:12},end:{line:228,column:80}},"121":{start:{line:232,column:24},end:{line:232,column:36}},"122":{start:{line:234,column:8},end:{line:239,column:9}},"123":{start:{line:235,column:12},end:{line:235,column:27}},"124":{start:{line:238,column:12},end:{line:238,column:27}},"125":{start:{line:240,column:8},end:{line:240,column:101}},"126":{start:{line:243,column:24},end:{line:243,column:36}},"127":{start:{line:244,column:8},end:{line:244,column:53}},"128":{start:{line:245,column:8},end:{line:245,column:87}},"129":{start:{line:248,column:32},end:{line:248,column:110}},"130":{start:{line:249,column:36},end:{line:249,column:140}},"131":{start:{line:250,column:33},end:{line:250,column:172}},"132":{start:{line:251,column:8},end:{line:252,column:19}},"133":{start:{line:252,column:12},end:{line:252,column:19}},"134":{start:{line:253,column:31},end:{line:253,column:98}},"135":{start:{line:254,column:29},end:{line:258,column:10}},"136":{start:{line:259,column:8},end:{line:259,column:60}},"137":{start:{line:260,column:31},end:{line:260,column:146}},"138":{start:{line:261,column:8},end:{line:265,column:11}},"139":{start:{line:266,column:8},end:{line:266,column:49}},"140":{start:{line:269,column:8},end:{line:269,column:79}},"141":{start:{line:270,column:8},end:{line:270,column:87}},"142":{start:{line:271,column:8},end:{line:272,column:80}},"143":{start:{line:272,column:12},end:{line:272,column:80}},"144":{start:{line:275,column:0},end:{line:277,column:9}},"145":{start:{line:278,column:0},end:{line:278,column:20}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:2,column:46},end:{line:2,column:47}},loc:{start:{line:2,column:87},end:{line:7,column:1}},line:2},"1":{name:"(anonymous_1)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:34},end:{line:41,column:5}},line:18},"2":{name:"(anonymous_2)",decl:{start:{line:42,column:4},end:{line:42,column:5}},loc:{start:{line:42,column:21},end:{line:50,column:5}},line:42},"3":{name:"(anonymous_3)",decl:{start:{line:51,column:4},end:{line:51,column:5}},loc:{start:{line:51,column:23},end:{line:60,column:5}},line:51},"4":{name:"(anonymous_4)",decl:{start:{line:61,column:4},end:{line:61,column:5}},loc:{start:{line:61,column:26},end:{line:64,column:5}},line:61},"5":{name:"(anonymous_5)",decl:{start:{line:65,column:4},end:{line:65,column:5}},loc:{start:{line:65,column:26},end:{line:81,column:5}},line:65},"6":{name:"(anonymous_6)",decl:{start:{line:82,column:4},end:{line:82,column:5}},loc:{start:{line:82,column:31},end:{line:93,column:5}},line:82},"7":{name:"(anonymous_7)",decl:{start:{line:94,column:4},end:{line:94,column:5}},loc:{start:{line:94,column:24},end:{line:123,column:5}},line:94},"8":{name:"(anonymous_8)",decl:{start:{line:124,column:4},end:{line:124,column:5}},loc:{start:{line:124,column:35},end:{line:137,column:5}},line:124},"9":{name:"(anonymous_9)",decl:{start:{line:138,column:4},end:{line:138,column:5}},loc:{start:{line:138,column:25},end:{line:159,column:5}},line:138},"10":{name:"(anonymous_10)",decl:{start:{line:139,column:48},end:{line:139,column:49}},loc:{start:{line:139,column:64},end:{line:141,column:9}},line:139},"11":{name:"(anonymous_11)",decl:{start:{line:147,column:99},end:{line:147,column:100}},loc:{start:{line:147,column:115},end:{line:149,column:9}},line:147},"12":{name:"(anonymous_12)",decl:{start:{line:150,column:107},end:{line:150,column:108}},loc:{start:{line:150,column:123},end:{line:152,column:9}},line:150},"13":{name:"(anonymous_13)",decl:{start:{line:154,column:65},end:{line:154,column:66}},loc:{start:{line:154,column:77},end:{line:156,column:9}},line:154},"14":{name:"(anonymous_14)",decl:{start:{line:160,column:4},end:{line:160,column:5}},loc:{start:{line:160,column:29},end:{line:169,column:5}},line:160},"15":{name:"(anonymous_15)",decl:{start:{line:170,column:4},end:{line:170,column:5}},loc:{start:{line:170,column:33},end:{line:173,column:5}},line:170},"16":{name:"(anonymous_16)",decl:{start:{line:174,column:4},end:{line:174,column:5}},loc:{start:{line:174,column:32},end:{line:187,column:5}},line:174},"17":{name:"(anonymous_17)",decl:{start:{line:188,column:4},end:{line:188,column:5}},loc:{start:{line:188,column:35},end:{line:198,column:5}},line:188},"18":{name:"(anonymous_18)",decl:{start:{line:199,column:4},end:{line:199,column:5}},loc:{start:{line:199,column:40},end:{line:203,column:5}},line:199},"19":{name:"(anonymous_19)",decl:{start:{line:204,column:4},end:{line:204,column:5}},loc:{start:{line:204,column:36},end:{line:208,column:5}},line:204},"20":{name:"(anonymous_20)",decl:{start:{line:209,column:4},end:{line:209,column:5}},loc:{start:{line:209,column:34},end:{line:219,column:5}},line:209},"21":{name:"(anonymous_21)",decl:{start:{line:220,column:4},end:{line:220,column:5}},loc:{start:{line:220,column:33},end:{line:230,column:5}},line:220},"22":{name:"(anonymous_22)",decl:{start:{line:231,column:4},end:{line:231,column:5}},loc:{start:{line:231,column:34},end:{line:241,column:5}},line:231},"23":{name:"(anonymous_23)",decl:{start:{line:242,column:4},end:{line:242,column:5}},loc:{start:{line:242,column:37},end:{line:246,column:5}},line:242},"24":{name:"(anonymous_24)",decl:{start:{line:247,column:4},end:{line:247,column:5}},loc:{start:{line:247,column:29},end:{line:267,column:5}},line:247},"25":{name:"(anonymous_25)",decl:{start:{line:268,column:4},end:{line:268,column:5}},loc:{start:{line:268,column:25},end:{line:273,column:5}},line:268}},branchMap:{"0":{loc:{start:{line:2,column:17},end:{line:7,column:1}},type:"binary-expr",locations:[{start:{line:2,column:18},end:{line:2,column:22}},{start:{line:2,column:26},end:{line:2,column:41}},{start:{line:2,column:46},end:{line:7,column:1}}],line:2},"1":{loc:{start:{line:3,column:34},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:42},end:{line:3,column:48}},{start:{line:3,column:51},end:{line:3,column:125}}],line:3},"2":{loc:{start:{line:3,column:51},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:67},end:{line:3,column:118}},{start:{line:3,column:121},end:{line:3,column:125}}],line:3},"3":{loc:{start:{line:4,column:4},end:{line:5,column:150}},type:"if",locations:[{start:{line:4,column:4},end:{line:5,column:150}},{start:{line:4,column:4},end:{line:5,column:150}}],line:4},"4":{loc:{start:{line:4,column:8},end:{line:4,column:77}},type:"binary-expr",locations:[{start:{line:4,column:8},end:{line:4,column:35}},{start:{line:4,column:39},end:{line:4,column:77}}],line:4},"5":{loc:{start:{line:5,column:58},end:{line:5,column:150}},type:"if",locations:[{start:{line:5,column:58},end:{line:5,column:150}},{start:{line:5,column:58},end:{line:5,column:150}}],line:5},"6":{loc:{start:{line:5,column:85},end:{line:5,column:149}},type:"binary-expr",locations:[{start:{line:5,column:86},end:{line:5,column:143}},{start:{line:5,column:148},end:{line:5,column:149}}],line:5},"7":{loc:{start:{line:5,column:86},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:94},end:{line:5,column:98}},{start:{line:5,column:101},end:{line:5,column:143}}],line:5},"8":{loc:{start:{line:5,column:101},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:109},end:{line:5,column:126}},{start:{line:5,column:129},end:{line:5,column:143}}],line:5},"9":{loc:{start:{line:6,column:11},end:{line:6,column:62}},type:"binary-expr",locations:[{start:{line:6,column:11},end:{line:6,column:16}},{start:{line:6,column:20},end:{line:6,column:21}},{start:{line:6,column:25},end:{line:6,column:62}}],line:6},"10":{loc:{start:{line:54,column:8},end:{line:59,column:9}},type:"if",locations:[{start:{line:54,column:8},end:{line:59,column:9}},{start:{line:54,column:8},end:{line:59,column:9}}],line:54},"11":{loc:{start:{line:55,column:12},end:{line:55,column:171}},type:"cond-expr",locations:[{start:{line:55,column:103},end:{line:55,column:109}},{start:{line:55,column:112},end:{line:55,column:171}}],line:55},"12":{loc:{start:{line:55,column:12},end:{line:55,column:100}},type:"binary-expr",locations:[{start:{line:55,column:12},end:{line:55,column:83}},{start:{line:55,column:87},end:{line:55,column:100}}],line:55},"13":{loc:{start:{line:62,column:15},end:{line:63,column:58}},type:"binary-expr",locations:[{start:{line:62,column:15},end:{line:62,column:79}},{start:{line:63,column:15},end:{line:63,column:58}}],line:62},"14":{loc:{start:{line:67,column:8},end:{line:68,column:36}},type:"if",locations:[{start:{line:67,column:8},end:{line:68,column:36}},{start:{line:67,column:8},end:{line:68,column:36}}],line:67},"15":{loc:{start:{line:71,column:8},end:{line:72,column:80}},type:"if",locations:[{start:{line:71,column:8},end:{line:72,column:80}},{start:{line:71,column:8},end:{line:72,column:80}}],line:71},"16":{loc:{start:{line:83,column:8},end:{line:84,column:70}},type:"if",locations:[{start:{line:83,column:8},end:{line:84,column:70}},{start:{line:83,column:8},end:{line:84,column:70}}],line:83},"17":{loc:{start:{line:85,column:8},end:{line:86,column:67}},type:"if",locations:[{start:{line:85,column:8},end:{line:86,column:67}},{start:{line:85,column:8},end:{line:86,column:67}}],line:85},"18":{loc:{start:{line:87,column:8},end:{line:88,column:77}},type:"if",locations:[{start:{line:87,column:8},end:{line:88,column:77}},{start:{line:87,column:8},end:{line:88,column:77}}],line:87},"19":{loc:{start:{line:89,column:8},end:{line:90,column:75}},type:"if",locations:[{start:{line:89,column:8},end:{line:90,column:75}},{start:{line:89,column:8},end:{line:90,column:75}}],line:89},"20":{loc:{start:{line:91,column:8},end:{line:92,column:72}},type:"if",locations:[{start:{line:91,column:8},end:{line:92,column:72}},{start:{line:91,column:8},end:{line:92,column:72}}],line:91},"21":{loc:{start:{line:95,column:8},end:{line:103,column:9}},type:"if",locations:[{start:{line:95,column:8},end:{line:103,column:9}},{start:{line:95,column:8},end:{line:103,column:9}}],line:95},"22":{loc:{start:{line:104,column:8},end:{line:115,column:9}},type:"if",locations:[{start:{line:104,column:8},end:{line:115,column:9}},{start:{line:104,column:8},end:{line:115,column:9}}],line:104},"23":{loc:{start:{line:116,column:8},end:{line:117,column:75}},type:"if",locations:[{start:{line:116,column:8},end:{line:117,column:75}},{start:{line:116,column:8},end:{line:117,column:75}}],line:116},"24":{loc:{start:{line:118,column:8},end:{line:119,column:76}},type:"if",locations:[{start:{line:118,column:8},end:{line:119,column:76}},{start:{line:118,column:8},end:{line:119,column:76}}],line:118},"25":{loc:{start:{line:120,column:8},end:{line:122,column:9}},type:"if",locations:[{start:{line:120,column:8},end:{line:122,column:9}},{start:{line:120,column:8},end:{line:122,column:9}}],line:120},"26":{loc:{start:{line:125,column:33},end:{line:125,column:87}},type:"binary-expr",locations:[{start:{line:125,column:33},end:{line:125,column:58}},{start:{line:125,column:62},end:{line:125,column:87}}],line:125},"27":{loc:{start:{line:127,column:8},end:{line:133,column:9}},type:"if",locations:[{start:{line:127,column:8},end:{line:133,column:9}},{start:{line:127,column:8},end:{line:133,column:9}}],line:127},"28":{loc:{start:{line:134,column:37},end:{line:134,column:92}},type:"binary-expr",locations:[{start:{line:134,column:37},end:{line:134,column:57}},{start:{line:134,column:61},end:{line:134,column:92}}],line:134},"29":{loc:{start:{line:135,column:8},end:{line:136,column:50}},type:"if",locations:[{start:{line:135,column:8},end:{line:136,column:50}},{start:{line:135,column:8},end:{line:136,column:50}}],line:135},"30":{loc:{start:{line:212,column:8},end:{line:217,column:9}},type:"if",locations:[{start:{line:212,column:8},end:{line:217,column:9}},{start:{line:212,column:8},end:{line:217,column:9}}],line:212},"31":{loc:{start:{line:223,column:8},end:{line:229,column:9}},type:"if",locations:[{start:{line:223,column:8},end:{line:229,column:9}},{start:{line:223,column:8},end:{line:229,column:9}}],line:223},"32":{loc:{start:{line:234,column:8},end:{line:239,column:9}},type:"if",locations:[{start:{line:234,column:8},end:{line:239,column:9}},{start:{line:234,column:8},end:{line:239,column:9}}],line:234},"33":{loc:{start:{line:248,column:32},end:{line:248,column:110}},type:"binary-expr",locations:[{start:{line:248,column:32},end:{line:248,column:71}},{start:{line:248,column:75},end:{line:248,column:110}}],line:248},"34":{loc:{start:{line:251,column:8},end:{line:252,column:19}},type:"if",locations:[{start:{line:251,column:8},end:{line:252,column:19}},{start:{line:251,column:8},end:{line:252,column:19}}],line:251},"35":{loc:{start:{line:253,column:31},end:{line:253,column:98}},type:"cond-expr",locations:[{start:{line:253,column:61},end:{line:253,column:77}},{start:{line:253,column:80},end:{line:253,column:98}}],line:253},"36":{loc:{start:{line:271,column:8},end:{line:272,column:80}},type:"if",locations:[{start:{line:271,column:8},end:{line:272,column:80}},{start:{line:271,column:8},end:{line:272,column:80}}],line:271}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},b:{"0":[0,0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\View.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\View.ts"],names:[],mappings:"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",sourcesContent:["import autobind from 'autobind-decorator';\r\nimport { Slider } from './Slider/Slider';\r\nimport { Handles } from './Handles/Handles';\r\nimport { Movement } from './Movement/Movement';\r\nimport { SelectedInterval } from './SelectedInterval/SelectedInterval';\r\nimport { ValuesScale } from './ValuesScale/ValuesScale';\r\nimport { SideMenu } from './SideMenu/SideMenu';\r\nimport {\r\n  RefreshData,\r\n  BasicViewSettings,\r\n  DataRequestToModel,\r\n  TargetsForViewUpdate,\r\n} from './types';\r\n\r\n@autobind\r\nexport class View {\r\n  readonly target: HTMLElement;\r\n\r\n  readonly slider: Slider;\r\n\r\n  readonly handles: Handles;\r\n\r\n  readonly movement: Movement;\r\n\r\n  readonly interval: SelectedInterval;\r\n\r\n  readonly valuesScale: ValuesScale;\r\n\r\n  readonly sideMenu: SideMenu;\r\n\r\n  public basicSettings: BasicViewSettings;\r\n\r\n  public dataRequestToModel: DataRequestToModel = {\r\n    needDataForScale: { name: '', value: '' },\r\n    needDataForStartPosition: { name: '', value: '' },\r\n    needStepWidth: { name: '', value: '' },\r\n    needApplyValueFromScale: { name: '', value: '' },\r\n    needApplyNewValue: { name: '', value: '' },\r\n    needChangeSliderValuesRange: { name: '', value: '' },\r\n  };\r\n\r\n  constructor(settings: BasicViewSettings, target: HTMLElement) {\r\n    this.target = target;\r\n    this.slider = new Slider();\r\n    this.handles = new Handles();\r\n    this.interval = new SelectedInterval();\r\n    this.valuesScale = new ValuesScale();\r\n    this.sideMenu = new SideMenu();\r\n    this.basicSettings = settings;\r\n    this.movement = new Movement({\r\n      slider: this.slider.slider,\r\n      fromHandle: this.handles.fromHandle,\r\n      toHandle: this.handles.toHandle,\r\n      interval: this.interval.interval,\r\n      basicSettings: this.basicSettings,\r\n    });\r\n  }\r\n\r\n  private addSliderToDOM(): void {\r\n    this.slider.collectSlider({\r\n      from: this.handles.fromHandle,\r\n      to: this.handles.toHandle,\r\n      interval: this.interval.interval,\r\n      valueScale: this.valuesScale,\r\n    });\r\n    this.target.append(this.slider.sliderWrapper);\r\n  }\r\n\r\n  private addSideMenuToDOM(): void {\r\n    this.sideMenu.collectSideMenu();\r\n\r\n    if (typeof this.basicSettings['side-menu'] === 'string') {\r\n      document.querySelector(this.basicSettings['side-menu'])?.append(this.sideMenu.sideMenuElements.sideMenuContainer!);\r\n    } else {\r\n      this.target.append(this.sideMenu.sideMenuElements.sideMenuContainer!);\r\n    }\r\n  }\r\n\r\n  private checkIsStepRequired(): boolean {\r\n    return Object.prototype.hasOwnProperty.call(this.basicSettings, 'step')\r\n      && typeof this.basicSettings.step === 'number';\r\n  }\r\n\r\n  public prepareSliderForUse(): void {\r\n    this.addSliderToDOM();\r\n\r\n    if (this.basicSettings['side-menu']) this.addSideMenuToDOM();\r\n\r\n    this.dataRequestToModel.needDataForScale = { name: '', value: 'true' };\r\n    this.dataRequestToModel.needDataForStartPosition = { name: '', value: 'true' };\r\n\r\n    if (this.checkIsStepRequired()) this.dataRequestToModel.needStepWidth = { name: '', value: 'true' };\r\n\r\n    this.updateView({\r\n      vertical: this.basicSettings.vertical,\r\n      double: this.basicSettings.double,\r\n      sideMenu: this.basicSettings['side-menu'],\r\n      handlesValues: this.basicSettings.handlesValues,\r\n      valueScale: this.basicSettings.valueScale,\r\n      integer: this.basicSettings.integer,\r\n    });\r\n  }\r\n\r\n  private turnOnMenuToggles(targets: TargetsForViewUpdate): void {\r\n    if (targets.vertical) this.sideMenu.sideMenuElements.planeToggle!.checked = true;\r\n    if (targets.double) this.sideMenu.sideMenuElements.toToggle!.checked = true;\r\n    if (targets.handlesValues) this.sideMenu.sideMenuElements.handleValuesToggle!.checked = true;\r\n    if (targets.valueScale) this.sideMenu.sideMenuElements.valueScaleToggle!.checked = true;\r\n    if (targets.integer) this.sideMenu.sideMenuElements.integerToggle!.checked = true;\r\n  }\r\n\r\n  public updateView(targets: TargetsForViewUpdate): void {\r\n    if (targets.vertical) {\r\n      this.slider.changePlane({\r\n        isVertical: targets.vertical,\r\n        isStep: this.checkIsStepRequired(),\r\n        requests: this.dataRequestToModel,\r\n      });\r\n      this.handles.changePlane(targets.vertical);\r\n      this.valuesScale.changePlane(targets.vertical);\r\n    }\r\n    if (!targets.double) {\r\n      this.handles.controlHandlesDisplay({\r\n        isDouble: this.basicSettings.double,\r\n        positions: this.movement.positions,\r\n        sliderWidth: this.slider.slider.offsetWidth,\r\n      });\r\n      this.interval.hideSelectedInterval({\r\n        isDouble: this.basicSettings.double,\r\n        handleWidth: this.handles.fromHandle.offsetWidth,\r\n      });\r\n      this.sideMenu.hideToValues(this.basicSettings.double);\r\n    }\r\n    if (!targets.valueScale) this.valuesScale.hideValueScale(this.basicSettings.valueScale);\r\n    if (!targets.handlesValues) this.handles.hideHandleValues(this.basicSettings.handlesValues);\r\n    if (targets.sideMenu) {\r\n      this.turnOnMenuToggles(targets);\r\n    }\r\n  }\r\n\r\n  public refreshAllComponents(settings: RefreshData): void {\r\n    const isTargetNotRange = settings.target !== 'min' && settings.target !== 'max';\r\n    let handlesRefreshResult: boolean = true;\r\n\r\n    if (isTargetNotRange) {\r\n      handlesRefreshResult = this.handles.refreshValues(settings, {\r\n        positions: this.movement.positions,\r\n        isDouble: this.basicSettings.double,\r\n        sliderWidth: this.slider.slider.offsetWidth,\r\n      });\r\n    }\r\n\r\n    const isNeedSideMenuUpdate = handlesRefreshResult && this.basicSettings['side-menu'];\r\n    if (isNeedSideMenuUpdate) this.sideMenu.refreshValues(settings);\r\n  }\r\n\r\n  public bindEventListeners(): void {\r\n    Object.values(this.valuesScale).forEach((scaleValue: HTMLSpanElement): void => {\r\n      scaleValue.addEventListener('click', this.handleScaleValueClick);\r\n    });\r\n    this.sideMenu.sideMenuElements.toToggle!.addEventListener('change', this.handleToToggleChange);\r\n    this.sideMenu.sideMenuElements.planeToggle!.addEventListener('change', this.handlePlaneToggleChange);\r\n    this.sideMenu.sideMenuElements.valueScaleToggle!.addEventListener('change', this.handleValueScaleToggleChange);\r\n    this.sideMenu.sideMenuElements.handleValuesToggle!.addEventListener('change', this.handleHandleValuesChange);\r\n    this.sideMenu.sideMenuElements.integerToggle!.addEventListener('change', this.handleIntegerToggleChange);\r\n    [this.sideMenu.sideMenuElements.fromInput, this.sideMenu.sideMenuElements.toInput].forEach(\r\n      (valueInput: HTMLInputElement | undefined): void => {\r\n        valueInput!.addEventListener('change', this.handleValueInputChange);\r\n      },\r\n    );\r\n    [this.sideMenu.sideMenuElements.minimumInput, this.sideMenu.sideMenuElements.maximumInput].forEach(\r\n      (rangeInput: HTMLInputElement | undefined): void => {\r\n        rangeInput!.addEventListener('change', this.handleRangeInputChange);\r\n      },\r\n    );\r\n    this.sideMenu.sideMenuElements.stepInput!.addEventListener('change', this.handleStepInputChange);\r\n    [this.handles.fromHandle, this.handles.toHandle].forEach((handle: HTMLSpanElement):void => {\r\n      handle.addEventListener('mousedown', this.handleHandleClick);\r\n    });\r\n    this.slider.slider.addEventListener('mousedown', this.handleSliderClick);\r\n    window.addEventListener('resize', this.handleWindowResize);\r\n  }\r\n\r\n  private handleHandleClick(event: MouseEvent): void {\r\n    const target: HTMLSpanElement = event.target as HTMLSpanElement;\r\n    this.movement.handleListener({\r\n      eventInfo: {\r\n        target,\r\n        x: event.clientX,\r\n        y: event.clientY,\r\n      },\r\n    });\r\n  }\r\n\r\n  private handleScaleValueClick(event: Event): void {\r\n    const element: HTMLSpanElement = event.target as HTMLSpanElement;\r\n    this.dataRequestToModel.needApplyValueFromScale = { name: '', value: element.innerText };\r\n  }\r\n\r\n  private handleToToggleChange(event: Event): void {\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n\r\n    this.basicSettings.double = element.checked;\r\n    this.handles.controlHandlesDisplay({\r\n      isDouble: this.basicSettings.double,\r\n      positions: this.movement.positions,\r\n      sliderWidth: this.slider.slider.offsetWidth,\r\n    });\r\n    this.interval.hideSelectedInterval({\r\n      isDouble: this.basicSettings.double,\r\n      handleWidth: this.handles.fromHandle.offsetWidth,\r\n    });\r\n    this.sideMenu.hideToValues(this.basicSettings.double);\r\n  }\r\n\r\n  private handlePlaneToggleChange(event: Event): void {\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n\r\n    this.basicSettings.vertical = element.checked;\r\n    this.slider.changePlane({\r\n      isVertical: this.basicSettings.vertical,\r\n      isStep: this.checkIsStepRequired(),\r\n      requests: this.dataRequestToModel,\r\n    });\r\n    this.handles.changePlane(this.basicSettings.vertical);\r\n    this.valuesScale.changePlane(this.basicSettings.vertical);\r\n  }\r\n\r\n  private handleValueScaleToggleChange(event: Event): void {\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n\r\n    this.basicSettings.valueScale = element.checked;\r\n    this.valuesScale.hideValueScale(this.basicSettings.valueScale);\r\n  }\r\n\r\n  private handleHandleValuesChange(event: Event): void {\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n\r\n    this.basicSettings.handlesValues = element.checked;\r\n    this.handles.hideHandleValues(this.basicSettings.handlesValues);\r\n  }\r\n\r\n  private handleValueInputChange(event: Event): void {\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n    let target: string;\r\n\r\n    if (element === this.sideMenu.sideMenuElements.fromInput) {\r\n      target = 'from';\r\n    } else {\r\n      target = 'to';\r\n    }\r\n\r\n    this.dataRequestToModel.needApplyNewValue = { name: target, value: element.value };\r\n  }\r\n\r\n  private handleStepInputChange(event: Event): void {\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n\r\n    this.basicSettings.step = Number(element.value);\r\n    if (element.value === '0') {\r\n      this.sideMenu.sideMenuElements.stepInput!.value = '';\r\n      this.basicSettings.step = false;\r\n    } else {\r\n      this.dataRequestToModel.needStepWidth = { name: '', value: 'true' };\r\n    }\r\n  }\r\n\r\n  private handleRangeInputChange(event: Event): void {\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n    let target: string;\r\n\r\n    if (element === this.sideMenu.sideMenuElements.minimumInput) {\r\n      target = 'min';\r\n    } else {\r\n      target = 'max';\r\n    }\r\n\r\n    this.dataRequestToModel.needChangeSliderValuesRange = { name: target, value: element.value };\r\n  }\r\n\r\n  private handleIntegerToggleChange(event: Event): void {\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n    this.basicSettings.integer = element.checked;\r\n    this.dataRequestToModel.needDataForStartPosition = { name: '', value: 'true' };\r\n  }\r\n\r\n  private handleSliderClick(event: MouseEvent): void {\r\n    const isNotSliderBody = event.target !== this.interval.interval && event.target !== this.slider.slider;\r\n    const horizontalPosition: number = (\r\n      event.clientX - this.slider.slider.getBoundingClientRect().x - (this.handles.fromHandle.offsetWidth / 2)\r\n    );\r\n    const verticalPosition: number = this.slider.slider.offsetWidth - (\r\n      event.clientY - this.slider.slider.getBoundingClientRect().y + (this.handles.fromHandle.offsetWidth / 2)\r\n    );\r\n    if (isNotSliderBody) return;\r\n\r\n    const targetPosition: number = this.basicSettings.vertical ? verticalPosition : horizontalPosition;\r\n    const targetHandle: HTMLSpanElement = this.handles.selectsHandleToMove({\r\n      targetPosition,\r\n      positions: this.movement.positions,\r\n      isDouble: this.basicSettings.double,\r\n    });\r\n    this.movement.dataForMovement.target = targetHandle;\r\n    const correctedValue: number = this.movement.correctsImpossiblePosition(\r\n      this.slider.slider.offsetWidth - targetHandle.offsetWidth,\r\n      targetPosition,\r\n    );\r\n    this.handles.acceptNewPosition({\r\n      target: targetHandle,\r\n      value: correctedValue,\r\n      positions: this.movement.positions,\r\n    });\r\n    this.movement.correctsIntervalPosition();\r\n  }\r\n\r\n  private handleWindowResize(): void {\r\n    this.dataRequestToModel.needDataForScale = { name: '', value: 'true' };\r\n    this.dataRequestToModel.needDataForStartPosition = { name: '', value: 'true' };\r\n    if (this.checkIsStepRequired()) this.dataRequestToModel.needStepWidth = { name: '', value: 'true' };\r\n  }\r\n}\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();var __decorate=(cov_1czcrejyvk.s[0]++,(cov_1czcrejyvk.b[0][0]++,this)&&(cov_1czcrejyvk.b[0][1]++,this.__decorate)||(cov_1czcrejyvk.b[0][2]++,function(decorators,target,key,desc){cov_1czcrejyvk.f[0]++;var c=(cov_1czcrejyvk.s[1]++,arguments.length),r=(cov_1czcrejyvk.s[2]++,c<3?(cov_1czcrejyvk.b[1][0]++,target):(cov_1czcrejyvk.b[1][1]++,desc===null?(cov_1czcrejyvk.b[2][0]++,desc=Object.getOwnPropertyDescriptor(target,key)):(cov_1czcrejyvk.b[2][1]++,desc))),d;cov_1czcrejyvk.s[3]++;if((cov_1czcrejyvk.b[4][0]++,typeof Reflect==="object")&&(cov_1czcrejyvk.b[4][1]++,typeof Reflect.decorate==="function")){cov_1czcrejyvk.b[3][0]++;cov_1czcrejyvk.s[4]++;r=Reflect.decorate(decorators,target,key,desc);}else{cov_1czcrejyvk.b[3][1]++;cov_1czcrejyvk.s[5]++;for(var i=decorators.length-1;i>=0;i--){cov_1czcrejyvk.s[6]++;if(d=decorators[i]){cov_1czcrejyvk.b[5][0]++;cov_1czcrejyvk.s[7]++;r=(cov_1czcrejyvk.b[6][0]++,c<3?(cov_1czcrejyvk.b[7][0]++,d(r)):(cov_1czcrejyvk.b[7][1]++,c>3?(cov_1czcrejyvk.b[8][0]++,d(target,key,r)):(cov_1czcrejyvk.b[8][1]++,d(target,key))))||(cov_1czcrejyvk.b[6][1]++,r);}else{cov_1czcrejyvk.b[5][1]++;}}}cov_1czcrejyvk.s[8]++;return(cov_1czcrejyvk.b[9][0]++,c>3)&&(cov_1czcrejyvk.b[9][1]++,r)&&(cov_1czcrejyvk.b[9][2]++,Object.defineProperty(target,key,r)),r;}));cov_1czcrejyvk.s[9]++;Object.defineProperty(exports, "__esModule", ({value:true}));cov_1czcrejyvk.s[10]++;exports.View=void 0;const autobind_decorator_1=(cov_1czcrejyvk.s[11]++,__webpack_require__(/*! autobind-decorator */ "./node_modules/autobind-decorator/lib/esm/index.js"));const Slider_1=(cov_1czcrejyvk.s[12]++,__webpack_require__(/*! ./Slider/Slider */ "./src/View/Slider/Slider.ts"));const Handles_1=(cov_1czcrejyvk.s[13]++,__webpack_require__(/*! ./Handles/Handles */ "./src/View/Handles/Handles.ts"));const Movement_1=(cov_1czcrejyvk.s[14]++,__webpack_require__(/*! ./Movement/Movement */ "./src/View/Movement/Movement.ts"));const SelectedInterval_1=(cov_1czcrejyvk.s[15]++,__webpack_require__(/*! ./SelectedInterval/SelectedInterval */ "./src/View/SelectedInterval/SelectedInterval.ts"));const ValuesScale_1=(cov_1czcrejyvk.s[16]++,__webpack_require__(/*! ./ValuesScale/ValuesScale */ "./src/View/ValuesScale/ValuesScale.ts"));const SideMenu_1=(cov_1czcrejyvk.s[17]++,__webpack_require__(/*! ./SideMenu/SideMenu */ "./src/View/SideMenu/SideMenu.ts"));cov_1czcrejyvk.s[18]++;let View=class View{constructor(settings,target){cov_1czcrejyvk.f[1]++;cov_1czcrejyvk.s[19]++;this.dataRequestToModel={needDataForScale:{name:'',value:''},needDataForStartPosition:{name:'',value:''},needStepWidth:{name:'',value:''},needApplyValueFromScale:{name:'',value:''},needApplyNewValue:{name:'',value:''},needChangeSliderValuesRange:{name:'',value:''}};cov_1czcrejyvk.s[20]++;this.target=target;cov_1czcrejyvk.s[21]++;this.slider=new Slider_1.Slider();cov_1czcrejyvk.s[22]++;this.handles=new Handles_1.Handles();cov_1czcrejyvk.s[23]++;this.interval=new SelectedInterval_1.SelectedInterval();cov_1czcrejyvk.s[24]++;this.valuesScale=new ValuesScale_1.ValuesScale();cov_1czcrejyvk.s[25]++;this.sideMenu=new SideMenu_1.SideMenu();cov_1czcrejyvk.s[26]++;this.basicSettings=settings;cov_1czcrejyvk.s[27]++;this.movement=new Movement_1.Movement({slider:this.slider.slider,fromHandle:this.handles.fromHandle,toHandle:this.handles.toHandle,interval:this.interval.interval,basicSettings:this.basicSettings});}addSliderToDOM(){cov_1czcrejyvk.f[2]++;cov_1czcrejyvk.s[28]++;this.slider.collectSlider({from:this.handles.fromHandle,to:this.handles.toHandle,interval:this.interval.interval,valueScale:this.valuesScale});cov_1czcrejyvk.s[29]++;this.target.append(this.slider.sliderWrapper);}addSideMenuToDOM(){cov_1czcrejyvk.f[3]++;var _a;cov_1czcrejyvk.s[30]++;this.sideMenu.collectSideMenu();cov_1czcrejyvk.s[31]++;if(typeof this.basicSettings['side-menu']==='string'){cov_1czcrejyvk.b[10][0]++;cov_1czcrejyvk.s[32]++;(cov_1czcrejyvk.b[12][0]++,(_a=document.querySelector(this.basicSettings['side-menu']))===null)||(cov_1czcrejyvk.b[12][1]++,_a===void 0)?(cov_1czcrejyvk.b[11][0]++,void 0):(cov_1czcrejyvk.b[11][1]++,_a.append(this.sideMenu.sideMenuElements.sideMenuContainer));}else{cov_1czcrejyvk.b[10][1]++;cov_1czcrejyvk.s[33]++;this.target.append(this.sideMenu.sideMenuElements.sideMenuContainer);}}checkIsStepRequired(){cov_1czcrejyvk.f[4]++;cov_1czcrejyvk.s[34]++;return(cov_1czcrejyvk.b[13][0]++,Object.prototype.hasOwnProperty.call(this.basicSettings,'step'))&&(cov_1czcrejyvk.b[13][1]++,typeof this.basicSettings.step==='number');}prepareSliderForUse(){cov_1czcrejyvk.f[5]++;cov_1czcrejyvk.s[35]++;this.addSliderToDOM();cov_1czcrejyvk.s[36]++;if(this.basicSettings['side-menu']){cov_1czcrejyvk.b[14][0]++;cov_1czcrejyvk.s[37]++;this.addSideMenuToDOM();}else{cov_1czcrejyvk.b[14][1]++;}cov_1czcrejyvk.s[38]++;this.dataRequestToModel.needDataForScale={name:'',value:'true'};cov_1czcrejyvk.s[39]++;this.dataRequestToModel.needDataForStartPosition={name:'',value:'true'};cov_1czcrejyvk.s[40]++;if(this.checkIsStepRequired()){cov_1czcrejyvk.b[15][0]++;cov_1czcrejyvk.s[41]++;this.dataRequestToModel.needStepWidth={name:'',value:'true'};}else{cov_1czcrejyvk.b[15][1]++;}cov_1czcrejyvk.s[42]++;this.updateView({vertical:this.basicSettings.vertical,double:this.basicSettings.double,sideMenu:this.basicSettings['side-menu'],handlesValues:this.basicSettings.handlesValues,valueScale:this.basicSettings.valueScale,integer:this.basicSettings.integer});}turnOnMenuToggles(targets){cov_1czcrejyvk.f[6]++;cov_1czcrejyvk.s[43]++;if(targets.vertical){cov_1czcrejyvk.b[16][0]++;cov_1czcrejyvk.s[44]++;this.sideMenu.sideMenuElements.planeToggle.checked=true;}else{cov_1czcrejyvk.b[16][1]++;}cov_1czcrejyvk.s[45]++;if(targets.double){cov_1czcrejyvk.b[17][0]++;cov_1czcrejyvk.s[46]++;this.sideMenu.sideMenuElements.toToggle.checked=true;}else{cov_1czcrejyvk.b[17][1]++;}cov_1czcrejyvk.s[47]++;if(targets.handlesValues){cov_1czcrejyvk.b[18][0]++;cov_1czcrejyvk.s[48]++;this.sideMenu.sideMenuElements.handleValuesToggle.checked=true;}else{cov_1czcrejyvk.b[18][1]++;}cov_1czcrejyvk.s[49]++;if(targets.valueScale){cov_1czcrejyvk.b[19][0]++;cov_1czcrejyvk.s[50]++;this.sideMenu.sideMenuElements.valueScaleToggle.checked=true;}else{cov_1czcrejyvk.b[19][1]++;}cov_1czcrejyvk.s[51]++;if(targets.integer){cov_1czcrejyvk.b[20][0]++;cov_1czcrejyvk.s[52]++;this.sideMenu.sideMenuElements.integerToggle.checked=true;}else{cov_1czcrejyvk.b[20][1]++;}}updateView(targets){cov_1czcrejyvk.f[7]++;cov_1czcrejyvk.s[53]++;if(targets.vertical){cov_1czcrejyvk.b[21][0]++;cov_1czcrejyvk.s[54]++;this.slider.changePlane({isVertical:targets.vertical,isStep:this.checkIsStepRequired(),requests:this.dataRequestToModel});cov_1czcrejyvk.s[55]++;this.handles.changePlane(targets.vertical);cov_1czcrejyvk.s[56]++;this.valuesScale.changePlane(targets.vertical);}else{cov_1czcrejyvk.b[21][1]++;}cov_1czcrejyvk.s[57]++;if(!targets.double){cov_1czcrejyvk.b[22][0]++;cov_1czcrejyvk.s[58]++;this.handles.controlHandlesDisplay({isDouble:this.basicSettings.double,positions:this.movement.positions,sliderWidth:this.slider.slider.offsetWidth});cov_1czcrejyvk.s[59]++;this.interval.hideSelectedInterval({isDouble:this.basicSettings.double,handleWidth:this.handles.fromHandle.offsetWidth});cov_1czcrejyvk.s[60]++;this.sideMenu.hideToValues(this.basicSettings.double);}else{cov_1czcrejyvk.b[22][1]++;}cov_1czcrejyvk.s[61]++;if(!targets.valueScale){cov_1czcrejyvk.b[23][0]++;cov_1czcrejyvk.s[62]++;this.valuesScale.hideValueScale(this.basicSettings.valueScale);}else{cov_1czcrejyvk.b[23][1]++;}cov_1czcrejyvk.s[63]++;if(!targets.handlesValues){cov_1czcrejyvk.b[24][0]++;cov_1czcrejyvk.s[64]++;this.handles.hideHandleValues(this.basicSettings.handlesValues);}else{cov_1czcrejyvk.b[24][1]++;}cov_1czcrejyvk.s[65]++;if(targets.sideMenu){cov_1czcrejyvk.b[25][0]++;cov_1czcrejyvk.s[66]++;this.turnOnMenuToggles(targets);}else{cov_1czcrejyvk.b[25][1]++;}}refreshAllComponents(settings){cov_1czcrejyvk.f[8]++;const isTargetNotRange=(cov_1czcrejyvk.s[67]++,(cov_1czcrejyvk.b[26][0]++,settings.target!=='min')&&(cov_1czcrejyvk.b[26][1]++,settings.target!=='max'));let handlesRefreshResult=(cov_1czcrejyvk.s[68]++,true);cov_1czcrejyvk.s[69]++;if(isTargetNotRange){cov_1czcrejyvk.b[27][0]++;cov_1czcrejyvk.s[70]++;handlesRefreshResult=this.handles.refreshValues(settings,{positions:this.movement.positions,isDouble:this.basicSettings.double,sliderWidth:this.slider.slider.offsetWidth});}else{cov_1czcrejyvk.b[27][1]++;}const isNeedSideMenuUpdate=(cov_1czcrejyvk.s[71]++,(cov_1czcrejyvk.b[28][0]++,handlesRefreshResult)&&(cov_1czcrejyvk.b[28][1]++,this.basicSettings['side-menu']));cov_1czcrejyvk.s[72]++;if(isNeedSideMenuUpdate){cov_1czcrejyvk.b[29][0]++;cov_1czcrejyvk.s[73]++;this.sideMenu.refreshValues(settings);}else{cov_1czcrejyvk.b[29][1]++;}}bindEventListeners(){cov_1czcrejyvk.f[9]++;cov_1czcrejyvk.s[74]++;Object.values(this.valuesScale).forEach(scaleValue=>{cov_1czcrejyvk.f[10]++;cov_1czcrejyvk.s[75]++;scaleValue.addEventListener('click',this.handleScaleValueClick);});cov_1czcrejyvk.s[76]++;this.sideMenu.sideMenuElements.toToggle.addEventListener('change',this.handleToToggleChange);cov_1czcrejyvk.s[77]++;this.sideMenu.sideMenuElements.planeToggle.addEventListener('change',this.handlePlaneToggleChange);cov_1czcrejyvk.s[78]++;this.sideMenu.sideMenuElements.valueScaleToggle.addEventListener('change',this.handleValueScaleToggleChange);cov_1czcrejyvk.s[79]++;this.sideMenu.sideMenuElements.handleValuesToggle.addEventListener('change',this.handleHandleValuesChange);cov_1czcrejyvk.s[80]++;this.sideMenu.sideMenuElements.integerToggle.addEventListener('change',this.handleIntegerToggleChange);cov_1czcrejyvk.s[81]++;[this.sideMenu.sideMenuElements.fromInput,this.sideMenu.sideMenuElements.toInput].forEach(valueInput=>{cov_1czcrejyvk.f[11]++;cov_1czcrejyvk.s[82]++;valueInput.addEventListener('change',this.handleValueInputChange);});cov_1czcrejyvk.s[83]++;[this.sideMenu.sideMenuElements.minimumInput,this.sideMenu.sideMenuElements.maximumInput].forEach(rangeInput=>{cov_1czcrejyvk.f[12]++;cov_1czcrejyvk.s[84]++;rangeInput.addEventListener('change',this.handleRangeInputChange);});cov_1czcrejyvk.s[85]++;this.sideMenu.sideMenuElements.stepInput.addEventListener('change',this.handleStepInputChange);cov_1czcrejyvk.s[86]++;[this.handles.fromHandle,this.handles.toHandle].forEach(handle=>{cov_1czcrejyvk.f[13]++;cov_1czcrejyvk.s[87]++;handle.addEventListener('mousedown',this.handleHandleClick);});cov_1czcrejyvk.s[88]++;this.slider.slider.addEventListener('mousedown',this.handleSliderClick);cov_1czcrejyvk.s[89]++;window.addEventListener('resize',this.handleWindowResize);}handleHandleClick(event){cov_1czcrejyvk.f[14]++;const target=(cov_1czcrejyvk.s[90]++,event.target);cov_1czcrejyvk.s[91]++;this.movement.handleListener({eventInfo:{target,x:event.clientX,y:event.clientY}});}handleScaleValueClick(event){cov_1czcrejyvk.f[15]++;const element=(cov_1czcrejyvk.s[92]++,event.target);cov_1czcrejyvk.s[93]++;this.dataRequestToModel.needApplyValueFromScale={name:'',value:element.innerText};}handleToToggleChange(event){cov_1czcrejyvk.f[16]++;const element=(cov_1czcrejyvk.s[94]++,event.target);cov_1czcrejyvk.s[95]++;this.basicSettings.double=element.checked;cov_1czcrejyvk.s[96]++;this.handles.controlHandlesDisplay({isDouble:this.basicSettings.double,positions:this.movement.positions,sliderWidth:this.slider.slider.offsetWidth});cov_1czcrejyvk.s[97]++;this.interval.hideSelectedInterval({isDouble:this.basicSettings.double,handleWidth:this.handles.fromHandle.offsetWidth});cov_1czcrejyvk.s[98]++;this.sideMenu.hideToValues(this.basicSettings.double);}handlePlaneToggleChange(event){cov_1czcrejyvk.f[17]++;const element=(cov_1czcrejyvk.s[99]++,event.target);cov_1czcrejyvk.s[100]++;this.basicSettings.vertical=element.checked;cov_1czcrejyvk.s[101]++;this.slider.changePlane({isVertical:this.basicSettings.vertical,isStep:this.checkIsStepRequired(),requests:this.dataRequestToModel});cov_1czcrejyvk.s[102]++;this.handles.changePlane(this.basicSettings.vertical);cov_1czcrejyvk.s[103]++;this.valuesScale.changePlane(this.basicSettings.vertical);}handleValueScaleToggleChange(event){cov_1czcrejyvk.f[18]++;const element=(cov_1czcrejyvk.s[104]++,event.target);cov_1czcrejyvk.s[105]++;this.basicSettings.valueScale=element.checked;cov_1czcrejyvk.s[106]++;this.valuesScale.hideValueScale(this.basicSettings.valueScale);}handleHandleValuesChange(event){cov_1czcrejyvk.f[19]++;const element=(cov_1czcrejyvk.s[107]++,event.target);cov_1czcrejyvk.s[108]++;this.basicSettings.handlesValues=element.checked;cov_1czcrejyvk.s[109]++;this.handles.hideHandleValues(this.basicSettings.handlesValues);}handleValueInputChange(event){cov_1czcrejyvk.f[20]++;const element=(cov_1czcrejyvk.s[110]++,event.target);let target;cov_1czcrejyvk.s[111]++;if(element===this.sideMenu.sideMenuElements.fromInput){cov_1czcrejyvk.b[30][0]++;cov_1czcrejyvk.s[112]++;target='from';}else{cov_1czcrejyvk.b[30][1]++;cov_1czcrejyvk.s[113]++;target='to';}cov_1czcrejyvk.s[114]++;this.dataRequestToModel.needApplyNewValue={name:target,value:element.value};}handleStepInputChange(event){cov_1czcrejyvk.f[21]++;const element=(cov_1czcrejyvk.s[115]++,event.target);cov_1czcrejyvk.s[116]++;this.basicSettings.step=Number(element.value);cov_1czcrejyvk.s[117]++;if(element.value==='0'){cov_1czcrejyvk.b[31][0]++;cov_1czcrejyvk.s[118]++;this.sideMenu.sideMenuElements.stepInput.value='';cov_1czcrejyvk.s[119]++;this.basicSettings.step=false;}else{cov_1czcrejyvk.b[31][1]++;cov_1czcrejyvk.s[120]++;this.dataRequestToModel.needStepWidth={name:'',value:'true'};}}handleRangeInputChange(event){cov_1czcrejyvk.f[22]++;const element=(cov_1czcrejyvk.s[121]++,event.target);let target;cov_1czcrejyvk.s[122]++;if(element===this.sideMenu.sideMenuElements.minimumInput){cov_1czcrejyvk.b[32][0]++;cov_1czcrejyvk.s[123]++;target='min';}else{cov_1czcrejyvk.b[32][1]++;cov_1czcrejyvk.s[124]++;target='max';}cov_1czcrejyvk.s[125]++;this.dataRequestToModel.needChangeSliderValuesRange={name:target,value:element.value};}handleIntegerToggleChange(event){cov_1czcrejyvk.f[23]++;const element=(cov_1czcrejyvk.s[126]++,event.target);cov_1czcrejyvk.s[127]++;this.basicSettings.integer=element.checked;cov_1czcrejyvk.s[128]++;this.dataRequestToModel.needDataForStartPosition={name:'',value:'true'};}handleSliderClick(event){cov_1czcrejyvk.f[24]++;const isNotSliderBody=(cov_1czcrejyvk.s[129]++,(cov_1czcrejyvk.b[33][0]++,event.target!==this.interval.interval)&&(cov_1czcrejyvk.b[33][1]++,event.target!==this.slider.slider));const horizontalPosition=(cov_1czcrejyvk.s[130]++,event.clientX-this.slider.slider.getBoundingClientRect().x-this.handles.fromHandle.offsetWidth/2);const verticalPosition=(cov_1czcrejyvk.s[131]++,this.slider.slider.offsetWidth-(event.clientY-this.slider.slider.getBoundingClientRect().y+this.handles.fromHandle.offsetWidth/2));cov_1czcrejyvk.s[132]++;if(isNotSliderBody){cov_1czcrejyvk.b[34][0]++;cov_1czcrejyvk.s[133]++;return;}else{cov_1czcrejyvk.b[34][1]++;}const targetPosition=(cov_1czcrejyvk.s[134]++,this.basicSettings.vertical?(cov_1czcrejyvk.b[35][0]++,verticalPosition):(cov_1czcrejyvk.b[35][1]++,horizontalPosition));const targetHandle=(cov_1czcrejyvk.s[135]++,this.handles.selectsHandleToMove({targetPosition,positions:this.movement.positions,isDouble:this.basicSettings.double}));cov_1czcrejyvk.s[136]++;this.movement.dataForMovement.target=targetHandle;const correctedValue=(cov_1czcrejyvk.s[137]++,this.movement.correctsImpossiblePosition(this.slider.slider.offsetWidth-targetHandle.offsetWidth,targetPosition));cov_1czcrejyvk.s[138]++;this.handles.acceptNewPosition({target:targetHandle,value:correctedValue,positions:this.movement.positions});cov_1czcrejyvk.s[139]++;this.movement.correctsIntervalPosition();}handleWindowResize(){cov_1czcrejyvk.f[25]++;cov_1czcrejyvk.s[140]++;this.dataRequestToModel.needDataForScale={name:'',value:'true'};cov_1czcrejyvk.s[141]++;this.dataRequestToModel.needDataForStartPosition={name:'',value:'true'};cov_1czcrejyvk.s[142]++;if(this.checkIsStepRequired()){cov_1czcrejyvk.b[36][0]++;cov_1czcrejyvk.s[143]++;this.dataRequestToModel.needStepWidth={name:'',value:'true'};}else{cov_1czcrejyvk.b[36][1]++;}}};cov_1czcrejyvk.s[144]++;View=__decorate([autobind_decorator_1.default],View);cov_1czcrejyvk.s[145]++;exports.View=View;

/***/ }),

/***/ "./src/View/types.ts":
/*!***************************!*\
  !*** ./src/View/types.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
var cov_aj925f4kd=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\types.ts",hash="a0f32a8618b414c137dad127fe574025cea5c9b4",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\types.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}}},fnMap:{},branchMap:{},s:{"0":0},f:{},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\types.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\types.ts"],names:[],mappings:"",sourcesContent:["type BasicViewSettings = {\r\n  'double': boolean;\r\n  'side-menu': boolean | string;\r\n  'handlesValues': boolean;\r\n  'vertical': boolean;\r\n  'step': boolean | number;\r\n  'valueScale': boolean;\r\n  'integer': boolean;\r\n};\r\n\r\ntype TargetsForViewUpdate = {\r\n  double?: boolean;\r\n  handlesValues?: boolean;\r\n  vertical?: boolean;\r\n  valueScale?: boolean;\r\n  sideMenu: boolean | string;\r\n  integer: boolean;\r\n};\r\n\r\ntype RefreshData = {\r\n  value: string;\r\n  target: 'from' | 'to' | 'min' | 'max';\r\n  isToFixed: boolean;\r\n};\r\n\r\ntype DataRequestValue = {\r\n  'name': string;\r\n  'value': string;\r\n};\r\n\r\ntype DataRequestToModel = {\r\n  needDataForScale: DataRequestValue;\r\n  needDataForStartPosition: DataRequestValue;\r\n  needStepWidth: DataRequestValue;\r\n  needApplyValueFromScale: DataRequestValue;\r\n  needApplyNewValue: DataRequestValue;\r\n  needChangeSliderValuesRange: DataRequestValue;\r\n};\r\nexport {\r\n  BasicViewSettings,\r\n  TargetsForViewUpdate,\r\n  RefreshData,\r\n  DataRequestToModel,\r\n  DataRequestValue,\r\n};\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_aj925f4kd.s[0]++;Object.defineProperty(exports, "__esModule", ({value:true}));

/***/ }),

/***/ "./src/View/view.test.ts":
/*!*******************************!*\
  !*** ./src/View/view.test.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var cov_qaae30lgm=function(){var path="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\view.test.ts",hash="fba88c59f66b712182fd0d502bbc0afc035f7959",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\view.test.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:15},end:{line:3,column:32}},"2":{start:{line:4,column:0},end:{line:4,column:26}},"3":{start:{line:5,column:0},end:{line:209,column:3}},"4":{start:{line:7,column:21},end:{line:15,column:5}},"5":{start:{line:16,column:19},end:{line:16,column:48}},"6":{start:{line:17,column:4},end:{line:19,column:7}},"7":{start:{line:18,column:8},end:{line:18,column:49}},"8":{start:{line:20,column:4},end:{line:22,column:7}},"9":{start:{line:21,column:8},end:{line:21,column:34}},"10":{start:{line:23,column:4},end:{line:26,column:7}},"11":{start:{line:24,column:8},end:{line:24,column:35}},"12":{start:{line:25,column:8},end:{line:25,column:59}},"13":{start:{line:27,column:4},end:{line:35,column:7}},"14":{start:{line:29,column:30},end:{line:29,column:59}},"15":{start:{line:30,column:8},end:{line:30,column:61}},"16":{start:{line:31,column:8},end:{line:31,column:108}},"17":{start:{line:32,column:8},end:{line:32,column:67}},"18":{start:{line:33,column:8},end:{line:33,column:35}},"19":{start:{line:34,column:8},end:{line:34,column:69}},"20":{start:{line:36,column:4},end:{line:46,column:7}},"21":{start:{line:37,column:8},end:{line:41,column:11}},"22":{start:{line:42,column:8},end:{line:42,column:77}},"23":{start:{line:43,column:8},end:{line:43,column:95}},"24":{start:{line:44,column:8},end:{line:44,column:93}},"25":{start:{line:45,column:8},end:{line:45,column:91}},"26":{start:{line:47,column:4},end:{line:57,column:7}},"27":{start:{line:48,column:8},end:{line:52,column:11}},"28":{start:{line:53,column:8},end:{line:53,column:81}},"29":{start:{line:54,column:8},end:{line:54,column:99}},"30":{start:{line:55,column:8},end:{line:55,column:97}},"31":{start:{line:56,column:8},end:{line:56,column:95}},"32":{start:{line:58,column:4},end:{line:69,column:7}},"33":{start:{line:59,column:8},end:{line:59,column:42}},"34":{start:{line:60,column:8},end:{line:65,column:11}},"35":{start:{line:66,column:8},end:{line:66,column:68}},"36":{start:{line:67,column:8},end:{line:67,column:69}},"37":{start:{line:68,column:8},end:{line:68,column:92}},"38":{start:{line:70,column:4},end:{line:79,column:7}},"39":{start:{line:71,column:8},end:{line:71,column:46}},"40":{start:{line:72,column:8},end:{line:77,column:11}},"41":{start:{line:78,column:8},end:{line:78,column:72}},"42":{start:{line:80,column:4},end:{line:90,column:7}},"43":{start:{line:81,column:8},end:{line:81,column:49}},"44":{start:{line:82,column:8},end:{line:87,column:11}},"45":{start:{line:88,column:8},end:{line:88,column:69}},"46":{start:{line:89,column:8},end:{line:89,column:67}},"47":{start:{line:91,column:4},end:{line:105,column:7}},"48":{start:{line:92,column:8},end:{line:92,column:47}},"49":{start:{line:93,column:8},end:{line:100,column:11}},"50":{start:{line:101,column:8},end:{line:101,column:70}},"51":{start:{line:102,column:8},end:{line:102,column:78}},"52":{start:{line:103,column:8},end:{line:103,column:80}},"53":{start:{line:104,column:8},end:{line:104,column:73}},"54":{start:{line:106,column:4},end:{line:119,column:7}},"55":{start:{line:107,column:8},end:{line:111,column:11}},"56":{start:{line:112,column:8},end:{line:112,column:63}},"57":{start:{line:113,column:8},end:{line:117,column:11}},"58":{start:{line:118,column:8},end:{line:118,column:61}},"59":{start:{line:120,column:4},end:{line:135,column:7}},"60":{start:{line:121,column:8},end:{line:125,column:11}},"61":{start:{line:126,column:8},end:{line:126,column:82}},"62":{start:{line:127,column:8},end:{line:127,column:77}},"63":{start:{line:128,column:8},end:{line:132,column:11}},"64":{start:{line:133,column:8},end:{line:133,column:83}},"65":{start:{line:134,column:8},end:{line:134,column:75}},"66":{start:{line:136,column:4},end:{line:150,column:7}},"67":{start:{line:137,column:8},end:{line:137,column:34}},"68":{start:{line:138,column:8},end:{line:138,column:64}},"69":{start:{line:139,column:8},end:{line:139,column:83}},"70":{start:{line:140,column:8},end:{line:140,column:54}},"71":{start:{line:141,column:8},end:{line:141,column:68}},"72":{start:{line:142,column:8},end:{line:142,column:69}},"73":{start:{line:143,column:8},end:{line:143,column:92}},"74":{start:{line:144,column:8},end:{line:144,column:63}},"75":{start:{line:145,column:8},end:{line:145,column:83}},"76":{start:{line:146,column:8},end:{line:146,column:53}},"77":{start:{line:147,column:8},end:{line:147,column:76}},"78":{start:{line:148,column:8},end:{line:148,column:70}},"79":{start:{line:149,column:8},end:{line:149,column:93}},"80":{start:{line:151,column:4},end:{line:167,column:7}},"81":{start:{line:152,column:8},end:{line:152,column:34}},"82":{start:{line:153,column:8},end:{line:153,column:66}},"83":{start:{line:154,column:8},end:{line:154,column:86}},"84":{start:{line:155,column:8},end:{line:155,column:55}},"85":{start:{line:156,column:8},end:{line:156,column:77}},"86":{start:{line:157,column:8},end:{line:157,column:95}},"87":{start:{line:158,column:8},end:{line:158,column:93}},"88":{start:{line:159,column:8},end:{line:159,column:91}},"89":{start:{line:160,column:8},end:{line:160,column:67}},"90":{start:{line:161,column:8},end:{line:161,column:86}},"91":{start:{line:162,column:8},end:{line:162,column:56}},"92":{start:{line:163,column:8},end:{line:163,column:81}},"93":{start:{line:164,column:8},end:{line:164,column:99}},"94":{start:{line:165,column:8},end:{line:165,column:97}},"95":{start:{line:166,column:8},end:{line:166,column:95}},"96":{start:{line:168,column:4},end:{line:178,column:7}},"97":{start:{line:169,column:8},end:{line:169,column:34}},"98":{start:{line:170,column:8},end:{line:170,column:72}},"99":{start:{line:171,column:8},end:{line:171,column:91}},"100":{start:{line:172,column:8},end:{line:172,column:58}},"101":{start:{line:173,column:8},end:{line:173,column:72}},"102":{start:{line:174,column:8},end:{line:174,column:71}},"103":{start:{line:175,column:8},end:{line:175,column:91}},"104":{start:{line:176,column:8},end:{line:176,column:57}},"105":{start:{line:177,column:8},end:{line:177,column:80}},"106":{start:{line:179,column:4},end:{line:191,column:7}},"107":{start:{line:180,column:8},end:{line:180,column:34}},"108":{start:{line:181,column:8},end:{line:181,column:74}},"109":{start:{line:182,column:8},end:{line:182,column:93}},"110":{start:{line:183,column:8},end:{line:183,column:61}},"111":{start:{line:184,column:8},end:{line:184,column:69}},"112":{start:{line:185,column:8},end:{line:185,column:67}},"113":{start:{line:186,column:8},end:{line:186,column:73}},"114":{start:{line:187,column:8},end:{line:187,column:93}},"115":{start:{line:188,column:8},end:{line:188,column:60}},"116":{start:{line:189,column:8},end:{line:189,column:77}},"117":{start:{line:190,column:8},end:{line:190,column:75}},"118":{start:{line:192,column:4},end:{line:200,column:7}},"119":{start:{line:193,column:8},end:{line:193,column:34}},"120":{start:{line:194,column:8},end:{line:194,column:62}},"121":{start:{line:195,column:8},end:{line:195,column:84}},"122":{start:{line:196,column:8},end:{line:196,column:97}},"123":{start:{line:197,column:8},end:{line:197,column:60}},"124":{start:{line:198,column:8},end:{line:198,column:82}},"125":{start:{line:199,column:8},end:{line:199,column:95}},"126":{start:{line:201,column:4},end:{line:208,column:7}},"127":{start:{line:202,column:8},end:{line:202,column:76}},"128":{start:{line:203,column:8},end:{line:203,column:91}},"129":{start:{line:204,column:8},end:{line:204,column:34}},"130":{start:{line:205,column:8},end:{line:205,column:62}},"131":{start:{line:206,column:8},end:{line:206,column:84}},"132":{start:{line:207,column:8},end:{line:207,column:91}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:5,column:17},end:{line:5,column:18}},loc:{start:{line:5,column:23},end:{line:209,column:1}},line:5},"1":{name:"(anonymous_1)",decl:{start:{line:17,column:15},end:{line:17,column:16}},loc:{start:{line:17,column:21},end:{line:19,column:5}},line:17},"2":{name:"(anonymous_2)",decl:{start:{line:20,column:29},end:{line:20,column:30}},loc:{start:{line:20,column:35},end:{line:22,column:5}},line:20},"3":{name:"(anonymous_3)",decl:{start:{line:23,column:47},end:{line:23,column:48}},loc:{start:{line:23,column:53},end:{line:26,column:5}},line:23},"4":{name:"(anonymous_4)",decl:{start:{line:27,column:64},end:{line:27,column:65}},loc:{start:{line:27,column:70},end:{line:35,column:5}},line:27},"5":{name:"(anonymous_5)",decl:{start:{line:36,column:66},end:{line:36,column:67}},loc:{start:{line:36,column:72},end:{line:46,column:5}},line:36},"6":{name:"(anonymous_6)",decl:{start:{line:47,column:70},end:{line:47,column:71}},loc:{start:{line:47,column:76},end:{line:57,column:5}},line:47},"7":{name:"(anonymous_7)",decl:{start:{line:58,column:69},end:{line:58,column:70}},loc:{start:{line:58,column:75},end:{line:69,column:5}},line:58},"8":{name:"(anonymous_8)",decl:{start:{line:70,column:70},end:{line:70,column:71}},loc:{start:{line:70,column:76},end:{line:79,column:5}},line:70},"9":{name:"(anonymous_9)",decl:{start:{line:80,column:73},end:{line:80,column:74}},loc:{start:{line:80,column:79},end:{line:90,column:5}},line:80},"10":{name:"(anonymous_10)",decl:{start:{line:91,column:55},end:{line:91,column:56}},loc:{start:{line:91,column:61},end:{line:105,column:5}},line:91},"11":{name:"(anonymous_11)",decl:{start:{line:106,column:55},end:{line:106,column:56}},loc:{start:{line:106,column:61},end:{line:119,column:5}},line:106},"12":{name:"(anonymous_12)",decl:{start:{line:120,column:57},end:{line:120,column:58}},loc:{start:{line:120,column:63},end:{line:135,column:5}},line:120},"13":{name:"(anonymous_13)",decl:{start:{line:136,column:76},end:{line:136,column:77}},loc:{start:{line:136,column:82},end:{line:150,column:5}},line:136},"14":{name:"(anonymous_14)",decl:{start:{line:151,column:73},end:{line:151,column:74}},loc:{start:{line:151,column:79},end:{line:167,column:5}},line:151},"15":{name:"(anonymous_15)",decl:{start:{line:168,column:78},end:{line:168,column:79}},loc:{start:{line:168,column:84},end:{line:178,column:5}},line:168},"16":{name:"(anonymous_16)",decl:{start:{line:179,column:80},end:{line:179,column:81}},loc:{start:{line:179,column:86},end:{line:191,column:5}},line:179},"17":{name:"(anonymous_17)",decl:{start:{line:192,column:57},end:{line:192,column:58}},loc:{start:{line:192,column:63},end:{line:200,column:5}},line:192},"18":{name:"(anonymous_18)",decl:{start:{line:201,column:56},end:{line:201,column:57}},loc:{start:{line:201,column:62},end:{line:208,column:5}},line:201}},branchMap:{"0":{loc:{start:{line:31,column:8},end:{line:31,column:107}},type:"cond-expr",locations:[{start:{line:31,column:74},end:{line:31,column:80}},{start:{line:31,column:83},end:{line:31,column:107}}],line:31},"1":{loc:{start:{line:31,column:8},end:{line:31,column:71}},type:"binary-expr",locations:[{start:{line:31,column:8},end:{line:31,column:54}},{start:{line:31,column:58},end:{line:31,column:71}}],line:31}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},b:{"0":[0,0],"1":[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\view.test.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\View\\view.test.ts"],names:[],mappings:"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",sourcesContent:["import { BasicViewSettings } from './types';\r\nimport { View } from './View';\r\n\r\nrequire('jasmine-jquery');\r\n\r\ndescribe('View', () => {\r\n  let view: View;\r\n  const settings: BasicViewSettings = {\r\n    double: true,\r\n    'side-menu': true,\r\n    handlesValues: true,\r\n    step: true,\r\n    valueScale: true,\r\n    vertical: true,\r\n    integer: true,\r\n  };\r\n  const target: HTMLDivElement = document.createElement('div');\r\n\r\n  beforeEach(() => {\r\n    view = new View(settings, target);\r\n  });\r\n\r\n  it('View can be create', () => {\r\n    expect(view).toBeTruthy();\r\n  });\r\n\r\n  it('prepareSliderForUse() work correctly', () => {\r\n    view.prepareSliderForUse();\r\n    expect(target).toContainElement('div.goby-slider');\r\n  });\r\n\r\n  it('prepareSliderForUse() add side menu in user container', () => {\r\n    const testContainer: HTMLDivElement = document.createElement('div');\r\n    testContainer.classList.add('sideMenuTestContainer');\r\n    document.querySelector('body')?.append(testContainer);\r\n    view.basicSettings['side-menu'] = '.sideMenuTestContainer';\r\n    view.prepareSliderForUse();\r\n    expect(testContainer).toContainElement('div.goby-side-menu');\r\n  });\r\n\r\n  it('updateSliderView() call plane changers to make vertical', () => {\r\n    view.updateView({\r\n      vertical: true,\r\n      sideMenu: true,\r\n      integer: true,\r\n    });\r\n    expect(view.slider.slider).toHaveClass('goby-slider_state_vertical');\r\n    expect(view.handles.fromValue).toHaveClass('goby-slider__handle-value_state_vertical');\r\n    expect(view.handles.toValue).toHaveClass('goby-slider__handle-value_state_vertical');\r\n    expect(view.valuesScale.minValue).toHaveClass('goby-slider__value_state_vertical');\r\n  });\r\n\r\n  it('updateSliderView() call plane changers to make horizontally', () => {\r\n    view.updateView({\r\n      vertical: false,\r\n      sideMenu: true,\r\n      integer: true,\r\n    });\r\n    expect(view.slider.slider).not.toHaveClass('goby-slider_state_vertical');\r\n    expect(view.handles.fromValue).not.toHaveClass('goby-slider__handle-value_state_vertical');\r\n    expect(view.handles.toValue).not.toHaveClass('goby-slider__handle-value_state_vertical');\r\n    expect(view.valuesScale.minValue).not.toHaveClass('goby-slider__value_state_vertical');\r\n  });\r\n\r\n  it('updateSliderView() call display changers to hide to handel', () => {\r\n    view.basicSettings.double = false;\r\n    view.updateView({\r\n      vertical: false,\r\n      sideMenu: true,\r\n      double: false,\r\n      integer: true,\r\n    });\r\n    expect(view.handles.toHandle.style.display).toEqual('none');\r\n    expect(view.interval.interval.style.display).toEqual('none');\r\n    expect(view.sideMenu.sideMenuElements.toInputWrapper!.style.display).toEqual('none');\r\n  });\r\n\r\n  it('updateSliderView() call display changers to hide valueScale', () => {\r\n    view.basicSettings.valueScale = false;\r\n    view.updateView({\r\n      vertical: false,\r\n      sideMenu: true,\r\n      valueScale: false,\r\n      integer: true,\r\n    });\r\n    expect(view.valuesScale.minValue.style.display).toEqual('none');\r\n  });\r\n\r\n  it('updateSliderView() call display changers to hide handlesValues', () => {\r\n    view.basicSettings.handlesValues = false;\r\n    view.updateView({\r\n      vertical: false,\r\n      sideMenu: true,\r\n      handlesValues: false,\r\n      integer: true,\r\n    });\r\n    expect(view.handles.fromValue.style.display).toEqual('none');\r\n    expect(view.handles.toValue.style.display).toEqual('none');\r\n  });\r\n\r\n  it('updateSliderView() check inputs in side-menu', () => {\r\n    view.basicSettings['side-menu'] = true;\r\n    view.updateView({\r\n      vertical: true,\r\n      sideMenu: true,\r\n      double: true,\r\n      handlesValues: true,\r\n      valueScale: true,\r\n      integer: true,\r\n    });\r\n    expect(view.sideMenu.sideMenuElements.toToggle).toBeChecked();\r\n    expect(view.sideMenu.sideMenuElements.valueScaleToggle).toBeChecked();\r\n    expect(view.sideMenu.sideMenuElements.handleValuesToggle).toBeChecked();\r\n    expect(view.sideMenu.sideMenuElements.planeToggle).toBeChecked();\r\n  });\r\n\r\n  it('refreshAllComponents() refresh handel values', () => {\r\n    view.refreshAllComponents({\r\n      target: 'from',\r\n      value: '50',\r\n      isToFixed: true,\r\n    });\r\n    expect(view.handles.fromValue.innerText).toEqual('50');\r\n    view.refreshAllComponents({\r\n      target: 'to',\r\n      value: '50',\r\n      isToFixed: true,\r\n    });\r\n    expect(view.handles.toValue.innerText).toEqual('50');\r\n  });\r\n\r\n  it('refreshAllComponents() refresh sideMenu values', () => {\r\n    view.refreshAllComponents({\r\n      target: 'from',\r\n      value: '50',\r\n      isToFixed: true,\r\n    });\r\n    expect(view.sideMenu.sideMenuElements.fromOutput!.innerText).toEqual('50');\r\n    expect(view.sideMenu.sideMenuElements.fromInput!.value).toEqual('50');\r\n    view.refreshAllComponents({\r\n      target: 'to',\r\n      value: '50',\r\n      isToFixed: true,\r\n    });\r\n    expect(view.sideMenu.sideMenuElements.toOutput!.innerText).toEqual(' - 50');\r\n    expect(view.sideMenu.sideMenuElements.toInput!.value).toEqual('50');\r\n  });\r\n\r\n  it('bindEventListeners() correctly responds to toToggle input changes', () => {\r\n    view.bindEventListeners();\r\n    view.sideMenu.sideMenuElements.toToggle!.checked = false;\r\n    view.sideMenu.sideMenuElements.toToggle!.dispatchEvent(new Event('change'));\r\n    expect(view.basicSettings.double).toBeFalse();\r\n    expect(view.handles.toHandle.style.display).toEqual('none');\r\n    expect(view.interval.interval.style.display).toEqual('none');\r\n    expect(view.sideMenu.sideMenuElements.toInputWrapper!.style.display).toEqual('none');\r\n    view.sideMenu.sideMenuElements.toToggle!.checked = true;\r\n    view.sideMenu.sideMenuElements.toToggle!.dispatchEvent(new Event('change'));\r\n    expect(view.basicSettings.double).toBeTrue();\r\n    expect(view.handles.toHandle.style.display).toEqual('inline-block');\r\n    expect(view.interval.interval.style.display).toEqual('block');\r\n    expect(view.sideMenu.sideMenuElements.toInputWrapper!.style.display).toEqual('block');\r\n  });\r\n\r\n  it('bindEventListeners() correctly responds to plane input changes', () => {\r\n    view.bindEventListeners();\r\n    view.sideMenu.sideMenuElements.planeToggle!.checked = true;\r\n    view.sideMenu.sideMenuElements.planeToggle!.dispatchEvent(new Event('change'));\r\n    expect(view.basicSettings.vertical).toBeTrue();\r\n    expect(view.slider.slider).toHaveClass('goby-slider_state_vertical');\r\n    expect(view.handles.fromValue).toHaveClass('goby-slider__handle-value_state_vertical');\r\n    expect(view.handles.toValue).toHaveClass('goby-slider__handle-value_state_vertical');\r\n    expect(view.valuesScale.minValue).toHaveClass('goby-slider__value_state_vertical');\r\n    view.sideMenu.sideMenuElements.planeToggle!.checked = false;\r\n    view.sideMenu.sideMenuElements.planeToggle!.dispatchEvent(new Event('change'));\r\n    expect(view.basicSettings.vertical).toBeFalse();\r\n    expect(view.slider.slider).not.toHaveClass('goby-slider_state_vertical');\r\n    expect(view.handles.fromValue).not.toHaveClass('goby-slider__handle-value_state_vertical');\r\n    expect(view.handles.toValue).not.toHaveClass('goby-slider__handle-value_state_vertical');\r\n    expect(view.valuesScale.minValue).not.toHaveClass('goby-slider__value_state_vertical');\r\n  });\r\n\r\n  it('bindEventListeners() correctly responds to valueScale input changes', () => {\r\n    view.bindEventListeners();\r\n    view.sideMenu.sideMenuElements.valueScaleToggle!.checked = false;\r\n    view.sideMenu.sideMenuElements.valueScaleToggle!.dispatchEvent(new Event('change'));\r\n    expect(view.basicSettings.valueScale).toBeFalsy();\r\n    expect(view.valuesScale.minValue.style.display).toEqual('none');\r\n    view.sideMenu.sideMenuElements.valueScaleToggle!.checked = true;\r\n    view.sideMenu.sideMenuElements.valueScaleToggle!.dispatchEvent(new Event('change'));\r\n    expect(view.basicSettings.valueScale).toBeTrue();\r\n    expect(view.valuesScale.minValue.style.display).toEqual('inline-block');\r\n  });\r\n\r\n  it('bindEventListeners() correctly responds to handelValues input changes', () => {\r\n    view.bindEventListeners();\r\n    view.sideMenu.sideMenuElements.handleValuesToggle!.checked = false;\r\n    view.sideMenu.sideMenuElements.handleValuesToggle!.dispatchEvent(new Event('change'));\r\n    expect(view.basicSettings.handlesValues).toBeFalsy();\r\n    expect(view.handles.fromValue.style.display).toEqual('none');\r\n    expect(view.handles.toValue.style.display).toEqual('none');\r\n    view.sideMenu.sideMenuElements.handleValuesToggle!.checked = true;\r\n    view.sideMenu.sideMenuElements.handleValuesToggle!.dispatchEvent(new Event('change'));\r\n    expect(view.basicSettings.handlesValues).toBeTrue();\r\n    expect(view.handles.fromValue.style.display).toEqual('inline-block');\r\n    expect(view.handles.toValue.style.display).toEqual('inline-block');\r\n  });\r\n\r\n  it('bindEventListeners() send new value from input', () => {\r\n    view.bindEventListeners();\r\n    view.sideMenu.sideMenuElements.fromInput!.value = '50';\r\n    view.sideMenu.sideMenuElements.fromInput!.dispatchEvent(new Event('change'));\r\n    expect(view.dataRequestToModel.needApplyNewValue).toEqual({ name: 'from', value: '50' });\r\n    view.sideMenu.sideMenuElements.toInput!.value = '80';\r\n    view.sideMenu.sideMenuElements.toInput!.dispatchEvent(new Event('change'));\r\n    expect(view.dataRequestToModel.needApplyNewValue).toEqual({ name: 'to', value: '80' });\r\n  });\r\n\r\n  it('bindEventListeners() send new step from input', () => {\r\n    view.dataRequestToModel.needStepWidth = { name: '', value: 'true' };\r\n    expect(view.dataRequestToModel.needStepWidth).toEqual({ name: '', value: 'true' });\r\n    view.bindEventListeners();\r\n    view.sideMenu.sideMenuElements.stepInput!.value = '50';\r\n    view.sideMenu.sideMenuElements.stepInput!.dispatchEvent(new Event('change'));\r\n    expect(view.dataRequestToModel.needStepWidth).toEqual({ name: '', value: 'true' });\r\n  });\r\n});\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_qaae30lgm.s[0]++;Object.defineProperty(exports, "__esModule", ({value:true}));const View_1=(cov_qaae30lgm.s[1]++,__webpack_require__(/*! ./View */ "./src/View/View.ts"));cov_qaae30lgm.s[2]++;__webpack_require__(/*! jasmine-jquery */ "./node_modules/jasmine-jquery/lib/jasmine-jquery.js");cov_qaae30lgm.s[3]++;describe('View',()=>{cov_qaae30lgm.f[0]++;let view;const settings=(cov_qaae30lgm.s[4]++,{double:true,'side-menu':true,handlesValues:true,step:true,valueScale:true,vertical:true,integer:true});const target=(cov_qaae30lgm.s[5]++,document.createElement('div'));cov_qaae30lgm.s[6]++;beforeEach(()=>{cov_qaae30lgm.f[1]++;cov_qaae30lgm.s[7]++;view=new View_1.View(settings,target);});cov_qaae30lgm.s[8]++;it('View can be create',()=>{cov_qaae30lgm.f[2]++;cov_qaae30lgm.s[9]++;expect(view).toBeTruthy();});cov_qaae30lgm.s[10]++;it('prepareSliderForUse() work correctly',()=>{cov_qaae30lgm.f[3]++;cov_qaae30lgm.s[11]++;view.prepareSliderForUse();cov_qaae30lgm.s[12]++;expect(target).toContainElement('div.goby-slider');});cov_qaae30lgm.s[13]++;it('prepareSliderForUse() add side menu in user container',()=>{cov_qaae30lgm.f[4]++;var _a;const testContainer=(cov_qaae30lgm.s[14]++,document.createElement('div'));cov_qaae30lgm.s[15]++;testContainer.classList.add('sideMenuTestContainer');cov_qaae30lgm.s[16]++;(cov_qaae30lgm.b[1][0]++,(_a=document.querySelector('body'))===null)||(cov_qaae30lgm.b[1][1]++,_a===void 0)?(cov_qaae30lgm.b[0][0]++,void 0):(cov_qaae30lgm.b[0][1]++,_a.append(testContainer));cov_qaae30lgm.s[17]++;view.basicSettings['side-menu']='.sideMenuTestContainer';cov_qaae30lgm.s[18]++;view.prepareSliderForUse();cov_qaae30lgm.s[19]++;expect(testContainer).toContainElement('div.goby-side-menu');});cov_qaae30lgm.s[20]++;it('updateSliderView() call plane changers to make vertical',()=>{cov_qaae30lgm.f[5]++;cov_qaae30lgm.s[21]++;view.updateView({vertical:true,sideMenu:true,integer:true});cov_qaae30lgm.s[22]++;expect(view.slider.slider).toHaveClass('goby-slider_state_vertical');cov_qaae30lgm.s[23]++;expect(view.handles.fromValue).toHaveClass('goby-slider__handle-value_state_vertical');cov_qaae30lgm.s[24]++;expect(view.handles.toValue).toHaveClass('goby-slider__handle-value_state_vertical');cov_qaae30lgm.s[25]++;expect(view.valuesScale.minValue).toHaveClass('goby-slider__value_state_vertical');});cov_qaae30lgm.s[26]++;it('updateSliderView() call plane changers to make horizontally',()=>{cov_qaae30lgm.f[6]++;cov_qaae30lgm.s[27]++;view.updateView({vertical:false,sideMenu:true,integer:true});cov_qaae30lgm.s[28]++;expect(view.slider.slider).not.toHaveClass('goby-slider_state_vertical');cov_qaae30lgm.s[29]++;expect(view.handles.fromValue).not.toHaveClass('goby-slider__handle-value_state_vertical');cov_qaae30lgm.s[30]++;expect(view.handles.toValue).not.toHaveClass('goby-slider__handle-value_state_vertical');cov_qaae30lgm.s[31]++;expect(view.valuesScale.minValue).not.toHaveClass('goby-slider__value_state_vertical');});cov_qaae30lgm.s[32]++;it('updateSliderView() call display changers to hide to handel',()=>{cov_qaae30lgm.f[7]++;cov_qaae30lgm.s[33]++;view.basicSettings.double=false;cov_qaae30lgm.s[34]++;view.updateView({vertical:false,sideMenu:true,double:false,integer:true});cov_qaae30lgm.s[35]++;expect(view.handles.toHandle.style.display).toEqual('none');cov_qaae30lgm.s[36]++;expect(view.interval.interval.style.display).toEqual('none');cov_qaae30lgm.s[37]++;expect(view.sideMenu.sideMenuElements.toInputWrapper.style.display).toEqual('none');});cov_qaae30lgm.s[38]++;it('updateSliderView() call display changers to hide valueScale',()=>{cov_qaae30lgm.f[8]++;cov_qaae30lgm.s[39]++;view.basicSettings.valueScale=false;cov_qaae30lgm.s[40]++;view.updateView({vertical:false,sideMenu:true,valueScale:false,integer:true});cov_qaae30lgm.s[41]++;expect(view.valuesScale.minValue.style.display).toEqual('none');});cov_qaae30lgm.s[42]++;it('updateSliderView() call display changers to hide handlesValues',()=>{cov_qaae30lgm.f[9]++;cov_qaae30lgm.s[43]++;view.basicSettings.handlesValues=false;cov_qaae30lgm.s[44]++;view.updateView({vertical:false,sideMenu:true,handlesValues:false,integer:true});cov_qaae30lgm.s[45]++;expect(view.handles.fromValue.style.display).toEqual('none');cov_qaae30lgm.s[46]++;expect(view.handles.toValue.style.display).toEqual('none');});cov_qaae30lgm.s[47]++;it('updateSliderView() check inputs in side-menu',()=>{cov_qaae30lgm.f[10]++;cov_qaae30lgm.s[48]++;view.basicSettings['side-menu']=true;cov_qaae30lgm.s[49]++;view.updateView({vertical:true,sideMenu:true,double:true,handlesValues:true,valueScale:true,integer:true});cov_qaae30lgm.s[50]++;expect(view.sideMenu.sideMenuElements.toToggle).toBeChecked();cov_qaae30lgm.s[51]++;expect(view.sideMenu.sideMenuElements.valueScaleToggle).toBeChecked();cov_qaae30lgm.s[52]++;expect(view.sideMenu.sideMenuElements.handleValuesToggle).toBeChecked();cov_qaae30lgm.s[53]++;expect(view.sideMenu.sideMenuElements.planeToggle).toBeChecked();});cov_qaae30lgm.s[54]++;it('refreshAllComponents() refresh handel values',()=>{cov_qaae30lgm.f[11]++;cov_qaae30lgm.s[55]++;view.refreshAllComponents({target:'from',value:'50',isToFixed:true});cov_qaae30lgm.s[56]++;expect(view.handles.fromValue.innerText).toEqual('50');cov_qaae30lgm.s[57]++;view.refreshAllComponents({target:'to',value:'50',isToFixed:true});cov_qaae30lgm.s[58]++;expect(view.handles.toValue.innerText).toEqual('50');});cov_qaae30lgm.s[59]++;it('refreshAllComponents() refresh sideMenu values',()=>{cov_qaae30lgm.f[12]++;cov_qaae30lgm.s[60]++;view.refreshAllComponents({target:'from',value:'50',isToFixed:true});cov_qaae30lgm.s[61]++;expect(view.sideMenu.sideMenuElements.fromOutput.innerText).toEqual('50');cov_qaae30lgm.s[62]++;expect(view.sideMenu.sideMenuElements.fromInput.value).toEqual('50');cov_qaae30lgm.s[63]++;view.refreshAllComponents({target:'to',value:'50',isToFixed:true});cov_qaae30lgm.s[64]++;expect(view.sideMenu.sideMenuElements.toOutput.innerText).toEqual(' - 50');cov_qaae30lgm.s[65]++;expect(view.sideMenu.sideMenuElements.toInput.value).toEqual('50');});cov_qaae30lgm.s[66]++;it('bindEventListeners() correctly responds to toToggle input changes',()=>{cov_qaae30lgm.f[13]++;cov_qaae30lgm.s[67]++;view.bindEventListeners();cov_qaae30lgm.s[68]++;view.sideMenu.sideMenuElements.toToggle.checked=false;cov_qaae30lgm.s[69]++;view.sideMenu.sideMenuElements.toToggle.dispatchEvent(new Event('change'));cov_qaae30lgm.s[70]++;expect(view.basicSettings.double).toBeFalse();cov_qaae30lgm.s[71]++;expect(view.handles.toHandle.style.display).toEqual('none');cov_qaae30lgm.s[72]++;expect(view.interval.interval.style.display).toEqual('none');cov_qaae30lgm.s[73]++;expect(view.sideMenu.sideMenuElements.toInputWrapper.style.display).toEqual('none');cov_qaae30lgm.s[74]++;view.sideMenu.sideMenuElements.toToggle.checked=true;cov_qaae30lgm.s[75]++;view.sideMenu.sideMenuElements.toToggle.dispatchEvent(new Event('change'));cov_qaae30lgm.s[76]++;expect(view.basicSettings.double).toBeTrue();cov_qaae30lgm.s[77]++;expect(view.handles.toHandle.style.display).toEqual('inline-block');cov_qaae30lgm.s[78]++;expect(view.interval.interval.style.display).toEqual('block');cov_qaae30lgm.s[79]++;expect(view.sideMenu.sideMenuElements.toInputWrapper.style.display).toEqual('block');});cov_qaae30lgm.s[80]++;it('bindEventListeners() correctly responds to plane input changes',()=>{cov_qaae30lgm.f[14]++;cov_qaae30lgm.s[81]++;view.bindEventListeners();cov_qaae30lgm.s[82]++;view.sideMenu.sideMenuElements.planeToggle.checked=true;cov_qaae30lgm.s[83]++;view.sideMenu.sideMenuElements.planeToggle.dispatchEvent(new Event('change'));cov_qaae30lgm.s[84]++;expect(view.basicSettings.vertical).toBeTrue();cov_qaae30lgm.s[85]++;expect(view.slider.slider).toHaveClass('goby-slider_state_vertical');cov_qaae30lgm.s[86]++;expect(view.handles.fromValue).toHaveClass('goby-slider__handle-value_state_vertical');cov_qaae30lgm.s[87]++;expect(view.handles.toValue).toHaveClass('goby-slider__handle-value_state_vertical');cov_qaae30lgm.s[88]++;expect(view.valuesScale.minValue).toHaveClass('goby-slider__value_state_vertical');cov_qaae30lgm.s[89]++;view.sideMenu.sideMenuElements.planeToggle.checked=false;cov_qaae30lgm.s[90]++;view.sideMenu.sideMenuElements.planeToggle.dispatchEvent(new Event('change'));cov_qaae30lgm.s[91]++;expect(view.basicSettings.vertical).toBeFalse();cov_qaae30lgm.s[92]++;expect(view.slider.slider).not.toHaveClass('goby-slider_state_vertical');cov_qaae30lgm.s[93]++;expect(view.handles.fromValue).not.toHaveClass('goby-slider__handle-value_state_vertical');cov_qaae30lgm.s[94]++;expect(view.handles.toValue).not.toHaveClass('goby-slider__handle-value_state_vertical');cov_qaae30lgm.s[95]++;expect(view.valuesScale.minValue).not.toHaveClass('goby-slider__value_state_vertical');});cov_qaae30lgm.s[96]++;it('bindEventListeners() correctly responds to valueScale input changes',()=>{cov_qaae30lgm.f[15]++;cov_qaae30lgm.s[97]++;view.bindEventListeners();cov_qaae30lgm.s[98]++;view.sideMenu.sideMenuElements.valueScaleToggle.checked=false;cov_qaae30lgm.s[99]++;view.sideMenu.sideMenuElements.valueScaleToggle.dispatchEvent(new Event('change'));cov_qaae30lgm.s[100]++;expect(view.basicSettings.valueScale).toBeFalsy();cov_qaae30lgm.s[101]++;expect(view.valuesScale.minValue.style.display).toEqual('none');cov_qaae30lgm.s[102]++;view.sideMenu.sideMenuElements.valueScaleToggle.checked=true;cov_qaae30lgm.s[103]++;view.sideMenu.sideMenuElements.valueScaleToggle.dispatchEvent(new Event('change'));cov_qaae30lgm.s[104]++;expect(view.basicSettings.valueScale).toBeTrue();cov_qaae30lgm.s[105]++;expect(view.valuesScale.minValue.style.display).toEqual('inline-block');});cov_qaae30lgm.s[106]++;it('bindEventListeners() correctly responds to handelValues input changes',()=>{cov_qaae30lgm.f[16]++;cov_qaae30lgm.s[107]++;view.bindEventListeners();cov_qaae30lgm.s[108]++;view.sideMenu.sideMenuElements.handleValuesToggle.checked=false;cov_qaae30lgm.s[109]++;view.sideMenu.sideMenuElements.handleValuesToggle.dispatchEvent(new Event('change'));cov_qaae30lgm.s[110]++;expect(view.basicSettings.handlesValues).toBeFalsy();cov_qaae30lgm.s[111]++;expect(view.handles.fromValue.style.display).toEqual('none');cov_qaae30lgm.s[112]++;expect(view.handles.toValue.style.display).toEqual('none');cov_qaae30lgm.s[113]++;view.sideMenu.sideMenuElements.handleValuesToggle.checked=true;cov_qaae30lgm.s[114]++;view.sideMenu.sideMenuElements.handleValuesToggle.dispatchEvent(new Event('change'));cov_qaae30lgm.s[115]++;expect(view.basicSettings.handlesValues).toBeTrue();cov_qaae30lgm.s[116]++;expect(view.handles.fromValue.style.display).toEqual('inline-block');cov_qaae30lgm.s[117]++;expect(view.handles.toValue.style.display).toEqual('inline-block');});cov_qaae30lgm.s[118]++;it('bindEventListeners() send new value from input',()=>{cov_qaae30lgm.f[17]++;cov_qaae30lgm.s[119]++;view.bindEventListeners();cov_qaae30lgm.s[120]++;view.sideMenu.sideMenuElements.fromInput.value='50';cov_qaae30lgm.s[121]++;view.sideMenu.sideMenuElements.fromInput.dispatchEvent(new Event('change'));cov_qaae30lgm.s[122]++;expect(view.dataRequestToModel.needApplyNewValue).toEqual({name:'from',value:'50'});cov_qaae30lgm.s[123]++;view.sideMenu.sideMenuElements.toInput.value='80';cov_qaae30lgm.s[124]++;view.sideMenu.sideMenuElements.toInput.dispatchEvent(new Event('change'));cov_qaae30lgm.s[125]++;expect(view.dataRequestToModel.needApplyNewValue).toEqual({name:'to',value:'80'});});cov_qaae30lgm.s[126]++;it('bindEventListeners() send new step from input',()=>{cov_qaae30lgm.f[18]++;cov_qaae30lgm.s[127]++;view.dataRequestToModel.needStepWidth={name:'',value:'true'};cov_qaae30lgm.s[128]++;expect(view.dataRequestToModel.needStepWidth).toEqual({name:'',value:'true'});cov_qaae30lgm.s[129]++;view.bindEventListeners();cov_qaae30lgm.s[130]++;view.sideMenu.sideMenuElements.stepInput.value='50';cov_qaae30lgm.s[131]++;view.sideMenu.sideMenuElements.stepInput.dispatchEvent(new Event('change'));cov_qaae30lgm.s[132]++;expect(view.dataRequestToModel.needStepWidth).toEqual({name:'',value:'true'});});});

/***/ }),

/***/ "./src/tools/index.test.ts":
/*!*********************************!*\
  !*** ./src/tools/index.test.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
var cov_2oojaekbhu=function(){var path='C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\tools\\index.test.ts',hash='bb43a31c102627494e155f1a488a09b0d4d6da60',Function=function(){}.constructor,global=new Function('return this')(),gcv='__coverage__',coverageData={path:'C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\tools\\index.test.ts',statementMap:{'0':{start:{line:2,column:18},end:{line:2,column:63}},'1':{start:{line:3,column:23},end:{line:3,column:72}},'2':{start:{line:4,column:18},end:{line:4,column:62}},'3':{start:{line:5,column:0},end:{line:5,column:36}},'4':{start:{line:6,column:0},end:{line:6,column:46}},'5':{start:{line:7,column:0},end:{line:7,column:36}},'6':{start:{line:8,column:24},end:{line:8,column:65}},'7':{start:{line:9,column:28},end:{line:9,column:73}},'8':{start:{line:10,column:23},end:{line:10,column:63}},'9':{start:{line:11,column:0},end:{line:11,column:48}},'10':{start:{line:12,column:0},end:{line:12,column:56}},'11':{start:{line:13,column:0},end:{line:13,column:46}}},fnMap:{},branchMap:{},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0},f:{},b:{},inputSourceMap:{version:3,file:'C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\tools\\index.test.ts',sourceRoot:'',sources:['C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\tools\\index.test.ts'],names:[],mappings:';AAAA,MAAM,SAAS,GAAG,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAChE,MAAM,cAAc,GAAG,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AACzE,MAAM,SAAS,GAAG,OAAO,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAE/D,SAAS,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AACpC,cAAc,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;AAC9C,SAAS,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AAEpC,MAAM,eAAe,GAAG,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;AAClE,MAAM,mBAAmB,GAAG,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;AAC1E,MAAM,cAAc,GAAG,OAAO,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;AAEhE,eAAe,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;AAChD,mBAAmB,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;AACxD,cAAc,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC',sourcesContent:['const modelTest = require.context(\'../Model\', true, /test.ts$/);\r\nconst presenterTests = require.context(\'../Presenter\', true, /test.ts$/);\r\nconst viewTests = require.context(\'../View\', true, /test.ts$/);\r\n\r\nmodelTest.keys().forEach(modelTest);\r\npresenterTests.keys().forEach(presenterTests);\r\nviewTests.keys().forEach(viewTests);\r\n\r\nconst modelComponents = require.context(\'../Model\', true, /.ts$/);\r\nconst presenterComponents = require.context(\'../Presenter\', true, /.ts$/);\r\nconst viewComponents = require.context(\'../View\', true, /.ts$/);\r\n\r\nmodelComponents.keys().forEach(modelComponents);\r\npresenterComponents.keys().forEach(presenterComponents);\r\nviewComponents.keys().forEach(viewComponents);\r\n']},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const modelTest=(cov_2oojaekbhu.s[0]++,__webpack_require__("./src/Model sync recursive test.ts$"));const presenterTests=(cov_2oojaekbhu.s[1]++,__webpack_require__("./src/Presenter sync recursive test.ts$"));const viewTests=(cov_2oojaekbhu.s[2]++,__webpack_require__("./src/View sync recursive test.ts$"));cov_2oojaekbhu.s[3]++;modelTest.keys().forEach(modelTest);cov_2oojaekbhu.s[4]++;presenterTests.keys().forEach(presenterTests);cov_2oojaekbhu.s[5]++;viewTests.keys().forEach(viewTests);const modelComponents=(cov_2oojaekbhu.s[6]++,__webpack_require__("./src/Model sync recursive .ts$"));const presenterComponents=(cov_2oojaekbhu.s[7]++,__webpack_require__("./src/Presenter sync recursive .ts$"));const viewComponents=(cov_2oojaekbhu.s[8]++,__webpack_require__("./src/View sync recursive .ts$"));cov_2oojaekbhu.s[9]++;modelComponents.keys().forEach(modelComponents);cov_2oojaekbhu.s[10]++;presenterComponents.keys().forEach(presenterComponents);cov_2oojaekbhu.s[11]++;viewComponents.keys().forEach(viewComponents);

/***/ }),

/***/ "./node_modules/jasmine-jquery/lib/jasmine-jquery.js":
/*!***********************************************************!*\
  !*** ./node_modules/jasmine-jquery/lib/jasmine-jquery.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
Jasmine-jQuery: a set of jQuery helpers for Jasmine tests.

Version 2.1.1

https://github.com/velesin/jasmine-jquery

Copyright (c) 2010-2014 Wojciech Zawistowski, Travis Jeffery

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

(function (root, factory) {
     if ( true && module.exports) {
        factory(root, root.jasmine, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"));
    } else {
        factory(root, root.jasmine, root.jQuery);
    }
}((function() {return this; })(), function (window, jasmine, $) { "use strict";

  jasmine.spiedEventsKey = function (selector, eventName) {
    return [$(selector).selector, eventName].toString()
  }

  jasmine.getFixtures = function () {
    return jasmine.currentFixtures_ = jasmine.currentFixtures_ || new jasmine.Fixtures()
  }

  jasmine.getStyleFixtures = function () {
    return jasmine.currentStyleFixtures_ = jasmine.currentStyleFixtures_ || new jasmine.StyleFixtures()
  }

  jasmine.Fixtures = function () {
    this.containerId = 'jasmine-fixtures'
    this.fixturesCache_ = {}
    this.fixturesPath = 'spec/javascripts/fixtures'
  }

  jasmine.Fixtures.prototype.set = function (html) {
    this.cleanUp()
    return this.createContainer_(html)
  }

  jasmine.Fixtures.prototype.appendSet= function (html) {
    this.addToContainer_(html)
  }

  jasmine.Fixtures.prototype.preload = function () {
    this.read.apply(this, arguments)
  }

  jasmine.Fixtures.prototype.load = function () {
    this.cleanUp()
    this.createContainer_(this.read.apply(this, arguments))
  }

  jasmine.Fixtures.prototype.appendLoad = function () {
    this.addToContainer_(this.read.apply(this, arguments))
  }

  jasmine.Fixtures.prototype.read = function () {
    var htmlChunks = []
      , fixtureUrls = arguments

    for(var urlCount = fixtureUrls.length, urlIndex = 0; urlIndex < urlCount; urlIndex++) {
      htmlChunks.push(this.getFixtureHtml_(fixtureUrls[urlIndex]))
    }

    return htmlChunks.join('')
  }

  jasmine.Fixtures.prototype.clearCache = function () {
    this.fixturesCache_ = {}
  }

  jasmine.Fixtures.prototype.cleanUp = function () {
    $('#' + this.containerId).remove()
  }

  jasmine.Fixtures.prototype.sandbox = function (attributes) {
    var attributesToSet = attributes || {}
    return $('<div id="sandbox" />').attr(attributesToSet)
  }

  jasmine.Fixtures.prototype.createContainer_ = function (html) {
    var container = $('<div>')
    .attr('id', this.containerId)
    .html(html)

    $(document.body).append(container)
    return container
  }

  jasmine.Fixtures.prototype.addToContainer_ = function (html){
    var container = $(document.body).find('#'+this.containerId).append(html)

    if (!container.length) {
      this.createContainer_(html)
    }
  }

  jasmine.Fixtures.prototype.getFixtureHtml_ = function (url) {
    if (typeof this.fixturesCache_[url] === 'undefined') {
      this.loadFixtureIntoCache_(url)
    }
    return this.fixturesCache_[url]
  }

  jasmine.Fixtures.prototype.loadFixtureIntoCache_ = function (relativeUrl) {
    var self = this
      , url = this.makeFixtureUrl_(relativeUrl)
      , htmlText = ''
      , request = $.ajax({
        async: false, // must be synchronous to guarantee that no tests are run before fixture is loaded
        cache: false,
        url: url,
        dataType: 'html',
        success: function (data, status, $xhr) {
          htmlText = $xhr.responseText
        }
      }).fail(function ($xhr, status, err) {
          throw new Error('Fixture could not be loaded: ' + url + ' (status: ' + status + ', message: ' + err.message + ')')
      })

      var scripts = $($.parseHTML(htmlText, true)).find('script[src]') || [];

      scripts.each(function(){
        $.ajax({
            async: false, // must be synchronous to guarantee that no tests are run before fixture is loaded
            cache: false,
            dataType: 'script',
            url: $(this).attr('src'),
            success: function (data, status, $xhr) {
                htmlText += '<script>' + $xhr.responseText + '</script>'
            },
            error: function ($xhr, status, err) {
                throw new Error('Script could not be loaded: ' + url + ' (status: ' + status + ', message: ' + err.message + ')')
            }
        });
      })

      self.fixturesCache_[relativeUrl] = htmlText;
  }

  jasmine.Fixtures.prototype.makeFixtureUrl_ = function (relativeUrl){
    return this.fixturesPath.match('/$') ? this.fixturesPath + relativeUrl : this.fixturesPath + '/' + relativeUrl
  }

  jasmine.Fixtures.prototype.proxyCallTo_ = function (methodName, passedArguments) {
    return this[methodName].apply(this, passedArguments)
  }


  jasmine.StyleFixtures = function () {
    this.fixturesCache_ = {}
    this.fixturesNodes_ = []
    this.fixturesPath = 'spec/javascripts/fixtures'
  }

  jasmine.StyleFixtures.prototype.set = function (css) {
    this.cleanUp()
    this.createStyle_(css)
  }

  jasmine.StyleFixtures.prototype.appendSet = function (css) {
    this.createStyle_(css)
  }

  jasmine.StyleFixtures.prototype.preload = function () {
    this.read_.apply(this, arguments)
  }

  jasmine.StyleFixtures.prototype.load = function () {
    this.cleanUp()
    this.createStyle_(this.read_.apply(this, arguments))
  }

  jasmine.StyleFixtures.prototype.appendLoad = function () {
    this.createStyle_(this.read_.apply(this, arguments))
  }

  jasmine.StyleFixtures.prototype.cleanUp = function () {
    while(this.fixturesNodes_.length) {
      this.fixturesNodes_.pop().remove()
    }
  }

  jasmine.StyleFixtures.prototype.createStyle_ = function (html) {
    var styleText = $('<div></div>').html(html).text()
      , style = $('<style>' + styleText + '</style>')

    this.fixturesNodes_.push(style)
    $('head').append(style)
  }

  jasmine.StyleFixtures.prototype.clearCache = jasmine.Fixtures.prototype.clearCache
  jasmine.StyleFixtures.prototype.read_ = jasmine.Fixtures.prototype.read
  jasmine.StyleFixtures.prototype.getFixtureHtml_ = jasmine.Fixtures.prototype.getFixtureHtml_
  jasmine.StyleFixtures.prototype.loadFixtureIntoCache_ = jasmine.Fixtures.prototype.loadFixtureIntoCache_
  jasmine.StyleFixtures.prototype.makeFixtureUrl_ = jasmine.Fixtures.prototype.makeFixtureUrl_
  jasmine.StyleFixtures.prototype.proxyCallTo_ = jasmine.Fixtures.prototype.proxyCallTo_

  jasmine.getJSONFixtures = function () {
    return jasmine.currentJSONFixtures_ = jasmine.currentJSONFixtures_ || new jasmine.JSONFixtures()
  }

  jasmine.JSONFixtures = function () {
    this.fixturesCache_ = {}
    this.fixturesPath = 'spec/javascripts/fixtures/json'
  }

  jasmine.JSONFixtures.prototype.load = function () {
    this.read.apply(this, arguments)
    return this.fixturesCache_
  }

  jasmine.JSONFixtures.prototype.read = function () {
    var fixtureUrls = arguments

    for(var urlCount = fixtureUrls.length, urlIndex = 0; urlIndex < urlCount; urlIndex++) {
      this.getFixtureData_(fixtureUrls[urlIndex])
    }

    return this.fixturesCache_
  }

  jasmine.JSONFixtures.prototype.clearCache = function () {
    this.fixturesCache_ = {}
  }

  jasmine.JSONFixtures.prototype.getFixtureData_ = function (url) {
    if (!this.fixturesCache_[url]) this.loadFixtureIntoCache_(url)
    return this.fixturesCache_[url]
  }

  jasmine.JSONFixtures.prototype.loadFixtureIntoCache_ = function (relativeUrl) {
    var self = this
      , url = this.fixturesPath.match('/$') ? this.fixturesPath + relativeUrl : this.fixturesPath + '/' + relativeUrl

    $.ajax({
      async: false, // must be synchronous to guarantee that no tests are run before fixture is loaded
      cache: false,
      dataType: 'json',
      url: url,
      success: function (data) {
        self.fixturesCache_[relativeUrl] = data
      },
      error: function ($xhr, status, err) {
        throw new Error('JSONFixture could not be loaded: ' + url + ' (status: ' + status + ', message: ' + err.message + ')')
      }
    })
  }

  jasmine.JSONFixtures.prototype.proxyCallTo_ = function (methodName, passedArguments) {
    return this[methodName].apply(this, passedArguments)
  }

  jasmine.jQuery = function () {}

  jasmine.jQuery.browserTagCaseIndependentHtml = function (html) {
    return $('<div/>').append(html).html()
  }

  jasmine.jQuery.elementToString = function (element) {
    return $(element).map(function () { return this.outerHTML; }).toArray().join(', ')
  }

  var data = {
      spiedEvents: {}
    , handlers:    []
  }

  jasmine.jQuery.events = {
    spyOn: function (selector, eventName) {
      var handler = function (e) {
        var calls = (typeof data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)] !== 'undefined') ? data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)].calls : 0
        data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)] = {
          args: jasmine.util.argsToArray(arguments),
          calls: ++calls
        }
      }

      $(selector).on(eventName, handler)
      data.handlers.push(handler)

      return {
        selector: selector,
        eventName: eventName,
        handler: handler,
        reset: function (){
          delete data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)]
        },
        calls: {
          count: function () {
              return data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)] ?
                data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)].calls : 0;
          },
          any: function () {
              return data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)] ?
                !!data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)].calls : false;
          }
        }
      }
    },

    args: function (selector, eventName) {
      var actualArgs = data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)].args

      if (!actualArgs) {
        throw "There is no spy for " + eventName + " on " + selector.toString() + ". Make sure to create a spy using spyOnEvent."
      }

      return actualArgs
    },

    wasTriggered: function (selector, eventName) {
      return !!(data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)])
    },

    wasTriggeredWith: function (selector, eventName, expectedArgs, util, customEqualityTesters) {
      var actualArgs = jasmine.jQuery.events.args(selector, eventName).slice(1)

      if (Object.prototype.toString.call(expectedArgs) !== '[object Array]')
        actualArgs = actualArgs[0]

      return util.equals(actualArgs, expectedArgs, customEqualityTesters)
    },

    wasPrevented: function (selector, eventName) {
      var spiedEvent = data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)]
        , args = (jasmine.util.isUndefined(spiedEvent)) ? {} : spiedEvent.args
        , e = args ? args[0] : undefined

      return e && e.isDefaultPrevented()
    },

    wasStopped: function (selector, eventName) {
      var spiedEvent = data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)]
        , args = (jasmine.util.isUndefined(spiedEvent)) ? {} : spiedEvent.args
        , e = args ? args[0] : undefined

      return e && e.isPropagationStopped()
    },

    cleanUp: function () {
      data.spiedEvents = {}
      data.handlers    = []
    }
  }

  var hasProperty = function (actualValue, expectedValue) {
    if (expectedValue === undefined)
      return actualValue !== undefined

    return actualValue === expectedValue
  }

  beforeEach(function () {
    jasmine.addMatchers({
      toHaveClass: function () {
        return {
          compare: function (actual, className) {
            return { pass: $(actual).hasClass(className) }
          }
        }
      },

      toHaveCss: function () {
        return {
          compare: function (actual, css) {
            for (var prop in css){
              var value = css[prop]
              // see issue #147 on gh
              ;if (value === 'auto' && $(actual).get(0).style[prop] === 'auto') continue
              if ($(actual).css(prop) !== value) return { pass: false }
            }
            return { pass: true }
          }
        }
      },

      toBeVisible: function () {
        return {
          compare: function (actual) {
            return { pass: $(actual).is(':visible') }
          }
        }
      },

      toBeHidden: function () {
        return {
          compare: function (actual) {
            return { pass: $(actual).is(':hidden') }
          }
        }
      },

      toBeSelected: function () {
        return {
          compare: function (actual) {
            return { pass: $(actual).is(':selected') }
          }
        }
      },

      toBeChecked: function () {
        return {
          compare: function (actual) {
            return { pass: $(actual).is(':checked') }
          }
        }
      },

      toBeEmpty: function () {
        return {
          compare: function (actual) {
            return { pass: $(actual).is(':empty') }
          }
        }
      },

      toBeInDOM: function () {
        return {
          compare: function (actual) {
            return { pass: $.contains(document.documentElement, $(actual)[0]) }
          }
        }
      },

      toExist: function () {
        return {
          compare: function (actual) {
            return { pass: $(actual).length }
          }
        }
      },

      toHaveLength: function () {
        return {
          compare: function (actual, length) {
            return { pass: $(actual).length === length }
          }
        }
      },

      toHaveAttr: function () {
        return {
          compare: function (actual, attributeName, expectedAttributeValue) {
            return { pass: hasProperty($(actual).attr(attributeName), expectedAttributeValue) }
          }
        }
      },

      toHaveProp: function () {
        return {
          compare: function (actual, propertyName, expectedPropertyValue) {
            return { pass: hasProperty($(actual).prop(propertyName), expectedPropertyValue) }
          }
        }
      },

      toHaveId: function () {
        return {
          compare: function (actual, id) {
            return { pass: $(actual).attr('id') == id }
          }
        }
      },

      toHaveHtml: function () {
        return {
          compare: function (actual, html) {
            return { pass: $(actual).html() == jasmine.jQuery.browserTagCaseIndependentHtml(html) }
          }
        }
      },

      toContainHtml: function () {
        return {
          compare: function (actual, html) {
            var actualHtml = $(actual).html()
              , expectedHtml = jasmine.jQuery.browserTagCaseIndependentHtml(html)

            return { pass: (actualHtml.indexOf(expectedHtml) >= 0) }
          }
        }
      },

      toHaveText: function () {
        return {
          compare: function (actual, text) {
            var actualText = $(actual).text()
            var trimmedText = $.trim(actualText)

            if (text && $.isFunction(text.test)) {
              return { pass: text.test(actualText) || text.test(trimmedText) }
            } else {
              return { pass: (actualText == text || trimmedText == text) }
            }
          }
        }
      },

      toContainText: function () {
        return {
          compare: function (actual, text) {
            var trimmedText = $.trim($(actual).text())

            if (text && $.isFunction(text.test)) {
              return { pass: text.test(trimmedText) }
            } else {
              return { pass: trimmedText.indexOf(text) != -1 }
            }
          }
        }
      },

      toHaveValue: function () {
        return {
          compare: function (actual, value) {
            return { pass: $(actual).val() === value }
          }
        }
      },

      toHaveData: function () {
        return {
          compare: function (actual, key, expectedValue) {
            return { pass: hasProperty($(actual).data(key), expectedValue) }
          }
        }
      },

      toContainElement: function () {
        return {
          compare: function (actual, selector) {
            return { pass: $(actual).find(selector).length }
          }
        }
      },

      toBeMatchedBy: function () {
        return {
          compare: function (actual, selector) {
            return { pass: $(actual).filter(selector).length }
          }
        }
      },

      toBeDisabled: function () {
        return {
          compare: function (actual, selector) {
            return { pass: $(actual).is(':disabled') }
          }
        }
      },

      toBeFocused: function (selector) {
        return {
          compare: function (actual, selector) {
            return { pass: $(actual)[0] === $(actual)[0].ownerDocument.activeElement }
          }
        }
      },

      toHandle: function () {
        return {
          compare: function (actual, event) {
            if ( !actual || actual.length === 0 ) return { pass: false };
            var events = $._data($(actual).get(0), "events")

            if (!events || !event || typeof event !== "string") {
              return { pass: false }
            }

            var namespaces = event.split(".")
              , eventType = namespaces.shift()
              , sortedNamespaces = namespaces.slice(0).sort()
              , namespaceRegExp = new RegExp("(^|\\.)" + sortedNamespaces.join("\\.(?:.*\\.)?") + "(\\.|$)")

            if (events[eventType] && namespaces.length) {
              for (var i = 0; i < events[eventType].length; i++) {
                var namespace = events[eventType][i].namespace

                if (namespaceRegExp.test(namespace))
                  return { pass: true }
              }
            } else {
              return { pass: (events[eventType] && events[eventType].length > 0) }
            }

            return { pass: false }
          }
        }
      },

      toHandleWith: function () {
        return {
          compare: function (actual, eventName, eventHandler) {
            if ( !actual || actual.length === 0 ) return { pass: false };
            var normalizedEventName = eventName.split('.')[0]
              , stack = $._data($(actual).get(0), "events")[normalizedEventName]

            for (var i = 0; i < stack.length; i++) {
              if (stack[i].handler == eventHandler) return { pass: true }
            }

            return { pass: false }
          }
        }
      },

      toHaveBeenTriggeredOn: function () {
        return {
          compare: function (actual, selector) {
            var result = { pass: jasmine.jQuery.events.wasTriggered(selector, actual) }

            result.message = result.pass ?
              "Expected event " + $(actual) + " not to have been triggered on " + selector :
              "Expected event " + $(actual) + " to have been triggered on " + selector

            return result;
          }
        }
      },

      toHaveBeenTriggered: function (){
        return {
          compare: function (actual) {
            var eventName = actual.eventName
              , selector = actual.selector
              , result = { pass: jasmine.jQuery.events.wasTriggered(selector, eventName) }

            result.message = result.pass ?
            "Expected event " + eventName + " not to have been triggered on " + selector :
              "Expected event " + eventName + " to have been triggered on " + selector

            return result
          }
        }
      },

      toHaveBeenTriggeredOnAndWith: function (j$, customEqualityTesters) {
        return {
          compare: function (actual, selector, expectedArgs) {
            var wasTriggered = jasmine.jQuery.events.wasTriggered(selector, actual)
              , result = { pass: wasTriggered && jasmine.jQuery.events.wasTriggeredWith(selector, actual, expectedArgs, j$, customEqualityTesters) }

              if (wasTriggered) {
                var actualArgs = jasmine.jQuery.events.args(selector, actual, expectedArgs)[1]
                result.message = result.pass ?
                  "Expected event " + actual + " not to have been triggered with " + jasmine.pp(expectedArgs) + " but it was triggered with " + jasmine.pp(actualArgs) :
                  "Expected event " + actual + " to have been triggered with " + jasmine.pp(expectedArgs) + "  but it was triggered with " + jasmine.pp(actualArgs)

              } else {
                // todo check on this
                result.message = result.pass ?
                  "Expected event " + actual + " not to have been triggered on " + selector :
                  "Expected event " + actual + " to have been triggered on " + selector
              }

              return result
          }
        }
      },

      toHaveBeenPreventedOn: function () {
        return {
          compare: function (actual, selector) {
            var result = { pass: jasmine.jQuery.events.wasPrevented(selector, actual) }

            result.message = result.pass ?
              "Expected event " + actual + " not to have been prevented on " + selector :
              "Expected event " + actual + " to have been prevented on " + selector

            return result
          }
        }
      },

      toHaveBeenPrevented: function () {
        return {
          compare: function (actual) {
            var eventName = actual.eventName
              , selector = actual.selector
              , result = { pass: jasmine.jQuery.events.wasPrevented(selector, eventName) }

            result.message = result.pass ?
              "Expected event " + eventName + " not to have been prevented on " + selector :
              "Expected event " + eventName + " to have been prevented on " + selector

            return result
          }
        }
      },

      toHaveBeenStoppedOn: function () {
        return {
          compare: function (actual, selector) {
            var result = { pass: jasmine.jQuery.events.wasStopped(selector, actual) }

            result.message = result.pass ?
              "Expected event " + actual + " not to have been stopped on " + selector :
              "Expected event " + actual + " to have been stopped on " + selector

            return result;
          }
        }
      },

      toHaveBeenStopped: function () {
        return {
          compare: function (actual) {
            var eventName = actual.eventName
              , selector = actual.selector
              , result = { pass: jasmine.jQuery.events.wasStopped(selector, eventName) }

            result.message = result.pass ?
              "Expected event " + eventName + " not to have been stopped on " + selector :
              "Expected event " + eventName + " to have been stopped on " + selector

            return result
          }
        }
      }
    })

    jasmine.getEnv().addCustomEqualityTester(function(a, b) {
     if (a && b) {
       if (a instanceof $ || jasmine.isDomNode(a)) {
         var $a = $(a)

         if (b instanceof $)
           return $a.length == b.length && a.is(b)

         return $a.is(b);
       }

       if (b instanceof $ || jasmine.isDomNode(b)) {
         var $b = $(b)

         if (a instanceof $)
           return a.length == $b.length && $b.is(a)

         return $(b).is(a);
       }
     }
    })

    jasmine.getEnv().addCustomEqualityTester(function (a, b) {
     if (a instanceof $ && b instanceof $ && a.size() == b.size())
        return a.is(b)
    })
  })

  afterEach(function () {
    jasmine.getFixtures().cleanUp()
    jasmine.getStyleFixtures().cleanUp()
    jasmine.jQuery.events.cleanUp()
  })

  window.readFixtures = function () {
    return jasmine.getFixtures().proxyCallTo_('read', arguments)
  }

  window.preloadFixtures = function () {
    jasmine.getFixtures().proxyCallTo_('preload', arguments)
  }

  window.loadFixtures = function () {
    jasmine.getFixtures().proxyCallTo_('load', arguments)
  }

  window.appendLoadFixtures = function () {
    jasmine.getFixtures().proxyCallTo_('appendLoad', arguments)
  }

  window.setFixtures = function (html) {
    return jasmine.getFixtures().proxyCallTo_('set', arguments)
  }

  window.appendSetFixtures = function () {
    jasmine.getFixtures().proxyCallTo_('appendSet', arguments)
  }

  window.sandbox = function (attributes) {
    return jasmine.getFixtures().sandbox(attributes)
  }

  window.spyOnEvent = function (selector, eventName) {
    return jasmine.jQuery.events.spyOn(selector, eventName)
  }

  window.preloadStyleFixtures = function () {
    jasmine.getStyleFixtures().proxyCallTo_('preload', arguments)
  }

  window.loadStyleFixtures = function () {
    jasmine.getStyleFixtures().proxyCallTo_('load', arguments)
  }

  window.appendLoadStyleFixtures = function () {
    jasmine.getStyleFixtures().proxyCallTo_('appendLoad', arguments)
  }

  window.setStyleFixtures = function (html) {
    jasmine.getStyleFixtures().proxyCallTo_('set', arguments)
  }

  window.appendSetStyleFixtures = function (html) {
    jasmine.getStyleFixtures().proxyCallTo_('appendSet', arguments)
  }

  window.loadJSONFixtures = function () {
    return jasmine.getJSONFixtures().proxyCallTo_('load', arguments)
  }

  window.getJSONFixture = function (url) {
    return jasmine.getJSONFixtures().proxyCallTo_('read', arguments)[url]
  }
}));


/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.6.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2021-03-02T17:08Z
 */
( function( global, factory ) {

	"use strict";

	if (  true && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

		// Support: Chrome <=57, Firefox <=52
		// In some browsers, typeof returns "function" for HTML <object> elements
		// (i.e., `typeof document.createElement( "object" ) === "function"`).
		// We don't want to classify *any* DOM node as a function.
		// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
		// Plus for old WebKit, typeof returns "function" for HTML collections
		// (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
		return typeof obj === "function" && typeof obj.nodeType !== "number" &&
			typeof obj.item !== "function";
	};


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.6.0",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
						[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( _i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.6
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2021-02-16
 */
( function( window ) {
var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ( {} ).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	pushNative = arr.push,
	push = arr.push,
	slice = arr.slice,

	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[ i ] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
		"ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5]
		// or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
		whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
		"*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
			whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
			whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		return nonHex ?

			// Strip the backslash prefix from a non-hex escape sequence
			nonHex :

			// Replace a hexadecimal escape sequence with the encoded Unicode code point
			// Support: IE <=11+
			// For values outside the Basic Multilingual Plane (BMP), manually construct a
			// surrogate pair
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" +
				ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android<4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;

			// Can't trust NodeList.length
			while ( ( target[ j++ ] = els[ i++ ] ) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

				// Support: IE 8 only
				// Exclude object elements
				( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					if ( newContext !== context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split( "|" ),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[ i ] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( ( cur = cur.nextSibling ) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return ( name === "input" || name === "button" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
					inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem && elem.namespaceURI,
		docElem = elem && ( elem.ownerDocument || elem ).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
	// Safari 4 - 5 only, Opera <=11.6 - 12.x only
	// IE/Edge & older browsers don't support the :scope pseudo-class.
	// Support: Safari 6.0 only
	// Safari 6.0 supports :scope but it's an alias of :root there.
	support.scope = assert( function( el ) {
		docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
		return typeof el.querySelectorAll !== "undefined" &&
			!el.querySelectorAll( ":scope fieldset div" ).length;
	} );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert( function( el ) {
		el.className = "i";
		return !el.getAttribute( "className" );
	} );

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert( function( el ) {
		el.appendChild( document.createComment( "" ) );
		return !el.getElementsByTagName( "*" ).length;
	} );

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter[ "ID" ] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find[ "TAG" ] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( ( elem = results[ i++ ] ) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert( function( el ) {

			var input;

			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll( "[selected]" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push( "~=" );
			}

			// Support: IE 11+, Edge 15 - 18+
			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
			// Adding a temporary attribute to the document before the selection works
			// around the issue.
			// Interestingly, IE 10 & older don't seem to have the issue.
			input = document.createElement( "input" );
			input.setAttribute( "name", "" );
			el.appendChild( input );
			if ( !el.querySelectorAll( "[name='']" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
					whitespace + "*(?:''|\"\")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll( ":checked" ).length ) {
				rbuggyQSA.push( ":checked" );
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push( ".#.+[+~]" );
			}

			// Support: Firefox <=3.6 - 5 only
			// Old Firefox doesn't throw on a badly-escaped identifier.
			el.querySelectorAll( "\\\f" );
			rbuggyQSA.push( "[\\r\\n\\f]" );
		} );

		assert( function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement( "input" );
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll( "[name=d]" ).length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: Opera 10 - 11 only
			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll( "*,:x" );
			rbuggyQSA.push( ",.*:" );
		} );
	}

	if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector ) ) ) ) {

		assert( function( el ) {

			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		} );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			) );
		} :
		function( a, b ) {
			if ( b ) {
				while ( ( b = b.parentNode ) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a == document || a.ownerDocument == preferredDoc &&
				contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b == document || b.ownerDocument == preferredDoc &&
				contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			return a == document ? -1 :
				b == document ? 1 :
				/* eslint-enable eqeqeq */
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( ( cur = cur.parentNode ) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( ( cur = cur.parentNode ) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[ i ] === bp[ i ] ) {
			i++;
		}

		return i ?

			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[ i ], bp[ i ] ) :

			// Otherwise nodes in our document sort first
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			ap[ i ] == preferredDoc ? -1 :
			bp[ i ] == preferredDoc ? 1 :
			/* eslint-enable eqeqeq */
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

				// As well, disconnected nodes are said to be in a document
				// fragment in IE 9
				elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			( val = elem.getAttributeNode( name ) ) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {

		// If no nodeType, this is expected to be an array
		while ( ( node = elem[ i++ ] ) ) {

			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {

			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}

	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
				match[ 5 ] || "" ).replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

				// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				Sizzle.error( match[ 0 ] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace +
					")" + className + "(" + whitespace + "|$)" ) ) && classCache(
						className, function( elem ) {
							return pattern.test(
								typeof elem.className === "string" && elem.className ||
								typeof elem.getAttribute !== "undefined" &&
									elem.getAttribute( "class" ) ||
								""
							);
				} );
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				/* eslint-disable max-len */

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
				/* eslint-enable max-len */

			};
		},

		"CHILD": function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || ( node[ expando ] = {} );

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								( outerCache[ node.uniqueID ] = {} );

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {

								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || ( node[ expando ] = {} );

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												( outerCache[ node.uniqueID ] = {} );

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		"not": markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element (issue #299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		"has": markFunction( function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		} ),

		"contains": markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement &&
				( !document.hasFocus || document.hasFocus() ) &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return ( nodeName === "input" && !!elem.checked ) ||
				( nodeName === "option" && !!elem.selected );
		},

		"selected": function( elem ) {

			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {

			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos[ "empty" ]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		"last": createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		"even": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"odd": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rcombinators.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :

			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] ||
							( outerCache[ elem.uniqueID ] = {} );

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = uniqueCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts(
				selector || "*",
				context.nodeType ? [ context ] : context,
				[]
			),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?

				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

					// If the preceding token was a descendant combinator, insert an implicit any-element `*`
					tokens
						.slice( 0, i - 1 )
						.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache(
			selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers )
		);

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
			context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
				.replace( runescape, funescape ), context ) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
						context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert( function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute( "href" ) === "#";
} ) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	} );
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert( function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
} ) ) {
	addHandle( "value", function( elem, _name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	} );
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert( function( el ) {
	return el.getAttribute( "disabled" ) == null;
} ) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
		}
	} );
}

return Sizzle;

} )( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

	return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

}
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the primary Deferred
			primary = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						primary.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( primary.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return primary.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );
		}

		return primary.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
				dataPriv.get( this, "events" ) || Object.create( null )
			)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
						return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
						return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();

						// Support: Chrome 86+
						// In Chrome, if an element having a focusout handler is blurred by
						// clicking outside of it, it invokes the handler synchronously. If
						// that handler calls `.remove()` on the element, the data is cleared,
						// leaving `result` undefined. We need to guard against this.
						return result && result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,
	which: true
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		// Suppress native focus or blur as it's already being fired
		// in leverageNative.
		_default: function() {
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		//
		// Support: Firefox 70+
		// Only Firefox includes border widths
		// in computed dimensions. (gh-4529)
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
				tr.style.cssText = "border:1px solid";

				// Support: Chrome 86+
				// Height set through cssText does not get applied.
				// Computed height then comes back as 0.
				tr.style.height = "1px";
				trChild.style.height = "9px";

				// Support: Android 8 Chrome 86+
				// In our bodyBackground.html iframe,
				// display for all div elements is set to "inline",
				// which causes a problem only in Android 8 Chrome 86.
				// Ensuring the div is display: block
				// gets around this issue.
				trChild.style.display = "block";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +
					parseInt( trStyle.borderTopWidth, 10 ) +
					parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
					swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, dimension, extra );
					} ) :
					getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
				jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

				/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
					animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};

		doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {

				// Handle: regular nodes (via `this.ownerDocument`), window
				// (via `this.document`) & document (via `this`).
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, parserErrorElem;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {}

	parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
	if ( !xml || parserErrorElem ) {
		jQuery.error( "Invalid XML: " + (
			parserErrorElem ?
				jQuery.map( parserErrorElem.childNodes, function( el ) {
					return el.textContent;
				} ).join( "\n" ) :
				data
		) );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} ).filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} ).map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );

originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script but not if jsonp
			if ( !isSuccess &&
				jQuery.inArray( "script", s.dataTypes ) > -1 &&
				jQuery.inArray( "json", s.dataTypes ) < 0 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( {
		padding: "inner" + name,
		content: type,
		"": "outer" + name
	}, function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );

jQuery.each(
	( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	}
);




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),

/***/ "./src/Model sync recursive .ts$":
/*!******************************!*\
  !*** ./src/Model/ sync .ts$ ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./Model.ts": "./src/Model/Model.ts",
	"./model.test.ts": "./src/Model/model.test.ts",
	"./types.ts": "./src/Model/types.ts"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./src/Model sync recursive .ts$";

/***/ }),

/***/ "./src/Model sync recursive test.ts$":
/*!**********************************!*\
  !*** ./src/Model/ sync test.ts$ ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./model.test.ts": "./src/Model/model.test.ts"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./src/Model sync recursive test.ts$";

/***/ }),

/***/ "./src/Presenter sync recursive .ts$":
/*!**********************************!*\
  !*** ./src/Presenter/ sync .ts$ ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./Presenter.ts": "./src/Presenter/Presenter.ts",
	"./presenter.test.ts": "./src/Presenter/presenter.test.ts"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./src/Presenter sync recursive .ts$";

/***/ }),

/***/ "./src/Presenter sync recursive test.ts$":
/*!**************************************!*\
  !*** ./src/Presenter/ sync test.ts$ ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./presenter.test.ts": "./src/Presenter/presenter.test.ts"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./src/Presenter sync recursive test.ts$";

/***/ }),

/***/ "./src/View sync recursive .ts$":
/*!*****************************!*\
  !*** ./src/View/ sync .ts$ ***!
  \*****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./Handles/Handles.ts": "./src/View/Handles/Handles.ts",
	"./Handles/handles.test.ts": "./src/View/Handles/handles.test.ts",
	"./Handles/types.ts": "./src/View/Handles/types.ts",
	"./Movement/Movement.ts": "./src/View/Movement/Movement.ts",
	"./Movement/movement.test.ts": "./src/View/Movement/movement.test.ts",
	"./Movement/types.ts": "./src/View/Movement/types.ts",
	"./SelectedInterval/SelectedInterval.ts": "./src/View/SelectedInterval/SelectedInterval.ts",
	"./SelectedInterval/selectedInterval.test.ts": "./src/View/SelectedInterval/selectedInterval.test.ts",
	"./SelectedInterval/types.ts": "./src/View/SelectedInterval/types.ts",
	"./SideMenu/SideMenu.ts": "./src/View/SideMenu/SideMenu.ts",
	"./SideMenu/sideMenu.test.ts": "./src/View/SideMenu/sideMenu.test.ts",
	"./SideMenu/types.ts": "./src/View/SideMenu/types.ts",
	"./Slider/Slider.ts": "./src/View/Slider/Slider.ts",
	"./Slider/slider.test.ts": "./src/View/Slider/slider.test.ts",
	"./Slider/types.ts": "./src/View/Slider/types.ts",
	"./ValuesScale/ValuesScale.ts": "./src/View/ValuesScale/ValuesScale.ts",
	"./ValuesScale/interfaces.ts": "./src/View/ValuesScale/interfaces.ts",
	"./ValuesScale/valueScale.test.ts": "./src/View/ValuesScale/valueScale.test.ts",
	"./View.ts": "./src/View/View.ts",
	"./types.ts": "./src/View/types.ts",
	"./view.test.ts": "./src/View/view.test.ts"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./src/View sync recursive .ts$";

/***/ }),

/***/ "./src/View sync recursive test.ts$":
/*!*********************************!*\
  !*** ./src/View/ sync test.ts$ ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./Handles/handles.test.ts": "./src/View/Handles/handles.test.ts",
	"./Movement/movement.test.ts": "./src/View/Movement/movement.test.ts",
	"./SelectedInterval/selectedInterval.test.ts": "./src/View/SelectedInterval/selectedInterval.test.ts",
	"./SideMenu/sideMenu.test.ts": "./src/View/SideMenu/sideMenu.test.ts",
	"./Slider/slider.test.ts": "./src/View/Slider/slider.test.ts",
	"./ValuesScale/valueScale.test.ts": "./src/View/ValuesScale/valueScale.test.ts",
	"./view.test.ts": "./src/View/view.test.ts"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./src/View sync recursive test.ts$";

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFTO0FBQ1QsT0FBTzs7QUFFUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx5REFBeUQscUJBQXFCO0FBQzlFO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0NBQXdDLHdCQUF3QjtBQUNoRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdEOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdEOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLDBEQUEwRDtBQUMxRDtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUJBQXVCO0FBQ3ZCLGNBQWM7QUFDZCx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QjtBQUN2QixjQUFjO0FBQ2QsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0EsMkRBQTJEO0FBQzNEOztBQUVBO0FBQ0EsdUJBQXVCO0FBQ3ZCOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOEJBQThCLDhCQUE4QjtBQUM1RDs7QUFFQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBLGNBQWM7QUFDZCx1QkFBdUI7QUFDdkI7O0FBRUEscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRDtBQUMzRDtBQUNBOztBQUVBLDRCQUE0QixrQkFBa0I7QUFDOUMsNkRBQTZEO0FBQzdEOztBQUVBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7O0FBRTNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7O0FBRTNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCOztBQUUzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCOztBQUUzQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCOztBQUUzQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7O0FBRTNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7O0FBRTNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7Ozs7Ozs7O0FDcjBCRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLE1BQU0sS0FBMEI7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7O0FBR0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7O0FBR0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLFlBQVk7O0FBRXJCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRixvQkFBb0I7O0FBRXBCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGLDhDQUE4QztBQUM5QztBQUNBO0FBQ0EsbUJBQW1CLGlDQUFpQztBQUNwRCxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsVUFBVSxTQUFTO0FBQ25CO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVSxZQUFZO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxZQUFZO0FBQ3ZCOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsU0FBUztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxrQ0FBa0MsSUFBSTtBQUN0Qzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSwyQkFBMkI7QUFDM0I7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCLElBQUk7O0FBRXBCO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLDBDQUEwQyxJQUFJO0FBQzlDO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGLFVBQVU7O0FBRVY7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQSxNQUFNO0FBQ047O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsMEJBQTBCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcs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RUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsV0FBVztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsZUFBZTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBLGlDQUFpQyxNQUFNO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSxlQUFlOztBQUVmLFNBQVM7O0FBRVQ7QUFDQSxTQUFTLGdDQUFnQztBQUN6QyxTQUFTLG1CQUFtQjtBQUM1QixTQUFTLHFDQUFxQztBQUM5QyxTQUFTO0FBQ1QsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSw4REFBOEQ7O0FBRTlEO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQzs7QUFFM0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBUTs7QUFFUjtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrREFBK0Q7O0FBRS9EO0FBQ0E7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBLCtDQUErQzs7QUFFL0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFD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QUFFN0Q7QUFDQTtBQUNBO0FBQ0EsMENBQTBDOztBQUUxQztBQUNBO0FBQ0EsUUFBUTtBQUNSOztBQUVBO0FBQ0E7QUFDQSxRQUFROztBQUVSO0FBQ0E7O0FBRUEsb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUyxTQUFTO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLFNBQVM7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUosU0FBUyxTQUFTO0FBQ2xCO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixpREFBaUQ7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xELFdBQVcsNENBQTRDO0FBQ3ZEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQkFBaUI7QUFDNUI7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTs7QUFFQSxFQUFFOzs7O0FBSUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7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LEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7O0FBRW5CO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsY0FBYztBQUN6QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHlDQUF5QyxxQ0FBcUM7QUFDOUUscUNBQXFDLHNDQUFzQztBQUMzRSxxQ0FBcUMscUNBQXFDO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZOztBQUVaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVc7O0FBRVg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQ0FBcUM7QUFDckMsc0NBQXNDO0FBQ3RDLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7OztBQUdGO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOzs7OztBQUtBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCLGFBQWE7QUFDckMsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsU0FBUztBQUM3Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLEVBQUU7OztBQUdGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTs7O0FBR0E7O0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0EsR0FBRztBQUNILGVBQWU7O0FBRWY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVMsZ0JBQWdCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLEVBQUU7QUFDRjs7QUFFQTs7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7O0FBR0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLEdBQUc7QUFDSDs7QUFFQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUyxPQUFPO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxzQkFBc0I7O0FBRXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLE9BQU87QUFDaEI7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsV0FBVzs7QUFFWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxlQUFlLHNCQUFzQjtBQUNyQztBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxnRUFBZ0U7QUFDaEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxXQUFXLGNBQWM7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsbUJBQW1CO0FBQ3JDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsdUNBQXVDO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix1REFBdUQ7QUFDL0U7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLElBQUk7QUFDSixFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSwrQ0FBK0M7QUFDckQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVELGVBQWUsb0NBQW9DO0FBQ25EOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxFQUFFOzs7QUFHRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSw0Q0FBNEMsT0FBTztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qjs7QUFFOUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FB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QjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSw4REFBOEQ7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUyxPQUFPOztBQUVoQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUEsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZTtBQUNsQztBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjs7QUFFakI7QUFDQTs7QUFFQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZLFNBQVM7QUFDckI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEVBQUU7OztBQUdGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQSxTQUFTLE9BQU87QUFDaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGdCQUFnQjtBQUN6Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsa0RBQWtELDBCQUEwQjtBQUM1RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQVcsZ0JBQWdCO0FBQzNCO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7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O0FBQ0EsR0FBRztBQUNIOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7OztBQUdGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7Ozs7O0FBS0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7Ozs7O0FBS0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOzs7OztBQUtGOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEsa0NBQWtDO0FBQ2xDO0FBQ0E7O0FBRUEsS0FBSztBQUNMOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsTUFBTTtBQUNOOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBLFlBQVksU0FBUztBQUNyQjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7Ozs7QUFLRjs7O0FBR0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0NBQStDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNENBQTRDO0FBQzVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLEVBQUU7O0FBRUY7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOzs7QUFHRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isb0NBQW9DOztBQUVwRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUEsY0FBYzs7QUFFZDs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUosR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWM7QUFDZCxNQUFNO0FBQ047O0FBRUEsWUFBWTtBQUNaLElBQUk7QUFDSjtBQUNBLEVBQUU7OztBQUdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCOztBQUVoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCOztBQUVoQixpREFBaUQ7QUFDakQ7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsbUJBQW1CO0FBQ25COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7O0FBRWpCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsVUFBVTtBQUNWOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUI7QUFDakIsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRDs7QUFFbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSwyQkFBMkI7O0FBRTNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQ0FBa0M7O0FBRWxDO0FBQ0Esc0JBQXNCO0FBQ3RCLDJCQUEyQjs7QUFFM0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTs7QUFFUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU07QUFDTjs7QUFFQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7OztBQUdGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQSxJQUFJO0FBQ0osRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEVBQUU7OztBQUdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWOztBQUVBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksdUJBQXVCO0FBQ25DLFlBQVksd0JBQXdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOzs7OztBQUtGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDLGNBQWMsdUNBQXVDO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7Ozs7O0FBS0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQSxFQUFFOzs7OztBQUtGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7OztBQUdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjs7QUFFQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLHFEQUFxRDtBQUNyRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0I7O0FBRXBCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQSxFQUFFOztBQUVGO0FBQ0EsZUFBZSxxREFBcUQ7QUFDcEU7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7O0FBR0Y7QUFDQSxlQUFlLGtDQUFrQztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLEdBQUc7QUFDSCxFQUFFOzs7QUFHRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7Ozs7QUFLRjs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEtBQUssSUFBMEM7QUFDL0MsQ0FBQyxpQ0FBa0IsRUFBRSxtQ0FBRTtBQUN2QjtBQUNBLEVBQUU7QUFBQSxrR0FBRTtBQUNKOzs7OztBQUtBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQSxFQUFFOzs7Ozs7Ozs7OztBQ2hvVkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FDeEJBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUN2QkE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9hdXRvYmluZC1kZWNvcmF0b3IvbGliL2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vc3JjL01vZGVsL01vZGVsLnRzIiwid2VicGFjazovL3Rlc3QvLi9zcmMvTW9kZWwvbW9kZWwudGVzdC50cyIsIndlYnBhY2s6Ly90ZXN0Ly4vc3JjL01vZGVsL3R5cGVzLnRzIiwid2VicGFjazovL3Rlc3QvLi9zcmMvUHJlc2VudGVyL1ByZXNlbnRlci50cyIsIndlYnBhY2s6Ly90ZXN0Ly4vc3JjL1ByZXNlbnRlci9wcmVzZW50ZXIudGVzdC50cyIsIndlYnBhY2s6Ly90ZXN0Ly4vc3JjL1ZpZXcvSGFuZGxlcy9IYW5kbGVzLnRzIiwid2VicGFjazovL3Rlc3QvLi9zcmMvVmlldy9IYW5kbGVzL2hhbmRsZXMudGVzdC50cyIsIndlYnBhY2s6Ly90ZXN0Ly4vc3JjL1ZpZXcvSGFuZGxlcy90eXBlcy50cyIsIndlYnBhY2s6Ly90ZXN0Ly4vc3JjL1ZpZXcvTW92ZW1lbnQvTW92ZW1lbnQudHMiLCJ3ZWJwYWNrOi8vdGVzdC8uL3NyYy9WaWV3L01vdmVtZW50L21vdmVtZW50LnRlc3QudHMiLCJ3ZWJwYWNrOi8vdGVzdC8uL3NyYy9WaWV3L01vdmVtZW50L3R5cGVzLnRzIiwid2VicGFjazovL3Rlc3QvLi9zcmMvVmlldy9TZWxlY3RlZEludGVydmFsL1NlbGVjdGVkSW50ZXJ2YWwudHMiLCJ3ZWJwYWNrOi8vdGVzdC8uL3NyYy9WaWV3L1NlbGVjdGVkSW50ZXJ2YWwvc2VsZWN0ZWRJbnRlcnZhbC50ZXN0LnRzIiwid2VicGFjazovL3Rlc3QvLi9zcmMvVmlldy9TZWxlY3RlZEludGVydmFsL3R5cGVzLnRzIiwid2VicGFjazovL3Rlc3QvLi9zcmMvVmlldy9TaWRlTWVudS9TaWRlTWVudS50cyIsIndlYnBhY2s6Ly90ZXN0Ly4vc3JjL1ZpZXcvU2lkZU1lbnUvc2lkZU1lbnUudGVzdC50cyIsIndlYnBhY2s6Ly90ZXN0Ly4vc3JjL1ZpZXcvU2lkZU1lbnUvdHlwZXMudHMiLCJ3ZWJwYWNrOi8vdGVzdC8uL3NyYy9WaWV3L1NsaWRlci9TbGlkZXIudHMiLCJ3ZWJwYWNrOi8vdGVzdC8uL3NyYy9WaWV3L1NsaWRlci9zbGlkZXIudGVzdC50cyIsIndlYnBhY2s6Ly90ZXN0Ly4vc3JjL1ZpZXcvU2xpZGVyL3R5cGVzLnRzIiwid2VicGFjazovL3Rlc3QvLi9zcmMvVmlldy9WYWx1ZXNTY2FsZS9WYWx1ZXNTY2FsZS50cyIsIndlYnBhY2s6Ly90ZXN0Ly4vc3JjL1ZpZXcvVmFsdWVzU2NhbGUvaW50ZXJmYWNlcy50cyIsIndlYnBhY2s6Ly90ZXN0Ly4vc3JjL1ZpZXcvVmFsdWVzU2NhbGUvdmFsdWVTY2FsZS50ZXN0LnRzIiwid2VicGFjazovL3Rlc3QvLi9zcmMvVmlldy9WaWV3LnRzIiwid2VicGFjazovL3Rlc3QvLi9zcmMvVmlldy90eXBlcy50cyIsIndlYnBhY2s6Ly90ZXN0Ly4vc3JjL1ZpZXcvdmlldy50ZXN0LnRzIiwid2VicGFjazovL3Rlc3QvLi9zcmMvdG9vbHMvaW5kZXgudGVzdC50cyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL2phc21pbmUtanF1ZXJ5L2xpYi9qYXNtaW5lLWpxdWVyeS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vc3JjL01vZGVsfHN5bmN8Ly50cyQiLCJ3ZWJwYWNrOi8vdGVzdC8uL3NyYy9Nb2RlbHxzeW5jfC90ZXN0LnRzJCIsIndlYnBhY2s6Ly90ZXN0Ly4vc3JjL1ByZXNlbnRlcnxzeW5jfC8udHMkIiwid2VicGFjazovL3Rlc3QvLi9zcmMvUHJlc2VudGVyfHN5bmN8L3Rlc3QudHMkIiwid2VicGFjazovL3Rlc3QvLi9zcmMvVmlld3xzeW5jfC8udHMkIiwid2VicGFjazovL3Rlc3QvLi9zcmMvVmlld3xzeW5jfC90ZXN0LnRzJCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG4vKipcbiAqIFJldHVybiBhIGRlc2NyaXB0b3IgcmVtb3ZpbmcgdGhlIHZhbHVlIGFuZCByZXR1cm5pbmcgYSBnZXR0ZXJcbiAqIFRoZSBnZXR0ZXIgd2lsbCByZXR1cm4gYSAuYmluZCB2ZXJzaW9uIG9mIHRoZSBmdW5jdGlvblxuICogYW5kIG1lbW9pemUgdGhlIHJlc3VsdCBhZ2FpbnN0IGEgc3ltYm9sIG9uIHRoZSBpbnN0YW5jZVxuICovXG5leHBvcnQgZnVuY3Rpb24gYm91bmRNZXRob2QodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpIHtcbiAgdmFyIGZuID0gZGVzY3JpcHRvci52YWx1ZTtcblxuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBib3VuZE1ldGhvZCBkZWNvcmF0b3IgY2FuIG9ubHkgYmUgYXBwbGllZCB0byBtZXRob2RzIG5vdDogXCIuY29uY2F0KF90eXBlb2YoZm4pKSk7XG4gIH0gLy8gSW4gSUUxMSBjYWxsaW5nIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBoYXMgYSBzaWRlLWVmZmVjdCBvZiBldmFsdWF0aW5nIHRoZVxuICAvLyBnZXR0ZXIgZm9yIHRoZSBwcm9wZXJ0eSB3aGljaCBpcyBiZWluZyByZXBsYWNlZC4gVGhpcyBjYXVzZXMgaW5maW5pdGVcbiAgLy8gcmVjdXJzaW9uIGFuZCBhbiBcIk91dCBvZiBzdGFjayBzcGFjZVwiIGVycm9yLlxuXG5cbiAgdmFyIGRlZmluaW5nUHJvcGVydHkgPSBmYWxzZTtcbiAgcmV0dXJuIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgICBpZiAoZGVmaW5pbmdQcm9wZXJ0eSB8fCB0aGlzID09PSB0YXJnZXQucHJvdG90eXBlIHx8IHRoaXMuaGFzT3duUHJvcGVydHkoa2V5KSB8fCB0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZuO1xuICAgICAgfVxuXG4gICAgICB2YXIgYm91bmRGbiA9IGZuLmJpbmQodGhpcyk7XG4gICAgICBkZWZpbmluZ1Byb3BlcnR5ID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBrZXksIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gYm91bmRGbjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICBmbiA9IHZhbHVlO1xuICAgICAgICAgIGRlbGV0ZSB0aGlzW2tleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZGVmaW5pbmdQcm9wZXJ0eSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGJvdW5kRm47XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgZm4gPSB2YWx1ZTtcbiAgICB9XG4gIH07XG59XG4vKipcbiAqIFVzZSBib3VuZE1ldGhvZCB0byBiaW5kIGFsbCBtZXRob2RzIG9uIHRoZSB0YXJnZXQucHJvdG90eXBlXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGJvdW5kQ2xhc3ModGFyZ2V0KSB7XG4gIC8vIChVc2luZyByZWZsZWN0IHRvIGdldCBhbGwga2V5cyBpbmNsdWRpbmcgc3ltYm9scylcbiAgdmFyIGtleXM7IC8vIFVzZSBSZWZsZWN0IGlmIGV4aXN0c1xuXG4gIGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIFJlZmxlY3Qub3duS2V5cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGtleXMgPSBSZWZsZWN0Lm93bktleXModGFyZ2V0LnByb3RvdHlwZSk7XG4gIH0gZWxzZSB7XG4gICAga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldC5wcm90b3R5cGUpOyAvLyBVc2Ugc3ltYm9scyBpZiBzdXBwb3J0IGlzIHByb3ZpZGVkXG5cbiAgICBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldC5wcm90b3R5cGUpKTtcbiAgICB9XG4gIH1cblxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIC8vIElnbm9yZSBzcGVjaWFsIGNhc2UgdGFyZ2V0IG1ldGhvZFxuICAgIGlmIChrZXkgPT09ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LnByb3RvdHlwZSwga2V5KTsgLy8gT25seSBtZXRob2RzIG5lZWQgYmluZGluZ1xuXG4gICAgaWYgKHR5cGVvZiBkZXNjcmlwdG9yLnZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LnByb3RvdHlwZSwga2V5LCBib3VuZE1ldGhvZCh0YXJnZXQsIGtleSwgZGVzY3JpcHRvcikpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB0YXJnZXQ7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhdXRvYmluZCgpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gYm91bmRDbGFzcy5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gYm91bmRNZXRob2QuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xufSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuTW9kZWwgPSB2b2lkIDA7XHJcbmNsYXNzIE1vZGVsIHtcclxuICAgIGNvbnN0cnVjdG9yKHNldHRpbmdzKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZXMgPSB7XHJcbiAgICAgICAgICAgIG1pbjogTW9kZWwudHJ1bmNhdGVzTnVtYmVyc0FmdGVyRG90KE51bWJlcihzZXR0aW5ncy5taW4pKSxcclxuICAgICAgICAgICAgbWF4OiBNb2RlbC50cnVuY2F0ZXNOdW1iZXJzQWZ0ZXJEb3QoTnVtYmVyKHNldHRpbmdzLm1heCkpLFxyXG4gICAgICAgICAgICBmcm9tOiBNb2RlbC50cnVuY2F0ZXNOdW1iZXJzQWZ0ZXJEb3QoTnVtYmVyKHNldHRpbmdzLmZyb20pKSxcclxuICAgICAgICAgICAgdG86IE1vZGVsLnRydW5jYXRlc051bWJlcnNBZnRlckRvdChOdW1iZXIoc2V0dGluZ3MudG8pKSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgd3JpdGVzRGF0YVRvTW9kZWwoZGF0YSkge1xyXG4gICAgICAgIHRoaXMudmFsdWVzW2RhdGEudGFyZ2V0XSA9IGRhdGEudmFsdWU7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgdHJ1bmNhdGVzTnVtYmVyc0FmdGVyRG90KHZhbHVlKSB7XHJcbiAgICAgICAgY29uc3QgaXNMYXN0WmVybyA9ICFOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSAmJiBgJHt2YWx1ZS50b0ZpeGVkKDIpfWAuc2xpY2UoLTEpID09PSAnMCc7XHJcbiAgICAgICAgY29uc3QgYXJlTGFzdFR3b1plcm8gPSBgJHt2YWx1ZS50b0ZpeGVkKDIpfWAuc2xpY2UoLTIpID09PSAnMDAnO1xyXG4gICAgICAgIGNvbnN0IGlzSW50ZWdlciA9IE51bWJlci5pc0ludGVnZXIodmFsdWUpIHx8IGFyZUxhc3RUd29aZXJvO1xyXG4gICAgICAgIHN3aXRjaCAodHJ1ZSkge1xyXG4gICAgICAgICAgICBjYXNlIGlzSW50ZWdlcjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b0ZpeGVkKDApO1xyXG4gICAgICAgICAgICBjYXNlIGlzTGFzdFplcm86XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUudG9GaXhlZCgxKTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b0ZpeGVkKDIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhbGN1bGF0ZVZhbHVlc0J5UG9zaXRpb24oc2V0dGluZ3MpIHtcclxuICAgICAgICBjb25zdCBjYWxjdWxhdGVWYWx1ZXMgPSAoY2FsY3VsYXRpb25EYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gKE51bWJlcih0aGlzLnZhbHVlcy5taW4pICsgKE51bWJlcihjYWxjdWxhdGlvbkRhdGEucG9zaXRpb24pIC8gKE51bWJlcihjYWxjdWxhdGlvbkRhdGEuc2xpZGVyV2lkdGgpIC8gKE51bWJlcih0aGlzLnZhbHVlcy5tYXgpIC0gTnVtYmVyKHRoaXMudmFsdWVzLm1pbikpKSkpO1xyXG4gICAgICAgICAgICByZXR1cm4gTW9kZWwudHJ1bmNhdGVzTnVtYmVyc0FmdGVyRG90KHZhbHVlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMud3JpdGVzRGF0YVRvTW9kZWwoeyB0YXJnZXQ6IHNldHRpbmdzLnRhcmdldCwgdmFsdWU6IGNhbGN1bGF0ZVZhbHVlcyhzZXR0aW5ncykgfSk7XHJcbiAgICB9XHJcbiAgICBjYWxjdWxhdGVEYXRhRm9yVmFsdWVTY2FsZSgpIHtcclxuICAgICAgICBjb25zdCBjYWxjdWxhdGVQb3NpdGlvbiA9IChyYXRpbykgPT4gKCgoTnVtYmVyKHRoaXMudmFsdWVzLm1heCkgLSBOdW1iZXIodGhpcy52YWx1ZXMubWluKSkgKiByYXRpbykgKyBOdW1iZXIodGhpcy52YWx1ZXMubWluKSk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWluOiBNb2RlbC50cnVuY2F0ZXNOdW1iZXJzQWZ0ZXJEb3QoTnVtYmVyKHRoaXMudmFsdWVzLm1pbikpLFxyXG4gICAgICAgICAgICBtYXg6IE1vZGVsLnRydW5jYXRlc051bWJlcnNBZnRlckRvdChOdW1iZXIodGhpcy52YWx1ZXMubWF4KSksXHJcbiAgICAgICAgICAgIDIwOiBNb2RlbC50cnVuY2F0ZXNOdW1iZXJzQWZ0ZXJEb3QoY2FsY3VsYXRlUG9zaXRpb24oMC4yKSksXHJcbiAgICAgICAgICAgIDQwOiBNb2RlbC50cnVuY2F0ZXNOdW1iZXJzQWZ0ZXJEb3QoY2FsY3VsYXRlUG9zaXRpb24oMC40KSksXHJcbiAgICAgICAgICAgIDYwOiBNb2RlbC50cnVuY2F0ZXNOdW1iZXJzQWZ0ZXJEb3QoY2FsY3VsYXRlUG9zaXRpb24oMC42KSksXHJcbiAgICAgICAgICAgIDgwOiBNb2RlbC50cnVuY2F0ZXNOdW1iZXJzQWZ0ZXJEb3QoY2FsY3VsYXRlUG9zaXRpb24oMC44KSksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGFzc2lnblZhbHVlRnJvbVNjYWxlKHZhbHVlLCBpc0RvdWJsZSkge1xyXG4gICAgICAgIGNvbnN0IGZyb21EaWZmZXJlbmNlID0gTWF0aC5hYnMoTnVtYmVyKHRoaXMudmFsdWVzLmZyb20pIC0gTnVtYmVyKHZhbHVlKSk7XHJcbiAgICAgICAgY29uc3QgdG9EaWZmZXJlbmNlID0gTWF0aC5hYnMoTnVtYmVyKHRoaXMudmFsdWVzLnRvKSAtIE51bWJlcih2YWx1ZSkpO1xyXG4gICAgICAgIGNvbnN0IGlzRnJvbURpZmZlcmVuY2VMZXNzID0gZnJvbURpZmZlcmVuY2UgPCB0b0RpZmZlcmVuY2UgfHwgIWlzRG91YmxlO1xyXG4gICAgICAgIGxldCByZXN1bHQ7XHJcbiAgICAgICAgaWYgKGlzRnJvbURpZmZlcmVuY2VMZXNzKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHsgdGFyZ2V0OiAnZnJvbScsIHZhbHVlIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXN1bHQgPSB7IHRhcmdldDogJ3RvJywgdmFsdWUgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy53cml0ZXNEYXRhVG9Nb2RlbChyZXN1bHQpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHRhcmdldDogcmVzdWx0LnRhcmdldCxcclxuICAgICAgICAgICAgdmFsdWU6IHJlc3VsdC52YWx1ZSxcclxuICAgICAgICAgICAgdG90YWxWYWx1ZXM6IE51bWJlcih0aGlzLnZhbHVlcy5tYXgpIC0gTnVtYmVyKHRoaXMudmFsdWVzLm1pbiksXHJcbiAgICAgICAgICAgIG1pblZhbHVlOiB0aGlzLnZhbHVlcy5taW4sXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGNhbGN1bGF0ZVN0ZXBXaWR0aChzZXR0aW5ncykge1xyXG4gICAgICAgIGNvbnN0IHsgc2xpZGVyV2lkdGgsIGhhbmRsZVdpZHRoIH0gPSBzZXR0aW5ncztcclxuICAgICAgICBsZXQgeyBzdGVwIH0gPSBzZXR0aW5ncztcclxuICAgICAgICBsZXQgbWluU3RlcCA9IChOdW1iZXIodGhpcy52YWx1ZXMubWF4KSAtIE51bWJlcih0aGlzLnZhbHVlcy5taW4pKSAvIChzbGlkZXJXaWR0aCAtIGhhbmRsZVdpZHRoKTtcclxuICAgICAgICBpZiAobWluU3RlcCA8PSAwKVxyXG4gICAgICAgICAgICBtaW5TdGVwID0gMC4wMTtcclxuICAgICAgICBpZiAoc3RlcCA8IG1pblN0ZXApXHJcbiAgICAgICAgICAgIHN0ZXAgPSBtaW5TdGVwO1xyXG4gICAgICAgIGNvbnN0IHN0ZXBXaWR0aCA9ICgoc2xpZGVyV2lkdGggLSBoYW5kbGVXaWR0aCkgLyAoTnVtYmVyKHRoaXMudmFsdWVzLm1heCkgLSBOdW1iZXIodGhpcy52YWx1ZXMubWluKSkpICogTnVtYmVyKHN0ZXApO1xyXG4gICAgICAgIHJldHVybiB7IG1pblN0ZXAsIHN0ZXBXaWR0aDogU3RyaW5nKHN0ZXBXaWR0aCksIHN0ZXAgfTtcclxuICAgIH1cclxuICAgIGNoZWNrSXNWYWx1ZVNtYWxsZXJUaGFuTWluKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSkgPCBOdW1iZXIodGhpcy52YWx1ZXMubWluKTtcclxuICAgIH1cclxuICAgIGNoZWNrSXNWYWx1ZUJpZ2dlclRoYW5NYXgodmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKSA+IE51bWJlcih0aGlzLnZhbHVlcy5tYXgpO1xyXG4gICAgfVxyXG4gICAgY2hlY2tJc0Zyb21WYWx1ZUJpZ2dlclRoYW5UbyhuYW1lLCB2YWx1ZSwgc3RlcCwgaGFuZGxlV2lkdGgpIHtcclxuICAgICAgICByZXR1cm4gKG5hbWUgPT09ICdmcm9tJykgJiYgKE51bWJlcih2YWx1ZSkgPiBOdW1iZXIodGhpcy52YWx1ZXMudG8pIC0gKGhhbmRsZVdpZHRoIC8gTnVtYmVyKHN0ZXApKSk7XHJcbiAgICB9XHJcbiAgICBjaGVja0lzVG9WYWx1ZVNtYWxsZXJUaGFuRnJvbShuYW1lLCB2YWx1ZSwgc3RlcCwgaGFuZGxlV2lkdGgpIHtcclxuICAgICAgICByZXR1cm4gKG5hbWUgPT09ICd0bycpICYmIChOdW1iZXIodmFsdWUpIDwgTnVtYmVyKHRoaXMudmFsdWVzLmZyb20pICsgKGhhbmRsZVdpZHRoIC8gTnVtYmVyKHN0ZXApKSk7XHJcbiAgICB9XHJcbiAgICBjb3JyZWN0RnJvbUJpZ2dlclRoZW5UbyhzZXR0aW5ncywgc3RlcCwgdGFyZ2V0KSB7XHJcbiAgICAgICAgbGV0IGFkanVzdE9mZnNldDtcclxuICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLnN0ZXAgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgIGFkanVzdE9mZnNldCA9IHNldHRpbmdzLnN0ZXA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBhZGp1c3RPZmZzZXQgPSBOdW1iZXIoTWF0aC5yb3VuZChzZXR0aW5ncy5oYW5kbGVXaWR0aCAqIE51bWJlcihzdGVwLm1pblN0ZXApKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBuZXdIYW5kbGVWYWx1ZSA9ICcnO1xyXG4gICAgICAgIGlmICh0YXJnZXQgPT09ICd0bycpIHtcclxuICAgICAgICAgICAgbmV3SGFuZGxlVmFsdWUgPSBTdHJpbmcoTW9kZWwudHJ1bmNhdGVzTnVtYmVyc0FmdGVyRG90KE51bWJlcih0aGlzLnZhbHVlcy50bykgLSBhZGp1c3RPZmZzZXQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGFyZ2V0ID09PSAnZnJvbScpIHtcclxuICAgICAgICAgICAgbmV3SGFuZGxlVmFsdWUgPSBTdHJpbmcoTW9kZWwudHJ1bmNhdGVzTnVtYmVyc0FmdGVyRG90KE51bWJlcih0aGlzLnZhbHVlcy5mcm9tKSArIGFkanVzdE9mZnNldCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3SGFuZGxlVmFsdWU7XHJcbiAgICB9XHJcbiAgICBjb3JyZWN0c0RvdWJsZVZhbHVlcyhzZXR0aW5ncykge1xyXG4gICAgICAgIGNvbnN0IHN0ZXAgPSB0aGlzLmNhbGN1bGF0ZVN0ZXBXaWR0aCh7XHJcbiAgICAgICAgICAgIHN0ZXA6IDAuMDEsXHJcbiAgICAgICAgICAgIHNsaWRlcldpZHRoOiBzZXR0aW5ncy5zbGlkZXJXaWR0aCxcclxuICAgICAgICAgICAgaGFuZGxlV2lkdGg6IHNldHRpbmdzLmhhbmRsZVdpZHRoLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxldCB7IHZhbHVlIH0gPSBzZXR0aW5ncztcclxuICAgICAgICBpZiAodGhpcy5jaGVja0lzRnJvbVZhbHVlQmlnZ2VyVGhhblRvKHNldHRpbmdzLm5hbWUsIHNldHRpbmdzLnZhbHVlLCBzdGVwLnN0ZXBXaWR0aCwgc2V0dGluZ3MuaGFuZGxlV2lkdGgpKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5jb3JyZWN0RnJvbUJpZ2dlclRoZW5UbyhzZXR0aW5ncywgc3RlcCwgJ3RvJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrSXNUb1ZhbHVlU21hbGxlclRoYW5Gcm9tKHNldHRpbmdzLm5hbWUsIHNldHRpbmdzLnZhbHVlLCBzdGVwLnN0ZXBXaWR0aCwgc2V0dGluZ3MuaGFuZGxlV2lkdGgpKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5jb3JyZWN0RnJvbUJpZ2dlclRoZW5UbyhzZXR0aW5ncywgc3RlcCwgJ2Zyb20nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG4gICAgcHJlcGFyZUlucHV0VmFsdWVGb3JSZWNvcmQoc2V0dGluZ3MpIHtcclxuICAgICAgICBpZiAodGhpcy5jaGVja0lzVmFsdWVTbWFsbGVyVGhhbk1pbihzZXR0aW5ncy52YWx1ZSkpXHJcbiAgICAgICAgICAgIHNldHRpbmdzLnZhbHVlID0gdGhpcy52YWx1ZXMubWluO1xyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrSXNWYWx1ZUJpZ2dlclRoYW5NYXgoc2V0dGluZ3MudmFsdWUpKVxyXG4gICAgICAgICAgICBzZXR0aW5ncy52YWx1ZSA9IHRoaXMudmFsdWVzLm1heDtcclxuICAgICAgICBpZiAoc2V0dGluZ3MuaXNEb3VibGUpXHJcbiAgICAgICAgICAgIHNldHRpbmdzLnZhbHVlID0gdGhpcy5jb3JyZWN0c0RvdWJsZVZhbHVlcyhzZXR0aW5ncyk7XHJcbiAgICAgICAgdGhpcy53cml0ZXNEYXRhVG9Nb2RlbCh7IHRhcmdldDogc2V0dGluZ3MubmFtZSwgdmFsdWU6IHNldHRpbmdzLnZhbHVlIH0pO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHRhcmdldDogc2V0dGluZ3MubmFtZSxcclxuICAgICAgICAgICAgdmFsdWU6IHNldHRpbmdzLnZhbHVlLFxyXG4gICAgICAgICAgICB0b3RhbFZhbHVlczogTnVtYmVyKHRoaXMudmFsdWVzLm1heCkgLSBOdW1iZXIodGhpcy52YWx1ZXMubWluKSxcclxuICAgICAgICAgICAgbWluVmFsdWU6IHRoaXMudmFsdWVzLm1pbixcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgY29ycmVjdHNWYWx1ZUJpZ2dlclRoYW5NYXgodmFsdWUpIHtcclxuICAgICAgICBpZiAodmFsdWUgPj0gdGhpcy52YWx1ZXMubWF4KVxyXG4gICAgICAgICAgICB2YWx1ZSA9IFN0cmluZyhOdW1iZXIodGhpcy52YWx1ZXMubWF4KSAtIDEpO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuICAgIGNvcnJlY3RzVmFsdWVMZXNzVGhhbk1pbih2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSA8PSB0aGlzLnZhbHVlcy5taW4pXHJcbiAgICAgICAgICAgIHZhbHVlID0gU3RyaW5nKE51bWJlcih0aGlzLnZhbHVlcy5taW4pICsgMSk7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG4gICAgY2hhbmdlU2xpZGVyVmFsdWVzUmFuZ2Uoc2V0dGluZ3MpIHtcclxuICAgICAgICBjb25zdCB7IG5hbWUgfSA9IHNldHRpbmdzO1xyXG4gICAgICAgIGxldCB7IHZhbHVlIH0gPSBzZXR0aW5ncztcclxuICAgICAgICBzd2l0Y2ggKG5hbWUpIHtcclxuICAgICAgICAgICAgY2FzZSAnbWluJzpcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gTW9kZWwudHJ1bmNhdGVzTnVtYmVyc0FmdGVyRG90KE51bWJlcih0aGlzLmNvcnJlY3RzVmFsdWVCaWdnZXJUaGFuTWF4KHZhbHVlKSkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZXMubWluID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnbWF4JzpcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gTW9kZWwudHJ1bmNhdGVzTnVtYmVyc0FmdGVyRG90KE51bWJlcih0aGlzLmNvcnJlY3RzVmFsdWVMZXNzVGhhbk1pbih2YWx1ZSkpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzLm1heCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKE51bWJlcih0aGlzLnZhbHVlcy5mcm9tKSA8IE51bWJlcih0aGlzLnZhbHVlcy5taW4pKVxyXG4gICAgICAgICAgICB0aGlzLnZhbHVlcy5mcm9tID0gdGhpcy52YWx1ZXMubWluO1xyXG4gICAgICAgIGlmIChOdW1iZXIodGhpcy52YWx1ZXMudG8pID4gTnVtYmVyKHRoaXMudmFsdWVzLm1heCkpXHJcbiAgICAgICAgICAgIHRoaXMudmFsdWVzLnRvID0gdGhpcy52YWx1ZXMubWF4O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTW9kZWwgPSBNb2RlbDtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgTW9kZWxfMSA9IHJlcXVpcmUoXCIuL01vZGVsXCIpO1xyXG5kZXNjcmliZSgnTW9kZWwnLCAoKSA9PiB7XHJcbiAgICBsZXQgbW9kZWw7XHJcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgICAgICBtb2RlbCA9IG5ldyBNb2RlbF8xLk1vZGVsKHtcclxuICAgICAgICAgICAgbWluOiAnMCcsXHJcbiAgICAgICAgICAgIG1heDogJzEwJyxcclxuICAgICAgICAgICAgZnJvbTogJzMnLFxyXG4gICAgICAgICAgICB0bzogJzcnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnbW9kZWwgY2FuIGJlIGNyZWF0ZScsICgpID0+IHtcclxuICAgICAgICBleHBlY3QobW9kZWwpLnRvQmVUcnV0aHkoKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ2NhbGN1bGF0ZVZhbHVlc0J5UG9zaXRpb24oKSBjYWxjdWxhdGUgY29ycmVjdCBmb3IgZnJvbScsICgpID0+IHtcclxuICAgICAgICBtb2RlbC5jYWxjdWxhdGVWYWx1ZXNCeVBvc2l0aW9uKHsgdGFyZ2V0OiAnZnJvbScsIHBvc2l0aW9uOiAnNTAnLCBzbGlkZXJXaWR0aDogMTAwIH0pO1xyXG4gICAgICAgIGV4cGVjdChtb2RlbC52YWx1ZXMuZnJvbSkudG9FcXVhbCgnNScpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnY2FsY3VsYXRlVmFsdWVzQnlQb3NpdGlvbigpIGNhbGN1bGF0ZSBjb3JyZWN0IGZvciB0bycsICgpID0+IHtcclxuICAgICAgICBtb2RlbC5jYWxjdWxhdGVWYWx1ZXNCeVBvc2l0aW9uKHsgdGFyZ2V0OiAndG8nLCBwb3NpdGlvbjogJzUwJywgc2xpZGVyV2lkdGg6IDEwMCB9KTtcclxuICAgICAgICBleHBlY3QobW9kZWwudmFsdWVzLnRvKS50b0VxdWFsKCc1Jyk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdjYWxjdWxhdGVEYXRhRm9yVmFsdWVTY2FsZSgpIHJldHVybiBjb3JyZWN0IHZhbHVlIHNjYWxlJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG1vZGVsLmNhbGN1bGF0ZURhdGFGb3JWYWx1ZVNjYWxlKCk7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7XHJcbiAgICAgICAgICAgIG1pbjogJzAnLCBtYXg6ICcxMCcsIDIwOiAnMicsIDQwOiAnNCcsIDYwOiAnNicsIDgwOiAnOCcsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdhc3NpZ25WYWx1ZUZyb21TY2FsZSgpIGNob29zZSBmcm9tIGhhbmRlbCBhbmQgcmVjb3JkIHJlc3VsdCB0byBNb2RlbCcsICgpID0+IHtcclxuICAgICAgICBtb2RlbC5hc3NpZ25WYWx1ZUZyb21TY2FsZSgnMicsIHRydWUpO1xyXG4gICAgICAgIGV4cGVjdChtb2RlbC52YWx1ZXMuZnJvbSkudG9FcXVhbCgnMicpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnYXNzaWduVmFsdWVGcm9tU2NhbGUoKSBjaG9vc2UgZnJvbSBoYW5kZWwgYW5kIHJldHVybiBjb3JyZWN0IHNldHRpbmdzJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG1vZGVsLmFzc2lnblZhbHVlRnJvbVNjYWxlKCcyJywgdHJ1ZSk7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7XHJcbiAgICAgICAgICAgIHRhcmdldDogJ2Zyb20nLCB2YWx1ZTogJzInLCB0b3RhbFZhbHVlczogMTAsIG1pblZhbHVlOiAnMCcsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdhc3NpZ25WYWx1ZUZyb21TY2FsZSgpIGNob29zZSB0byBoYW5kZWwgYW5kIHJlY29yZCByZXN1bHQgdG8gTW9kZWwnLCAoKSA9PiB7XHJcbiAgICAgICAgbW9kZWwuYXNzaWduVmFsdWVGcm9tU2NhbGUoJzgnLCB0cnVlKTtcclxuICAgICAgICBleHBlY3QobW9kZWwudmFsdWVzLnRvKS50b0VxdWFsKCc4Jyk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdhc3NpZ25WYWx1ZUZyb21TY2FsZSgpIGNob29zZSB0byBoYW5kZWwgYW5kIHJldHVybiBjb3JyZWN0IHNldHRpbmdzJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG1vZGVsLmFzc2lnblZhbHVlRnJvbVNjYWxlKCc4JywgdHJ1ZSk7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7XHJcbiAgICAgICAgICAgIHRhcmdldDogJ3RvJywgdmFsdWU6ICc4JywgdG90YWxWYWx1ZXM6IDEwLCBtaW5WYWx1ZTogJzAnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnY2FsY3VsYXRlU3RlcFdpZHRoKCkgY2FsY3VsYXRlIGNvcnJlY3Qgc3RlcCB3aWR0aCB3aXRoIGNvcnJlY3Qgc3RlcCcsICgpID0+IHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBtb2RlbC5jYWxjdWxhdGVTdGVwV2lkdGgoe1xyXG4gICAgICAgICAgICBzdGVwOiAyLFxyXG4gICAgICAgICAgICBzbGlkZXJXaWR0aDogMTIwLFxyXG4gICAgICAgICAgICBoYW5kbGVXaWR0aDogMjAsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7IHN0ZXBXaWR0aDogJzIwJywgc3RlcDogMiwgbWluU3RlcDogMC4xIH0pO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnY2FsY3VsYXRlU3RlcFdpZHRoKCkgY2FsY3VsYXRlIGNvcnJlY3Qgc3RlcCB3aWR0aCB3aXRoIHN0ZXAgbGVzcyB0aGF0IG1pbmltdW0nLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbW9kZWwuY2FsY3VsYXRlU3RlcFdpZHRoKHtcclxuICAgICAgICAgICAgc3RlcDogLTEsXHJcbiAgICAgICAgICAgIHNsaWRlcldpZHRoOiAxMjAsXHJcbiAgICAgICAgICAgIGhhbmRsZVdpZHRoOiAyMCxcclxuICAgICAgICB9KTtcclxuICAgICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHsgc3RlcFdpZHRoOiAnMScsIHN0ZXA6IDAuMSwgbWluU3RlcDogMC4xIH0pO1xyXG4gICAgfSk7XHJcbiAgICBpdCgncHJlcGFyZUlucHV0VmFsdWVGb3JSZWNvcmQoKSBhbGxvdyBjb3JyZWN0IGZyb20gdmFsdWUgYW5kIHJldHVybiBjb3JyZWN0IHNldHRpbmdzJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG1vZGVsLnByZXBhcmVJbnB1dFZhbHVlRm9yUmVjb3JkKHtcclxuICAgICAgICAgICAgbmFtZTogJ2Zyb20nLFxyXG4gICAgICAgICAgICB2YWx1ZTogJzInLFxyXG4gICAgICAgICAgICBpc0RvdWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIHBvc2l0aW9uczogeyBmcm9tOiAzMCwgdG86IDcwIH0sXHJcbiAgICAgICAgICAgIGhhbmRsZVdpZHRoOiAyMCxcclxuICAgICAgICAgICAgc2xpZGVyV2lkdGg6IDEyMCxcclxuICAgICAgICAgICAgc3RlcDogZmFsc2UsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZXhwZWN0KG1vZGVsLnZhbHVlcy5mcm9tKS50b0VxdWFsKCcyJyk7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7XHJcbiAgICAgICAgICAgIHRhcmdldDogJ2Zyb20nLCB2YWx1ZTogJzInLCB0b3RhbFZhbHVlczogMTAsIG1pblZhbHVlOiAnMCcsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdwcmVwYXJlSW5wdXRWYWx1ZUZvclJlY29yZCgpIGNvcnJlY3RzIGZyb20gdmFsdWUgbGVzcyB0aGFuIG1pbiBhbmQgcmV0dXJuIGNvcnJlY3Qgc2V0dGluZ3MnLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbW9kZWwucHJlcGFyZUlucHV0VmFsdWVGb3JSZWNvcmQoe1xyXG4gICAgICAgICAgICBuYW1lOiAnZnJvbScsXHJcbiAgICAgICAgICAgIHZhbHVlOiAnLTUnLFxyXG4gICAgICAgICAgICBpc0RvdWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIHBvc2l0aW9uczogeyBmcm9tOiAzMCwgdG86IDcwIH0sXHJcbiAgICAgICAgICAgIGhhbmRsZVdpZHRoOiAyMCxcclxuICAgICAgICAgICAgc2xpZGVyV2lkdGg6IDEyMCxcclxuICAgICAgICAgICAgc3RlcDogZmFsc2UsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZXhwZWN0KG1vZGVsLnZhbHVlcy5mcm9tKS50b0VxdWFsKCcwJyk7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7XHJcbiAgICAgICAgICAgIHRhcmdldDogJ2Zyb20nLCB2YWx1ZTogJzAnLCB0b3RhbFZhbHVlczogMTAsIG1pblZhbHVlOiAnMCcsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdwcmVwYXJlSW5wdXRWYWx1ZUZvclJlY29yZCgpIGNvcnJlY3RzIGZyb20gdmFsdWUgYmlnZ2VyIHRoYW4gbWF4IGFuZCByZXR1cm4gY29ycmVjdCBzZXR0aW5ncycsICgpID0+IHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBtb2RlbC5wcmVwYXJlSW5wdXRWYWx1ZUZvclJlY29yZCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdmcm9tJyxcclxuICAgICAgICAgICAgdmFsdWU6ICcxNScsXHJcbiAgICAgICAgICAgIGlzRG91YmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgcG9zaXRpb25zOiB7IGZyb206IDMwLCB0bzogNzAgfSxcclxuICAgICAgICAgICAgaGFuZGxlV2lkdGg6IDIwLFxyXG4gICAgICAgICAgICBzbGlkZXJXaWR0aDogMTIwLFxyXG4gICAgICAgICAgICBzdGVwOiBmYWxzZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBleHBlY3QobW9kZWwudmFsdWVzLmZyb20pLnRvRXF1YWwoJzEwJyk7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7XHJcbiAgICAgICAgICAgIHRhcmdldDogJ2Zyb20nLCB2YWx1ZTogJzEwJywgdG90YWxWYWx1ZXM6IDEwLCBtaW5WYWx1ZTogJzAnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBpdCgncHJlcGFyZUlucHV0VmFsdWVGb3JSZWNvcmQoKSBjb3JyZWN0cyBmcm9tIHZhbHVlIHdoZW4gaXQgYmlnZ2VyIHRoYW4gdG8gYW5kIHJldHVybiBjb3JyZWN0IHNldHRpbmdzJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG1vZGVsLnByZXBhcmVJbnB1dFZhbHVlRm9yUmVjb3JkKHtcclxuICAgICAgICAgICAgbmFtZTogJ2Zyb20nLFxyXG4gICAgICAgICAgICB2YWx1ZTogJzE1JyxcclxuICAgICAgICAgICAgaXNEb3VibGU6IHRydWUsXHJcbiAgICAgICAgICAgIHBvc2l0aW9uczogeyBmcm9tOiAzMCwgdG86IDcwIH0sXHJcbiAgICAgICAgICAgIGhhbmRsZVdpZHRoOiAyMCxcclxuICAgICAgICAgICAgc2xpZGVyV2lkdGg6IDEyMCxcclxuICAgICAgICAgICAgc3RlcDogZmFsc2UsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZXhwZWN0KG1vZGVsLnZhbHVlcy5mcm9tKS50b0VxdWFsKCc1Jyk7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7XHJcbiAgICAgICAgICAgIHRhcmdldDogJ2Zyb20nLCB2YWx1ZTogJzUnLCB0b3RhbFZhbHVlczogMTAsIG1pblZhbHVlOiAnMCcsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdwcmVwYXJlSW5wdXRWYWx1ZUZvclJlY29yZCgpIGNvcnJlY3RzIHRvIHZhbHVlIHdoZW4gaXQgbGVzcyB0aGFuIHRvIGFuZCByZXR1cm4gY29ycmVjdCBzZXR0aW5ncycsICgpID0+IHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBtb2RlbC5wcmVwYXJlSW5wdXRWYWx1ZUZvclJlY29yZCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICd0bycsXHJcbiAgICAgICAgICAgIHZhbHVlOiAnMCcsXHJcbiAgICAgICAgICAgIGlzRG91YmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBwb3NpdGlvbnM6IHsgZnJvbTogMzAsIHRvOiA3MCB9LFxyXG4gICAgICAgICAgICBoYW5kbGVXaWR0aDogMjAsXHJcbiAgICAgICAgICAgIHNsaWRlcldpZHRoOiAxMjAsXHJcbiAgICAgICAgICAgIHN0ZXA6IGZhbHNlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGV4cGVjdChtb2RlbC52YWx1ZXMudG8pLnRvRXF1YWwoJzUnKTtcclxuICAgICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHtcclxuICAgICAgICAgICAgdGFyZ2V0OiAndG8nLCB2YWx1ZTogJzUnLCB0b3RhbFZhbHVlczogMTAsIG1pblZhbHVlOiAnMCcsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGl0KCd0cnVuY2F0ZXNOdW1iZXJzQWZ0ZXJEb3QoKSBjdXQgbnVtYmVycyBjb3JyZWN0bHknLCAoKSA9PiB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IE1vZGVsXzEuTW9kZWwudHJ1bmNhdGVzTnVtYmVyc0FmdGVyRG90KDIuMTIyMjIyMik7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCgnMi4xMicpO1xyXG4gICAgICAgIHJlc3VsdCA9IE1vZGVsXzEuTW9kZWwudHJ1bmNhdGVzTnVtYmVyc0FmdGVyRG90KDIuMTAxMTExMSk7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCgnMi4xJyk7XHJcbiAgICAgICAgcmVzdWx0ID0gTW9kZWxfMS5Nb2RlbC50cnVuY2F0ZXNOdW1iZXJzQWZ0ZXJEb3QoMi4wMDAwMDAxKTtcclxuICAgICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKCcyJyk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdjaGFuZ2VTbGlkZXJWYWx1ZXNSYW5nZSgpIHJlY29yZCB2YWx1ZSBiaWdnZXIgdGhlbiBtYXggY29ycmVjdGx5JywgKCkgPT4ge1xyXG4gICAgICAgIG1vZGVsLmNoYW5nZVNsaWRlclZhbHVlc1JhbmdlKHsgdmFsdWU6ICcxMScsIG5hbWU6ICdtaW4nIH0pO1xyXG4gICAgICAgIGV4cGVjdChtb2RlbC52YWx1ZXMubWluKS50b0VxdWFsKCc5Jyk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdjaGFuZ2VTbGlkZXJWYWx1ZXNSYW5nZSgpIHJlY29yZCB2YWx1ZSBzbWFsbGVyIHRoZW4gbWluIGNvcnJlY3RseScsICgpID0+IHtcclxuICAgICAgICBtb2RlbC5jaGFuZ2VTbGlkZXJWYWx1ZXNSYW5nZSh7IHZhbHVlOiAnLTEnLCBuYW1lOiAnbWF4JyB9KTtcclxuICAgICAgICBleHBlY3QobW9kZWwudmFsdWVzLm1heCkudG9FcXVhbCgnMScpO1xyXG4gICAgfSk7XHJcbn0pO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLlByZXNlbnRlciA9IHZvaWQgMDtcclxuY29uc3QgYXV0b2JpbmRfZGVjb3JhdG9yXzEgPSByZXF1aXJlKFwiYXV0b2JpbmQtZGVjb3JhdG9yXCIpO1xyXG5sZXQgUHJlc2VudGVyID0gY2xhc3MgUHJlc2VudGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHZpZXdMaW5rLCBtb2RlbExpbmspIHtcclxuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3TGluaztcclxuICAgICAgICB0aGlzLm1vZGVsID0gbW9kZWxMaW5rO1xyXG4gICAgfVxyXG4gICAgYmluZFByb3h5VG9IYW5kbGVzTW92ZW1lbnQodmlldywgbW9kZWwpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHRoaXMudmlldy5tb3ZlbWVudC5wb3NpdGlvbnMsIHtcclxuICAgICAgICAgICAgc2V0KHRhcmdldCwgcHJvcCwgdmFsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc0V4dHJhUmFuZ2UgPSB2YWwgPT09IDAgfHwgdmFsID09PSB2aWV3LnNsaWRlci5zbGlkZXIub2Zmc2V0V2lkdGggLSB2aWV3LmhhbmRsZXMuZnJvbUhhbmRsZS5vZmZzZXRXaWR0aDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNldHRpbmdzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBTdHJpbmcodmFsKSxcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IHByb3AsXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVyV2lkdGg6IHZpZXcuc2xpZGVyLnNsaWRlci5vZmZzZXRXaWR0aCAtIHZpZXcuaGFuZGxlcy5mcm9tSGFuZGxlLm9mZnNldFdpZHRoLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGlmIChpc0V4dHJhUmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3LmhhbmRsZXMuaXNJbnB1dENoYW5nZXMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXcuc2lkZU1lbnUuaXNJbnB1dENoYW5nZXMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgbW9kZWwuY2FsY3VsYXRlVmFsdWVzQnlQb3NpdGlvbihzZXR0aW5ncyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGRpc3RyaWJ1dGVzRGF0YUZvclNjYWxlKCkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IHRoaXMubW9kZWwuY2FsY3VsYXRlRGF0YUZvclZhbHVlU2NhbGUoKTtcclxuICAgICAgICB0aGlzLnZpZXcudmFsdWVzU2NhbGUucmVmcmVzaFZhbHVlU2NhbGUodmFsdWVzKTtcclxuICAgICAgICB0aGlzLnZpZXcudmFsdWVzU2NhbGUuY2VudGVyc1ZhbHVlcyh0aGlzLnZpZXcuc2xpZGVyLnNsaWRlci5vZmZzZXRXaWR0aCAtIHRoaXMudmlldy5oYW5kbGVzLmZyb21IYW5kbGUub2Zmc2V0V2lkdGgsIHRoaXMudmlldy5oYW5kbGVzLmZyb21IYW5kbGUub2Zmc2V0V2lkdGgpO1xyXG4gICAgfVxyXG4gICAgcHJlcGFyZURhdGFGb3JBZGp1c3RQb3NpdGlvbih0YXJnZXQsIHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdGFyZ2V0LFxyXG4gICAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICAgICAgdG90YWxWYWx1ZXM6IE51bWJlcih0aGlzLm1vZGVsLnZhbHVlcy5tYXgpIC0gTnVtYmVyKHRoaXMubW9kZWwudmFsdWVzLm1pbiksXHJcbiAgICAgICAgICAgIG1pblZhbHVlOiB0aGlzLm1vZGVsLnZhbHVlcy5taW4sXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHByZXBhcmVOZXdIYW5kbGVzUG9zaXRpb25zRGF0YShoYW5kbGVEYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5oYW5kbGVzLmFkanVzdFBvc2l0aW9ucyhoYW5kbGVEYXRhLCB0aGlzLnZpZXcuc2xpZGVyLnNsaWRlci5vZmZzZXRXaWR0aCk7XHJcbiAgICB9XHJcbiAgICBkaXN0cmlidXRlRGF0YUZvclN0YXJ0UG9zaXRpb24oKSB7XHJcbiAgICAgICAgY29uc3QgZGF0YUZvckZyb20gPSB0aGlzLnByZXBhcmVEYXRhRm9yQWRqdXN0UG9zaXRpb24oJ2Zyb20nLCB0aGlzLm1vZGVsLnZhbHVlcy5mcm9tKTtcclxuICAgICAgICBjb25zdCBkYXRhRm9yVG8gPSB0aGlzLnByZXBhcmVEYXRhRm9yQWRqdXN0UG9zaXRpb24oJ3RvJywgdGhpcy5tb2RlbC52YWx1ZXMudG8pO1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0RnJvbSA9IHRoaXMucHJlcGFyZU5ld0hhbmRsZXNQb3NpdGlvbnNEYXRhKGRhdGFGb3JGcm9tKTtcclxuICAgICAgICBjb25zdCBzdGFydFRvID0gdGhpcy5wcmVwYXJlTmV3SGFuZGxlc1Bvc2l0aW9uc0RhdGEoZGF0YUZvclRvKTtcclxuICAgICAgICBjb25zdCBhZGp1c3RQb3NpdGlvbnMgPSB0aGlzLnZpZXcuaW50ZXJ2YWwuYWRqdXN0UG9zaXRpb25SZWxhdGl2ZVZhbHVlO1xyXG4gICAgICAgIGFkanVzdFBvc2l0aW9ucyhzdGFydEZyb20pO1xyXG4gICAgICAgIGFkanVzdFBvc2l0aW9ucyhzdGFydFRvKTtcclxuICAgICAgICB0aGlzLnZpZXcubW92ZW1lbnQucG9zaXRpb25zLmZyb20gPSBOdW1iZXIoc3RhcnRGcm9tLnBvc2l0aW9uKTtcclxuICAgICAgICB0aGlzLnZpZXcubW92ZW1lbnQucG9zaXRpb25zLnRvID0gTnVtYmVyKHN0YXJ0VG8ucG9zaXRpb24pO1xyXG4gICAgICAgIHRoaXMudmlldy5yZWZyZXNoQWxsQ29tcG9uZW50cyh7XHJcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLm1vZGVsLnZhbHVlcy5taW4sXHJcbiAgICAgICAgICAgIHRhcmdldDogJ21pbicsXHJcbiAgICAgICAgICAgIGlzVG9GaXhlZDogdGhpcy52aWV3LmJhc2ljU2V0dGluZ3MuaW50ZWdlcixcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnZpZXcucmVmcmVzaEFsbENvbXBvbmVudHMoe1xyXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5tb2RlbC52YWx1ZXMubWF4LFxyXG4gICAgICAgICAgICB0YXJnZXQ6ICdtYXgnLFxyXG4gICAgICAgICAgICBpc1RvRml4ZWQ6IHRoaXMudmlldy5iYXNpY1NldHRpbmdzLmludGVnZXIsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBkaXN0cmlidXRlU3RlcFdpZHRoKCkge1xyXG4gICAgICAgIGNvbnN0IHdyaXRlc05ld1N0ZXBXaWR0aCA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgeyBzdGVwV2lkdGgsIHN0ZXAgfSA9IHRoaXMubW9kZWwuY2FsY3VsYXRlU3RlcFdpZHRoKHtcclxuICAgICAgICAgICAgICAgIHN0ZXA6IE51bWJlcih0aGlzLnZpZXcuYmFzaWNTZXR0aW5ncy5zdGVwKSxcclxuICAgICAgICAgICAgICAgIHNsaWRlcldpZHRoOiB0aGlzLnZpZXcuc2xpZGVyLnNsaWRlci5vZmZzZXRXaWR0aCxcclxuICAgICAgICAgICAgICAgIGhhbmRsZVdpZHRoOiB0aGlzLnZpZXcuaGFuZGxlcy5mcm9tSGFuZGxlLm9mZnNldFdpZHRoLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy52aWV3Lm1vdmVtZW50LnN0ZXBXaWR0aCA9IHN0ZXBXaWR0aDtcclxuICAgICAgICAgICAgaWYgKHRoaXMudmlldy5iYXNpY1NldHRpbmdzWydzaWRlLW1lbnUnXSlcclxuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zaWRlTWVudS5zaWRlTWVudUVsZW1lbnRzLnN0ZXBJbnB1dC52YWx1ZSA9IFN0cmluZyhzdGVwKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy52aWV3LmJhc2ljU2V0dGluZ3Muc3RlcCA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgICAgIHdyaXRlc05ld1N0ZXBXaWR0aCgpO1xyXG4gICAgfVxyXG4gICAgZGlzdHJpYnV0ZU5ld1ZhbHVlc0ZvckFwcGx5KG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5tb2RlbC5wcmVwYXJlSW5wdXRWYWx1ZUZvclJlY29yZCh7XHJcbiAgICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICAgIHZhbHVlLFxyXG4gICAgICAgICAgICBzdGVwOiB0aGlzLnZpZXcuYmFzaWNTZXR0aW5ncy5zdGVwLFxyXG4gICAgICAgICAgICBpc0RvdWJsZTogdGhpcy52aWV3LmJhc2ljU2V0dGluZ3MuZG91YmxlLFxyXG4gICAgICAgICAgICBwb3NpdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIGZyb206IHRoaXMudmlldy5tb3ZlbWVudC5wb3NpdGlvbnMuZnJvbSxcclxuICAgICAgICAgICAgICAgIHRvOiB0aGlzLnZpZXcubW92ZW1lbnQucG9zaXRpb25zLnRvLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBoYW5kbGVXaWR0aDogdGhpcy52aWV3LmhhbmRsZXMudG9IYW5kbGUub2Zmc2V0V2lkdGgsXHJcbiAgICAgICAgICAgIHNsaWRlcldpZHRoOiB0aGlzLnZpZXcuc2xpZGVyLnNsaWRlci5vZmZzZXRXaWR0aCxcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCBuZXdQb3NpdGlvbiA9IHRoaXMudmlldy5oYW5kbGVzLmFkanVzdFBvc2l0aW9ucyhyZXN1bHQsIHRoaXMudmlldy5zbGlkZXIuc2xpZGVyLm9mZnNldFdpZHRoKTtcclxuICAgICAgICB0aGlzLnZpZXcuaGFuZGxlcy5pc0lucHV0Q2hhbmdlcyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy52aWV3LnNpZGVNZW51LmlzSW5wdXRDaGFuZ2VzID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnZpZXcuaW50ZXJ2YWwuYWRqdXN0UG9zaXRpb25SZWxhdGl2ZVZhbHVlKG5ld1Bvc2l0aW9uKTtcclxuICAgICAgICB0aGlzLnZpZXcubW92ZW1lbnQucG9zaXRpb25zW25ld1Bvc2l0aW9uLnRhcmdldF0gPSBOdW1iZXIobmV3UG9zaXRpb24ucG9zaXRpb24pO1xyXG4gICAgfVxyXG4gICAgZGlzdHJpYnV0ZVZhbHVlRnJvbVNjYWxlVG9BcHBseSh2YWx1ZSkge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMubW9kZWwuYXNzaWduVmFsdWVGcm9tU2NhbGUodmFsdWUsIHRoaXMudmlldy5iYXNpY1NldHRpbmdzLmRvdWJsZSk7XHJcbiAgICAgICAgY29uc3QgbmV3UG9zaXRpb24gPSB0aGlzLnZpZXcuaGFuZGxlcy5hZGp1c3RQb3NpdGlvbnMocmVzdWx0LCB0aGlzLnZpZXcuc2xpZGVyLnNsaWRlci5vZmZzZXRXaWR0aCk7XHJcbiAgICAgICAgdGhpcy52aWV3LmhhbmRsZXMuaXNJbnB1dENoYW5nZXMgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudmlldy5zaWRlTWVudS5pc0lucHV0Q2hhbmdlcyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy52aWV3LmludGVydmFsLmFkanVzdFBvc2l0aW9uUmVsYXRpdmVWYWx1ZShuZXdQb3NpdGlvbik7XHJcbiAgICAgICAgaWYgKG5ld1Bvc2l0aW9uLnRhcmdldCA9PT0gJ2Zyb20nKVxyXG4gICAgICAgICAgICB0aGlzLnZpZXcubW92ZW1lbnQucG9zaXRpb25zLmZyb20gPSBOdW1iZXIobmV3UG9zaXRpb24ucG9zaXRpb24pO1xyXG4gICAgICAgIGlmIChuZXdQb3NpdGlvbi50YXJnZXQgPT09ICd0bycpXHJcbiAgICAgICAgICAgIHRoaXMudmlldy5tb3ZlbWVudC5wb3NpdGlvbnMudG8gPSBOdW1iZXIobmV3UG9zaXRpb24ucG9zaXRpb24pO1xyXG4gICAgfVxyXG4gICAgZGlzdHJpYnV0ZVNsaWRlclZhbHVlc1JhbmdlVG9BcHBseSh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMubW9kZWwuY2hhbmdlU2xpZGVyVmFsdWVzUmFuZ2Uoe1xyXG4gICAgICAgICAgICBuYW1lOiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWUubmFtZSxcclxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLnZhbHVlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudmlldy5kYXRhUmVxdWVzdFRvTW9kZWwubmVlZERhdGFGb3JTdGFydFBvc2l0aW9uID0geyBuYW1lOiAnJywgdmFsdWU6ICd0cnVlJyB9O1xyXG4gICAgICAgIHRoaXMudmlldy5kYXRhUmVxdWVzdFRvTW9kZWwubmVlZERhdGFGb3JTY2FsZSA9IHsgbmFtZTogJycsIHZhbHVlOiAndHJ1ZScgfTtcclxuICAgICAgICB0aGlzLnZpZXcuZGF0YVJlcXVlc3RUb01vZGVsLm5lZWRTdGVwV2lkdGggPSB7IG5hbWU6ICcnLCB2YWx1ZTogJ3RydWUnIH07XHJcbiAgICB9XHJcbiAgICBoYW5kbGVzUmVxdWVzdHNGcm9tVmlldyhwcm9wZXJ0eSwgdmFsdWUpIHtcclxuICAgICAgICBzd2l0Y2ggKHByb3BlcnR5KSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ25lZWREYXRhRm9yU2NhbGUnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXN0cmlidXRlc0RhdGFGb3JTY2FsZSgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ25lZWREYXRhRm9yU3RhcnRQb3NpdGlvbic6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3RyaWJ1dGVEYXRhRm9yU3RhcnRQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ25lZWRTdGVwV2lkdGgnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXN0cmlidXRlU3RlcFdpZHRoKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnbmVlZEFwcGx5TmV3VmFsdWUnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXN0cmlidXRlTmV3VmFsdWVzRm9yQXBwbHkodmFsdWUubmFtZSwgdmFsdWUudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ25lZWRBcHBseVZhbHVlRnJvbVNjYWxlJzpcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzdHJpYnV0ZVZhbHVlRnJvbVNjYWxlVG9BcHBseSh2YWx1ZS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnbmVlZENoYW5nZVNsaWRlclZhbHVlc1JhbmdlJzpcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzdHJpYnV0ZVNsaWRlclZhbHVlc1JhbmdlVG9BcHBseSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGJpbmRQcm94eVRvVmlld1JlcXVlc3RzKCkge1xyXG4gICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodGhpcy52aWV3LmRhdGFSZXF1ZXN0VG9Nb2RlbCwge1xyXG4gICAgICAgICAgICBzZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhhdC5oYW5kbGVzUmVxdWVzdHNGcm9tVmlldyhwcm9wZXJ0eSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBiaW5kUHJveHlUb01vZGVsKHZpZXcpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHRoaXMubW9kZWwudmFsdWVzLCB7XHJcbiAgICAgICAgICAgIHNldCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0W3Byb3BlcnR5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdmlldy5yZWZyZXNoQWxsQ29tcG9uZW50cyh7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBwcm9wZXJ0eSxcclxuICAgICAgICAgICAgICAgICAgICBpc1RvRml4ZWQ6IHZpZXcuYmFzaWNTZXR0aW5ncy5pbnRlZ2VyLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGluaXRpYWxpemUoKSB7XHJcbiAgICAgICAgY29uc3QgeyB2aWV3LCBtb2RlbCB9ID0gdGhpcztcclxuICAgICAgICB2aWV3Lm1vdmVtZW50LnBvc2l0aW9ucyA9IHRoaXMuYmluZFByb3h5VG9IYW5kbGVzTW92ZW1lbnQodmlldywgbW9kZWwpO1xyXG4gICAgICAgIHZpZXcuZGF0YVJlcXVlc3RUb01vZGVsID0gdGhpcy5iaW5kUHJveHlUb1ZpZXdSZXF1ZXN0cygpO1xyXG4gICAgICAgIG1vZGVsLnZhbHVlcyA9IHRoaXMuYmluZFByb3h5VG9Nb2RlbCh2aWV3KTtcclxuICAgIH1cclxufTtcclxuUHJlc2VudGVyID0gX19kZWNvcmF0ZShbXHJcbiAgICBhdXRvYmluZF9kZWNvcmF0b3JfMS5kZWZhdWx0XHJcbl0sIFByZXNlbnRlcik7XHJcbmV4cG9ydHMuUHJlc2VudGVyID0gUHJlc2VudGVyO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBNb2RlbF8xID0gcmVxdWlyZShcIi4uL01vZGVsL01vZGVsXCIpO1xyXG5jb25zdCBQcmVzZW50ZXJfMSA9IHJlcXVpcmUoXCIuL1ByZXNlbnRlclwiKTtcclxuY29uc3QgVmlld18xID0gcmVxdWlyZShcIi4uL1ZpZXcvVmlld1wiKTtcclxuZGVzY3JpYmUoJ1ByZXNlbnRlcicsICgpID0+IHtcclxuICAgIGxldCBwcmVzZW50ZXI7XHJcbiAgICBsZXQgdmlldztcclxuICAgIGxldCBtb2RlbDtcclxuICAgIGNvbnN0IHZpZXdTZXR0aW5ncyA9IHtcclxuICAgICAgICAnc2lkZS1tZW51JzogdHJ1ZSxcclxuICAgICAgICBkb3VibGU6IHRydWUsXHJcbiAgICAgICAgaGFuZGxlc1ZhbHVlczogdHJ1ZSxcclxuICAgICAgICBzdGVwOiAxMCxcclxuICAgICAgICB2YWx1ZVNjYWxlOiB0cnVlLFxyXG4gICAgICAgIHZlcnRpY2FsOiB0cnVlLFxyXG4gICAgICAgIGludGVnZXI6IHRydWUsXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgdmlld1RhcmdldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgY29uc3QgbW9kZWxTZXR0aW5ncyA9IHtcclxuICAgICAgICBtaW46ICcwJyxcclxuICAgICAgICBtYXg6ICcxMDAnLFxyXG4gICAgICAgIGZyb206ICczMCcsXHJcbiAgICAgICAgdG86ICc3MCcsXHJcbiAgICB9O1xyXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIG1vZGVsID0gbmV3IE1vZGVsXzEuTW9kZWwobW9kZWxTZXR0aW5ncyk7XHJcbiAgICAgICAgdmlldyA9IG5ldyBWaWV3XzEuVmlldyh2aWV3U2V0dGluZ3MsIHZpZXdUYXJnZXQpO1xyXG4gICAgICAgIHByZXNlbnRlciA9IG5ldyBQcmVzZW50ZXJfMS5QcmVzZW50ZXIodmlldywgbW9kZWwpO1xyXG4gICAgICAgIChfYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFwcGVuZCh2aWV3LnNsaWRlci5zbGlkZXIsIHZpZXcuaGFuZGxlcy5mcm9tSGFuZGxlLCB2aWV3LmhhbmRsZXMudG9IYW5kbGUpO1xyXG4gICAgICAgIHZpZXcuc2xpZGVyLnNsaWRlci5zdHlsZS53aWR0aCA9ICcxMjBweCc7XHJcbiAgICAgICAgdmlldy5oYW5kbGVzLmZyb21IYW5kbGUuc3R5bGUud2lkdGggPSAnMjBweCc7XHJcbiAgICAgICAgdmlldy5oYW5kbGVzLnRvSGFuZGxlLnN0eWxlLndpZHRoID0gJzIwcHgnO1xyXG4gICAgICAgIHByZXNlbnRlci5pbml0aWFsaXplKCk7XHJcbiAgICAgICAgdmlldy5wcmVwYXJlU2xpZGVyRm9yVXNlKCk7XHJcbiAgICAgICAgdmlldy5iaW5kRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ1ByZXNlbnRlciBjYW4gYmUgY3JlYXRlJywgKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChwcmVzZW50ZXIpLnRvQmVUcnV0aHkoKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ25lZWRBcHBseVZhbHVlRnJvbVNjYWxlKCkgY2hvb3NlIGZyb20gdmFsdWUnLCAoKSA9PiB7XHJcbiAgICAgICAgdmlldy5iYXNpY1NldHRpbmdzLmRvdWJsZSA9IHRydWU7XHJcbiAgICAgICAgdmlldy52YWx1ZXNTY2FsZVsyMF0uZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NsaWNrJykpO1xyXG4gICAgICAgIGV4cGVjdChtb2RlbC52YWx1ZXMuZnJvbSkudG9FcXVhbCgnMjAnKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ25lZWRBcHBseVZhbHVlRnJvbVNjYWxlKCkgY2hvb3NlIHRvIHZhbHVlJywgKCkgPT4ge1xyXG4gICAgICAgIHZpZXcuYmFzaWNTZXR0aW5ncy5kb3VibGUgPSB0cnVlO1xyXG4gICAgICAgIHZpZXcudmFsdWVzU2NhbGVbODBdLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjbGljaycpKTtcclxuICAgICAgICBleHBlY3QobW9kZWwudmFsdWVzLnRvKS50b0VxdWFsKCc4MCcpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnbmVlZERhdGFGb3JTY2FsZSgpIGZpbGwgdmFsdWUgc2NhbGUgd2l0aCBjb3JyZWN0IHZhbHVlcycsICgpID0+IHtcclxuICAgICAgICB2aWV3LmRhdGFSZXF1ZXN0VG9Nb2RlbC5uZWVkRGF0YUZvclNjYWxlID0geyBuYW1lOiAnJywgdmFsdWU6ICd0cnVlJyB9O1xyXG4gICAgICAgIGV4cGVjdCh2aWV3LnZhbHVlc1NjYWxlLm1pblZhbHVlLmlubmVyVGV4dCkudG9FcXVhbCgnMCcpO1xyXG4gICAgICAgIGV4cGVjdCh2aWV3LnZhbHVlc1NjYWxlWzIwXS5pbm5lclRleHQpLnRvRXF1YWwoJzIwJyk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcudmFsdWVzU2NhbGVbNDBdLmlubmVyVGV4dCkudG9FcXVhbCgnNDAnKTtcclxuICAgICAgICBleHBlY3Qodmlldy52YWx1ZXNTY2FsZVs2MF0uaW5uZXJUZXh0KS50b0VxdWFsKCc2MCcpO1xyXG4gICAgICAgIGV4cGVjdCh2aWV3LnZhbHVlc1NjYWxlWzgwXS5pbm5lclRleHQpLnRvRXF1YWwoJzgwJyk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcudmFsdWVzU2NhbGUubWF4VmFsdWUuaW5uZXJUZXh0KS50b0VxdWFsKCcxMDAnKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ25lZWREYXRhRm9yU3RhcnRQb3NpdGlvbigpIHNldCBjb3JyZWN0IHBvc2l0aW9ucycsICgpID0+IHtcclxuICAgICAgICB2aWV3LmRhdGFSZXF1ZXN0VG9Nb2RlbC5uZWVkRGF0YUZvclN0YXJ0UG9zaXRpb24gPSB7IG5hbWU6ICcnLCB2YWx1ZTogJ3RydWUnIH07XHJcbiAgICAgICAgZXhwZWN0KHZpZXcubW92ZW1lbnQucG9zaXRpb25zLmZyb20pLnRvRXF1YWwoMzApO1xyXG4gICAgICAgIGV4cGVjdCh2aWV3Lm1vdmVtZW50LnBvc2l0aW9ucy50bykudG9FcXVhbCg3MCk7XHJcbiAgICB9KTtcclxuICAgIGl0KCduZWVkU3RlcFdpZHRoKCkgc2V0IGNvcnJlY3Qgc3RlcFdpZHRoJywgKCkgPT4ge1xyXG4gICAgICAgIHZpZXcuYmFzaWNTZXR0aW5ncy5zdGVwID0gMTA7XHJcbiAgICAgICAgdmlldy5kYXRhUmVxdWVzdFRvTW9kZWwubmVlZFN0ZXBXaWR0aCA9IHsgbmFtZTogJycsIHZhbHVlOiAndHJ1ZScgfTtcclxuICAgICAgICBleHBlY3Qodmlldy5tb3ZlbWVudC5zdGVwV2lkdGgpLnRvRXF1YWwoJzEwJyk7XHJcbiAgICB9KTtcclxuICAgIGl0KCduZWVkQXBwbHlOZXdWYWx1ZSgpIGFwcGx5IG5ldyB2YWx1ZSBmb3IgZnJvbSBjb3JyZWN0bHknLCAoKSA9PiB7XHJcbiAgICAgICAgdmlldy5kYXRhUmVxdWVzdFRvTW9kZWwubmVlZEFwcGx5TmV3VmFsdWUgPSB7IG5hbWU6ICdmcm9tJywgdmFsdWU6ICc0MCcgfTtcclxuICAgICAgICBleHBlY3Qodmlldy5tb3ZlbWVudC5wb3NpdGlvbnMuZnJvbSkudG9FcXVhbCg0MCk7XHJcbiAgICAgICAgZXhwZWN0KG1vZGVsLnZhbHVlcy5mcm9tKS50b0VxdWFsKCc0MCcpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnbmVlZEFwcGx5TmV3VmFsdWUoKSBhcHBseSBuZXcgdmFsdWUgZm9yIHRvIGNvcnJlY3RseScsICgpID0+IHtcclxuICAgICAgICB2aWV3LmRhdGFSZXF1ZXN0VG9Nb2RlbC5uZWVkQXBwbHlOZXdWYWx1ZSA9IHsgbmFtZTogJ3RvJywgdmFsdWU6ICc2MCcgfTtcclxuICAgICAgICBleHBlY3Qodmlldy5tb3ZlbWVudC5wb3NpdGlvbnMudG8pLnRvRXF1YWwoNjApO1xyXG4gICAgICAgIGV4cGVjdChtb2RlbC52YWx1ZXMudG8pLnRvRXF1YWwoJzYwJyk7XHJcbiAgICB9KTtcclxuICAgIGl0KCduZWVkQXBwbHlWYWx1ZUZyb21TY2FsZSgpIGFwcGx5IHZhbHVlIGZyb20gc2NhbGUgY29ycmVjdGx5JywgKCkgPT4ge1xyXG4gICAgICAgIHZpZXcuZGF0YVJlcXVlc3RUb01vZGVsLm5lZWRBcHBseVZhbHVlRnJvbVNjYWxlID0geyBuYW1lOiAnJywgdmFsdWU6ICcyMCcgfTtcclxuICAgICAgICBleHBlY3QobW9kZWwudmFsdWVzLmZyb20pLnRvRXF1YWwoJzIwJyk7XHJcbiAgICAgICAgdmlldy5kYXRhUmVxdWVzdFRvTW9kZWwubmVlZEFwcGx5VmFsdWVGcm9tU2NhbGUgPSB7IG5hbWU6ICcnLCB2YWx1ZTogJzQwJyB9O1xyXG4gICAgICAgIGV4cGVjdChtb2RlbC52YWx1ZXMuZnJvbSkudG9FcXVhbCgnNDAnKTtcclxuICAgICAgICB2aWV3LmRhdGFSZXF1ZXN0VG9Nb2RlbC5uZWVkQXBwbHlWYWx1ZUZyb21TY2FsZSA9IHsgbmFtZTogJycsIHZhbHVlOiAnODAnIH07XHJcbiAgICAgICAgZXhwZWN0KG1vZGVsLnZhbHVlcy50bykudG9FcXVhbCgnODAnKTtcclxuICAgICAgICB2aWV3LmRhdGFSZXF1ZXN0VG9Nb2RlbC5uZWVkQXBwbHlWYWx1ZUZyb21TY2FsZSA9IHsgbmFtZTogJycsIHZhbHVlOiAnNjAnIH07XHJcbiAgICAgICAgZXhwZWN0KG1vZGVsLnZhbHVlcy50bykudG9FcXVhbCgnNjAnKTtcclxuICAgIH0pO1xyXG59KTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5IYW5kbGVzID0gdm9pZCAwO1xyXG5jbGFzcyBIYW5kbGVzIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuaXNJbnB1dENoYW5nZXMgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnN0YXRpY0VsZW1lbnRzRGVzY3JpcHRpb24gPSBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnZ29ieS1zbGlkZXJfX2hhbmRsZScsICdnb2J5LXNsaWRlcl9faGFuZGxlX3R5cGVfZnJvbSddLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogJ3N0eWxlJyxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiAnZGlzcGxheTogaW5saW5lLWJsb2NrJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY3NzQ2xhc3NlczogWydnb2J5LXNsaWRlcl9faGFuZGxlJywgJ2dvYnktc2xpZGVyX19oYW5kbGVfdHlwZV90byddLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogJ3N0eWxlJyxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiAnZGlzcGxheTogaW5saW5lLWJsb2NrJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY3NzQ2xhc3NlczogWydnb2J5LXNsaWRlcl9faGFuZGxlLXZhbHVlJywgJ2dvYnktc2xpZGVyX19oYW5kbGUtdmFsdWVfdHlwZV9mcm9tJ10sXHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnc3R5bGUnLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6ICdkaXNwbGF5OiBpbmxpbmUtYmxvY2snLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjc3NDbGFzc2VzOiBbJ2dvYnktc2xpZGVyX19oYW5kbGUtdmFsdWUnLCAnZ29ieS1zbGlkZXJfX2hhbmRsZS12YWx1ZV90eXBlX3RvJ10sXHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnc3R5bGUnLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6ICdkaXNwbGF5OiBpbmxpbmUtYmxvY2snLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICAgICAgdGhpcy5mcm9tSGFuZGxlID0gSGFuZGxlcy5jcmVhdGVFbGVtZW50KHRoaXMuc3RhdGljRWxlbWVudHNEZXNjcmlwdGlvblswXSk7XHJcbiAgICAgICAgdGhpcy50b0hhbmRsZSA9IEhhbmRsZXMuY3JlYXRlRWxlbWVudCh0aGlzLnN0YXRpY0VsZW1lbnRzRGVzY3JpcHRpb25bMV0pO1xyXG4gICAgICAgIHRoaXMuZnJvbVZhbHVlID0gSGFuZGxlcy5jcmVhdGVFbGVtZW50KHRoaXMuc3RhdGljRWxlbWVudHNEZXNjcmlwdGlvblsyXSk7XHJcbiAgICAgICAgdGhpcy50b1ZhbHVlID0gSGFuZGxlcy5jcmVhdGVFbGVtZW50KHRoaXMuc3RhdGljRWxlbWVudHNEZXNjcmlwdGlvblszXSk7XHJcbiAgICAgICAgdGhpcy5mcm9tSGFuZGxlLmFwcGVuZCh0aGlzLmZyb21WYWx1ZSk7XHJcbiAgICAgICAgdGhpcy50b0hhbmRsZS5hcHBlbmQodGhpcy50b1ZhbHVlKTtcclxuICAgICAgICB0aGlzLnByZXBhcmVDbGFzc0VsZW1lbnRzKCk7XHJcbiAgICB9XHJcbiAgICBwcmVwYXJlQ2xhc3NFbGVtZW50cygpIHtcclxuICAgICAgICB0aGlzLmZyb21IYW5kbGUuYXBwZW5kKHRoaXMuZnJvbVZhbHVlKTtcclxuICAgICAgICB0aGlzLnRvSGFuZGxlLmFwcGVuZCh0aGlzLnRvVmFsdWUpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGNyZWF0ZUVsZW1lbnQoc2V0dGluZ3MpIHtcclxuICAgICAgICBjb25zdCB7IGNzc0NsYXNzZXMgPSBbXHJcbiAgICAgICAgICAgICdmb3ItY2hhbmdlJyxcclxuICAgICAgICAgICAgJ2Zvci1jaGFuZ2UnLFxyXG4gICAgICAgIF0sIG5hbWUgPSAnZm9yLWNoYW5nZScsIHZhbHVlID0gJ2Zvci1jaGFuZ2UnLCB9ID0gc2V0dGluZ3M7XHJcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICBjc3NDbGFzc2VzLmZvckVhY2goKGNzc0NsYXNzKSA9PiB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjc3NDbGFzcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgaXNBc3NpZ25WYWx1ZXNOZWVkID0gbmFtZSAmJiB2YWx1ZTtcclxuICAgICAgICBpZiAoaXNBc3NpZ25WYWx1ZXNOZWVkKVxyXG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgICB9XHJcbiAgICBjb3JyZWN0c0hhbmRsZXNPdmVybGFwcyhzZXR0aW5ncykge1xyXG4gICAgICAgIGNvbnN0IHsgcG9zaXRpb25zLCBzbGlkZXJXaWR0aCB9ID0gc2V0dGluZ3M7XHJcbiAgICAgICAgY29uc3QgaXNUb05vdEluRXh0cmEgPSBwb3NpdGlvbnMudG8gPCBzbGlkZXJXaWR0aCAtIHRoaXMudG9IYW5kbGUub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgaWYgKGlzVG9Ob3RJbkV4dHJhKSB7XHJcbiAgICAgICAgICAgIHRoaXMudG9IYW5kbGUuc3R5bGUubGVmdCA9IGAke3Bvc2l0aW9ucy5mcm9tICsgdGhpcy5mcm9tSGFuZGxlLm9mZnNldFdpZHRofXB4YDtcclxuICAgICAgICAgICAgcG9zaXRpb25zLnRvID0gcG9zaXRpb25zLmZyb20gKyB0aGlzLmZyb21IYW5kbGUub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmZyb21IYW5kbGUuc3R5bGUubGVmdCA9IGAke3Bvc2l0aW9ucy50byAtIHRoaXMuZnJvbUhhbmRsZS5vZmZzZXRXaWR0aH1weGA7XHJcbiAgICAgICAgICAgIHBvc2l0aW9ucy5mcm9tID0gcG9zaXRpb25zLnRvIC0gdGhpcy5mcm9tSGFuZGxlLm9mZnNldFdpZHRoO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJlZnJlc2hWYWx1ZXMoZGF0YSwgcG9zaXRpb25zKSB7XHJcbiAgICAgICAgY29uc3QgaGFuZGxlc0RhdGEgPSBkYXRhO1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGAke2hhbmRsZXNEYXRhLnRhcmdldH1WYWx1ZWA7XHJcbiAgICAgICAgY29uc3QgaXNSb3VuZFVwTmVlZCA9IGRhdGEuaXNUb0ZpeGVkICYmICF0aGlzLmlzSW5wdXRDaGFuZ2VzO1xyXG4gICAgICAgIGNvbnN0IGRpZmZlcmVuY2VCZXR3ZWVuUG9zaXRpb25zID0gcG9zaXRpb25zLnBvc2l0aW9ucy50byAtIHBvc2l0aW9ucy5wb3NpdGlvbnMuZnJvbTtcclxuICAgICAgICBjb25zdCBpc0V4dHJhUG9zaXRpb24gPSBwb3NpdGlvbnMucG9zaXRpb25zLmZyb20gPT09IDBcclxuICAgICAgICAgICAgfHwgcG9zaXRpb25zLnBvc2l0aW9ucy50byA9PT0gcG9zaXRpb25zLnNsaWRlcldpZHRoIC0gdGhpcy5mcm9tSGFuZGxlLm9mZnNldFdpZHRoO1xyXG4gICAgICAgIGNvbnN0IGlzSGFuZGxlc092ZXJsYXBzID0gaXNFeHRyYVBvc2l0aW9uICYmIHBvc2l0aW9ucy5pc0RvdWJsZVxyXG4gICAgICAgICAgICAmJiBkaWZmZXJlbmNlQmV0d2VlblBvc2l0aW9ucyA8IHRoaXMuZnJvbUhhbmRsZS5vZmZzZXRXaWR0aDtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgICBpZiAoaXNIYW5kbGVzT3ZlcmxhcHMpIHtcclxuICAgICAgICAgICAgdGhpcy5jb3JyZWN0c0hhbmRsZXNPdmVybGFwcyhwb3NpdGlvbnMpO1xyXG4gICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXNbdGFyZ2V0XS5pbm5lclRleHQgPSBpc1JvdW5kVXBOZWVkID8gYCR7TWF0aC5yb3VuZChOdW1iZXIoZGF0YS52YWx1ZSkpfWAgOiBkYXRhLnZhbHVlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0lucHV0Q2hhbmdlcylcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNJbnB1dENoYW5nZXMgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIGFkanVzdFBvc2l0aW9ucyhkYXRhVG9SZWZyZXNoLCBzbGlkZXJXaWR0aCkge1xyXG4gICAgICAgIGNvbnN0IGhhbmRsZUxpbmsgPSBgJHtkYXRhVG9SZWZyZXNoLnRhcmdldH1IYW5kbGVgO1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXNbaGFuZGxlTGlua107XHJcbiAgICAgICAgZnVuY3Rpb24gY2FsY3VsYXRlTmV3UG9zaXRpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcoKChzbGlkZXJXaWR0aCAtIHRhcmdldC5vZmZzZXRXaWR0aCkgLyBkYXRhVG9SZWZyZXNoLnRvdGFsVmFsdWVzKVxyXG4gICAgICAgICAgICAgICAgKiAoTnVtYmVyKGRhdGFUb1JlZnJlc2gudmFsdWUpIC0gTnVtYmVyKGRhdGFUb1JlZnJlc2gubWluVmFsdWUpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG5ld1Bvc2l0aW9uID0gY2FsY3VsYXRlTmV3UG9zaXRpb24oKTtcclxuICAgICAgICB0YXJnZXQuc3R5bGUubGVmdCA9IGAke25ld1Bvc2l0aW9ufXB4YDtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0YXJnZXQ6IGRhdGFUb1JlZnJlc2gudGFyZ2V0LFxyXG4gICAgICAgICAgICBwb3NpdGlvbjogbmV3UG9zaXRpb24sXHJcbiAgICAgICAgICAgIHNsaWRlcldpZHRoOiBzbGlkZXJXaWR0aCAtIHRhcmdldC5vZmZzZXRXaWR0aCxcclxuICAgICAgICAgICAgaGFuZGxlV2lkdGg6IHRhcmdldC5vZmZzZXRXaWR0aCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgY2hlY2tJc05lZWRUb01ha2VWZXJ0aWNhbChpc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgcmV0dXJuICghdGhpcy5mcm9tVmFsdWUuY2xhc3NMaXN0LmNvbnRhaW5zKCdnb2J5LXNsaWRlcl9faGFuZGxlLXZhbHVlX3N0YXRlX3ZlcnRpY2FsJykpXHJcbiAgICAgICAgICAgICYmICghdGhpcy50b1ZhbHVlLmNsYXNzTGlzdC5jb250YWlucygnZ29ieS1zbGlkZXJfX2hhbmRsZS12YWx1ZV9zdGF0ZV92ZXJ0aWNhbCcpKSAmJiAoaXNWZXJ0aWNhbCk7XHJcbiAgICB9XHJcbiAgICBjaGVja0lzTmVlZFRvTWFrZUhvcml6b250YWxseShpc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmZyb21WYWx1ZS5jbGFzc0xpc3QuY29udGFpbnMoJ2dvYnktc2xpZGVyX19oYW5kbGUtdmFsdWVfc3RhdGVfdmVydGljYWwnKSlcclxuICAgICAgICAgICAgJiYgKHRoaXMudG9WYWx1ZS5jbGFzc0xpc3QuY29udGFpbnMoJ2dvYnktc2xpZGVyX19oYW5kbGUtdmFsdWVfc3RhdGVfdmVydGljYWwnKSkgJiYgKCFpc1ZlcnRpY2FsKTtcclxuICAgIH1cclxuICAgIGNoZWNrSXNUb05lZWRIaWRlKGlzRG91YmxlKSB7XHJcbiAgICAgICAgcmV0dXJuICghaXNEb3VibGUpICYmICh0aGlzLnRvSGFuZGxlLnN0eWxlLmRpc3BsYXkgPT09ICdpbmxpbmUtYmxvY2snKTtcclxuICAgIH1cclxuICAgIGNoZWNrSXNUb05lZWRTaG93KGlzRG91YmxlKSB7XHJcbiAgICAgICAgcmV0dXJuIChpc0RvdWJsZSkgJiYgKHRoaXMudG9IYW5kbGUuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKTtcclxuICAgIH1cclxuICAgIGNoYW5nZVBsYW5lKGlzVmVydGljYWwpIHtcclxuICAgICAgICBmdW5jdGlvbiBjaGFuZ2VWZXJ0aWNhbENsYXNzKGZyb20sIHRvKSB7XHJcbiAgICAgICAgICAgIGZyb20uY2xhc3NMaXN0LnRvZ2dsZSgnZ29ieS1zbGlkZXJfX2hhbmRsZS12YWx1ZV9zdGF0ZV92ZXJ0aWNhbCcpO1xyXG4gICAgICAgICAgICB0by5jbGFzc0xpc3QudG9nZ2xlKCdnb2J5LXNsaWRlcl9faGFuZGxlLXZhbHVlX3N0YXRlX3ZlcnRpY2FsJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN3aXRjaCAodHJ1ZSkge1xyXG4gICAgICAgICAgICBjYXNlIHRoaXMuY2hlY2tJc05lZWRUb01ha2VWZXJ0aWNhbChpc1ZlcnRpY2FsKTpcclxuICAgICAgICAgICAgICAgIGNoYW5nZVZlcnRpY2FsQ2xhc3ModGhpcy5mcm9tVmFsdWUsIHRoaXMudG9WYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSB0aGlzLmNoZWNrSXNOZWVkVG9NYWtlSG9yaXpvbnRhbGx5KGlzVmVydGljYWwpOlxyXG4gICAgICAgICAgICAgICAgY2hhbmdlVmVydGljYWxDbGFzcyh0aGlzLmZyb21WYWx1ZSwgdGhpcy50b1ZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29udHJvbEhhbmRsZXNQb3NpdGlvbihzZXR0aW5ncykge1xyXG4gICAgICAgIGNvbnN0IHsgc2xpZGVyV2lkdGgsIHBvc2l0aW9ucyB9ID0gc2V0dGluZ3M7XHJcbiAgICAgICAgY29uc3QgbmV3UG9zaXRpb24gPSBzbGlkZXJXaWR0aCAtIHRoaXMudG9IYW5kbGUub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgdGhpcy50b0hhbmRsZS5zdHlsZS5sZWZ0ID0gYCR7bmV3UG9zaXRpb259cHhgO1xyXG4gICAgICAgIHBvc2l0aW9ucy50byA9IG5ld1Bvc2l0aW9uO1xyXG4gICAgICAgIGNvbnN0IGlzV3JvbmdGcm9tUG9zaXRpb24gPSBwb3NpdGlvbnMuZnJvbSA+IHNsaWRlcldpZHRoIC0gdGhpcy50b0hhbmRsZS5vZmZzZXRXaWR0aCAtIHRoaXMuZnJvbUhhbmRsZS5vZmZzZXRXaWR0aDtcclxuICAgICAgICBpZiAoaXNXcm9uZ0Zyb21Qb3NpdGlvbikge1xyXG4gICAgICAgICAgICBjb25zdCBleHRyZW1lRnJvbVBvc2l0aW9uID0gU3RyaW5nKHNsaWRlcldpZHRoIC0gdGhpcy50b0hhbmRsZS5vZmZzZXRXaWR0aCAtIHRoaXMuZnJvbUhhbmRsZS5vZmZzZXRXaWR0aCk7XHJcbiAgICAgICAgICAgIHRoaXMuZnJvbUhhbmRsZS5zdHlsZS5sZWZ0ID0gYCR7ZXh0cmVtZUZyb21Qb3NpdGlvbn1weGA7XHJcbiAgICAgICAgICAgIHBvc2l0aW9ucy5mcm9tID0gTnVtYmVyKGV4dHJlbWVGcm9tUG9zaXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnRyb2xIYW5kbGVzRGlzcGxheShzZXR0aW5ncykge1xyXG4gICAgICAgIGNvbnN0IHsgaXNEb3VibGUgfSA9IHNldHRpbmdzO1xyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrSXNUb05lZWRIaWRlKGlzRG91YmxlKSkge1xyXG4gICAgICAgICAgICB0aGlzLnRvSGFuZGxlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuY2hlY2tJc1RvTmVlZFNob3coaXNEb3VibGUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMudG9IYW5kbGUuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xIYW5kbGVzUG9zaXRpb24oc2V0dGluZ3MpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGhpZGVIYW5kbGVWYWx1ZXMoaXNIYW5kbGVWYWx1ZXMpIHtcclxuICAgICAgICBpZiAoIWlzSGFuZGxlVmFsdWVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMudG9WYWx1ZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB0aGlzLmZyb21WYWx1ZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy50b1ZhbHVlLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcclxuICAgICAgICAgICAgdGhpcy5mcm9tVmFsdWUuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNlbGVjdHNIYW5kbGVUb01vdmUoc2V0dGluZ3MpIHtcclxuICAgICAgICBjb25zdCB7IHRhcmdldFBvc2l0aW9uLCBwb3NpdGlvbnMsIGlzRG91YmxlIH0gPSBzZXR0aW5ncztcclxuICAgICAgICBjb25zdCBmcm9tRGlmZmVyZW5jZSA9IE1hdGguYWJzKE51bWJlcihwb3NpdGlvbnMuZnJvbSkgLSBOdW1iZXIodGFyZ2V0UG9zaXRpb24pKTtcclxuICAgICAgICBjb25zdCB0b0RpZmZlcmVuY2UgPSBNYXRoLmFicyhOdW1iZXIocG9zaXRpb25zLnRvKSAtIE51bWJlcih0YXJnZXRQb3NpdGlvbikpO1xyXG4gICAgICAgIGNvbnN0IGlzRnJvbURpZmZlcmVuY2VMZXNzID0gZnJvbURpZmZlcmVuY2UgPCB0b0RpZmZlcmVuY2UgfHwgIWlzRG91YmxlO1xyXG4gICAgICAgIGlmIChpc0Zyb21EaWZmZXJlbmNlTGVzcylcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZnJvbUhhbmRsZTtcclxuICAgICAgICByZXR1cm4gdGhpcy50b0hhbmRsZTtcclxuICAgIH1cclxuICAgIGFjY2VwdE5ld1Bvc2l0aW9uKHNldHRpbmdzKSB7XHJcbiAgICAgICAgY29uc3QgeyB0YXJnZXQsIHZhbHVlLCBwb3NpdGlvbnMgfSA9IHNldHRpbmdzO1xyXG4gICAgICAgIGlmICh0YXJnZXQgPT09IHRoaXMuZnJvbUhhbmRsZSkge1xyXG4gICAgICAgICAgICB0aGlzLmZyb21IYW5kbGUuc3R5bGUubGVmdCA9IGAke3ZhbHVlfXB4YDtcclxuICAgICAgICAgICAgcG9zaXRpb25zLmZyb20gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudG9IYW5kbGUuc3R5bGUubGVmdCA9IGAke3ZhbHVlfXB4YDtcclxuICAgICAgICAgICAgcG9zaXRpb25zLnRvID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuSGFuZGxlcyA9IEhhbmRsZXM7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IEhhbmRsZXNfMSA9IHJlcXVpcmUoXCIuL0hhbmRsZXNcIik7XHJcbmRlc2NyaWJlKCdIYW5kbGVzJywgKCkgPT4ge1xyXG4gICAgbGV0IGhhbmRsZXM7XHJcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgICAgICBoYW5kbGVzID0gbmV3IEhhbmRsZXNfMS5IYW5kbGVzKCk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdIYW5kbGVzIGNhbiBiZSBjcmVhdGUnLCAoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KGhhbmRsZXMpLnRvQmVUcnV0aHkoKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ3JlZnJlc2hWYWx1ZXMoKSByZWZyZXNoIHZhbHVlIGZvciBmcm9tJywgKCkgPT4ge1xyXG4gICAgICAgIGhhbmRsZXMucmVmcmVzaFZhbHVlcyh7XHJcbiAgICAgICAgICAgIHRhcmdldDogJ2Zyb20nLFxyXG4gICAgICAgICAgICB2YWx1ZTogJzUnLFxyXG4gICAgICAgICAgICBpc1RvRml4ZWQ6IGZhbHNlLFxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgcG9zaXRpb25zOiB7IGZyb206IDAsIHRvOiAwIH0sXHJcbiAgICAgICAgICAgIHNsaWRlcldpZHRoOiAwLFxyXG4gICAgICAgICAgICBpc0RvdWJsZTogZmFsc2UsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZXhwZWN0KGhhbmRsZXMuZnJvbVZhbHVlLmlubmVyVGV4dCkudG9FcXVhbCgnNScpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgncmVmcmVzaFZhbHVlcygpIHJlZnJlc2ggdmFsdWUgZm9yIHRvJywgKCkgPT4ge1xyXG4gICAgICAgIGhhbmRsZXMucmVmcmVzaFZhbHVlcyh7XHJcbiAgICAgICAgICAgIHRhcmdldDogJ3RvJyxcclxuICAgICAgICAgICAgdmFsdWU6ICc1JyxcclxuICAgICAgICAgICAgaXNUb0ZpeGVkOiBmYWxzZSxcclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uczogeyBmcm9tOiAwLCB0bzogMCB9LFxyXG4gICAgICAgICAgICBzbGlkZXJXaWR0aDogMCxcclxuICAgICAgICAgICAgaXNEb3VibGU6IGZhbHNlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGV4cGVjdChoYW5kbGVzLnRvSGFuZGxlLmlubmVyVGV4dCkudG9FcXVhbCgnNScpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnYWRqdXN0UG9zaXRpb25SZWxhdGl2ZVZhbHVlKCkgYWRqdXN0IGZyb20gcG9zaXRpb24gY29ycmVjdGx5IGFuZCByZXR1cm4gY29ycmVjdCBzZXR0aW5ncycsICgpID0+IHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBoYW5kbGVzLmFkanVzdFBvc2l0aW9ucyh7XHJcbiAgICAgICAgICAgIHRhcmdldDogJ2Zyb20nLCBtaW5WYWx1ZTogJzAnLCB0b3RhbFZhbHVlczogMTAsIHZhbHVlOiAnNScsXHJcbiAgICAgICAgfSwgMTAwKTtcclxuICAgICAgICBleHBlY3QoaGFuZGxlcy5mcm9tSGFuZGxlLnN0eWxlLmxlZnQpLnRvRXF1YWwoJzUwcHgnKTtcclxuICAgICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHtcclxuICAgICAgICAgICAgdGFyZ2V0OiAnZnJvbScsIHBvc2l0aW9uOiAnNTAnLCBzbGlkZXJXaWR0aDogMTAwLCBoYW5kbGVXaWR0aDogMCxcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ2FkanVzdFBvc2l0aW9uUmVsYXRpdmVWYWx1ZSgpIGFkanVzdCB0byBwb3NpdGlvbiBjb3JyZWN0bHkgYW5kIHJldHVybiBjb3JyZWN0IHNldHRpbmdzJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGhhbmRsZXMuYWRqdXN0UG9zaXRpb25zKHtcclxuICAgICAgICAgICAgdGFyZ2V0OiAndG8nLCBtaW5WYWx1ZTogJzAnLCB0b3RhbFZhbHVlczogMTAsIHZhbHVlOiAnNScsXHJcbiAgICAgICAgfSwgMTAwKTtcclxuICAgICAgICBleHBlY3QoaGFuZGxlcy50b0hhbmRsZS5zdHlsZS5sZWZ0KS50b0VxdWFsKCc1MHB4Jyk7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7XHJcbiAgICAgICAgICAgIHRhcmdldDogJ3RvJywgcG9zaXRpb246ICc1MCcsIHNsaWRlcldpZHRoOiAxMDAsIGhhbmRsZVdpZHRoOiAwLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnY2hhbmdlUGxhbmUoKSBjaGFuZ2UgY2xhc3NlcyBjb3JyZWN0bHknLCAoKSA9PiB7XHJcbiAgICAgICAgaGFuZGxlcy5jaGFuZ2VQbGFuZSh0cnVlKTtcclxuICAgICAgICBleHBlY3QoaGFuZGxlcy5mcm9tVmFsdWUpLnRvSGF2ZUNsYXNzKCdnb2J5LXNsaWRlcl9faGFuZGxlLXZhbHVlX3N0YXRlX3ZlcnRpY2FsJyk7XHJcbiAgICAgICAgZXhwZWN0KGhhbmRsZXMudG9WYWx1ZSkudG9IYXZlQ2xhc3MoJ2dvYnktc2xpZGVyX19oYW5kbGUtdmFsdWVfc3RhdGVfdmVydGljYWwnKTtcclxuICAgICAgICBoYW5kbGVzLmNoYW5nZVBsYW5lKGZhbHNlKTtcclxuICAgICAgICBleHBlY3QoaGFuZGxlcy5mcm9tVmFsdWUpLm5vdC50b0hhdmVDbGFzcygnZ29ieS1zbGlkZXJfX2hhbmRsZS12YWx1ZV9zdGF0ZV92ZXJ0aWNhbCcpO1xyXG4gICAgICAgIGV4cGVjdChoYW5kbGVzLnRvVmFsdWUpLm5vdC50b0hhdmVDbGFzcygnZ29ieS1zbGlkZXJfX2hhbmRsZS12YWx1ZV9zdGF0ZV92ZXJ0aWNhbCcpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnaGlkZUhhbmRsZVZhbHVlcygpIG1hbmFnZSBkaXNwbGF5IGNvcnJlY3RseScsICgpID0+IHtcclxuICAgICAgICBoYW5kbGVzLmhpZGVIYW5kbGVWYWx1ZXMoZmFsc2UpO1xyXG4gICAgICAgIGV4cGVjdChoYW5kbGVzLmZyb21WYWx1ZS5zdHlsZS5kaXNwbGF5KS50b0VxdWFsKCdub25lJyk7XHJcbiAgICAgICAgZXhwZWN0KGhhbmRsZXMudG9WYWx1ZS5zdHlsZS5kaXNwbGF5KS50b0VxdWFsKCdub25lJyk7XHJcbiAgICAgICAgaGFuZGxlcy5oaWRlSGFuZGxlVmFsdWVzKHRydWUpO1xyXG4gICAgICAgIGV4cGVjdChoYW5kbGVzLmZyb21WYWx1ZS5zdHlsZS5kaXNwbGF5KS50b0VxdWFsKCdpbmxpbmUtYmxvY2snKTtcclxuICAgICAgICBleHBlY3QoaGFuZGxlcy50b1ZhbHVlLnN0eWxlLmRpc3BsYXkpLnRvRXF1YWwoJ2lubGluZS1ibG9jaycpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnaGlkZVRvSGFuZGVsKCkgaWYgbmVlZCB0byBoaWRlJywgKCkgPT4ge1xyXG4gICAgICAgIGhhbmRsZXMuY29udHJvbEhhbmRsZXNEaXNwbGF5KHsgaXNEb3VibGU6IGZhbHNlLCBwb3NpdGlvbnM6IHsgZnJvbTogMzAsIHRvOiA3MCB9LCBzbGlkZXJXaWR0aDogMTAwIH0pO1xyXG4gICAgICAgIGV4cGVjdChoYW5kbGVzLnRvSGFuZGxlLnN0eWxlLmRpc3BsYXkpLnRvRXF1YWwoJ25vbmUnKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ2hpZGVUb0hhbmRlbCgpIGlmIG5lZWQgdG8gc2hvdycsICgpID0+IHtcclxuICAgICAgICBoYW5kbGVzLnRvSGFuZGxlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgaGFuZGxlcy5jb250cm9sSGFuZGxlc0Rpc3BsYXkoeyBpc0RvdWJsZTogdHJ1ZSwgcG9zaXRpb25zOiB7IGZyb206IDMwLCB0bzogNzAgfSwgc2xpZGVyV2lkdGg6IDEwMCB9KTtcclxuICAgICAgICBleHBlY3QoaGFuZGxlcy50b0hhbmRsZS5zdHlsZS5kaXNwbGF5KS50b0VxdWFsKCdpbmxpbmUtYmxvY2snKTtcclxuICAgICAgICBleHBlY3QoaGFuZGxlcy50b0hhbmRsZS5zdHlsZS5sZWZ0KS50b0VxdWFsKCcxMDBweCcpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnaGlkZVRvSGFuZGVsKCkgaWYgbmVlZCB0byBzaG93IGFuZSBmcm9tIGJpZ2dlciB0aGFuIHRvJywgKCkgPT4ge1xyXG4gICAgICAgIGhhbmRsZXMudG9IYW5kbGUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICBoYW5kbGVzLmNvbnRyb2xIYW5kbGVzRGlzcGxheSh7IGlzRG91YmxlOiB0cnVlLCBwb3NpdGlvbnM6IHsgZnJvbTogMTAxLCB0bzogNzAgfSwgc2xpZGVyV2lkdGg6IDEwMCB9KTtcclxuICAgICAgICBleHBlY3QoaGFuZGxlcy50b0hhbmRsZS5zdHlsZS5kaXNwbGF5KS50b0VxdWFsKCdpbmxpbmUtYmxvY2snKTtcclxuICAgICAgICBleHBlY3QoaGFuZGxlcy50b0hhbmRsZS5zdHlsZS5sZWZ0KS50b0VxdWFsKCcxMDBweCcpO1xyXG4gICAgICAgIGV4cGVjdChoYW5kbGVzLmZyb21IYW5kbGUuc3R5bGUubGVmdCkudG9FcXVhbCgnMTAwcHgnKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ2NvcnJlY3RzSGFuZGxlc092ZXJsYXBzKCkgZml4IGZyb20gZXh0cmEgcG9zaXRpb24gY29ycmVjdGx5JywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHBvc2l0aW9uSW1pdGF0b3IgPSB7IGZyb206IDAsIHRvOiAxMCB9O1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKGhhbmRsZXMuZnJvbUhhbmRsZSk7XHJcbiAgICAgICAgaGFuZGxlcy5mcm9tSGFuZGxlLnN0eWxlLndpZHRoID0gJzIwcHgnO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGhhbmRsZXMucmVmcmVzaFZhbHVlcyh7XHJcbiAgICAgICAgICAgIGlzVG9GaXhlZDogdHJ1ZSxcclxuICAgICAgICAgICAgdGFyZ2V0OiAnZnJvbScsXHJcbiAgICAgICAgICAgIHZhbHVlOiAnNCcsXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBzbGlkZXJXaWR0aDogMTAwLFxyXG4gICAgICAgICAgICBwb3NpdGlvbnM6IHBvc2l0aW9uSW1pdGF0b3IsXHJcbiAgICAgICAgICAgIGlzRG91YmxlOiB0cnVlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmVGYWxzZSgpO1xyXG4gICAgICAgIGV4cGVjdChwb3NpdGlvbkltaXRhdG9yLnRvKS50b0VxdWFsKDIwKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ2NvcnJlY3RzSGFuZGxlc092ZXJsYXBzKCkgZml4IHRvIGV4dHJhIHBvc2l0aW9uIGNvcnJlY3RseScsICgpID0+IHtcclxuICAgICAgICBjb25zdCBwb3NpdGlvbkltaXRhdG9yID0geyBmcm9tOiA3MCwgdG86IDgwIH07XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmQoaGFuZGxlcy5mcm9tSGFuZGxlLCBoYW5kbGVzLnRvSGFuZGxlKTtcclxuICAgICAgICBoYW5kbGVzLmZyb21IYW5kbGUuc3R5bGUud2lkdGggPSAnMjBweCc7XHJcbiAgICAgICAgaGFuZGxlcy50b0hhbmRsZS5zdHlsZS53aWR0aCA9ICcyMHB4JztcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBoYW5kbGVzLnJlZnJlc2hWYWx1ZXMoe1xyXG4gICAgICAgICAgICBpc1RvRml4ZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIHRhcmdldDogJ2Zyb20nLFxyXG4gICAgICAgICAgICB2YWx1ZTogJzQnLFxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgc2xpZGVyV2lkdGg6IDEwMCxcclxuICAgICAgICAgICAgcG9zaXRpb25zOiBwb3NpdGlvbkltaXRhdG9yLFxyXG4gICAgICAgICAgICBpc0RvdWJsZTogdHJ1ZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBleHBlY3QocmVzdWx0KS50b0JlRmFsc2UoKTtcclxuICAgICAgICBleHBlY3QocG9zaXRpb25JbWl0YXRvci5mcm9tKS50b0VxdWFsKDYwKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ3NlbGVjdHNIYW5kbGVUb01vdmUoKSBjaG9vc2UgZnJvbSBoYW5kbGUnLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gaGFuZGxlcy5zZWxlY3RzSGFuZGxlVG9Nb3ZlKHtcclxuICAgICAgICAgICAgcG9zaXRpb25zOiB7IGZyb206IDcwLCB0bzogODAgfSxcclxuICAgICAgICAgICAgaXNEb3VibGU6IHRydWUsXHJcbiAgICAgICAgICAgIHRhcmdldFBvc2l0aW9uOiA3NCxcclxuICAgICAgICB9KTtcclxuICAgICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKGhhbmRsZXMuZnJvbUhhbmRsZSk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdzZWxlY3RzSGFuZGxlVG9Nb3ZlKCkgY2hvb3NlIHRvIGhhbmRsZScsICgpID0+IHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBoYW5kbGVzLnNlbGVjdHNIYW5kbGVUb01vdmUoe1xyXG4gICAgICAgICAgICBwb3NpdGlvbnM6IHsgZnJvbTogNzAsIHRvOiA4MCB9LFxyXG4gICAgICAgICAgICBpc0RvdWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgdGFyZ2V0UG9zaXRpb246IDc2LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoaGFuZGxlcy50b0hhbmRsZSk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdhY2NlcHROZXdQb3NpdGlvbigpIHJlY29yZCBkYXRhIGNvcnJlY3RseScsICgpID0+IHtcclxuICAgICAgICBjb25zdCBwb3NpdGlvbkltaXRhdG9yID0geyBmcm9tOiA3MCwgdG86IDgwIH07XHJcbiAgICAgICAgaGFuZGxlcy5hY2NlcHROZXdQb3NpdGlvbih7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uczogcG9zaXRpb25JbWl0YXRvcixcclxuICAgICAgICAgICAgdmFsdWU6IDQwLFxyXG4gICAgICAgICAgICB0YXJnZXQ6IGhhbmRsZXMuZnJvbUhhbmRsZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBleHBlY3QocG9zaXRpb25JbWl0YXRvci5mcm9tKS50b0VxdWFsKDQwKTtcclxuICAgICAgICBoYW5kbGVzLmFjY2VwdE5ld1Bvc2l0aW9uKHtcclxuICAgICAgICAgICAgcG9zaXRpb25zOiBwb3NpdGlvbkltaXRhdG9yLFxyXG4gICAgICAgICAgICB2YWx1ZTogNTAsXHJcbiAgICAgICAgICAgIHRhcmdldDogaGFuZGxlcy50b0hhbmRsZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBleHBlY3QocG9zaXRpb25JbWl0YXRvci50bykudG9FcXVhbCg1MCk7XHJcbiAgICB9KTtcclxufSk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuTW92ZW1lbnQgPSB2b2lkIDA7XHJcbmNvbnN0IGF1dG9iaW5kX2RlY29yYXRvcl8xID0gcmVxdWlyZShcImF1dG9iaW5kLWRlY29yYXRvclwiKTtcclxubGV0IE1vdmVtZW50ID0gY2xhc3MgTW92ZW1lbnQge1xyXG4gICAgY29uc3RydWN0b3Ioc2V0dGluZ3MpIHtcclxuICAgICAgICB0aGlzLnNsaWRlciA9IHNldHRpbmdzLnNsaWRlcjtcclxuICAgICAgICB0aGlzLmZyb20gPSBzZXR0aW5ncy5mcm9tSGFuZGxlO1xyXG4gICAgICAgIHRoaXMudG8gPSBzZXR0aW5ncy50b0hhbmRsZTtcclxuICAgICAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3MuYmFzaWNTZXR0aW5ncztcclxuICAgICAgICB0aGlzLmludGVydmFsID0gc2V0dGluZ3MuaW50ZXJ2YWw7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbnMgPSB7IGZyb206IDAsIHRvOiAxMDAgfTtcclxuICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3Muc3RlcCkge1xyXG4gICAgICAgICAgICB0aGlzLnN0ZXBXaWR0aCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zdGVwV2lkdGggPSAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kYXRhRm9yTW92ZW1lbnQgPSB7XHJcbiAgICAgICAgICAgIGRpc3RhbmNlVG9DdXJzb3I6IDAsXHJcbiAgICAgICAgICAgIHRhcmdldDogdGhpcy5mcm9tLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjaGVja0lzVG9CaWdnZXJUaGFuUmlnaHRFZGdlKHJpZ2h0U2xpZGVyRWRnZSwgbmV3UG9zaXRpb24pIHtcclxuICAgICAgICByZXR1cm4gbmV3UG9zaXRpb24gPiByaWdodFNsaWRlckVkZ2UgJiYgdGhpcy5kYXRhRm9yTW92ZW1lbnQudGFyZ2V0ID09PSB0aGlzLnRvO1xyXG4gICAgfVxyXG4gICAgY2hlY2tJc0Zyb21CaWdnZXJUaGFuUmlnaHRFZGdlKHJpZ2h0U2xpZGVyRWRnZSwgbmV3UG9zaXRpb24pIHtcclxuICAgICAgICByZXR1cm4gbmV3UG9zaXRpb24gPiByaWdodFNsaWRlckVkZ2UgJiYgdGhpcy5kYXRhRm9yTW92ZW1lbnQudGFyZ2V0ID09PSB0aGlzLmZyb207XHJcbiAgICB9XHJcbiAgICBjaGVja0lzRG91YmxlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLmRvdWJsZTtcclxuICAgIH1cclxuICAgIGNoZWNrSXNGcm9tQmlnZ2VyVGhhblRvKG5ld1Bvc2l0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmRhdGFGb3JNb3ZlbWVudC50YXJnZXQgPT09IHRoaXMuZnJvbSlcclxuICAgICAgICAgICAgJiYgKG5ld1Bvc2l0aW9uID4gdGhpcy5wb3NpdGlvbnMudG8gLSB0aGlzLmRhdGFGb3JNb3ZlbWVudC50YXJnZXQub2Zmc2V0V2lkdGgpO1xyXG4gICAgfVxyXG4gICAgY2hlY2tJc1RvU21hbGxlclRoYW5Gcm9tKG5ld1Bvc2l0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmRhdGFGb3JNb3ZlbWVudC50YXJnZXQgPT09IHRoaXMudG8pXHJcbiAgICAgICAgICAgICYmIChuZXdQb3NpdGlvbiA8IHRoaXMucG9zaXRpb25zLmZyb20gKyB0aGlzLmRhdGFGb3JNb3ZlbWVudC50YXJnZXQub2Zmc2V0V2lkdGgpO1xyXG4gICAgfVxyXG4gICAgY2hlY2tJc1N0ZXBTZXRDb3JyZWN0bHkoKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnNldHRpbmdzLnN0ZXAgIT09IGZhbHNlKSAmJiAodHlwZW9mIHRoaXMuc3RlcFdpZHRoID09PSAnc3RyaW5nJykgJiYgKE51bWJlcih0aGlzLnN0ZXBXaWR0aCkgPj0gMSk7XHJcbiAgICB9XHJcbiAgICBjaGVja0lzU3RlcFdpZHRoUGFzc2VkKHRhcmdldFBvc2l0aW9uLCBjdXJyZW50UG9zaXRpb24pIHtcclxuICAgICAgICBjb25zdCBjb3JyZWN0U3RlcFBhc3NlZCA9IE1hdGguYWJzKHRhcmdldFBvc2l0aW9uIC0gY3VycmVudFBvc2l0aW9uKSA+PSBOdW1iZXIodGhpcy5zdGVwV2lkdGgpO1xyXG4gICAgICAgIGNvbnN0IHN0ZXBSYXRlID0gY3VycmVudFBvc2l0aW9uIC8gTnVtYmVyKHRoaXMuc3RlcFdpZHRoKTtcclxuICAgICAgICBjb25zdCBpc05vdEluU3RlcFJhbmdlID0gIU51bWJlci5pc0ludGVnZXIoc3RlcFJhdGUpO1xyXG4gICAgICAgIGNvbnN0IGlzUmFuZ2VXaGVyZVBhc3NlZCA9IE1hdGguZmxvb3Ioc3RlcFJhdGUpICogTnVtYmVyKHRoaXMuc3RlcFdpZHRoKSA+IHRhcmdldFBvc2l0aW9uXHJcbiAgICAgICAgICAgIHx8IE1hdGguY2VpbChzdGVwUmF0ZSkgKiBOdW1iZXIodGhpcy5zdGVwV2lkdGgpIDwgdGFyZ2V0UG9zaXRpb247XHJcbiAgICAgICAgcmV0dXJuIGNvcnJlY3RTdGVwUGFzc2VkIHx8IChpc05vdEluU3RlcFJhbmdlICYmIGlzUmFuZ2VXaGVyZVBhc3NlZCk7XHJcbiAgICB9XHJcbiAgICBjb3JyZWN0c0ltcG9zc2libGVQb3NpdGlvbihyaWdodFNsaWRlckVkZ2UsIG5ld1Bvc2l0aW9uKSB7XHJcbiAgICAgICAgbGV0IHZhbHVlID0gbmV3UG9zaXRpb247XHJcbiAgICAgICAgY29uc3QgY29ycmVjdERvdWJsZVBvc2l0aW9ucyA9ICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tJc0Zyb21CaWdnZXJUaGFuVG8obmV3UG9zaXRpb24pKVxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnBvc2l0aW9ucy50byAtIHRoaXMuZGF0YUZvck1vdmVtZW50LnRhcmdldC5vZmZzZXRXaWR0aDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tJc1RvU21hbGxlclRoYW5Gcm9tKG5ld1Bvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnBvc2l0aW9ucy5mcm9tICsgdGhpcy5kYXRhRm9yTW92ZW1lbnQudGFyZ2V0Lm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrSXNUb0JpZ2dlclRoYW5SaWdodEVkZ2UocmlnaHRTbGlkZXJFZGdlLCBuZXdQb3NpdGlvbikpXHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHJpZ2h0U2xpZGVyRWRnZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChuZXdQb3NpdGlvbiA8IDApXHJcbiAgICAgICAgICAgIHZhbHVlID0gMDtcclxuICAgICAgICBpZiAodGhpcy5jaGVja0lzRnJvbUJpZ2dlclRoYW5SaWdodEVkZ2UocmlnaHRTbGlkZXJFZGdlLCBuZXdQb3NpdGlvbikpXHJcbiAgICAgICAgICAgIHZhbHVlID0gcmlnaHRTbGlkZXJFZGdlO1xyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrSXNEb3VibGUoKSkge1xyXG4gICAgICAgICAgICBjb3JyZWN0RG91YmxlUG9zaXRpb25zKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuICAgIGNvcnJlY3RzSW50ZXJ2YWxQb3NpdGlvbigpIHtcclxuICAgICAgICB0aGlzLmludGVydmFsLnN0eWxlLmxlZnQgPSBgJHsodGhpcy5wb3NpdGlvbnMuZnJvbSArICh0aGlzLmRhdGFGb3JNb3ZlbWVudC50YXJnZXQub2Zmc2V0V2lkdGggLyAyKSl9cHhgO1xyXG4gICAgICAgIHRoaXMuaW50ZXJ2YWwuc3R5bGUucmlnaHQgPSBgJHsodGhpcy5zbGlkZXIub2Zmc2V0V2lkdGggLSB0aGlzLnBvc2l0aW9ucy50bylcclxuICAgICAgICAgICAgLSAodGhpcy5kYXRhRm9yTW92ZW1lbnQudGFyZ2V0Lm9mZnNldFdpZHRoIC8gMil9cHhgO1xyXG4gICAgfVxyXG4gICAgYXBwbHlOZXdQb3NpdGlvbihuZXdQb3NpdGlvbikge1xyXG4gICAgICAgIGNvbnN0IHsgdGFyZ2V0IH0gPSB0aGlzLmRhdGFGb3JNb3ZlbWVudDtcclxuICAgICAgICB0YXJnZXQuc3R5bGUubGVmdCA9IGAke25ld1Bvc2l0aW9ufXB4YDtcclxuICAgICAgICBpZiAodGhpcy5kYXRhRm9yTW92ZW1lbnQudGFyZ2V0ID09PSB0aGlzLmZyb20pIHtcclxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbnMuZnJvbSA9IG5ld1Bvc2l0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbnMudG8gPSBuZXdQb3NpdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb3JyZWN0c0ludGVydmFsUG9zaXRpb24oKTtcclxuICAgIH1cclxuICAgIGNoZWNrSXNFZGdlUG9zaXRpb24obmV3UG9zaXRpb24pIHtcclxuICAgICAgICByZXR1cm4gKG5ld1Bvc2l0aW9uID09PSAwKSB8fCAobmV3UG9zaXRpb24gPT09IHRoaXMuc2xpZGVyLm9mZnNldFdpZHRoIC0gdGhpcy5kYXRhRm9yTW92ZW1lbnQudGFyZ2V0Lm9mZnNldFdpZHRoKTtcclxuICAgIH1cclxuICAgIGNvbnRyb2xTdGVwTW92ZW1lbnQobmV3UG9zaXRpb24sIHRhcmdldFBvc2l0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgZGlmZmVyZW5jZSA9IG5ld1Bvc2l0aW9uIC0gdGFyZ2V0UG9zaXRpb247XHJcbiAgICAgICAgY29uc3QgbmV3VGFyZ2V0UG9zaXRpb24gPSB0YXJnZXRQb3NpdGlvbiArIE51bWJlcih0aGlzLnN0ZXBXaWR0aClcclxuICAgICAgICAgICAgKiAoTWF0aC50cnVuYyhkaWZmZXJlbmNlIC8gTnVtYmVyKHRoaXMuc3RlcFdpZHRoKSkpO1xyXG4gICAgICAgIHN3aXRjaCAodHJ1ZSkge1xyXG4gICAgICAgICAgICBjYXNlIHRoaXMuY2hlY2tJc0VkZ2VQb3NpdGlvbihuZXdQb3NpdGlvbik6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGx5TmV3UG9zaXRpb24obmV3UG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgdGhpcy5jaGVja0lzU3RlcFdpZHRoUGFzc2VkKG5ld1Bvc2l0aW9uLCB0YXJnZXRQb3NpdGlvbik6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGx5TmV3UG9zaXRpb24oTWF0aC5yb3VuZChuZXdUYXJnZXRQb3NpdGlvbiAvIE51bWJlcih0aGlzLnN0ZXBXaWR0aCkpICogTnVtYmVyKHRoaXMuc3RlcFdpZHRoKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGhhbmRsZURvY3VtZW50TW91c2VNb3ZlKGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgeCA9IGV2ZW50LmNsaWVudFg7XHJcbiAgICAgICAgY29uc3QgeSA9IGV2ZW50LmNsaWVudFk7XHJcbiAgICAgICAgY29uc3QgcmlnaHRTbGlkZXJFZGdlID0gdGhpcy5zbGlkZXIub2Zmc2V0V2lkdGggLSB0aGlzLmRhdGFGb3JNb3ZlbWVudC50YXJnZXQub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgbGV0IHRhcmdldFBvc2l0aW9uO1xyXG4gICAgICAgIGlmICh0aGlzLmRhdGFGb3JNb3ZlbWVudC50YXJnZXQgPT09IHRoaXMuZnJvbSkge1xyXG4gICAgICAgICAgICB0YXJnZXRQb3NpdGlvbiA9IHRoaXMucG9zaXRpb25zLmZyb207XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0YXJnZXRQb3NpdGlvbiA9IHRoaXMucG9zaXRpb25zLnRvO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgbmV3UG9zaXRpb247XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MudmVydGljYWwpIHtcclxuICAgICAgICAgICAgbmV3UG9zaXRpb24gPSB0aGlzLnNsaWRlci5vZmZzZXRXaWR0aCAtICh5IC0gdGhpcy5kYXRhRm9yTW92ZW1lbnQuZGlzdGFuY2VUb0N1cnNvciAtIHRoaXMuc2xpZGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBuZXdQb3NpdGlvbiA9IHggLSB0aGlzLmRhdGFGb3JNb3ZlbWVudC5kaXN0YW5jZVRvQ3Vyc29yIC0gdGhpcy5zbGlkZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbmV3UG9zaXRpb24gPSB0aGlzLmNvcnJlY3RzSW1wb3NzaWJsZVBvc2l0aW9uKHJpZ2h0U2xpZGVyRWRnZSwgbmV3UG9zaXRpb24pO1xyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrSXNTdGVwU2V0Q29ycmVjdGx5KCkpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250cm9sU3RlcE1vdmVtZW50KG5ld1Bvc2l0aW9uLCB0YXJnZXRQb3NpdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmFwcGx5TmV3UG9zaXRpb24obmV3UG9zaXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGhhbmRsZUxpc3RlbmVyKHNldHRpbmcpIHtcclxuICAgICAgICBjb25zdCB7IGV2ZW50SW5mbyA9IHtcclxuICAgICAgICAgICAgeDogMCxcclxuICAgICAgICAgICAgeTogMCxcclxuICAgICAgICAgICAgdGFyZ2V0OiBmYWxzZSxcclxuICAgICAgICB9LCB0ZXN0ID0gZmFsc2UsIH0gPSBzZXR0aW5nO1xyXG4gICAgICAgIGxldCB0YXJnZXQ7XHJcbiAgICAgICAgaWYgKGV2ZW50SW5mby50YXJnZXQgPT09IHRoaXMuZnJvbSkge1xyXG4gICAgICAgICAgICB0YXJnZXQgPSB0aGlzLmZyb207XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0YXJnZXQgPSB0aGlzLnRvO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgZGlzdGFuY2VUb0N1cnNvcjtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy52ZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICBkaXN0YW5jZVRvQ3Vyc29yID0gZXZlbnRJbmZvLnkgLSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIC0gKHRhcmdldC5vZmZzZXRXaWR0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBkaXN0YW5jZVRvQ3Vyc29yID0gZXZlbnRJbmZvLnggLSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRlc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVEb2N1bWVudE1vdXNlTW92ZSh7XHJcbiAgICAgICAgICAgICAgICBjbGllbnRYOiB0ZXN0LngsXHJcbiAgICAgICAgICAgICAgICBjbGllbnRZOiB0ZXN0LnksXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRhdGFGb3JNb3ZlbWVudCA9IHtcclxuICAgICAgICAgICAgdGFyZ2V0LFxyXG4gICAgICAgICAgICBkaXN0YW5jZVRvQ3Vyc29yLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5iaW5kRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIH1cclxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuaGFuZGxlRG9jdW1lbnRNb3VzZU1vdmUpO1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLmhhbmRsZURvY3VtZW50TW91c2VVcCk7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVEb2N1bWVudE1vdXNlVXAoKSB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xyXG4gICAgfVxyXG4gICAgYmluZEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuaGFuZGxlRG9jdW1lbnRNb3VzZU1vdmUpO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLmhhbmRsZURvY3VtZW50TW91c2VVcCk7XHJcbiAgICB9XHJcbn07XHJcbk1vdmVtZW50ID0gX19kZWNvcmF0ZShbXHJcbiAgICBhdXRvYmluZF9kZWNvcmF0b3JfMS5kZWZhdWx0XHJcbl0sIE1vdmVtZW50KTtcclxuZXhwb3J0cy5Nb3ZlbWVudCA9IE1vdmVtZW50O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBIYW5kbGVzXzEgPSByZXF1aXJlKFwiLi4vSGFuZGxlcy9IYW5kbGVzXCIpO1xyXG5jb25zdCBNb3ZlbWVudF8xID0gcmVxdWlyZShcIi4vTW92ZW1lbnRcIik7XHJcbmNvbnN0IFNlbGVjdGVkSW50ZXJ2YWxfMSA9IHJlcXVpcmUoXCIuLi9TZWxlY3RlZEludGVydmFsL1NlbGVjdGVkSW50ZXJ2YWxcIik7XHJcbmNvbnN0IFNsaWRlcl8xID0gcmVxdWlyZShcIi4uL1NsaWRlci9TbGlkZXJcIik7XHJcbmRlc2NyaWJlKCdNb3ZlbWVudCcsICgpID0+IHtcclxuICAgIGxldCBtb3ZlbWVudDtcclxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBtb3ZlbWVudCA9IG5ldyBNb3ZlbWVudF8xLk1vdmVtZW50KHtcclxuICAgICAgICAgICAgYmFzaWNTZXR0aW5nczoge1xyXG4gICAgICAgICAgICAgICAgJ3NpZGUtbWVudSc6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBkb3VibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVzVmFsdWVzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgc3RlcDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZVNjYWxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdmVydGljYWw6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaW50ZWdlcjogdHJ1ZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZnJvbUhhbmRsZTogbmV3IEhhbmRsZXNfMS5IYW5kbGVzKCkuZnJvbUhhbmRsZSxcclxuICAgICAgICAgICAgdG9IYW5kbGU6IG5ldyBIYW5kbGVzXzEuSGFuZGxlcygpLnRvSGFuZGxlLFxyXG4gICAgICAgICAgICBzbGlkZXI6IG5ldyBTbGlkZXJfMS5TbGlkZXIoKS5zbGlkZXIsXHJcbiAgICAgICAgICAgIGludGVydmFsOiBuZXcgU2VsZWN0ZWRJbnRlcnZhbF8xLlNlbGVjdGVkSW50ZXJ2YWwoKS5pbnRlcnZhbCxcclxuICAgICAgICB9KTtcclxuICAgICAgICBtb3ZlbWVudC5wb3NpdGlvbnMgPSB7IGZyb206IDMwLCB0bzogNzAgfTtcclxuICAgICAgICAoX2EgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JykpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hcHBlbmQobW92ZW1lbnQuc2xpZGVyLCBtb3ZlbWVudC5mcm9tLCBtb3ZlbWVudC50byk7XHJcbiAgICAgICAgbW92ZW1lbnQuc2xpZGVyLnN0eWxlLndpZHRoID0gJzEyMHB4JztcclxuICAgICAgICBtb3ZlbWVudC5mcm9tLnN0eWxlLndpZHRoID0gJzIwcHgnO1xyXG4gICAgICAgIG1vdmVtZW50LnRvLnN0eWxlLndpZHRoID0gJzIwcHgnO1xyXG4gICAgICAgIG1vdmVtZW50LnNsaWRlci5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgICAgbW92ZW1lbnQuc2xpZGVyLnN0eWxlLmxlZnQgPSAnMHB4JztcclxuICAgICAgICBtb3ZlbWVudC5zbGlkZXIuc3R5bGUudG9wID0gJzBweCc7XHJcbiAgICAgICAgbW92ZW1lbnQuZnJvbS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgICAgbW92ZW1lbnQuZnJvbS5zdHlsZS5sZWZ0ID0gJzBweCc7XHJcbiAgICAgICAgbW92ZW1lbnQuZnJvbS5zdHlsZS50b3AgPSAnMHB4JztcclxuICAgICAgICBtb3ZlbWVudC50by5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgICAgbW92ZW1lbnQudG8uc3R5bGUubGVmdCA9ICcwcHgnO1xyXG4gICAgICAgIG1vdmVtZW50LnRvLnN0eWxlLnRvcCA9ICcwcHgnO1xyXG4gICAgfSk7XHJcbiAgICBhZnRlckVhY2goKCkgPT4ge1xyXG4gICAgICAgIG1vdmVtZW50LnNsaWRlci5yZW1vdmUoKTtcclxuICAgICAgICBtb3ZlbWVudC5mcm9tLnJlbW92ZSgpO1xyXG4gICAgICAgIG1vdmVtZW50LnRvLnJlbW92ZSgpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnTW92ZW1lbnQgY2FuIGJlIGNyZWF0ZScsICgpID0+IHtcclxuICAgICAgICBleHBlY3QobW92ZW1lbnQpLnRvQmVUcnV0aHkoKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ2hhbmRlbExpc3RlbmVyKCkgbW92ZSBmcm9tIGFuZCBpbnRlcnZhbCB0byAnXHJcbiAgICAgICAgKyAncG9zaXRpb24gYmlnZ2VyIHRoYW4gcmlnaHQgZWRnZSBhbmQgcmVjb3JkIHRoZSBwb3NpdGlvbiBhZnRlciBmaXhpbmcnLCAoKSA9PiB7XHJcbiAgICAgICAgbW92ZW1lbnQuc2V0dGluZ3MuZG91YmxlID0gZmFsc2U7XHJcbiAgICAgICAgbW92ZW1lbnQuaGFuZGxlTGlzdGVuZXIoeyBldmVudEluZm86IHsgdGFyZ2V0OiBtb3ZlbWVudC5mcm9tLCB4OiA1MCwgeTogMCB9LCB0ZXN0OiB7IHg6IDIwMCwgeTogMCB9IH0pO1xyXG4gICAgICAgIGV4cGVjdChtb3ZlbWVudC5mcm9tLnN0eWxlLmxlZnQpLnRvRXF1YWwoJzEwMHB4Jyk7XHJcbiAgICAgICAgZXhwZWN0KG1vdmVtZW50LmludGVydmFsLnN0eWxlLmxlZnQpLnRvRXF1YWwoJzExMHB4Jyk7XHJcbiAgICAgICAgZXhwZWN0KG1vdmVtZW50LnBvc2l0aW9ucy5mcm9tKS50b0VxdWFsKDEwMCk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdoYW5kZWxMaXN0ZW5lcigpIG1vdmUgZnJvbSBhbmQgaW50ZXJ2YWwgdG8gcG9zaXRpb24gbGVzcyB0aGFuIGxlZnQgZWRnZSdcclxuICAgICAgICArICcgYW5kIHJlY29yZCB0aGUgcG9zaXRpb24gYWZ0ZXIgZml4aW5nJywgKCkgPT4ge1xyXG4gICAgICAgIG1vdmVtZW50LnNldHRpbmdzLmRvdWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIG1vdmVtZW50LmhhbmRsZUxpc3RlbmVyKHsgZXZlbnRJbmZvOiB7IHRhcmdldDogbW92ZW1lbnQuZnJvbSwgeDogNTAsIHk6IDAgfSwgdGVzdDogeyB4OiAtMTAwLCB5OiAwIH0gfSk7XHJcbiAgICAgICAgZXhwZWN0KG1vdmVtZW50LmZyb20uc3R5bGUubGVmdCkudG9FcXVhbCgnMHB4Jyk7XHJcbiAgICAgICAgZXhwZWN0KG1vdmVtZW50LmludGVydmFsLnN0eWxlLmxlZnQpLnRvRXF1YWwoJzEwcHgnKTtcclxuICAgICAgICBleHBlY3QobW92ZW1lbnQucG9zaXRpb25zLmZyb20pLnRvRXF1YWwoMCk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdoYW5kZWxMaXN0ZW5lcigpIG1vdmUgZnJvbSBhbmQgaW50ZXJ2YWwgdG8gcG9zaXRpb24gYmlnZ2VyIHRoYW4gdG8gcG9zaXRpb24nXHJcbiAgICAgICAgKyAnIGFuZCByZWNvcmQgdGhlIHBvc2l0aW9uIGFmdGVyIGZpeGluZycsICgpID0+IHtcclxuICAgICAgICBtb3ZlbWVudC5oYW5kbGVMaXN0ZW5lcih7IGV2ZW50SW5mbzogeyB0YXJnZXQ6IG1vdmVtZW50LmZyb20sIHg6IDUwLCB5OiAwIH0sIHRlc3Q6IHsgeDogMjAwLCB5OiAwIH0gfSk7XHJcbiAgICAgICAgZXhwZWN0KG1vdmVtZW50LmZyb20uc3R5bGUubGVmdCkudG9FcXVhbCgnNTBweCcpO1xyXG4gICAgICAgIGV4cGVjdChtb3ZlbWVudC5pbnRlcnZhbC5zdHlsZS5sZWZ0KS50b0VxdWFsKCc2MHB4Jyk7XHJcbiAgICAgICAgZXhwZWN0KG1vdmVtZW50LnBvc2l0aW9ucy5mcm9tKS50b0VxdWFsKDUwKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ2NvcnJlY3RzSW1wb3NzaWJsZVBvc2l0aW9uKCkgZml4IHZhbHVlIHNtYWxsZXIgdGhlbiBmcm9tIGNvcnJlY3RseScsICgpID0+IHtcclxuICAgICAgICBtb3ZlbWVudC5kYXRhRm9yTW92ZW1lbnQudGFyZ2V0ID0gbW92ZW1lbnQudG87XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbW92ZW1lbnQuY29ycmVjdHNJbXBvc3NpYmxlUG9zaXRpb24oMTAwLCAyMCk7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCg1MCk7XHJcbiAgICB9KTtcclxufSk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuU2VsZWN0ZWRJbnRlcnZhbCA9IHZvaWQgMDtcclxuY29uc3QgYXV0b2JpbmRfZGVjb3JhdG9yXzEgPSByZXF1aXJlKFwiYXV0b2JpbmQtZGVjb3JhdG9yXCIpO1xyXG5sZXQgU2VsZWN0ZWRJbnRlcnZhbCA9IGNsYXNzIFNlbGVjdGVkSW50ZXJ2YWwge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5pbnRlcnZhbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRoaXMuaW50ZXJ2YWwuY2xhc3NMaXN0LmFkZCgnZ29ieS1zbGlkZXJfX2ludGVydmFsJyk7XHJcbiAgICAgICAgdGhpcy5pbnRlcnZhbC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2Rpc3BsYXk6IGJsb2NrJyk7XHJcbiAgICB9XHJcbiAgICBhZGp1c3RQb3NpdGlvblJlbGF0aXZlVmFsdWUoZGF0YVRvUmVmcmVzaCkge1xyXG4gICAgICAgIGlmIChkYXRhVG9SZWZyZXNoLnRhcmdldCA9PT0gJ2Zyb20nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWwuc3R5bGUubGVmdCA9IGAke051bWJlcihkYXRhVG9SZWZyZXNoLnBvc2l0aW9uKSArIChkYXRhVG9SZWZyZXNoLmhhbmRsZVdpZHRoIC8gMil9cHhgO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5pbnRlcnZhbC5zdHlsZS5yaWdodCA9IGAke2RhdGFUb1JlZnJlc2guc2xpZGVyV2lkdGggLSBOdW1iZXIoZGF0YVRvUmVmcmVzaC5wb3NpdGlvbilcclxuICAgICAgICAgICAgICAgICsgKGRhdGFUb1JlZnJlc2guaGFuZGxlV2lkdGggLyAyKX1weGA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2hlY2tJc0ludGVydmFsTmVlZEhpZGUoaXNEb3VibGUpIHtcclxuICAgICAgICByZXR1cm4gKCFpc0RvdWJsZSkgJiYgKHRoaXMuaW50ZXJ2YWwuc3R5bGUuZGlzcGxheSA9PT0gJ2Jsb2NrJyk7XHJcbiAgICB9XHJcbiAgICBjaGVja0lzSW50ZXJ2YWxOZWVkU2hvdyhpc0RvdWJsZSkge1xyXG4gICAgICAgIHJldHVybiAoaXNEb3VibGUpICYmICh0aGlzLmludGVydmFsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyk7XHJcbiAgICB9XHJcbiAgICBoaWRlU2VsZWN0ZWRJbnRlcnZhbChzZXR0aW5ncykge1xyXG4gICAgICAgIGNvbnN0IHsgaXNEb3VibGUsIGhhbmRsZVdpZHRoIH0gPSBzZXR0aW5ncztcclxuICAgICAgICBzd2l0Y2ggKHRydWUpIHtcclxuICAgICAgICAgICAgY2FzZSB0aGlzLmNoZWNrSXNJbnRlcnZhbE5lZWRIaWRlKGlzRG91YmxlKTpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIHRoaXMuY2hlY2tJc0ludGVydmFsTmVlZFNob3coaXNEb3VibGUpOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlcnZhbC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWwuc3R5bGUucmlnaHQgPSBgJHtoYW5kbGVXaWR0aCAvIDJ9cHhgO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcblNlbGVjdGVkSW50ZXJ2YWwgPSBfX2RlY29yYXRlKFtcclxuICAgIGF1dG9iaW5kX2RlY29yYXRvcl8xLmRlZmF1bHRcclxuXSwgU2VsZWN0ZWRJbnRlcnZhbCk7XHJcbmV4cG9ydHMuU2VsZWN0ZWRJbnRlcnZhbCA9IFNlbGVjdGVkSW50ZXJ2YWw7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IFNlbGVjdGVkSW50ZXJ2YWxfMSA9IHJlcXVpcmUoXCIuL1NlbGVjdGVkSW50ZXJ2YWxcIik7XHJcbmRlc2NyaWJlKCdTZWxlY3RlZEludGVydmFsJywgKCkgPT4ge1xyXG4gICAgbGV0IGludGVydmFsO1xyXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICAgICAgaW50ZXJ2YWwgPSBuZXcgU2VsZWN0ZWRJbnRlcnZhbF8xLlNlbGVjdGVkSW50ZXJ2YWwoKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ0ludGVydmFsIGNhbCBiZSBjcmVhdGVkJywgKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChpbnRlcnZhbCkudG9CZVRydXRoeSgpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnYWRqdXN0UG9zaXRpb25SZWxhdGl2ZVZhbHVlKCkgYWRqdXN0IHBvc2l0aW9uIGNvcnJlY3RseSBmb3IgbGVmdCBzaWRlJywgKCkgPT4ge1xyXG4gICAgICAgIGludGVydmFsLmFkanVzdFBvc2l0aW9uUmVsYXRpdmVWYWx1ZSh7XHJcbiAgICAgICAgICAgIHRhcmdldDogJ2Zyb20nLFxyXG4gICAgICAgICAgICBwb3NpdGlvbjogJzUwJyxcclxuICAgICAgICAgICAgaGFuZGxlV2lkdGg6IDIwLFxyXG4gICAgICAgICAgICBzbGlkZXJXaWR0aDogMTIwLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGV4cGVjdChpbnRlcnZhbC5pbnRlcnZhbC5zdHlsZS5sZWZ0KS50b0VxdWFsKCc2MHB4Jyk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdhZGp1c3RQb3NpdGlvblJlbGF0aXZlVmFsdWUoKSBhZGp1c3QgcG9zaXRpb24gY29ycmVjdGx5IGZvciByaWdodCBzaWRlJywgKCkgPT4ge1xyXG4gICAgICAgIGludGVydmFsLmFkanVzdFBvc2l0aW9uUmVsYXRpdmVWYWx1ZSh7XHJcbiAgICAgICAgICAgIHRhcmdldDogJ3RvJyxcclxuICAgICAgICAgICAgcG9zaXRpb246ICc1MCcsXHJcbiAgICAgICAgICAgIGhhbmRsZVdpZHRoOiAyMCxcclxuICAgICAgICAgICAgc2xpZGVyV2lkdGg6IDEwMCxcclxuICAgICAgICB9KTtcclxuICAgICAgICBleHBlY3QoaW50ZXJ2YWwuaW50ZXJ2YWwuc3R5bGUucmlnaHQpLnRvRXF1YWwoJzYwcHgnKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ2hpZGVTZWxlY3RlZEludGVydmFsKCkgb3BlcmF0ZXMgdGhlIGRpc3BsYXkgZnVuY3Rpb24gY29ycmVjdGx5JywgKCkgPT4ge1xyXG4gICAgICAgIGludGVydmFsLmhpZGVTZWxlY3RlZEludGVydmFsKHsgaXNEb3VibGU6IGZhbHNlLCBoYW5kbGVXaWR0aDogMjAgfSk7XHJcbiAgICAgICAgZXhwZWN0KGludGVydmFsLmludGVydmFsLnN0eWxlLmRpc3BsYXkpLnRvRXF1YWwoJ25vbmUnKTtcclxuICAgICAgICBpbnRlcnZhbC5oaWRlU2VsZWN0ZWRJbnRlcnZhbCh7IGlzRG91YmxlOiB0cnVlLCBoYW5kbGVXaWR0aDogMjAgfSk7XHJcbiAgICAgICAgZXhwZWN0KGludGVydmFsLmludGVydmFsLnN0eWxlLmRpc3BsYXkpLnRvRXF1YWwoJ2Jsb2NrJyk7XHJcbiAgICAgICAgZXhwZWN0KGludGVydmFsLmludGVydmFsLnN0eWxlLnJpZ2h0KS50b0VxdWFsKCcxMHB4Jyk7XHJcbiAgICB9KTtcclxufSk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuU2lkZU1lbnUgPSB2b2lkIDA7XHJcbmNsYXNzIFNpZGVNZW51IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuaXNJbnB1dENoYW5nZXMgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMgPSB7fTtcclxuICAgICAgICB0aGlzLmluaXRpYWxpemVTaWRlTWVudSgpO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlT3V0cHV0cygpIHtcclxuICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMuY3VycmVudFZhbHVlc1dyYXBwZXIgPSBTaWRlTWVudS5jcmVhdGVFbGVtZW50KHtcclxuICAgICAgICAgICAgbmFtZTogJ2RpdicsXHJcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnZ29ieS1zaWRlLW1lbnVfX2l0ZW0td3JhcHBlciddLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnVFbGVtZW50cy5jdXJyZW50VmFsdWVzT2JqZWN0aXZlID0gU2lkZU1lbnUuY3JlYXRlRWxlbWVudCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdzcGFuJyxcclxuICAgICAgICAgICAgY3NzQ2xhc3NlczogWydnb2J5LXNpZGUtbWVudV9faXRlbS1vYmplY3RpdmUnXSxcclxuICAgICAgICAgICAgdGV4dDogJ9Ci0LXQutGD0YnQtdC1INC30LDQvdGH0LXQvdC40LU6ICcsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zaWRlTWVudUVsZW1lbnRzLmZyb21PdXRwdXQgPSBTaWRlTWVudS5jcmVhdGVFbGVtZW50KHtcclxuICAgICAgICAgICAgbmFtZTogJ291dHB1dCcsXHJcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnZ29ieS1zaWRlLW1lbnVfX3ZhbHVlJywgJ2dvYnktc2lkZS1tZW51X192YWx1ZV90eXBlX2Zyb20nXSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMudG9PdXRwdXQgPSBTaWRlTWVudS5jcmVhdGVFbGVtZW50KHtcclxuICAgICAgICAgICAgbmFtZTogJ291dHB1dCcsXHJcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnZ29ieS1zaWRlLW1lbnVfX3ZhbHVlJywgJ2dvYnktc2lkZS1tZW51X192YWx1ZV90eXBlX3RvJ10sXHJcbiAgICAgICAgICAgIGF0dHI6IHsgbmFtZTogJ3N0eWxlJywgdmFsdWU6ICdkaXNwbGF5OiBpbmxpbmUnIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjcmVhdGVXcmFwcGVycygpIHtcclxuICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMudG9XcmFwcGVyID0gU2lkZU1lbnUuY3JlYXRlRWxlbWVudCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdkaXYnLFxyXG4gICAgICAgICAgICBjc3NDbGFzc2VzOiBbJ2dvYnktc2lkZS1tZW51X19pdGVtLXdyYXBwZXInXSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMudG9Ub2dnbGVXcmFwcGVyID0gU2lkZU1lbnUuY3JlYXRlRWxlbWVudCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdsYWJlbCcsXHJcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnZ29ieS1zaWRlLW1lbnVfX2l0ZW0tdG9nZ2xlLXdyYXBwZXInXSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMuaW5wdXRXcmFwcGVyID0gU2lkZU1lbnUuY3JlYXRlRWxlbWVudCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdkaXYnLFxyXG4gICAgICAgICAgICBjc3NDbGFzc2VzOiBbJ2dvYnktc2lkZS1tZW51X19pdGVtLXdyYXBwZXInXSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMuZnJvbUlucHV0V3JhcHBlciA9IFNpZGVNZW51LmNyZWF0ZUVsZW1lbnQoe1xyXG4gICAgICAgICAgICBuYW1lOiAnbGFiZWwnLFxyXG4gICAgICAgICAgICBjc3NDbGFzc2VzOiBbJ2dvYnktc2lkZS1tZW51X19pbnB1dC13cmFwcGVyJ10sXHJcbiAgICAgICAgICAgIHRleHQ6ICfQntGCOiAnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnVFbGVtZW50cy5zdGVwSW5wdXRXcmFwcGVyID0gU2lkZU1lbnUuY3JlYXRlRWxlbWVudCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdsYWJlbCcsXHJcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnZ29ieS1zaWRlLW1lbnVfX2lucHV0LXdyYXBwZXInXSxcclxuICAgICAgICAgICAgdGV4dDogJ9Co0LDQszogJyxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMubWluSW5wdXRXcmFwcGVyID0gU2lkZU1lbnUuY3JlYXRlRWxlbWVudCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdsYWJlbCcsXHJcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnZ29ieS1zaWRlLW1lbnVfX2lucHV0LXdyYXBwZXInXSxcclxuICAgICAgICAgICAgdGV4dDogJ9Cc0LjQvTogJyxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMubWF4SW5wdXRXcmFwcGVyID0gU2lkZU1lbnUuY3JlYXRlRWxlbWVudCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdsYWJlbCcsXHJcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnZ29ieS1zaWRlLW1lbnVfX2lucHV0LXdyYXBwZXInXSxcclxuICAgICAgICAgICAgdGV4dDogJ9Cc0LDQutGBOiAnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnVFbGVtZW50cy50b0lucHV0V3JhcHBlciA9IFNpZGVNZW51LmNyZWF0ZUVsZW1lbnQoe1xyXG4gICAgICAgICAgICBuYW1lOiAnbGFiZWwnLFxyXG4gICAgICAgICAgICBjc3NDbGFzc2VzOiBbJ2dvYnktc2lkZS1tZW51X19pbnB1dC13cmFwcGVyJ10sXHJcbiAgICAgICAgICAgIHRleHQ6ICfQlNC+OiAnLFxyXG4gICAgICAgICAgICBhdHRyOiB7IG5hbWU6ICdzdHlsZScsIHZhbHVlOiAnZGlzcGxheTogYmxvY2snIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zaWRlTWVudUVsZW1lbnRzLmhhbmRsZVZhbHVlc1dyYXBwZXIgPSBTaWRlTWVudS5jcmVhdGVFbGVtZW50KHtcclxuICAgICAgICAgICAgbmFtZTogJ2RpdicsXHJcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnZ29ieS1zaWRlLW1lbnVfX2l0ZW0td3JhcHBlciddLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnVFbGVtZW50cy52YWx1ZVNjYWxlV3JhcHBlciA9IFNpZGVNZW51LmNyZWF0ZUVsZW1lbnQoe1xyXG4gICAgICAgICAgICBuYW1lOiAnZGl2JyxcclxuICAgICAgICAgICAgY3NzQ2xhc3NlczogWydnb2J5LXNpZGUtbWVudV9faXRlbS13cmFwcGVyJ10sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zaWRlTWVudUVsZW1lbnRzLnBsYW5lV3JhcHBlciA9IFNpZGVNZW51LmNyZWF0ZUVsZW1lbnQoe1xyXG4gICAgICAgICAgICBuYW1lOiAnZGl2JyxcclxuICAgICAgICAgICAgY3NzQ2xhc3NlczogWydnb2J5LXNpZGUtbWVudV9faXRlbS13cmFwcGVyJ10sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zaWRlTWVudUVsZW1lbnRzLmludGVnZXJXcmFwcGVyID0gU2lkZU1lbnUuY3JlYXRlRWxlbWVudCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdkaXYnLFxyXG4gICAgICAgICAgICBjc3NDbGFzc2VzOiBbJ2dvYnktc2lkZS1tZW51X19pdGVtLXdyYXBwZXInXSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCBsYWJlbEVsZW1lbnQgPSB0aGlzLnNpZGVNZW51RWxlbWVudHMudG9Ub2dnbGVXcmFwcGVyLmNsb25lTm9kZSgpO1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnVFbGVtZW50cy5oYW5kbGVWYWx1ZXNUb2dnbGVXcmFwcGVyID0gbGFiZWxFbGVtZW50LmNsb25lTm9kZSgpO1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnVFbGVtZW50cy52YWx1ZVNjYWxlVG9nZ2xlV3JhcHBlciA9IGxhYmVsRWxlbWVudC5jbG9uZU5vZGUoKTtcclxuICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMucGxhbmVUb2dnbGVXcmFwcGVyID0gbGFiZWxFbGVtZW50LmNsb25lTm9kZSgpO1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnVFbGVtZW50cy5pbnRlZ2VyVG9nZ2xlV3JhcHBlciA9IGxhYmVsRWxlbWVudC5jbG9uZU5vZGUoKTtcclxuICAgIH1cclxuICAgIGNyZWF0ZUlucHV0cygpIHtcclxuICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMuaW5wdXRPYmplY3RpdmUgPSBTaWRlTWVudS5jcmVhdGVFbGVtZW50KHtcclxuICAgICAgICAgICAgbmFtZTogJ3NwYW4nLFxyXG4gICAgICAgICAgICBjc3NDbGFzc2VzOiBbJ2dvYnktc2lkZS1tZW51X19pdGVtLW9iamVjdGl2ZSddLFxyXG4gICAgICAgICAgICB0ZXh0OiAn0JjQt9C80LXQvdC40YLRjCDQt9C90LDRh9C10L3QuNC1OiAnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnVFbGVtZW50cy5mcm9tSW5wdXQgPSBTaWRlTWVudS5jcmVhdGVFbGVtZW50KHtcclxuICAgICAgICAgICAgbmFtZTogJ2lucHV0JyxcclxuICAgICAgICAgICAgY3NzQ2xhc3NlczogWydnb2J5LXNpZGUtbWVudV9faW5wdXQnXSxcclxuICAgICAgICAgICAgYXR0cjogeyBuYW1lOiAndHlwZScsIHZhbHVlOiAnbnVtYmVyJyB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnVFbGVtZW50cy50b0lucHV0ID0gU2lkZU1lbnUuY3JlYXRlRWxlbWVudCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdpbnB1dCcsXHJcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnZ29ieS1zaWRlLW1lbnVfX2lucHV0J10sXHJcbiAgICAgICAgICAgIGF0dHI6IHsgbmFtZTogJ3R5cGUnLCB2YWx1ZTogJ251bWJlcicgfSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMuc3RlcElucHV0ID0gU2lkZU1lbnUuY3JlYXRlRWxlbWVudCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdpbnB1dCcsXHJcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnZ29ieS1zaWRlLW1lbnVfX2lucHV0J10sXHJcbiAgICAgICAgICAgIGF0dHI6IHsgbmFtZTogJ3R5cGUnLCB2YWx1ZTogJ251bWJlcicgfSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMubWluaW11bUlucHV0ID0gU2lkZU1lbnUuY3JlYXRlRWxlbWVudCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdpbnB1dCcsXHJcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnZ29ieS1zaWRlLW1lbnVfX2lucHV0J10sXHJcbiAgICAgICAgICAgIGF0dHI6IHsgbmFtZTogJ3R5cGUnLCB2YWx1ZTogJ251bWJlcicgfSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMubWF4aW11bUlucHV0ID0gU2lkZU1lbnUuY3JlYXRlRWxlbWVudCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdpbnB1dCcsXHJcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnZ29ieS1zaWRlLW1lbnVfX2lucHV0J10sXHJcbiAgICAgICAgICAgIGF0dHI6IHsgbmFtZTogJ3R5cGUnLCB2YWx1ZTogJ251bWJlcicgfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGNyZWF0ZVRvZ2dsZXMoKSB7XHJcbiAgICAgICAgdGhpcy5zaWRlTWVudUVsZW1lbnRzLnRvVG9nZ2xlT2JqZWN0aXZlID0gU2lkZU1lbnUuY3JlYXRlRWxlbWVudCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdzcGFuJyxcclxuICAgICAgICAgICAgY3NzQ2xhc3NlczogWydnb2J5LXNpZGUtbWVudV9faXRlbS1vYmplY3RpdmUnXSxcclxuICAgICAgICAgICAgdGV4dDogJ9CS0LrQu9GO0YfQuNGC0Ywg0LLRgtC+0YDQvtC5INC/0L7Qu9C30YPQvdC+0Lo6ICcsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zaWRlTWVudUVsZW1lbnRzLnRvVG9nZ2xlID0gU2lkZU1lbnUuY3JlYXRlRWxlbWVudCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdpbnB1dCcsXHJcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnZ29ieS1zaWRlLW1lbnVfX2l0ZW0tdG9nZ2xlJ10sXHJcbiAgICAgICAgICAgIGF0dHI6IHsgbmFtZTogJ3R5cGUnLCB2YWx1ZTogJ2NoZWNrYm94JyB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IHRoaXMuc2lkZU1lbnVFbGVtZW50cy50b1RvZ2dsZS5jbG9uZU5vZGUoKTtcclxuICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMuaGFuZGxlVmFsdWVzVG9nZ2xlID0gaW5wdXRFbGVtZW50LmNsb25lTm9kZSgpO1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnVFbGVtZW50cy52YWx1ZVNjYWxlVG9nZ2xlID0gaW5wdXRFbGVtZW50LmNsb25lTm9kZSgpO1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnVFbGVtZW50cy5pbnRlZ2VyVG9nZ2xlID0gaW5wdXRFbGVtZW50LmNsb25lTm9kZSgpO1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnVFbGVtZW50cy50b1RvZ2dsZUJvcmRlciA9IFNpZGVNZW51LmNyZWF0ZUVsZW1lbnQoe1xyXG4gICAgICAgICAgICBuYW1lOiAnc3BhbicsXHJcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnZ29ieS1zaWRlLW1lbnVfX2l0ZW0tdG9nZ2xlLWJvcmRlciddLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnVFbGVtZW50cy5oYW5kbGVWYWx1ZXNUb2dnbGVCb3JkZXIgPSBTaWRlTWVudS5jcmVhdGVFbGVtZW50KHtcclxuICAgICAgICAgICAgbmFtZTogJ3NwYW4nLFxyXG4gICAgICAgICAgICBjc3NDbGFzc2VzOiBbJ2dvYnktc2lkZS1tZW51X19pdGVtLXRvZ2dsZS1ib3JkZXInXSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMudmFsdWVTY2FsZVRvZ2dsZUJvcmRlciA9IFNpZGVNZW51LmNyZWF0ZUVsZW1lbnQoe1xyXG4gICAgICAgICAgICBuYW1lOiAnc3BhbicsXHJcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnZ29ieS1zaWRlLW1lbnVfX2l0ZW0tdG9nZ2xlLWJvcmRlciddLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnVFbGVtZW50cy5pbnRlZ2VyVG9nZ2xlQm9yZGVyID0gU2lkZU1lbnUuY3JlYXRlRWxlbWVudCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdzcGFuJyxcclxuICAgICAgICAgICAgY3NzQ2xhc3NlczogWydnb2J5LXNpZGUtbWVudV9faXRlbS10b2dnbGUtYm9yZGVyJ10sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zaWRlTWVudUVsZW1lbnRzLnBsYW5lVG9nZ2xlID0gU2lkZU1lbnUuY3JlYXRlRWxlbWVudCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdpbnB1dCcsXHJcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnZ29ieS1zaWRlLW1lbnVfX2l0ZW0tdG9nZ2xlJ10sXHJcbiAgICAgICAgICAgIGF0dHI6IHsgbmFtZTogJ3R5cGUnLCB2YWx1ZTogJ2NoZWNrYm94JyB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnVFbGVtZW50cy5wbGFuZVRvZ2dsZUJvcmRlciA9IFNpZGVNZW51LmNyZWF0ZUVsZW1lbnQoe1xyXG4gICAgICAgICAgICBuYW1lOiAnc3BhbicsXHJcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnZ29ieS1zaWRlLW1lbnVfX2l0ZW0tdG9nZ2xlLWJvcmRlciddLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlT2JqZWN0aXZlcygpIHtcclxuICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMuaGFuZGxlVmFsdWVzT2JqZWN0aXZlID0gU2lkZU1lbnUuY3JlYXRlRWxlbWVudCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdzcGFuJyxcclxuICAgICAgICAgICAgY3NzQ2xhc3NlczogWydnb2J5LXNpZGUtbWVudV9faXRlbS1vYmplY3RpdmUnXSxcclxuICAgICAgICAgICAgdGV4dDogJ9CS0LrQu9GO0YfQuNGC0Ywg0LfQvdCw0YfQtdC90LjRjyDQv9C+0LQg0L/QvtC70LfRg9C90LrQsNC80Lg6ICcsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zaWRlTWVudUVsZW1lbnRzLnZhbHVlU2NhbGVPYmplY3RpdmUgPSBTaWRlTWVudS5jcmVhdGVFbGVtZW50KHtcclxuICAgICAgICAgICAgbmFtZTogJ3NwYW4nLFxyXG4gICAgICAgICAgICBjc3NDbGFzc2VzOiBbJ2dvYnktc2lkZS1tZW51X19pdGVtLW9iamVjdGl2ZSddLFxyXG4gICAgICAgICAgICB0ZXh0OiAn0JLQutC70Y7Rh9C40YLRjCDRiNC60LDQu9GDINC30L3QsNGH0LXQvdC40Lk6ICcsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zaWRlTWVudUVsZW1lbnRzLnBsYW5lT2JqZWN0aXZlID0gU2lkZU1lbnUuY3JlYXRlRWxlbWVudCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdzcGFuJyxcclxuICAgICAgICAgICAgY3NzQ2xhc3NlczogWydnb2J5LXNpZGUtbWVudV9faXRlbS1vYmplY3RpdmUnXSxcclxuICAgICAgICAgICAgdGV4dDogJ9CY0LfQvNC10L3QuNGC0Ywg0L/Qu9C+0YHQutC+0YHRgtGMOiAnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnVFbGVtZW50cy5pbnRlZ2VyT2JqZWN0aXZlID0gU2lkZU1lbnUuY3JlYXRlRWxlbWVudCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdzcGFuJyxcclxuICAgICAgICAgICAgY3NzQ2xhc3NlczogWydnb2J5LXNpZGUtbWVudV9faXRlbS1vYmplY3RpdmUnXSxcclxuICAgICAgICAgICAgdGV4dDogJ9Ci0L7Qu9GM0LrQviDRhtC10LvRi9C1INGH0LjRgdC70LA6ICcsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpbml0aWFsaXplU2lkZU1lbnUoKSB7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVPdXRwdXRzKCk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVXcmFwcGVycygpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlSW5wdXRzKCk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVUb2dnbGVzKCk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVPYmplY3RpdmVzKCk7XHJcbiAgICAgICAgdGhpcy5zaWRlTWVudUVsZW1lbnRzLnNpZGVNZW51Q29udGFpbmVyID0gU2lkZU1lbnUuY3JlYXRlRWxlbWVudCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdkaXYnLFxyXG4gICAgICAgICAgICBjc3NDbGFzc2VzOiBbJ2dvYnktc2lkZS1tZW51J10sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgY3JlYXRlRWxlbWVudChlbGVtZW50UGFyYW1zKSB7XHJcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWxlbWVudFBhcmFtcy5uYW1lKTtcclxuICAgICAgICBlbGVtZW50UGFyYW1zLmNzc0NsYXNzZXMuZm9yRWFjaCgoY3NzQ2xhc3MpID0+IHtcclxuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNzc0NsYXNzKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoZWxlbWVudFBhcmFtcy50ZXh0KVxyXG4gICAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gZWxlbWVudFBhcmFtcy50ZXh0O1xyXG4gICAgICAgIGlmIChlbGVtZW50UGFyYW1zLmF0dHIpXHJcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGVsZW1lbnRQYXJhbXMuYXR0ci5uYW1lLCBlbGVtZW50UGFyYW1zLmF0dHIudmFsdWUpO1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgfVxyXG4gICAgd3JhcHNPdXRwdXRzKCkge1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnVFbGVtZW50cy5jdXJyZW50VmFsdWVzV3JhcHBlci5hcHBlbmQodGhpcy5zaWRlTWVudUVsZW1lbnRzLmN1cnJlbnRWYWx1ZXNPYmplY3RpdmUsIHRoaXMuc2lkZU1lbnVFbGVtZW50cy5mcm9tT3V0cHV0LCB0aGlzLnNpZGVNZW51RWxlbWVudHMudG9PdXRwdXQpO1xyXG4gICAgfVxyXG4gICAgd3JhcHNFbGVtZW50c0luV3JhcHBlcnMoKSB7XHJcbiAgICAgICAgdGhpcy5zaWRlTWVudUVsZW1lbnRzLmZyb21JbnB1dFdyYXBwZXIuYXBwZW5kKHRoaXMuc2lkZU1lbnVFbGVtZW50cy5mcm9tSW5wdXQpO1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnVFbGVtZW50cy50b0lucHV0V3JhcHBlci5hcHBlbmQodGhpcy5zaWRlTWVudUVsZW1lbnRzLnRvSW5wdXQpO1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnVFbGVtZW50cy5zdGVwSW5wdXRXcmFwcGVyLmFwcGVuZCh0aGlzLnNpZGVNZW51RWxlbWVudHMuc3RlcElucHV0KTtcclxuICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMubWluSW5wdXRXcmFwcGVyLmFwcGVuZCh0aGlzLnNpZGVNZW51RWxlbWVudHMubWluaW11bUlucHV0KTtcclxuICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMubWF4SW5wdXRXcmFwcGVyLmFwcGVuZCh0aGlzLnNpZGVNZW51RWxlbWVudHMubWF4aW11bUlucHV0KTtcclxuICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMuaW5wdXRXcmFwcGVyLmFwcGVuZCh0aGlzLnNpZGVNZW51RWxlbWVudHMuaW5wdXRPYmplY3RpdmUsIHRoaXMuc2lkZU1lbnVFbGVtZW50cy5mcm9tSW5wdXRXcmFwcGVyLCB0aGlzLnNpZGVNZW51RWxlbWVudHMudG9JbnB1dFdyYXBwZXIsIHRoaXMuc2lkZU1lbnVFbGVtZW50cy5zdGVwSW5wdXRXcmFwcGVyLCB0aGlzLnNpZGVNZW51RWxlbWVudHMubWluSW5wdXRXcmFwcGVyLCB0aGlzLnNpZGVNZW51RWxlbWVudHMubWF4SW5wdXRXcmFwcGVyKTtcclxuICAgIH1cclxuICAgIHdyYXBzVG9Ub2dnbGUoKSB7XHJcbiAgICAgICAgdGhpcy5zaWRlTWVudUVsZW1lbnRzLnRvVG9nZ2xlV3JhcHBlci5hcHBlbmQodGhpcy5zaWRlTWVudUVsZW1lbnRzLnRvVG9nZ2xlLCB0aGlzLnNpZGVNZW51RWxlbWVudHMudG9Ub2dnbGVCb3JkZXIpO1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnVFbGVtZW50cy50b1dyYXBwZXIuYXBwZW5kKHRoaXMuc2lkZU1lbnVFbGVtZW50cy50b1RvZ2dsZU9iamVjdGl2ZSwgdGhpcy5zaWRlTWVudUVsZW1lbnRzLnRvVG9nZ2xlV3JhcHBlcik7XHJcbiAgICB9XHJcbiAgICB3cmFwc0hhbmRsZXNWYWx1ZXNUb2dnbGUoKSB7XHJcbiAgICAgICAgdGhpcy5zaWRlTWVudUVsZW1lbnRzLmhhbmRsZVZhbHVlc1RvZ2dsZVdyYXBwZXIuYXBwZW5kKHRoaXMuc2lkZU1lbnVFbGVtZW50cy5oYW5kbGVWYWx1ZXNUb2dnbGUsIHRoaXMuc2lkZU1lbnVFbGVtZW50cy5oYW5kbGVWYWx1ZXNUb2dnbGVCb3JkZXIpO1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnVFbGVtZW50cy5oYW5kbGVWYWx1ZXNXcmFwcGVyLmFwcGVuZCh0aGlzLnNpZGVNZW51RWxlbWVudHMuaGFuZGxlVmFsdWVzT2JqZWN0aXZlLCB0aGlzLnNpZGVNZW51RWxlbWVudHMuaGFuZGxlVmFsdWVzVG9nZ2xlV3JhcHBlcik7XHJcbiAgICB9XHJcbiAgICB3cmFwc1ZhbHVlc1NjYWxlVG9nZ2xlKCkge1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnVFbGVtZW50cy52YWx1ZVNjYWxlVG9nZ2xlV3JhcHBlci5hcHBlbmQodGhpcy5zaWRlTWVudUVsZW1lbnRzLnZhbHVlU2NhbGVUb2dnbGUsIHRoaXMuc2lkZU1lbnVFbGVtZW50cy52YWx1ZVNjYWxlVG9nZ2xlQm9yZGVyKTtcclxuICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMudmFsdWVTY2FsZVdyYXBwZXIuYXBwZW5kKHRoaXMuc2lkZU1lbnVFbGVtZW50cy52YWx1ZVNjYWxlT2JqZWN0aXZlLCB0aGlzLnNpZGVNZW51RWxlbWVudHMudmFsdWVTY2FsZVRvZ2dsZVdyYXBwZXIpO1xyXG4gICAgfVxyXG4gICAgd3JhcHNQbGFuZVRvZ2dsZSgpIHtcclxuICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMucGxhbmVUb2dnbGVXcmFwcGVyLmFwcGVuZCh0aGlzLnNpZGVNZW51RWxlbWVudHMucGxhbmVUb2dnbGUsIHRoaXMuc2lkZU1lbnVFbGVtZW50cy5wbGFuZVRvZ2dsZUJvcmRlcik7XHJcbiAgICAgICAgdGhpcy5zaWRlTWVudUVsZW1lbnRzLnBsYW5lV3JhcHBlci5hcHBlbmQodGhpcy5zaWRlTWVudUVsZW1lbnRzLnBsYW5lT2JqZWN0aXZlLCB0aGlzLnNpZGVNZW51RWxlbWVudHMucGxhbmVUb2dnbGVXcmFwcGVyKTtcclxuICAgIH1cclxuICAgIHdyYXBzSW50ZWdlclRvZ2dsZSgpIHtcclxuICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMuaW50ZWdlclRvZ2dsZVdyYXBwZXIuYXBwZW5kKHRoaXMuc2lkZU1lbnVFbGVtZW50cy5pbnRlZ2VyVG9nZ2xlLCB0aGlzLnNpZGVNZW51RWxlbWVudHMuaW50ZWdlclRvZ2dsZUJvcmRlcik7XHJcbiAgICAgICAgdGhpcy5zaWRlTWVudUVsZW1lbnRzLmludGVnZXJXcmFwcGVyLmFwcGVuZCh0aGlzLnNpZGVNZW51RWxlbWVudHMuaW50ZWdlck9iamVjdGl2ZSwgdGhpcy5zaWRlTWVudUVsZW1lbnRzLmludGVnZXJUb2dnbGVXcmFwcGVyKTtcclxuICAgIH1cclxuICAgIGNvbGxlY3RTaWRlTWVudSgpIHtcclxuICAgICAgICB0aGlzLndyYXBzT3V0cHV0cygpO1xyXG4gICAgICAgIHRoaXMud3JhcHNFbGVtZW50c0luV3JhcHBlcnMoKTtcclxuICAgICAgICB0aGlzLndyYXBzVG9Ub2dnbGUoKTtcclxuICAgICAgICB0aGlzLndyYXBzSGFuZGxlc1ZhbHVlc1RvZ2dsZSgpO1xyXG4gICAgICAgIHRoaXMud3JhcHNWYWx1ZXNTY2FsZVRvZ2dsZSgpO1xyXG4gICAgICAgIHRoaXMud3JhcHNQbGFuZVRvZ2dsZSgpO1xyXG4gICAgICAgIHRoaXMud3JhcHNJbnRlZ2VyVG9nZ2xlKCk7XHJcbiAgICAgICAgdGhpcy5zaWRlTWVudUVsZW1lbnRzLnNpZGVNZW51Q29udGFpbmVyLmFwcGVuZCh0aGlzLnNpZGVNZW51RWxlbWVudHMuY3VycmVudFZhbHVlc1dyYXBwZXIsIHRoaXMuc2lkZU1lbnVFbGVtZW50cy5pbnB1dFdyYXBwZXIsIHRoaXMuc2lkZU1lbnVFbGVtZW50cy50b1dyYXBwZXIsIHRoaXMuc2lkZU1lbnVFbGVtZW50cy5oYW5kbGVWYWx1ZXNXcmFwcGVyLCB0aGlzLnNpZGVNZW51RWxlbWVudHMudmFsdWVTY2FsZVdyYXBwZXIsIHRoaXMuc2lkZU1lbnVFbGVtZW50cy5wbGFuZVdyYXBwZXIsIHRoaXMuc2lkZU1lbnVFbGVtZW50cy5pbnRlZ2VyV3JhcHBlcik7XHJcbiAgICB9XHJcbiAgICByZWZyZXNoVmFsdWVzKHJlZnJlc2hEYXRhKSB7XHJcbiAgICAgICAgY29uc3QgaXNSb3VuZFVwTmVlZCA9IHJlZnJlc2hEYXRhLmlzVG9GaXhlZCAmJiAhdGhpcy5pc0lucHV0Q2hhbmdlcztcclxuICAgICAgICBjb25zdCBicmluZ3NWYWx1ZXNUb0Zvcm0gPSAodmFsdWUpID0+IChpc1JvdW5kVXBOZWVkID8gYCR7TWF0aC5yb3VuZChOdW1iZXIodmFsdWUpKX1gIDogdmFsdWUpO1xyXG4gICAgICAgIHN3aXRjaCAocmVmcmVzaERhdGEudGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2Zyb20nOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zaWRlTWVudUVsZW1lbnRzLmZyb21PdXRwdXQudmFsdWUgPSBicmluZ3NWYWx1ZXNUb0Zvcm0ocmVmcmVzaERhdGEudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaWRlTWVudUVsZW1lbnRzLmZyb21JbnB1dC52YWx1ZSA9IGJyaW5nc1ZhbHVlc1RvRm9ybShyZWZyZXNoRGF0YS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAndG8nOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zaWRlTWVudUVsZW1lbnRzLnRvT3V0cHV0LnZhbHVlID0gYCAtICR7YnJpbmdzVmFsdWVzVG9Gb3JtKHJlZnJlc2hEYXRhLnZhbHVlKX1gO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaWRlTWVudUVsZW1lbnRzLnRvSW5wdXQudmFsdWUgPSBicmluZ3NWYWx1ZXNUb0Zvcm0ocmVmcmVzaERhdGEudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ21pbic6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMubWluaW11bUlucHV0LnZhbHVlID0gcmVmcmVzaERhdGEudmFsdWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnbWF4JzpcclxuICAgICAgICAgICAgICAgIHRoaXMuc2lkZU1lbnVFbGVtZW50cy5tYXhpbXVtSW5wdXQudmFsdWUgPSByZWZyZXNoRGF0YS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaXNJbnB1dENoYW5nZXMgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIGhpZGVUb1ZhbHVlcyhpc0hpZGVUb1ZhbHVlcykge1xyXG4gICAgICAgIGNvbnN0IGNoYW5nZURpc3BsYXkgPSAoaW5wdXQsIG91dHB1dCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMudG9JbnB1dFdyYXBwZXIuc3R5bGUuZGlzcGxheSA9IGlucHV0O1xyXG4gICAgICAgICAgICB0aGlzLnNpZGVNZW51RWxlbWVudHMudG9PdXRwdXQuc3R5bGUuZGlzcGxheSA9IG91dHB1dDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICghaXNIaWRlVG9WYWx1ZXMpIHtcclxuICAgICAgICAgICAgY2hhbmdlRGlzcGxheSgnbm9uZScsICdub25lJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjaGFuZ2VEaXNwbGF5KCdibG9jaycsICdpbmxpbmUnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5TaWRlTWVudSA9IFNpZGVNZW51O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBTaWRlTWVudV8xID0gcmVxdWlyZShcIi4vU2lkZU1lbnVcIik7XHJcbmRlc2NyaWJlKCdTaWRlTWVudScsICgpID0+IHtcclxuICAgIGxldCBzaWRlTWVudTtcclxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgICAgIHNpZGVNZW51ID0gbmV3IFNpZGVNZW51XzEuU2lkZU1lbnUoKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ1NpZGVNZW51IGNhbiBiZSBjcmVhdGUnLCAoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KHNpZGVNZW51KS50b0JlVHJ1dGh5KCk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdTaWRlTWVudSBjYW4gYmUgY29sbGVjdCcsICgpID0+IHtcclxuICAgICAgICBzaWRlTWVudS5jb2xsZWN0U2lkZU1lbnUoKTtcclxuICAgICAgICBleHBlY3Qoc2lkZU1lbnUuc2lkZU1lbnVFbGVtZW50cy5zaWRlTWVudUNvbnRhaW5lcikudG9CZVRydXRoeSgpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgncmVmcmVzaFZhbHVlcygpIHJlZnJlc2ggZnJvbSB2YWx1ZXMgY29ycmVjdGx5JywgKCkgPT4ge1xyXG4gICAgICAgIHNpZGVNZW51LnJlZnJlc2hWYWx1ZXMoeyB0YXJnZXQ6ICdmcm9tJywgdmFsdWU6ICc1MCcsIGlzVG9GaXhlZDogdHJ1ZSB9KTtcclxuICAgICAgICBleHBlY3Qoc2lkZU1lbnUuc2lkZU1lbnVFbGVtZW50cy5mcm9tT3V0cHV0LnZhbHVlKS50b0VxdWFsKCc1MCcpO1xyXG4gICAgICAgIGV4cGVjdChzaWRlTWVudS5zaWRlTWVudUVsZW1lbnRzLmZyb21JbnB1dC52YWx1ZSkudG9FcXVhbCgnNTAnKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ3JlZnJlc2hWYWx1ZXMoKSByZWZyZXNoIHRvIHZhbHVlcyBjb3JyZWN0bHknLCAoKSA9PiB7XHJcbiAgICAgICAgc2lkZU1lbnUucmVmcmVzaFZhbHVlcyh7IHRhcmdldDogJ3RvJywgdmFsdWU6ICc1MCcsIGlzVG9GaXhlZDogdHJ1ZSB9KTtcclxuICAgICAgICBleHBlY3Qoc2lkZU1lbnUuc2lkZU1lbnVFbGVtZW50cy50b091dHB1dC52YWx1ZSkudG9FcXVhbCgnIC0gNTAnKTtcclxuICAgICAgICBleHBlY3Qoc2lkZU1lbnUuc2lkZU1lbnVFbGVtZW50cy50b0lucHV0LnZhbHVlKS50b0VxdWFsKCc1MCcpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnaGlkZVRvVmFsdWVzKCkgb3BlcmF0ZXMgdGhlIGRpc3BsYXkgZnVuY3Rpb24gY29ycmVjdGx5JywgKCkgPT4ge1xyXG4gICAgICAgIHNpZGVNZW51LmhpZGVUb1ZhbHVlcyhmYWxzZSk7XHJcbiAgICAgICAgZXhwZWN0KHNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMudG9JbnB1dFdyYXBwZXIuc3R5bGUuZGlzcGxheSkudG9FcXVhbCgnbm9uZScpO1xyXG4gICAgICAgIGV4cGVjdChzaWRlTWVudS5zaWRlTWVudUVsZW1lbnRzLnRvT3V0cHV0LnN0eWxlLmRpc3BsYXkpLnRvRXF1YWwoJ25vbmUnKTtcclxuICAgICAgICBzaWRlTWVudS5oaWRlVG9WYWx1ZXModHJ1ZSk7XHJcbiAgICAgICAgZXhwZWN0KHNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMudG9JbnB1dFdyYXBwZXIuc3R5bGUuZGlzcGxheSkudG9FcXVhbCgnYmxvY2snKTtcclxuICAgICAgICBleHBlY3Qoc2lkZU1lbnUuc2lkZU1lbnVFbGVtZW50cy50b091dHB1dC5zdHlsZS5kaXNwbGF5KS50b0VxdWFsKCdpbmxpbmUnKTtcclxuICAgIH0pO1xyXG59KTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5TbGlkZXIgPSB2b2lkIDA7XHJcbmNsYXNzIFNsaWRlciB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnNsaWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRoaXMuc2xpZGVyLmNsYXNzTGlzdC5hZGQoJ2dvYnktc2xpZGVyJyk7XHJcbiAgICAgICAgdGhpcy5zbGlkZXJXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdGhpcy5zbGlkZXJXcmFwcGVyLmNsYXNzTGlzdC5hZGQoJ2dvYnktc2xpZGVyLXdyYXBwZXInKTtcclxuICAgICAgICB0aGlzLnNsaWRlcldyYXBwZXIuYXBwZW5kKHRoaXMuc2xpZGVyKTtcclxuICAgIH1cclxuICAgIGNvbGxlY3RTbGlkZXIoc2V0dGluZ3MpIHtcclxuICAgICAgICB0aGlzLnNsaWRlci5hcHBlbmQoc2V0dGluZ3MuZnJvbSwgc2V0dGluZ3MudG8sIHNldHRpbmdzLmludGVydmFsLCBzZXR0aW5ncy52YWx1ZVNjYWxlLm1pblZhbHVlLCBzZXR0aW5ncy52YWx1ZVNjYWxlLm1heFZhbHVlLCBzZXR0aW5ncy52YWx1ZVNjYWxlWzIwXSwgc2V0dGluZ3MudmFsdWVTY2FsZVs0MF0sIHNldHRpbmdzLnZhbHVlU2NhbGVbNjBdLCBzZXR0aW5ncy52YWx1ZVNjYWxlWzgwXSk7XHJcbiAgICB9XHJcbiAgICBjaGVja0lzTmVlZFRvTWFrZUhvcml6b250YWxseShpc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgcmV0dXJuICgodGhpcy5zbGlkZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdnb2J5LXNsaWRlcl9zdGF0ZV92ZXJ0aWNhbCcpKSAmJiAoIWlzVmVydGljYWwpKTtcclxuICAgIH1cclxuICAgIGNoZWNrSXNOZWVkVG9NYWtlVmVydGljYWwoaXNWZXJ0aWNhbCkge1xyXG4gICAgICAgIHJldHVybiAoKCF0aGlzLnNsaWRlci5jbGFzc0xpc3QuY29udGFpbnMoJ2dvYnktc2xpZGVyX3N0YXRlX3ZlcnRpY2FsJykpICYmIChpc1ZlcnRpY2FsKSk7XHJcbiAgICB9XHJcbiAgICBjaGFuZ2VQbGFuZShzZXR0aW5ncykge1xyXG4gICAgICAgIGNvbnN0IHsgaXNTdGVwLCBpc1ZlcnRpY2FsLCByZXF1ZXN0cyB9ID0gc2V0dGluZ3M7XHJcbiAgICAgICAgZnVuY3Rpb24gcmVmcmVzaEFmdGVyUmVzaXplKCkge1xyXG4gICAgICAgICAgICByZXF1ZXN0cy5uZWVkRGF0YUZvclNjYWxlID0geyBuYW1lOiAnJywgdmFsdWU6ICd0cnVlJyB9O1xyXG4gICAgICAgICAgICByZXF1ZXN0cy5uZWVkRGF0YUZvclN0YXJ0UG9zaXRpb24gPSB7IG5hbWU6ICcnLCB2YWx1ZTogJ3RydWUnIH07XHJcbiAgICAgICAgICAgIGlmIChpc1N0ZXApXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0cy5uZWVkU3RlcFdpZHRoID0geyBuYW1lOiAnJywgdmFsdWU6ICd0cnVlJyB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBzd2l0Y2ggKHRydWUpIHtcclxuICAgICAgICAgICAgY2FzZSB0aGlzLmNoZWNrSXNOZWVkVG9NYWtlVmVydGljYWwoaXNWZXJ0aWNhbCk6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNsaWRlci5jbGFzc0xpc3QudG9nZ2xlKCdnb2J5LXNsaWRlcl9zdGF0ZV92ZXJ0aWNhbCcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zbGlkZXIuc3R5bGUudG9wID0gYCR7dGhpcy5zbGlkZXIub2Zmc2V0V2lkdGggLyAyfXB4YDtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2xpZGVyV3JhcHBlci5zdHlsZS5oZWlnaHQgPSBgJHt0aGlzLnNsaWRlci5vZmZzZXRXaWR0aH1weGA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSB0aGlzLmNoZWNrSXNOZWVkVG9NYWtlSG9yaXpvbnRhbGx5KGlzVmVydGljYWwpOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zbGlkZXIuY2xhc3NMaXN0LnRvZ2dsZSgnZ29ieS1zbGlkZXJfc3RhdGVfdmVydGljYWwnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2xpZGVyLnN0eWxlLnRvcCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zbGlkZXJXcmFwcGVyLnN0eWxlLmhlaWdodCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVmcmVzaEFmdGVyUmVzaXplKCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5TbGlkZXIgPSBTbGlkZXI7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IEhhbmRsZXNfMSA9IHJlcXVpcmUoXCIuLi9IYW5kbGVzL0hhbmRsZXNcIik7XHJcbmNvbnN0IFNlbGVjdGVkSW50ZXJ2YWxfMSA9IHJlcXVpcmUoXCIuLi9TZWxlY3RlZEludGVydmFsL1NlbGVjdGVkSW50ZXJ2YWxcIik7XHJcbmNvbnN0IFNsaWRlcl8xID0gcmVxdWlyZShcIi4vU2xpZGVyXCIpO1xyXG5jb25zdCBWYWx1ZXNTY2FsZV8xID0gcmVxdWlyZShcIi4uL1ZhbHVlc1NjYWxlL1ZhbHVlc1NjYWxlXCIpO1xyXG5kZXNjcmliZSgnU2xpZGVyJywgKCkgPT4ge1xyXG4gICAgbGV0IHNsaWRlcjtcclxuICAgIGNvbnN0IHJlcXVlc3RzID0ge1xyXG4gICAgICAgIG5lZWRTdGVwV2lkdGg6IHsgdmFsdWU6ICcnLCBuYW1lOiAnJyB9LFxyXG4gICAgICAgIG5lZWRBcHBseU5ld1ZhbHVlOiB7IHZhbHVlOiAnJywgbmFtZTogJycgfSxcclxuICAgICAgICBuZWVkQXBwbHlWYWx1ZUZyb21TY2FsZTogeyB2YWx1ZTogJycsIG5hbWU6ICcnIH0sXHJcbiAgICAgICAgbmVlZENoYW5nZVNsaWRlclZhbHVlc1JhbmdlOiB7IHZhbHVlOiAnJywgbmFtZTogJycgfSxcclxuICAgICAgICBuZWVkRGF0YUZvclNjYWxlOiB7IHZhbHVlOiAnJywgbmFtZTogJycgfSxcclxuICAgICAgICBuZWVkRGF0YUZvclN0YXJ0UG9zaXRpb246IHsgdmFsdWU6ICcnLCBuYW1lOiAnJyB9LFxyXG4gICAgfTtcclxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgICAgIHNsaWRlciA9IG5ldyBTbGlkZXJfMS5TbGlkZXIoKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ1NsaWRlciBjYW4gYmUgY3JlYXRlJywgKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChzbGlkZXIpLnRvQmVUcnV0aHkoKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ2NvbGxlY3RTbGlkZXIoKSBjYW4gY29sbGVjdCBlbGVtZW50cycsICgpID0+IHtcclxuICAgICAgICBjb25zdCBzZXR0aW5ncyA9IHtcclxuICAgICAgICAgICAgZnJvbTogbmV3IEhhbmRsZXNfMS5IYW5kbGVzKCkuZnJvbUhhbmRsZSxcclxuICAgICAgICAgICAgdG86IG5ldyBIYW5kbGVzXzEuSGFuZGxlcygpLnRvSGFuZGxlLFxyXG4gICAgICAgICAgICBpbnRlcnZhbDogbmV3IFNlbGVjdGVkSW50ZXJ2YWxfMS5TZWxlY3RlZEludGVydmFsKCkuaW50ZXJ2YWwsXHJcbiAgICAgICAgICAgIHZhbHVlU2NhbGU6IG5ldyBWYWx1ZXNTY2FsZV8xLlZhbHVlc1NjYWxlKCksXHJcbiAgICAgICAgfTtcclxuICAgICAgICBzbGlkZXIuY29sbGVjdFNsaWRlcihzZXR0aW5ncyk7XHJcbiAgICAgICAgZXhwZWN0KHNsaWRlci5zbGlkZXIpLnRvQmVUcnV0aHkoKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ2NoYW5nZVBsYW5lKCkgb3BlcmF0ZXMgdGhlIGRpc3BsYXkgZnVuY3Rpb24gY29ycmVjdGx5JywgKCkgPT4ge1xyXG4gICAgICAgIHNsaWRlci5jaGFuZ2VQbGFuZSh7XHJcbiAgICAgICAgICAgIHJlcXVlc3RzLFxyXG4gICAgICAgICAgICBpc1N0ZXA6IGZhbHNlLFxyXG4gICAgICAgICAgICBpc1ZlcnRpY2FsOiB0cnVlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGV4cGVjdChzbGlkZXIuc2xpZGVyKS50b0hhdmVDbGFzcygnZ29ieS1zbGlkZXJfc3RhdGVfdmVydGljYWwnKTtcclxuICAgICAgICBzbGlkZXIuY2hhbmdlUGxhbmUoe1xyXG4gICAgICAgICAgICByZXF1ZXN0cyxcclxuICAgICAgICAgICAgaXNTdGVwOiBmYWxzZSxcclxuICAgICAgICAgICAgaXNWZXJ0aWNhbDogZmFsc2UsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZXhwZWN0KHNsaWRlci5zbGlkZXIpLm5vdC50b0hhdmVDbGFzcygnZ29ieS1zbGlkZXJfc3RhdGVfdmVydGljYWwnKTtcclxuICAgIH0pO1xyXG59KTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5WYWx1ZXNTY2FsZSA9IHZvaWQgMDtcclxuY2xhc3MgVmFsdWVzU2NhbGUge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5taW5WYWx1ZSA9IFZhbHVlc1NjYWxlLmNyZWF0ZUVsZW1lbnQoJ3R5cGVfbWluJyk7XHJcbiAgICAgICAgdGhpcy5tYXhWYWx1ZSA9IFZhbHVlc1NjYWxlLmNyZWF0ZUVsZW1lbnQoJ3R5cGVfbWF4Jyk7XHJcbiAgICAgICAgdGhpc1syMF0gPSBWYWx1ZXNTY2FsZS5jcmVhdGVFbGVtZW50KCdwZXJjZW50XzIwJyk7XHJcbiAgICAgICAgdGhpc1s0MF0gPSBWYWx1ZXNTY2FsZS5jcmVhdGVFbGVtZW50KCdwZXJjZW50XzQwJyk7XHJcbiAgICAgICAgdGhpc1s2MF0gPSBWYWx1ZXNTY2FsZS5jcmVhdGVFbGVtZW50KCdwZXJjZW50XzYwJyk7XHJcbiAgICAgICAgdGhpc1s4MF0gPSBWYWx1ZXNTY2FsZS5jcmVhdGVFbGVtZW50KCdwZXJjZW50XzgwJyk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgY3JlYXRlRWxlbWVudChjbGFzc01vZGlmaWVyKSB7XHJcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2dvYnktc2xpZGVyX192YWx1ZScsIGBnb2J5LXNsaWRlcl9fdmFsdWVfJHtjbGFzc01vZGlmaWVyfWApO1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgfVxyXG4gICAgcmVmcmVzaFZhbHVlU2NhbGUodmFsdWVzKSB7XHJcbiAgICAgICAgKHtcclxuICAgICAgICAgICAgbWluOiB0aGlzLm1pblZhbHVlLmlubmVyVGV4dCxcclxuICAgICAgICAgICAgbWF4OiB0aGlzLm1heFZhbHVlLmlubmVyVGV4dCxcclxuICAgICAgICAgICAgMjA6IHRoaXNbMjBdLmlubmVyVGV4dCxcclxuICAgICAgICAgICAgNDA6IHRoaXNbNDBdLmlubmVyVGV4dCxcclxuICAgICAgICAgICAgNjA6IHRoaXNbNjBdLmlubmVyVGV4dCxcclxuICAgICAgICAgICAgODA6IHRoaXNbODBdLmlubmVyVGV4dCxcclxuICAgICAgICB9ID0gdmFsdWVzKTtcclxuICAgIH1cclxuICAgIGNlbnRlcnNWYWx1ZXMoc2xpZGVyV2lkdGgsIGhhbmRsZVdpZHRoKSB7XHJcbiAgICAgICAgY29uc3QgY2FsY3VsYXRlRXh0cmVtZVZhbHVlUG9zaXRpb24gPSAoZWxlbWVudCkgPT4gYCR7MCAtICgoZWxlbWVudC5vZmZzZXRXaWR0aCAtIGhhbmRsZVdpZHRoKSAvIDIpfXB4YDtcclxuICAgICAgICBjb25zdCBjYWxjdWxhdGVWYWx1ZVBvc2l0aW9uID0gKGNvZWZmaWNpZW50LCBlbGVtZW50KSA9PiBgJHtzbGlkZXJXaWR0aCAqIGNvZWZmaWNpZW50IC0gKChlbGVtZW50Lm9mZnNldFdpZHRoIC0gaGFuZGxlV2lkdGgpIC8gMil9cHhgO1xyXG4gICAgICAgIHRoaXMubWluVmFsdWUuc3R5bGUubGVmdCA9IGNhbGN1bGF0ZUV4dHJlbWVWYWx1ZVBvc2l0aW9uKHRoaXMubWluVmFsdWUpO1xyXG4gICAgICAgIHRoaXMubWF4VmFsdWUuc3R5bGUucmlnaHQgPSBjYWxjdWxhdGVFeHRyZW1lVmFsdWVQb3NpdGlvbih0aGlzLm1heFZhbHVlKTtcclxuICAgICAgICB0aGlzWzIwXS5zdHlsZS5sZWZ0ID0gY2FsY3VsYXRlVmFsdWVQb3NpdGlvbigwLjIsIHRoaXNbMjBdKTtcclxuICAgICAgICB0aGlzWzQwXS5zdHlsZS5sZWZ0ID0gY2FsY3VsYXRlVmFsdWVQb3NpdGlvbigwLjQsIHRoaXNbNDBdKTtcclxuICAgICAgICB0aGlzWzYwXS5zdHlsZS5sZWZ0ID0gY2FsY3VsYXRlVmFsdWVQb3NpdGlvbigwLjYsIHRoaXNbNjBdKTtcclxuICAgICAgICB0aGlzWzgwXS5zdHlsZS5sZWZ0ID0gY2FsY3VsYXRlVmFsdWVQb3NpdGlvbigwLjgsIHRoaXNbODBdKTtcclxuICAgIH1cclxuICAgIGNoZWNrSXNOZWVkVG9NYWtlSG9yaXpvbnRhbGx5KGlzVmVydGljYWwpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMubWluVmFsdWUuY2xhc3NMaXN0LmNvbnRhaW5zKCdnb2J5LXNsaWRlcl9fdmFsdWVfc3RhdGVfdmVydGljYWwnKSlcclxuICAgICAgICAgICAgJiYgKHRoaXMubWF4VmFsdWUuY2xhc3NMaXN0LmNvbnRhaW5zKCdnb2J5LXNsaWRlcl9fdmFsdWVfc3RhdGVfdmVydGljYWwnKSlcclxuICAgICAgICAgICAgJiYgKHRoaXNbMjBdLmNsYXNzTGlzdC5jb250YWlucygnZ29ieS1zbGlkZXJfX3ZhbHVlX3N0YXRlX3ZlcnRpY2FsJykpXHJcbiAgICAgICAgICAgICYmICh0aGlzWzQwXS5jbGFzc0xpc3QuY29udGFpbnMoJ2dvYnktc2xpZGVyX192YWx1ZV9zdGF0ZV92ZXJ0aWNhbCcpKVxyXG4gICAgICAgICAgICAmJiAodGhpc1s2MF0uY2xhc3NMaXN0LmNvbnRhaW5zKCdnb2J5LXNsaWRlcl9fdmFsdWVfc3RhdGVfdmVydGljYWwnKSlcclxuICAgICAgICAgICAgJiYgKHRoaXNbODBdLmNsYXNzTGlzdC5jb250YWlucygnZ29ieS1zbGlkZXJfX3ZhbHVlX3N0YXRlX3ZlcnRpY2FsJykpXHJcbiAgICAgICAgICAgICYmICghaXNWZXJ0aWNhbCk7XHJcbiAgICB9XHJcbiAgICBjaGVja0lzTmVlZFRvTWFrZVZlcnRpY2FsKGlzVmVydGljYWwpIHtcclxuICAgICAgICByZXR1cm4gKCF0aGlzLm1pblZhbHVlLmNsYXNzTGlzdC5jb250YWlucygnZ29ieS1zbGlkZXJfX3ZhbHVlX3N0YXRlX3ZlcnRpY2FsJykpXHJcbiAgICAgICAgICAgICYmICghdGhpcy5tYXhWYWx1ZS5jbGFzc0xpc3QuY29udGFpbnMoJ2dvYnktc2xpZGVyX192YWx1ZV9zdGF0ZV92ZXJ0aWNhbCcpKVxyXG4gICAgICAgICAgICAmJiAoIXRoaXNbMjBdLmNsYXNzTGlzdC5jb250YWlucygnZ29ieS1zbGlkZXJfX3ZhbHVlX3N0YXRlX3ZlcnRpY2FsJykpXHJcbiAgICAgICAgICAgICYmICghdGhpc1s0MF0uY2xhc3NMaXN0LmNvbnRhaW5zKCdnb2J5LXNsaWRlcl9fdmFsdWVfc3RhdGVfdmVydGljYWwnKSlcclxuICAgICAgICAgICAgJiYgKCF0aGlzWzYwXS5jbGFzc0xpc3QuY29udGFpbnMoJ2dvYnktc2xpZGVyX192YWx1ZV9zdGF0ZV92ZXJ0aWNhbCcpKVxyXG4gICAgICAgICAgICAmJiAoIXRoaXNbODBdLmNsYXNzTGlzdC5jb250YWlucygnZ29ieS1zbGlkZXJfX3ZhbHVlX3N0YXRlX3ZlcnRpY2FsJykpXHJcbiAgICAgICAgICAgICYmIChpc1ZlcnRpY2FsKTtcclxuICAgIH1cclxuICAgIGNoYW5nZVBsYW5lKGlzVmVydGljYWwpIHtcclxuICAgICAgICBjb25zdCBjaGFuZ2VDbGFzc2VzID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm1pblZhbHVlLmNsYXNzTGlzdC50b2dnbGUoJ2dvYnktc2xpZGVyX192YWx1ZV9zdGF0ZV92ZXJ0aWNhbCcpO1xyXG4gICAgICAgICAgICB0aGlzLm1heFZhbHVlLmNsYXNzTGlzdC50b2dnbGUoJ2dvYnktc2xpZGVyX192YWx1ZV9zdGF0ZV92ZXJ0aWNhbCcpO1xyXG4gICAgICAgICAgICB0aGlzWzIwXS5jbGFzc0xpc3QudG9nZ2xlKCdnb2J5LXNsaWRlcl9fdmFsdWVfc3RhdGVfdmVydGljYWwnKTtcclxuICAgICAgICAgICAgdGhpc1s0MF0uY2xhc3NMaXN0LnRvZ2dsZSgnZ29ieS1zbGlkZXJfX3ZhbHVlX3N0YXRlX3ZlcnRpY2FsJyk7XHJcbiAgICAgICAgICAgIHRoaXNbNjBdLmNsYXNzTGlzdC50b2dnbGUoJ2dvYnktc2xpZGVyX192YWx1ZV9zdGF0ZV92ZXJ0aWNhbCcpO1xyXG4gICAgICAgICAgICB0aGlzWzgwXS5jbGFzc0xpc3QudG9nZ2xlKCdnb2J5LXNsaWRlcl9fdmFsdWVfc3RhdGVfdmVydGljYWwnKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGlzTmVlZFRvQ2hhbmdlQ2xhc3NlcyA9IHRoaXMuY2hlY2tJc05lZWRUb01ha2VWZXJ0aWNhbChpc1ZlcnRpY2FsKVxyXG4gICAgICAgICAgICB8fCB0aGlzLmNoZWNrSXNOZWVkVG9NYWtlSG9yaXpvbnRhbGx5KGlzVmVydGljYWwpO1xyXG4gICAgICAgIGlmIChpc05lZWRUb0NoYW5nZUNsYXNzZXMpXHJcbiAgICAgICAgICAgIGNoYW5nZUNsYXNzZXMoKTtcclxuICAgIH1cclxuICAgIGhpZGVWYWx1ZVNjYWxlKGlzVmFsdWVTY2FsZSkge1xyXG4gICAgICAgIGNvbnN0IGNoYW5nZURpc3BsYXkgPSAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5taW5WYWx1ZS5zdHlsZS5kaXNwbGF5ID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMubWF4VmFsdWUuc3R5bGUuZGlzcGxheSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzWzIwXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXNbNDBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpc1s2MF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzWzgwXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoIWlzVmFsdWVTY2FsZSkge1xyXG4gICAgICAgICAgICBjaGFuZ2VEaXNwbGF5KCdub25lJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjaGFuZ2VEaXNwbGF5KCdpbmxpbmUtYmxvY2snKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5WYWx1ZXNTY2FsZSA9IFZhbHVlc1NjYWxlO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBWYWx1ZXNTY2FsZV8xID0gcmVxdWlyZShcIi4vVmFsdWVzU2NhbGVcIik7XHJcbmRlc2NyaWJlKCdWYWx1ZVNjYWxlJywgKCkgPT4ge1xyXG4gICAgbGV0IHZhbHVlc1NjYWxlO1xyXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICAgICAgdmFsdWVzU2NhbGUgPSBuZXcgVmFsdWVzU2NhbGVfMS5WYWx1ZXNTY2FsZSgpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnVmFsdWVTY2FsZSBjYW4gYmUgY3JlYXRlJywgKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdCh2YWx1ZXNTY2FsZSkudG9CZVRydXRoeSgpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgncmVmcmVzaFZhbHVlU2NhbGUoKSByZWZyZXNoIHNjYWxlIGNvcnJlY3RseScsICgpID0+IHtcclxuICAgICAgICB2YWx1ZXNTY2FsZS5yZWZyZXNoVmFsdWVTY2FsZSh7XHJcbiAgICAgICAgICAgIG1pbjogJzAnLCBtYXg6ICcxMDAnLCAyMDogJzIwJywgNDA6ICc0MCcsIDYwOiAnNjAnLCA4MDogJzgwJyxcclxuICAgICAgICB9KTtcclxuICAgICAgICBleHBlY3QodmFsdWVzU2NhbGUubWluVmFsdWUuaW5uZXJUZXh0KS50b0VxdWFsKCcwJyk7XHJcbiAgICAgICAgZXhwZWN0KHZhbHVlc1NjYWxlLm1heFZhbHVlLmlubmVyVGV4dCkudG9FcXVhbCgnMTAwJyk7XHJcbiAgICAgICAgZXhwZWN0KHZhbHVlc1NjYWxlWzIwXS5pbm5lclRleHQpLnRvRXF1YWwoJzIwJyk7XHJcbiAgICAgICAgZXhwZWN0KHZhbHVlc1NjYWxlWzQwXS5pbm5lclRleHQpLnRvRXF1YWwoJzQwJyk7XHJcbiAgICAgICAgZXhwZWN0KHZhbHVlc1NjYWxlWzYwXS5pbm5lclRleHQpLnRvRXF1YWwoJzYwJyk7XHJcbiAgICAgICAgZXhwZWN0KHZhbHVlc1NjYWxlWzgwXS5pbm5lclRleHQpLnRvRXF1YWwoJzgwJyk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdjZW50ZXJzVmFsdWVzKCkgY2FsY3VsYXRlIGNvcnJlY3RseScsICgpID0+IHtcclxuICAgICAgICB2YWx1ZXNTY2FsZS5jZW50ZXJzVmFsdWVzKDEwMCwgMjApO1xyXG4gICAgICAgIGV4cGVjdCh2YWx1ZXNTY2FsZS5taW5WYWx1ZS5zdHlsZS5sZWZ0KS50b0VxdWFsKCcxMHB4Jyk7XHJcbiAgICAgICAgZXhwZWN0KHZhbHVlc1NjYWxlLm1heFZhbHVlLnN0eWxlLnJpZ2h0KS50b0VxdWFsKCcxMHB4Jyk7XHJcbiAgICAgICAgZXhwZWN0KHZhbHVlc1NjYWxlWzIwXS5zdHlsZS5sZWZ0KS50b0VxdWFsKCczMHB4Jyk7XHJcbiAgICAgICAgZXhwZWN0KHZhbHVlc1NjYWxlWzQwXS5zdHlsZS5sZWZ0KS50b0VxdWFsKCc1MHB4Jyk7XHJcbiAgICAgICAgZXhwZWN0KHZhbHVlc1NjYWxlWzYwXS5zdHlsZS5sZWZ0KS50b0VxdWFsKCc3MHB4Jyk7XHJcbiAgICAgICAgZXhwZWN0KHZhbHVlc1NjYWxlWzgwXS5zdHlsZS5sZWZ0KS50b0VxdWFsKCc5MHB4Jyk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdjaGFuZ2VQbGFuZSgpIG9wZXJhdGVzIHRoZSBwbGFuZSBmdW5jdGlvbiBjb3JyZWN0bHknLCAoKSA9PiB7XHJcbiAgICAgICAgdmFsdWVzU2NhbGUuY2hhbmdlUGxhbmUodHJ1ZSk7XHJcbiAgICAgICAgZXhwZWN0KHZhbHVlc1NjYWxlLm1pblZhbHVlKS50b0hhdmVDbGFzcygnZ29ieS1zbGlkZXJfX3ZhbHVlX3N0YXRlX3ZlcnRpY2FsJyk7XHJcbiAgICAgICAgZXhwZWN0KHZhbHVlc1NjYWxlLm1heFZhbHVlKS50b0hhdmVDbGFzcygnZ29ieS1zbGlkZXJfX3ZhbHVlX3N0YXRlX3ZlcnRpY2FsJyk7XHJcbiAgICAgICAgZXhwZWN0KHZhbHVlc1NjYWxlWzIwXSkudG9IYXZlQ2xhc3MoJ2dvYnktc2xpZGVyX192YWx1ZV9zdGF0ZV92ZXJ0aWNhbCcpO1xyXG4gICAgICAgIGV4cGVjdCh2YWx1ZXNTY2FsZVs0MF0pLnRvSGF2ZUNsYXNzKCdnb2J5LXNsaWRlcl9fdmFsdWVfc3RhdGVfdmVydGljYWwnKTtcclxuICAgICAgICBleHBlY3QodmFsdWVzU2NhbGVbNjBdKS50b0hhdmVDbGFzcygnZ29ieS1zbGlkZXJfX3ZhbHVlX3N0YXRlX3ZlcnRpY2FsJyk7XHJcbiAgICAgICAgZXhwZWN0KHZhbHVlc1NjYWxlWzgwXSkudG9IYXZlQ2xhc3MoJ2dvYnktc2xpZGVyX192YWx1ZV9zdGF0ZV92ZXJ0aWNhbCcpO1xyXG4gICAgICAgIHZhbHVlc1NjYWxlLmNoYW5nZVBsYW5lKGZhbHNlKTtcclxuICAgICAgICBleHBlY3QodmFsdWVzU2NhbGUubWluVmFsdWUpLm5vdC50b0hhdmVDbGFzcygnZ29ieS1zbGlkZXJfX3ZhbHVlX3N0YXRlX3ZlcnRpY2FsJyk7XHJcbiAgICAgICAgZXhwZWN0KHZhbHVlc1NjYWxlLm1heFZhbHVlKS5ub3QudG9IYXZlQ2xhc3MoJ2dvYnktc2xpZGVyX192YWx1ZV9zdGF0ZV92ZXJ0aWNhbCcpO1xyXG4gICAgICAgIGV4cGVjdCh2YWx1ZXNTY2FsZVsyMF0pLm5vdC50b0hhdmVDbGFzcygnZ29ieS1zbGlkZXJfX3ZhbHVlX3N0YXRlX3ZlcnRpY2FsJyk7XHJcbiAgICAgICAgZXhwZWN0KHZhbHVlc1NjYWxlWzQwXSkubm90LnRvSGF2ZUNsYXNzKCdnb2J5LXNsaWRlcl9fdmFsdWVfc3RhdGVfdmVydGljYWwnKTtcclxuICAgICAgICBleHBlY3QodmFsdWVzU2NhbGVbNjBdKS5ub3QudG9IYXZlQ2xhc3MoJ2dvYnktc2xpZGVyX192YWx1ZV9zdGF0ZV92ZXJ0aWNhbCcpO1xyXG4gICAgICAgIGV4cGVjdCh2YWx1ZXNTY2FsZVs4MF0pLm5vdC50b0hhdmVDbGFzcygnZ29ieS1zbGlkZXJfX3ZhbHVlX3N0YXRlX3ZlcnRpY2FsJyk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdoaWRlVmFsdWVTY2FsZSgpIG9wZXJhdGVzIHRoZSBkaXNwbGF5IGZ1bmN0aW9uIGNvcnJlY3RseScsICgpID0+IHtcclxuICAgICAgICB2YWx1ZXNTY2FsZS5oaWRlVmFsdWVTY2FsZShmYWxzZSk7XHJcbiAgICAgICAgZXhwZWN0KHZhbHVlc1NjYWxlLm1pblZhbHVlLnN0eWxlLmRpc3BsYXkpLnRvRXF1YWwoJ25vbmUnKTtcclxuICAgICAgICBleHBlY3QodmFsdWVzU2NhbGUubWF4VmFsdWUuc3R5bGUuZGlzcGxheSkudG9FcXVhbCgnbm9uZScpO1xyXG4gICAgICAgIGV4cGVjdCh2YWx1ZXNTY2FsZVsyMF0uc3R5bGUuZGlzcGxheSkudG9FcXVhbCgnbm9uZScpO1xyXG4gICAgICAgIGV4cGVjdCh2YWx1ZXNTY2FsZVs0MF0uc3R5bGUuZGlzcGxheSkudG9FcXVhbCgnbm9uZScpO1xyXG4gICAgICAgIGV4cGVjdCh2YWx1ZXNTY2FsZVs2MF0uc3R5bGUuZGlzcGxheSkudG9FcXVhbCgnbm9uZScpO1xyXG4gICAgICAgIGV4cGVjdCh2YWx1ZXNTY2FsZVs4MF0uc3R5bGUuZGlzcGxheSkudG9FcXVhbCgnbm9uZScpO1xyXG4gICAgICAgIHZhbHVlc1NjYWxlLmhpZGVWYWx1ZVNjYWxlKHRydWUpO1xyXG4gICAgICAgIGV4cGVjdCh2YWx1ZXNTY2FsZS5taW5WYWx1ZS5zdHlsZS5kaXNwbGF5KS50b0VxdWFsKCdpbmxpbmUtYmxvY2snKTtcclxuICAgICAgICBleHBlY3QodmFsdWVzU2NhbGUubWF4VmFsdWUuc3R5bGUuZGlzcGxheSkudG9FcXVhbCgnaW5saW5lLWJsb2NrJyk7XHJcbiAgICAgICAgZXhwZWN0KHZhbHVlc1NjYWxlWzIwXS5zdHlsZS5kaXNwbGF5KS50b0VxdWFsKCdpbmxpbmUtYmxvY2snKTtcclxuICAgICAgICBleHBlY3QodmFsdWVzU2NhbGVbNDBdLnN0eWxlLmRpc3BsYXkpLnRvRXF1YWwoJ2lubGluZS1ibG9jaycpO1xyXG4gICAgICAgIGV4cGVjdCh2YWx1ZXNTY2FsZVs2MF0uc3R5bGUuZGlzcGxheSkudG9FcXVhbCgnaW5saW5lLWJsb2NrJyk7XHJcbiAgICAgICAgZXhwZWN0KHZhbHVlc1NjYWxlWzgwXS5zdHlsZS5kaXNwbGF5KS50b0VxdWFsKCdpbmxpbmUtYmxvY2snKTtcclxuICAgIH0pO1xyXG59KTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5WaWV3ID0gdm9pZCAwO1xyXG5jb25zdCBhdXRvYmluZF9kZWNvcmF0b3JfMSA9IHJlcXVpcmUoXCJhdXRvYmluZC1kZWNvcmF0b3JcIik7XHJcbmNvbnN0IFNsaWRlcl8xID0gcmVxdWlyZShcIi4vU2xpZGVyL1NsaWRlclwiKTtcclxuY29uc3QgSGFuZGxlc18xID0gcmVxdWlyZShcIi4vSGFuZGxlcy9IYW5kbGVzXCIpO1xyXG5jb25zdCBNb3ZlbWVudF8xID0gcmVxdWlyZShcIi4vTW92ZW1lbnQvTW92ZW1lbnRcIik7XHJcbmNvbnN0IFNlbGVjdGVkSW50ZXJ2YWxfMSA9IHJlcXVpcmUoXCIuL1NlbGVjdGVkSW50ZXJ2YWwvU2VsZWN0ZWRJbnRlcnZhbFwiKTtcclxuY29uc3QgVmFsdWVzU2NhbGVfMSA9IHJlcXVpcmUoXCIuL1ZhbHVlc1NjYWxlL1ZhbHVlc1NjYWxlXCIpO1xyXG5jb25zdCBTaWRlTWVudV8xID0gcmVxdWlyZShcIi4vU2lkZU1lbnUvU2lkZU1lbnVcIik7XHJcbmxldCBWaWV3ID0gY2xhc3MgVmlldyB7XHJcbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncywgdGFyZ2V0KSB7XHJcbiAgICAgICAgdGhpcy5kYXRhUmVxdWVzdFRvTW9kZWwgPSB7XHJcbiAgICAgICAgICAgIG5lZWREYXRhRm9yU2NhbGU6IHsgbmFtZTogJycsIHZhbHVlOiAnJyB9LFxyXG4gICAgICAgICAgICBuZWVkRGF0YUZvclN0YXJ0UG9zaXRpb246IHsgbmFtZTogJycsIHZhbHVlOiAnJyB9LFxyXG4gICAgICAgICAgICBuZWVkU3RlcFdpZHRoOiB7IG5hbWU6ICcnLCB2YWx1ZTogJycgfSxcclxuICAgICAgICAgICAgbmVlZEFwcGx5VmFsdWVGcm9tU2NhbGU6IHsgbmFtZTogJycsIHZhbHVlOiAnJyB9LFxyXG4gICAgICAgICAgICBuZWVkQXBwbHlOZXdWYWx1ZTogeyBuYW1lOiAnJywgdmFsdWU6ICcnIH0sXHJcbiAgICAgICAgICAgIG5lZWRDaGFuZ2VTbGlkZXJWYWx1ZXNSYW5nZTogeyBuYW1lOiAnJywgdmFsdWU6ICcnIH0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcclxuICAgICAgICB0aGlzLnNsaWRlciA9IG5ldyBTbGlkZXJfMS5TbGlkZXIoKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXMgPSBuZXcgSGFuZGxlc18xLkhhbmRsZXMoKTtcclxuICAgICAgICB0aGlzLmludGVydmFsID0gbmV3IFNlbGVjdGVkSW50ZXJ2YWxfMS5TZWxlY3RlZEludGVydmFsKCk7XHJcbiAgICAgICAgdGhpcy52YWx1ZXNTY2FsZSA9IG5ldyBWYWx1ZXNTY2FsZV8xLlZhbHVlc1NjYWxlKCk7XHJcbiAgICAgICAgdGhpcy5zaWRlTWVudSA9IG5ldyBTaWRlTWVudV8xLlNpZGVNZW51KCk7XHJcbiAgICAgICAgdGhpcy5iYXNpY1NldHRpbmdzID0gc2V0dGluZ3M7XHJcbiAgICAgICAgdGhpcy5tb3ZlbWVudCA9IG5ldyBNb3ZlbWVudF8xLk1vdmVtZW50KHtcclxuICAgICAgICAgICAgc2xpZGVyOiB0aGlzLnNsaWRlci5zbGlkZXIsXHJcbiAgICAgICAgICAgIGZyb21IYW5kbGU6IHRoaXMuaGFuZGxlcy5mcm9tSGFuZGxlLFxyXG4gICAgICAgICAgICB0b0hhbmRsZTogdGhpcy5oYW5kbGVzLnRvSGFuZGxlLFxyXG4gICAgICAgICAgICBpbnRlcnZhbDogdGhpcy5pbnRlcnZhbC5pbnRlcnZhbCxcclxuICAgICAgICAgICAgYmFzaWNTZXR0aW5nczogdGhpcy5iYXNpY1NldHRpbmdzLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgYWRkU2xpZGVyVG9ET00oKSB7XHJcbiAgICAgICAgdGhpcy5zbGlkZXIuY29sbGVjdFNsaWRlcih7XHJcbiAgICAgICAgICAgIGZyb206IHRoaXMuaGFuZGxlcy5mcm9tSGFuZGxlLFxyXG4gICAgICAgICAgICB0bzogdGhpcy5oYW5kbGVzLnRvSGFuZGxlLFxyXG4gICAgICAgICAgICBpbnRlcnZhbDogdGhpcy5pbnRlcnZhbC5pbnRlcnZhbCxcclxuICAgICAgICAgICAgdmFsdWVTY2FsZTogdGhpcy52YWx1ZXNTY2FsZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRhcmdldC5hcHBlbmQodGhpcy5zbGlkZXIuc2xpZGVyV3JhcHBlcik7XHJcbiAgICB9XHJcbiAgICBhZGRTaWRlTWVudVRvRE9NKCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICB0aGlzLnNpZGVNZW51LmNvbGxlY3RTaWRlTWVudSgpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5iYXNpY1NldHRpbmdzWydzaWRlLW1lbnUnXSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgKF9hID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLmJhc2ljU2V0dGluZ3NbJ3NpZGUtbWVudSddKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFwcGVuZCh0aGlzLnNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMuc2lkZU1lbnVDb250YWluZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy50YXJnZXQuYXBwZW5kKHRoaXMuc2lkZU1lbnUuc2lkZU1lbnVFbGVtZW50cy5zaWRlTWVudUNvbnRhaW5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2hlY2tJc1N0ZXBSZXF1aXJlZCgpIHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuYmFzaWNTZXR0aW5ncywgJ3N0ZXAnKVxyXG4gICAgICAgICAgICAmJiB0eXBlb2YgdGhpcy5iYXNpY1NldHRpbmdzLnN0ZXAgPT09ICdudW1iZXInO1xyXG4gICAgfVxyXG4gICAgcHJlcGFyZVNsaWRlckZvclVzZSgpIHtcclxuICAgICAgICB0aGlzLmFkZFNsaWRlclRvRE9NKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuYmFzaWNTZXR0aW5nc1snc2lkZS1tZW51J10pXHJcbiAgICAgICAgICAgIHRoaXMuYWRkU2lkZU1lbnVUb0RPTSgpO1xyXG4gICAgICAgIHRoaXMuZGF0YVJlcXVlc3RUb01vZGVsLm5lZWREYXRhRm9yU2NhbGUgPSB7IG5hbWU6ICcnLCB2YWx1ZTogJ3RydWUnIH07XHJcbiAgICAgICAgdGhpcy5kYXRhUmVxdWVzdFRvTW9kZWwubmVlZERhdGFGb3JTdGFydFBvc2l0aW9uID0geyBuYW1lOiAnJywgdmFsdWU6ICd0cnVlJyB9O1xyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrSXNTdGVwUmVxdWlyZWQoKSlcclxuICAgICAgICAgICAgdGhpcy5kYXRhUmVxdWVzdFRvTW9kZWwubmVlZFN0ZXBXaWR0aCA9IHsgbmFtZTogJycsIHZhbHVlOiAndHJ1ZScgfTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVZpZXcoe1xyXG4gICAgICAgICAgICB2ZXJ0aWNhbDogdGhpcy5iYXNpY1NldHRpbmdzLnZlcnRpY2FsLFxyXG4gICAgICAgICAgICBkb3VibGU6IHRoaXMuYmFzaWNTZXR0aW5ncy5kb3VibGUsXHJcbiAgICAgICAgICAgIHNpZGVNZW51OiB0aGlzLmJhc2ljU2V0dGluZ3NbJ3NpZGUtbWVudSddLFxyXG4gICAgICAgICAgICBoYW5kbGVzVmFsdWVzOiB0aGlzLmJhc2ljU2V0dGluZ3MuaGFuZGxlc1ZhbHVlcyxcclxuICAgICAgICAgICAgdmFsdWVTY2FsZTogdGhpcy5iYXNpY1NldHRpbmdzLnZhbHVlU2NhbGUsXHJcbiAgICAgICAgICAgIGludGVnZXI6IHRoaXMuYmFzaWNTZXR0aW5ncy5pbnRlZ2VyLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdHVybk9uTWVudVRvZ2dsZXModGFyZ2V0cykge1xyXG4gICAgICAgIGlmICh0YXJnZXRzLnZlcnRpY2FsKVxyXG4gICAgICAgICAgICB0aGlzLnNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMucGxhbmVUb2dnbGUuY2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgaWYgKHRhcmdldHMuZG91YmxlKVxyXG4gICAgICAgICAgICB0aGlzLnNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMudG9Ub2dnbGUuY2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgaWYgKHRhcmdldHMuaGFuZGxlc1ZhbHVlcylcclxuICAgICAgICAgICAgdGhpcy5zaWRlTWVudS5zaWRlTWVudUVsZW1lbnRzLmhhbmRsZVZhbHVlc1RvZ2dsZS5jaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICBpZiAodGFyZ2V0cy52YWx1ZVNjYWxlKVxyXG4gICAgICAgICAgICB0aGlzLnNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMudmFsdWVTY2FsZVRvZ2dsZS5jaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICBpZiAodGFyZ2V0cy5pbnRlZ2VyKVxyXG4gICAgICAgICAgICB0aGlzLnNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMuaW50ZWdlclRvZ2dsZS5jaGVja2VkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHVwZGF0ZVZpZXcodGFyZ2V0cykge1xyXG4gICAgICAgIGlmICh0YXJnZXRzLnZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2xpZGVyLmNoYW5nZVBsYW5lKHtcclxuICAgICAgICAgICAgICAgIGlzVmVydGljYWw6IHRhcmdldHMudmVydGljYWwsXHJcbiAgICAgICAgICAgICAgICBpc1N0ZXA6IHRoaXMuY2hlY2tJc1N0ZXBSZXF1aXJlZCgpLFxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdHM6IHRoaXMuZGF0YVJlcXVlc3RUb01vZGVsLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVzLmNoYW5nZVBsYW5lKHRhcmdldHMudmVydGljYWwpO1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlc1NjYWxlLmNoYW5nZVBsYW5lKHRhcmdldHMudmVydGljYWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRhcmdldHMuZG91YmxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlcy5jb250cm9sSGFuZGxlc0Rpc3BsYXkoe1xyXG4gICAgICAgICAgICAgICAgaXNEb3VibGU6IHRoaXMuYmFzaWNTZXR0aW5ncy5kb3VibGUsXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbnM6IHRoaXMubW92ZW1lbnQucG9zaXRpb25zLFxyXG4gICAgICAgICAgICAgICAgc2xpZGVyV2lkdGg6IHRoaXMuc2xpZGVyLnNsaWRlci5vZmZzZXRXaWR0aCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWwuaGlkZVNlbGVjdGVkSW50ZXJ2YWwoe1xyXG4gICAgICAgICAgICAgICAgaXNEb3VibGU6IHRoaXMuYmFzaWNTZXR0aW5ncy5kb3VibGUsXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVXaWR0aDogdGhpcy5oYW5kbGVzLmZyb21IYW5kbGUub2Zmc2V0V2lkdGgsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLnNpZGVNZW51LmhpZGVUb1ZhbHVlcyh0aGlzLmJhc2ljU2V0dGluZ3MuZG91YmxlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0YXJnZXRzLnZhbHVlU2NhbGUpXHJcbiAgICAgICAgICAgIHRoaXMudmFsdWVzU2NhbGUuaGlkZVZhbHVlU2NhbGUodGhpcy5iYXNpY1NldHRpbmdzLnZhbHVlU2NhbGUpO1xyXG4gICAgICAgIGlmICghdGFyZ2V0cy5oYW5kbGVzVmFsdWVzKVxyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZXMuaGlkZUhhbmRsZVZhbHVlcyh0aGlzLmJhc2ljU2V0dGluZ3MuaGFuZGxlc1ZhbHVlcyk7XHJcbiAgICAgICAgaWYgKHRhcmdldHMuc2lkZU1lbnUpIHtcclxuICAgICAgICAgICAgdGhpcy50dXJuT25NZW51VG9nZ2xlcyh0YXJnZXRzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZWZyZXNoQWxsQ29tcG9uZW50cyhzZXR0aW5ncykge1xyXG4gICAgICAgIGNvbnN0IGlzVGFyZ2V0Tm90UmFuZ2UgPSBzZXR0aW5ncy50YXJnZXQgIT09ICdtaW4nICYmIHNldHRpbmdzLnRhcmdldCAhPT0gJ21heCc7XHJcbiAgICAgICAgbGV0IGhhbmRsZXNSZWZyZXNoUmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgICBpZiAoaXNUYXJnZXROb3RSYW5nZSkge1xyXG4gICAgICAgICAgICBoYW5kbGVzUmVmcmVzaFJlc3VsdCA9IHRoaXMuaGFuZGxlcy5yZWZyZXNoVmFsdWVzKHNldHRpbmdzLCB7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbnM6IHRoaXMubW92ZW1lbnQucG9zaXRpb25zLFxyXG4gICAgICAgICAgICAgICAgaXNEb3VibGU6IHRoaXMuYmFzaWNTZXR0aW5ncy5kb3VibGUsXHJcbiAgICAgICAgICAgICAgICBzbGlkZXJXaWR0aDogdGhpcy5zbGlkZXIuc2xpZGVyLm9mZnNldFdpZHRoLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaXNOZWVkU2lkZU1lbnVVcGRhdGUgPSBoYW5kbGVzUmVmcmVzaFJlc3VsdCAmJiB0aGlzLmJhc2ljU2V0dGluZ3NbJ3NpZGUtbWVudSddO1xyXG4gICAgICAgIGlmIChpc05lZWRTaWRlTWVudVVwZGF0ZSlcclxuICAgICAgICAgICAgdGhpcy5zaWRlTWVudS5yZWZyZXNoVmFsdWVzKHNldHRpbmdzKTtcclxuICAgIH1cclxuICAgIGJpbmRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICBPYmplY3QudmFsdWVzKHRoaXMudmFsdWVzU2NhbGUpLmZvckVhY2goKHNjYWxlVmFsdWUpID0+IHtcclxuICAgICAgICAgICAgc2NhbGVWYWx1ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlU2NhbGVWYWx1ZUNsaWNrKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMudG9Ub2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5oYW5kbGVUb1RvZ2dsZUNoYW5nZSk7XHJcbiAgICAgICAgdGhpcy5zaWRlTWVudS5zaWRlTWVudUVsZW1lbnRzLnBsYW5lVG9nZ2xlLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuaGFuZGxlUGxhbmVUb2dnbGVDaGFuZ2UpO1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnUuc2lkZU1lbnVFbGVtZW50cy52YWx1ZVNjYWxlVG9nZ2xlLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuaGFuZGxlVmFsdWVTY2FsZVRvZ2dsZUNoYW5nZSk7XHJcbiAgICAgICAgdGhpcy5zaWRlTWVudS5zaWRlTWVudUVsZW1lbnRzLmhhbmRsZVZhbHVlc1RvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmhhbmRsZUhhbmRsZVZhbHVlc0NoYW5nZSk7XHJcbiAgICAgICAgdGhpcy5zaWRlTWVudS5zaWRlTWVudUVsZW1lbnRzLmludGVnZXJUb2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5oYW5kbGVJbnRlZ2VyVG9nZ2xlQ2hhbmdlKTtcclxuICAgICAgICBbdGhpcy5zaWRlTWVudS5zaWRlTWVudUVsZW1lbnRzLmZyb21JbnB1dCwgdGhpcy5zaWRlTWVudS5zaWRlTWVudUVsZW1lbnRzLnRvSW5wdXRdLmZvckVhY2goKHZhbHVlSW5wdXQpID0+IHtcclxuICAgICAgICAgICAgdmFsdWVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmhhbmRsZVZhbHVlSW5wdXRDaGFuZ2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFt0aGlzLnNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMubWluaW11bUlucHV0LCB0aGlzLnNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMubWF4aW11bUlucHV0XS5mb3JFYWNoKChyYW5nZUlucHV0KSA9PiB7XHJcbiAgICAgICAgICAgIHJhbmdlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5oYW5kbGVSYW5nZUlucHV0Q2hhbmdlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMuc3RlcElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuaGFuZGxlU3RlcElucHV0Q2hhbmdlKTtcclxuICAgICAgICBbdGhpcy5oYW5kbGVzLmZyb21IYW5kbGUsIHRoaXMuaGFuZGxlcy50b0hhbmRsZV0uZm9yRWFjaCgoaGFuZGxlKSA9PiB7XHJcbiAgICAgICAgICAgIGhhbmRsZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLmhhbmRsZUhhbmRsZUNsaWNrKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNsaWRlci5zbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5oYW5kbGVTbGlkZXJDbGljayk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlV2luZG93UmVzaXplKTtcclxuICAgIH1cclxuICAgIGhhbmRsZUhhbmRsZUNsaWNrKGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgICAgIHRoaXMubW92ZW1lbnQuaGFuZGxlTGlzdGVuZXIoe1xyXG4gICAgICAgICAgICBldmVudEluZm86IHtcclxuICAgICAgICAgICAgICAgIHRhcmdldCxcclxuICAgICAgICAgICAgICAgIHg6IGV2ZW50LmNsaWVudFgsXHJcbiAgICAgICAgICAgICAgICB5OiBldmVudC5jbGllbnRZLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlU2NhbGVWYWx1ZUNsaWNrKGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGV2ZW50LnRhcmdldDtcclxuICAgICAgICB0aGlzLmRhdGFSZXF1ZXN0VG9Nb2RlbC5uZWVkQXBwbHlWYWx1ZUZyb21TY2FsZSA9IHsgbmFtZTogJycsIHZhbHVlOiBlbGVtZW50LmlubmVyVGV4dCB9O1xyXG4gICAgfVxyXG4gICAgaGFuZGxlVG9Ub2dnbGVDaGFuZ2UoZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgICAgIHRoaXMuYmFzaWNTZXR0aW5ncy5kb3VibGUgPSBlbGVtZW50LmNoZWNrZWQ7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVzLmNvbnRyb2xIYW5kbGVzRGlzcGxheSh7XHJcbiAgICAgICAgICAgIGlzRG91YmxlOiB0aGlzLmJhc2ljU2V0dGluZ3MuZG91YmxlLFxyXG4gICAgICAgICAgICBwb3NpdGlvbnM6IHRoaXMubW92ZW1lbnQucG9zaXRpb25zLFxyXG4gICAgICAgICAgICBzbGlkZXJXaWR0aDogdGhpcy5zbGlkZXIuc2xpZGVyLm9mZnNldFdpZHRoLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuaW50ZXJ2YWwuaGlkZVNlbGVjdGVkSW50ZXJ2YWwoe1xyXG4gICAgICAgICAgICBpc0RvdWJsZTogdGhpcy5iYXNpY1NldHRpbmdzLmRvdWJsZSxcclxuICAgICAgICAgICAgaGFuZGxlV2lkdGg6IHRoaXMuaGFuZGxlcy5mcm9tSGFuZGxlLm9mZnNldFdpZHRoLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2lkZU1lbnUuaGlkZVRvVmFsdWVzKHRoaXMuYmFzaWNTZXR0aW5ncy5kb3VibGUpO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlUGxhbmVUb2dnbGVDaGFuZ2UoZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgICAgIHRoaXMuYmFzaWNTZXR0aW5ncy52ZXJ0aWNhbCA9IGVsZW1lbnQuY2hlY2tlZDtcclxuICAgICAgICB0aGlzLnNsaWRlci5jaGFuZ2VQbGFuZSh7XHJcbiAgICAgICAgICAgIGlzVmVydGljYWw6IHRoaXMuYmFzaWNTZXR0aW5ncy52ZXJ0aWNhbCxcclxuICAgICAgICAgICAgaXNTdGVwOiB0aGlzLmNoZWNrSXNTdGVwUmVxdWlyZWQoKSxcclxuICAgICAgICAgICAgcmVxdWVzdHM6IHRoaXMuZGF0YVJlcXVlc3RUb01vZGVsLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlcy5jaGFuZ2VQbGFuZSh0aGlzLmJhc2ljU2V0dGluZ3MudmVydGljYWwpO1xyXG4gICAgICAgIHRoaXMudmFsdWVzU2NhbGUuY2hhbmdlUGxhbmUodGhpcy5iYXNpY1NldHRpbmdzLnZlcnRpY2FsKTtcclxuICAgIH1cclxuICAgIGhhbmRsZVZhbHVlU2NhbGVUb2dnbGVDaGFuZ2UoZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgICAgIHRoaXMuYmFzaWNTZXR0aW5ncy52YWx1ZVNjYWxlID0gZWxlbWVudC5jaGVja2VkO1xyXG4gICAgICAgIHRoaXMudmFsdWVzU2NhbGUuaGlkZVZhbHVlU2NhbGUodGhpcy5iYXNpY1NldHRpbmdzLnZhbHVlU2NhbGUpO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlSGFuZGxlVmFsdWVzQ2hhbmdlKGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGV2ZW50LnRhcmdldDtcclxuICAgICAgICB0aGlzLmJhc2ljU2V0dGluZ3MuaGFuZGxlc1ZhbHVlcyA9IGVsZW1lbnQuY2hlY2tlZDtcclxuICAgICAgICB0aGlzLmhhbmRsZXMuaGlkZUhhbmRsZVZhbHVlcyh0aGlzLmJhc2ljU2V0dGluZ3MuaGFuZGxlc1ZhbHVlcyk7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVWYWx1ZUlucHV0Q2hhbmdlKGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGV2ZW50LnRhcmdldDtcclxuICAgICAgICBsZXQgdGFyZ2V0O1xyXG4gICAgICAgIGlmIChlbGVtZW50ID09PSB0aGlzLnNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMuZnJvbUlucHV0KSB7XHJcbiAgICAgICAgICAgIHRhcmdldCA9ICdmcm9tJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRhcmdldCA9ICd0byc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZGF0YVJlcXVlc3RUb01vZGVsLm5lZWRBcHBseU5ld1ZhbHVlID0geyBuYW1lOiB0YXJnZXQsIHZhbHVlOiBlbGVtZW50LnZhbHVlIH07XHJcbiAgICB9XHJcbiAgICBoYW5kbGVTdGVwSW5wdXRDaGFuZ2UoZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgICAgIHRoaXMuYmFzaWNTZXR0aW5ncy5zdGVwID0gTnVtYmVyKGVsZW1lbnQudmFsdWUpO1xyXG4gICAgICAgIGlmIChlbGVtZW50LnZhbHVlID09PSAnMCcpIHtcclxuICAgICAgICAgICAgdGhpcy5zaWRlTWVudS5zaWRlTWVudUVsZW1lbnRzLnN0ZXBJbnB1dC52YWx1ZSA9ICcnO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2ljU2V0dGluZ3Muc3RlcCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhUmVxdWVzdFRvTW9kZWwubmVlZFN0ZXBXaWR0aCA9IHsgbmFtZTogJycsIHZhbHVlOiAndHJ1ZScgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBoYW5kbGVSYW5nZUlucHV0Q2hhbmdlKGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGV2ZW50LnRhcmdldDtcclxuICAgICAgICBsZXQgdGFyZ2V0O1xyXG4gICAgICAgIGlmIChlbGVtZW50ID09PSB0aGlzLnNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMubWluaW11bUlucHV0KSB7XHJcbiAgICAgICAgICAgIHRhcmdldCA9ICdtaW4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGFyZ2V0ID0gJ21heCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZGF0YVJlcXVlc3RUb01vZGVsLm5lZWRDaGFuZ2VTbGlkZXJWYWx1ZXNSYW5nZSA9IHsgbmFtZTogdGFyZ2V0LCB2YWx1ZTogZWxlbWVudC52YWx1ZSB9O1xyXG4gICAgfVxyXG4gICAgaGFuZGxlSW50ZWdlclRvZ2dsZUNoYW5nZShldmVudCkge1xyXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBldmVudC50YXJnZXQ7XHJcbiAgICAgICAgdGhpcy5iYXNpY1NldHRpbmdzLmludGVnZXIgPSBlbGVtZW50LmNoZWNrZWQ7XHJcbiAgICAgICAgdGhpcy5kYXRhUmVxdWVzdFRvTW9kZWwubmVlZERhdGFGb3JTdGFydFBvc2l0aW9uID0geyBuYW1lOiAnJywgdmFsdWU6ICd0cnVlJyB9O1xyXG4gICAgfVxyXG4gICAgaGFuZGxlU2xpZGVyQ2xpY2soZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBpc05vdFNsaWRlckJvZHkgPSBldmVudC50YXJnZXQgIT09IHRoaXMuaW50ZXJ2YWwuaW50ZXJ2YWwgJiYgZXZlbnQudGFyZ2V0ICE9PSB0aGlzLnNsaWRlci5zbGlkZXI7XHJcbiAgICAgICAgY29uc3QgaG9yaXpvbnRhbFBvc2l0aW9uID0gKGV2ZW50LmNsaWVudFggLSB0aGlzLnNsaWRlci5zbGlkZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkueCAtICh0aGlzLmhhbmRsZXMuZnJvbUhhbmRsZS5vZmZzZXRXaWR0aCAvIDIpKTtcclxuICAgICAgICBjb25zdCB2ZXJ0aWNhbFBvc2l0aW9uID0gdGhpcy5zbGlkZXIuc2xpZGVyLm9mZnNldFdpZHRoIC0gKGV2ZW50LmNsaWVudFkgLSB0aGlzLnNsaWRlci5zbGlkZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkueSArICh0aGlzLmhhbmRsZXMuZnJvbUhhbmRsZS5vZmZzZXRXaWR0aCAvIDIpKTtcclxuICAgICAgICBpZiAoaXNOb3RTbGlkZXJCb2R5KVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0UG9zaXRpb24gPSB0aGlzLmJhc2ljU2V0dGluZ3MudmVydGljYWwgPyB2ZXJ0aWNhbFBvc2l0aW9uIDogaG9yaXpvbnRhbFBvc2l0aW9uO1xyXG4gICAgICAgIGNvbnN0IHRhcmdldEhhbmRsZSA9IHRoaXMuaGFuZGxlcy5zZWxlY3RzSGFuZGxlVG9Nb3ZlKHtcclxuICAgICAgICAgICAgdGFyZ2V0UG9zaXRpb24sXHJcbiAgICAgICAgICAgIHBvc2l0aW9uczogdGhpcy5tb3ZlbWVudC5wb3NpdGlvbnMsXHJcbiAgICAgICAgICAgIGlzRG91YmxlOiB0aGlzLmJhc2ljU2V0dGluZ3MuZG91YmxlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMubW92ZW1lbnQuZGF0YUZvck1vdmVtZW50LnRhcmdldCA9IHRhcmdldEhhbmRsZTtcclxuICAgICAgICBjb25zdCBjb3JyZWN0ZWRWYWx1ZSA9IHRoaXMubW92ZW1lbnQuY29ycmVjdHNJbXBvc3NpYmxlUG9zaXRpb24odGhpcy5zbGlkZXIuc2xpZGVyLm9mZnNldFdpZHRoIC0gdGFyZ2V0SGFuZGxlLm9mZnNldFdpZHRoLCB0YXJnZXRQb3NpdGlvbik7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVzLmFjY2VwdE5ld1Bvc2l0aW9uKHtcclxuICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXRIYW5kbGUsXHJcbiAgICAgICAgICAgIHZhbHVlOiBjb3JyZWN0ZWRWYWx1ZSxcclxuICAgICAgICAgICAgcG9zaXRpb25zOiB0aGlzLm1vdmVtZW50LnBvc2l0aW9ucyxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLm1vdmVtZW50LmNvcnJlY3RzSW50ZXJ2YWxQb3NpdGlvbigpO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlV2luZG93UmVzaXplKCkge1xyXG4gICAgICAgIHRoaXMuZGF0YVJlcXVlc3RUb01vZGVsLm5lZWREYXRhRm9yU2NhbGUgPSB7IG5hbWU6ICcnLCB2YWx1ZTogJ3RydWUnIH07XHJcbiAgICAgICAgdGhpcy5kYXRhUmVxdWVzdFRvTW9kZWwubmVlZERhdGFGb3JTdGFydFBvc2l0aW9uID0geyBuYW1lOiAnJywgdmFsdWU6ICd0cnVlJyB9O1xyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrSXNTdGVwUmVxdWlyZWQoKSlcclxuICAgICAgICAgICAgdGhpcy5kYXRhUmVxdWVzdFRvTW9kZWwubmVlZFN0ZXBXaWR0aCA9IHsgbmFtZTogJycsIHZhbHVlOiAndHJ1ZScgfTtcclxuICAgIH1cclxufTtcclxuVmlldyA9IF9fZGVjb3JhdGUoW1xyXG4gICAgYXV0b2JpbmRfZGVjb3JhdG9yXzEuZGVmYXVsdFxyXG5dLCBWaWV3KTtcclxuZXhwb3J0cy5WaWV3ID0gVmlldztcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgVmlld18xID0gcmVxdWlyZShcIi4vVmlld1wiKTtcclxucmVxdWlyZSgnamFzbWluZS1qcXVlcnknKTtcclxuZGVzY3JpYmUoJ1ZpZXcnLCAoKSA9PiB7XHJcbiAgICBsZXQgdmlldztcclxuICAgIGNvbnN0IHNldHRpbmdzID0ge1xyXG4gICAgICAgIGRvdWJsZTogdHJ1ZSxcclxuICAgICAgICAnc2lkZS1tZW51JzogdHJ1ZSxcclxuICAgICAgICBoYW5kbGVzVmFsdWVzOiB0cnVlLFxyXG4gICAgICAgIHN0ZXA6IHRydWUsXHJcbiAgICAgICAgdmFsdWVTY2FsZTogdHJ1ZSxcclxuICAgICAgICB2ZXJ0aWNhbDogdHJ1ZSxcclxuICAgICAgICBpbnRlZ2VyOiB0cnVlLFxyXG4gICAgfTtcclxuICAgIGNvbnN0IHRhcmdldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICAgICAgdmlldyA9IG5ldyBWaWV3XzEuVmlldyhzZXR0aW5ncywgdGFyZ2V0KTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ1ZpZXcgY2FuIGJlIGNyZWF0ZScsICgpID0+IHtcclxuICAgICAgICBleHBlY3QodmlldykudG9CZVRydXRoeSgpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgncHJlcGFyZVNsaWRlckZvclVzZSgpIHdvcmsgY29ycmVjdGx5JywgKCkgPT4ge1xyXG4gICAgICAgIHZpZXcucHJlcGFyZVNsaWRlckZvclVzZSgpO1xyXG4gICAgICAgIGV4cGVjdCh0YXJnZXQpLnRvQ29udGFpbkVsZW1lbnQoJ2Rpdi5nb2J5LXNsaWRlcicpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgncHJlcGFyZVNsaWRlckZvclVzZSgpIGFkZCBzaWRlIG1lbnUgaW4gdXNlciBjb250YWluZXInLCAoKSA9PiB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGNvbnN0IHRlc3RDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0ZXN0Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3NpZGVNZW51VGVzdENvbnRhaW5lcicpO1xyXG4gICAgICAgIChfYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFwcGVuZCh0ZXN0Q29udGFpbmVyKTtcclxuICAgICAgICB2aWV3LmJhc2ljU2V0dGluZ3NbJ3NpZGUtbWVudSddID0gJy5zaWRlTWVudVRlc3RDb250YWluZXInO1xyXG4gICAgICAgIHZpZXcucHJlcGFyZVNsaWRlckZvclVzZSgpO1xyXG4gICAgICAgIGV4cGVjdCh0ZXN0Q29udGFpbmVyKS50b0NvbnRhaW5FbGVtZW50KCdkaXYuZ29ieS1zaWRlLW1lbnUnKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ3VwZGF0ZVNsaWRlclZpZXcoKSBjYWxsIHBsYW5lIGNoYW5nZXJzIHRvIG1ha2UgdmVydGljYWwnLCAoKSA9PiB7XHJcbiAgICAgICAgdmlldy51cGRhdGVWaWV3KHtcclxuICAgICAgICAgICAgdmVydGljYWw6IHRydWUsXHJcbiAgICAgICAgICAgIHNpZGVNZW51OiB0cnVlLFxyXG4gICAgICAgICAgICBpbnRlZ2VyOiB0cnVlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGV4cGVjdCh2aWV3LnNsaWRlci5zbGlkZXIpLnRvSGF2ZUNsYXNzKCdnb2J5LXNsaWRlcl9zdGF0ZV92ZXJ0aWNhbCcpO1xyXG4gICAgICAgIGV4cGVjdCh2aWV3LmhhbmRsZXMuZnJvbVZhbHVlKS50b0hhdmVDbGFzcygnZ29ieS1zbGlkZXJfX2hhbmRsZS12YWx1ZV9zdGF0ZV92ZXJ0aWNhbCcpO1xyXG4gICAgICAgIGV4cGVjdCh2aWV3LmhhbmRsZXMudG9WYWx1ZSkudG9IYXZlQ2xhc3MoJ2dvYnktc2xpZGVyX19oYW5kbGUtdmFsdWVfc3RhdGVfdmVydGljYWwnKTtcclxuICAgICAgICBleHBlY3Qodmlldy52YWx1ZXNTY2FsZS5taW5WYWx1ZSkudG9IYXZlQ2xhc3MoJ2dvYnktc2xpZGVyX192YWx1ZV9zdGF0ZV92ZXJ0aWNhbCcpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgndXBkYXRlU2xpZGVyVmlldygpIGNhbGwgcGxhbmUgY2hhbmdlcnMgdG8gbWFrZSBob3Jpem9udGFsbHknLCAoKSA9PiB7XHJcbiAgICAgICAgdmlldy51cGRhdGVWaWV3KHtcclxuICAgICAgICAgICAgdmVydGljYWw6IGZhbHNlLFxyXG4gICAgICAgICAgICBzaWRlTWVudTogdHJ1ZSxcclxuICAgICAgICAgICAgaW50ZWdlcjogdHJ1ZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBleHBlY3Qodmlldy5zbGlkZXIuc2xpZGVyKS5ub3QudG9IYXZlQ2xhc3MoJ2dvYnktc2xpZGVyX3N0YXRlX3ZlcnRpY2FsJyk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcuaGFuZGxlcy5mcm9tVmFsdWUpLm5vdC50b0hhdmVDbGFzcygnZ29ieS1zbGlkZXJfX2hhbmRsZS12YWx1ZV9zdGF0ZV92ZXJ0aWNhbCcpO1xyXG4gICAgICAgIGV4cGVjdCh2aWV3LmhhbmRsZXMudG9WYWx1ZSkubm90LnRvSGF2ZUNsYXNzKCdnb2J5LXNsaWRlcl9faGFuZGxlLXZhbHVlX3N0YXRlX3ZlcnRpY2FsJyk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcudmFsdWVzU2NhbGUubWluVmFsdWUpLm5vdC50b0hhdmVDbGFzcygnZ29ieS1zbGlkZXJfX3ZhbHVlX3N0YXRlX3ZlcnRpY2FsJyk7XHJcbiAgICB9KTtcclxuICAgIGl0KCd1cGRhdGVTbGlkZXJWaWV3KCkgY2FsbCBkaXNwbGF5IGNoYW5nZXJzIHRvIGhpZGUgdG8gaGFuZGVsJywgKCkgPT4ge1xyXG4gICAgICAgIHZpZXcuYmFzaWNTZXR0aW5ncy5kb3VibGUgPSBmYWxzZTtcclxuICAgICAgICB2aWV3LnVwZGF0ZVZpZXcoe1xyXG4gICAgICAgICAgICB2ZXJ0aWNhbDogZmFsc2UsXHJcbiAgICAgICAgICAgIHNpZGVNZW51OiB0cnVlLFxyXG4gICAgICAgICAgICBkb3VibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBpbnRlZ2VyOiB0cnVlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGV4cGVjdCh2aWV3LmhhbmRsZXMudG9IYW5kbGUuc3R5bGUuZGlzcGxheSkudG9FcXVhbCgnbm9uZScpO1xyXG4gICAgICAgIGV4cGVjdCh2aWV3LmludGVydmFsLmludGVydmFsLnN0eWxlLmRpc3BsYXkpLnRvRXF1YWwoJ25vbmUnKTtcclxuICAgICAgICBleHBlY3Qodmlldy5zaWRlTWVudS5zaWRlTWVudUVsZW1lbnRzLnRvSW5wdXRXcmFwcGVyLnN0eWxlLmRpc3BsYXkpLnRvRXF1YWwoJ25vbmUnKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ3VwZGF0ZVNsaWRlclZpZXcoKSBjYWxsIGRpc3BsYXkgY2hhbmdlcnMgdG8gaGlkZSB2YWx1ZVNjYWxlJywgKCkgPT4ge1xyXG4gICAgICAgIHZpZXcuYmFzaWNTZXR0aW5ncy52YWx1ZVNjYWxlID0gZmFsc2U7XHJcbiAgICAgICAgdmlldy51cGRhdGVWaWV3KHtcclxuICAgICAgICAgICAgdmVydGljYWw6IGZhbHNlLFxyXG4gICAgICAgICAgICBzaWRlTWVudTogdHJ1ZSxcclxuICAgICAgICAgICAgdmFsdWVTY2FsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGludGVnZXI6IHRydWUsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcudmFsdWVzU2NhbGUubWluVmFsdWUuc3R5bGUuZGlzcGxheSkudG9FcXVhbCgnbm9uZScpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgndXBkYXRlU2xpZGVyVmlldygpIGNhbGwgZGlzcGxheSBjaGFuZ2VycyB0byBoaWRlIGhhbmRsZXNWYWx1ZXMnLCAoKSA9PiB7XHJcbiAgICAgICAgdmlldy5iYXNpY1NldHRpbmdzLmhhbmRsZXNWYWx1ZXMgPSBmYWxzZTtcclxuICAgICAgICB2aWV3LnVwZGF0ZVZpZXcoe1xyXG4gICAgICAgICAgICB2ZXJ0aWNhbDogZmFsc2UsXHJcbiAgICAgICAgICAgIHNpZGVNZW51OiB0cnVlLFxyXG4gICAgICAgICAgICBoYW5kbGVzVmFsdWVzOiBmYWxzZSxcclxuICAgICAgICAgICAgaW50ZWdlcjogdHJ1ZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBleHBlY3Qodmlldy5oYW5kbGVzLmZyb21WYWx1ZS5zdHlsZS5kaXNwbGF5KS50b0VxdWFsKCdub25lJyk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcuaGFuZGxlcy50b1ZhbHVlLnN0eWxlLmRpc3BsYXkpLnRvRXF1YWwoJ25vbmUnKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ3VwZGF0ZVNsaWRlclZpZXcoKSBjaGVjayBpbnB1dHMgaW4gc2lkZS1tZW51JywgKCkgPT4ge1xyXG4gICAgICAgIHZpZXcuYmFzaWNTZXR0aW5nc1snc2lkZS1tZW51J10gPSB0cnVlO1xyXG4gICAgICAgIHZpZXcudXBkYXRlVmlldyh7XHJcbiAgICAgICAgICAgIHZlcnRpY2FsOiB0cnVlLFxyXG4gICAgICAgICAgICBzaWRlTWVudTogdHJ1ZSxcclxuICAgICAgICAgICAgZG91YmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBoYW5kbGVzVmFsdWVzOiB0cnVlLFxyXG4gICAgICAgICAgICB2YWx1ZVNjYWxlOiB0cnVlLFxyXG4gICAgICAgICAgICBpbnRlZ2VyOiB0cnVlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGV4cGVjdCh2aWV3LnNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMudG9Ub2dnbGUpLnRvQmVDaGVja2VkKCk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcuc2lkZU1lbnUuc2lkZU1lbnVFbGVtZW50cy52YWx1ZVNjYWxlVG9nZ2xlKS50b0JlQ2hlY2tlZCgpO1xyXG4gICAgICAgIGV4cGVjdCh2aWV3LnNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMuaGFuZGxlVmFsdWVzVG9nZ2xlKS50b0JlQ2hlY2tlZCgpO1xyXG4gICAgICAgIGV4cGVjdCh2aWV3LnNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMucGxhbmVUb2dnbGUpLnRvQmVDaGVja2VkKCk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdyZWZyZXNoQWxsQ29tcG9uZW50cygpIHJlZnJlc2ggaGFuZGVsIHZhbHVlcycsICgpID0+IHtcclxuICAgICAgICB2aWV3LnJlZnJlc2hBbGxDb21wb25lbnRzKHtcclxuICAgICAgICAgICAgdGFyZ2V0OiAnZnJvbScsXHJcbiAgICAgICAgICAgIHZhbHVlOiAnNTAnLFxyXG4gICAgICAgICAgICBpc1RvRml4ZWQ6IHRydWUsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcuaGFuZGxlcy5mcm9tVmFsdWUuaW5uZXJUZXh0KS50b0VxdWFsKCc1MCcpO1xyXG4gICAgICAgIHZpZXcucmVmcmVzaEFsbENvbXBvbmVudHMoe1xyXG4gICAgICAgICAgICB0YXJnZXQ6ICd0bycsXHJcbiAgICAgICAgICAgIHZhbHVlOiAnNTAnLFxyXG4gICAgICAgICAgICBpc1RvRml4ZWQ6IHRydWUsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcuaGFuZGxlcy50b1ZhbHVlLmlubmVyVGV4dCkudG9FcXVhbCgnNTAnKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ3JlZnJlc2hBbGxDb21wb25lbnRzKCkgcmVmcmVzaCBzaWRlTWVudSB2YWx1ZXMnLCAoKSA9PiB7XHJcbiAgICAgICAgdmlldy5yZWZyZXNoQWxsQ29tcG9uZW50cyh7XHJcbiAgICAgICAgICAgIHRhcmdldDogJ2Zyb20nLFxyXG4gICAgICAgICAgICB2YWx1ZTogJzUwJyxcclxuICAgICAgICAgICAgaXNUb0ZpeGVkOiB0cnVlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGV4cGVjdCh2aWV3LnNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMuZnJvbU91dHB1dC5pbm5lclRleHQpLnRvRXF1YWwoJzUwJyk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcuc2lkZU1lbnUuc2lkZU1lbnVFbGVtZW50cy5mcm9tSW5wdXQudmFsdWUpLnRvRXF1YWwoJzUwJyk7XHJcbiAgICAgICAgdmlldy5yZWZyZXNoQWxsQ29tcG9uZW50cyh7XHJcbiAgICAgICAgICAgIHRhcmdldDogJ3RvJyxcclxuICAgICAgICAgICAgdmFsdWU6ICc1MCcsXHJcbiAgICAgICAgICAgIGlzVG9GaXhlZDogdHJ1ZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBleHBlY3Qodmlldy5zaWRlTWVudS5zaWRlTWVudUVsZW1lbnRzLnRvT3V0cHV0LmlubmVyVGV4dCkudG9FcXVhbCgnIC0gNTAnKTtcclxuICAgICAgICBleHBlY3Qodmlldy5zaWRlTWVudS5zaWRlTWVudUVsZW1lbnRzLnRvSW5wdXQudmFsdWUpLnRvRXF1YWwoJzUwJyk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdiaW5kRXZlbnRMaXN0ZW5lcnMoKSBjb3JyZWN0bHkgcmVzcG9uZHMgdG8gdG9Ub2dnbGUgaW5wdXQgY2hhbmdlcycsICgpID0+IHtcclxuICAgICAgICB2aWV3LmJpbmRFdmVudExpc3RlbmVycygpO1xyXG4gICAgICAgIHZpZXcuc2lkZU1lbnUuc2lkZU1lbnVFbGVtZW50cy50b1RvZ2dsZS5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgdmlldy5zaWRlTWVudS5zaWRlTWVudUVsZW1lbnRzLnRvVG9nZ2xlLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjaGFuZ2UnKSk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcuYmFzaWNTZXR0aW5ncy5kb3VibGUpLnRvQmVGYWxzZSgpO1xyXG4gICAgICAgIGV4cGVjdCh2aWV3LmhhbmRsZXMudG9IYW5kbGUuc3R5bGUuZGlzcGxheSkudG9FcXVhbCgnbm9uZScpO1xyXG4gICAgICAgIGV4cGVjdCh2aWV3LmludGVydmFsLmludGVydmFsLnN0eWxlLmRpc3BsYXkpLnRvRXF1YWwoJ25vbmUnKTtcclxuICAgICAgICBleHBlY3Qodmlldy5zaWRlTWVudS5zaWRlTWVudUVsZW1lbnRzLnRvSW5wdXRXcmFwcGVyLnN0eWxlLmRpc3BsYXkpLnRvRXF1YWwoJ25vbmUnKTtcclxuICAgICAgICB2aWV3LnNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMudG9Ub2dnbGUuY2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgdmlldy5zaWRlTWVudS5zaWRlTWVudUVsZW1lbnRzLnRvVG9nZ2xlLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjaGFuZ2UnKSk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcuYmFzaWNTZXR0aW5ncy5kb3VibGUpLnRvQmVUcnVlKCk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcuaGFuZGxlcy50b0hhbmRsZS5zdHlsZS5kaXNwbGF5KS50b0VxdWFsKCdpbmxpbmUtYmxvY2snKTtcclxuICAgICAgICBleHBlY3Qodmlldy5pbnRlcnZhbC5pbnRlcnZhbC5zdHlsZS5kaXNwbGF5KS50b0VxdWFsKCdibG9jaycpO1xyXG4gICAgICAgIGV4cGVjdCh2aWV3LnNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMudG9JbnB1dFdyYXBwZXIuc3R5bGUuZGlzcGxheSkudG9FcXVhbCgnYmxvY2snKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ2JpbmRFdmVudExpc3RlbmVycygpIGNvcnJlY3RseSByZXNwb25kcyB0byBwbGFuZSBpbnB1dCBjaGFuZ2VzJywgKCkgPT4ge1xyXG4gICAgICAgIHZpZXcuYmluZEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgICAgdmlldy5zaWRlTWVudS5zaWRlTWVudUVsZW1lbnRzLnBsYW5lVG9nZ2xlLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIHZpZXcuc2lkZU1lbnUuc2lkZU1lbnVFbGVtZW50cy5wbGFuZVRvZ2dsZS5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnY2hhbmdlJykpO1xyXG4gICAgICAgIGV4cGVjdCh2aWV3LmJhc2ljU2V0dGluZ3MudmVydGljYWwpLnRvQmVUcnVlKCk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcuc2xpZGVyLnNsaWRlcikudG9IYXZlQ2xhc3MoJ2dvYnktc2xpZGVyX3N0YXRlX3ZlcnRpY2FsJyk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcuaGFuZGxlcy5mcm9tVmFsdWUpLnRvSGF2ZUNsYXNzKCdnb2J5LXNsaWRlcl9faGFuZGxlLXZhbHVlX3N0YXRlX3ZlcnRpY2FsJyk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcuaGFuZGxlcy50b1ZhbHVlKS50b0hhdmVDbGFzcygnZ29ieS1zbGlkZXJfX2hhbmRsZS12YWx1ZV9zdGF0ZV92ZXJ0aWNhbCcpO1xyXG4gICAgICAgIGV4cGVjdCh2aWV3LnZhbHVlc1NjYWxlLm1pblZhbHVlKS50b0hhdmVDbGFzcygnZ29ieS1zbGlkZXJfX3ZhbHVlX3N0YXRlX3ZlcnRpY2FsJyk7XHJcbiAgICAgICAgdmlldy5zaWRlTWVudS5zaWRlTWVudUVsZW1lbnRzLnBsYW5lVG9nZ2xlLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICB2aWV3LnNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMucGxhbmVUb2dnbGUuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NoYW5nZScpKTtcclxuICAgICAgICBleHBlY3Qodmlldy5iYXNpY1NldHRpbmdzLnZlcnRpY2FsKS50b0JlRmFsc2UoKTtcclxuICAgICAgICBleHBlY3Qodmlldy5zbGlkZXIuc2xpZGVyKS5ub3QudG9IYXZlQ2xhc3MoJ2dvYnktc2xpZGVyX3N0YXRlX3ZlcnRpY2FsJyk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcuaGFuZGxlcy5mcm9tVmFsdWUpLm5vdC50b0hhdmVDbGFzcygnZ29ieS1zbGlkZXJfX2hhbmRsZS12YWx1ZV9zdGF0ZV92ZXJ0aWNhbCcpO1xyXG4gICAgICAgIGV4cGVjdCh2aWV3LmhhbmRsZXMudG9WYWx1ZSkubm90LnRvSGF2ZUNsYXNzKCdnb2J5LXNsaWRlcl9faGFuZGxlLXZhbHVlX3N0YXRlX3ZlcnRpY2FsJyk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcudmFsdWVzU2NhbGUubWluVmFsdWUpLm5vdC50b0hhdmVDbGFzcygnZ29ieS1zbGlkZXJfX3ZhbHVlX3N0YXRlX3ZlcnRpY2FsJyk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdiaW5kRXZlbnRMaXN0ZW5lcnMoKSBjb3JyZWN0bHkgcmVzcG9uZHMgdG8gdmFsdWVTY2FsZSBpbnB1dCBjaGFuZ2VzJywgKCkgPT4ge1xyXG4gICAgICAgIHZpZXcuYmluZEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgICAgdmlldy5zaWRlTWVudS5zaWRlTWVudUVsZW1lbnRzLnZhbHVlU2NhbGVUb2dnbGUuY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgIHZpZXcuc2lkZU1lbnUuc2lkZU1lbnVFbGVtZW50cy52YWx1ZVNjYWxlVG9nZ2xlLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjaGFuZ2UnKSk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcuYmFzaWNTZXR0aW5ncy52YWx1ZVNjYWxlKS50b0JlRmFsc3koKTtcclxuICAgICAgICBleHBlY3Qodmlldy52YWx1ZXNTY2FsZS5taW5WYWx1ZS5zdHlsZS5kaXNwbGF5KS50b0VxdWFsKCdub25lJyk7XHJcbiAgICAgICAgdmlldy5zaWRlTWVudS5zaWRlTWVudUVsZW1lbnRzLnZhbHVlU2NhbGVUb2dnbGUuY2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgdmlldy5zaWRlTWVudS5zaWRlTWVudUVsZW1lbnRzLnZhbHVlU2NhbGVUb2dnbGUuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NoYW5nZScpKTtcclxuICAgICAgICBleHBlY3Qodmlldy5iYXNpY1NldHRpbmdzLnZhbHVlU2NhbGUpLnRvQmVUcnVlKCk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcudmFsdWVzU2NhbGUubWluVmFsdWUuc3R5bGUuZGlzcGxheSkudG9FcXVhbCgnaW5saW5lLWJsb2NrJyk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdiaW5kRXZlbnRMaXN0ZW5lcnMoKSBjb3JyZWN0bHkgcmVzcG9uZHMgdG8gaGFuZGVsVmFsdWVzIGlucHV0IGNoYW5nZXMnLCAoKSA9PiB7XHJcbiAgICAgICAgdmlldy5iaW5kRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgICB2aWV3LnNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMuaGFuZGxlVmFsdWVzVG9nZ2xlLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICB2aWV3LnNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMuaGFuZGxlVmFsdWVzVG9nZ2xlLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjaGFuZ2UnKSk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcuYmFzaWNTZXR0aW5ncy5oYW5kbGVzVmFsdWVzKS50b0JlRmFsc3koKTtcclxuICAgICAgICBleHBlY3Qodmlldy5oYW5kbGVzLmZyb21WYWx1ZS5zdHlsZS5kaXNwbGF5KS50b0VxdWFsKCdub25lJyk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcuaGFuZGxlcy50b1ZhbHVlLnN0eWxlLmRpc3BsYXkpLnRvRXF1YWwoJ25vbmUnKTtcclxuICAgICAgICB2aWV3LnNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMuaGFuZGxlVmFsdWVzVG9nZ2xlLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIHZpZXcuc2lkZU1lbnUuc2lkZU1lbnVFbGVtZW50cy5oYW5kbGVWYWx1ZXNUb2dnbGUuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NoYW5nZScpKTtcclxuICAgICAgICBleHBlY3Qodmlldy5iYXNpY1NldHRpbmdzLmhhbmRsZXNWYWx1ZXMpLnRvQmVUcnVlKCk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcuaGFuZGxlcy5mcm9tVmFsdWUuc3R5bGUuZGlzcGxheSkudG9FcXVhbCgnaW5saW5lLWJsb2NrJyk7XHJcbiAgICAgICAgZXhwZWN0KHZpZXcuaGFuZGxlcy50b1ZhbHVlLnN0eWxlLmRpc3BsYXkpLnRvRXF1YWwoJ2lubGluZS1ibG9jaycpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnYmluZEV2ZW50TGlzdGVuZXJzKCkgc2VuZCBuZXcgdmFsdWUgZnJvbSBpbnB1dCcsICgpID0+IHtcclxuICAgICAgICB2aWV3LmJpbmRFdmVudExpc3RlbmVycygpO1xyXG4gICAgICAgIHZpZXcuc2lkZU1lbnUuc2lkZU1lbnVFbGVtZW50cy5mcm9tSW5wdXQudmFsdWUgPSAnNTAnO1xyXG4gICAgICAgIHZpZXcuc2lkZU1lbnUuc2lkZU1lbnVFbGVtZW50cy5mcm9tSW5wdXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NoYW5nZScpKTtcclxuICAgICAgICBleHBlY3Qodmlldy5kYXRhUmVxdWVzdFRvTW9kZWwubmVlZEFwcGx5TmV3VmFsdWUpLnRvRXF1YWwoeyBuYW1lOiAnZnJvbScsIHZhbHVlOiAnNTAnIH0pO1xyXG4gICAgICAgIHZpZXcuc2lkZU1lbnUuc2lkZU1lbnVFbGVtZW50cy50b0lucHV0LnZhbHVlID0gJzgwJztcclxuICAgICAgICB2aWV3LnNpZGVNZW51LnNpZGVNZW51RWxlbWVudHMudG9JbnB1dC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnY2hhbmdlJykpO1xyXG4gICAgICAgIGV4cGVjdCh2aWV3LmRhdGFSZXF1ZXN0VG9Nb2RlbC5uZWVkQXBwbHlOZXdWYWx1ZSkudG9FcXVhbCh7IG5hbWU6ICd0bycsIHZhbHVlOiAnODAnIH0pO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnYmluZEV2ZW50TGlzdGVuZXJzKCkgc2VuZCBuZXcgc3RlcCBmcm9tIGlucHV0JywgKCkgPT4ge1xyXG4gICAgICAgIHZpZXcuZGF0YVJlcXVlc3RUb01vZGVsLm5lZWRTdGVwV2lkdGggPSB7IG5hbWU6ICcnLCB2YWx1ZTogJ3RydWUnIH07XHJcbiAgICAgICAgZXhwZWN0KHZpZXcuZGF0YVJlcXVlc3RUb01vZGVsLm5lZWRTdGVwV2lkdGgpLnRvRXF1YWwoeyBuYW1lOiAnJywgdmFsdWU6ICd0cnVlJyB9KTtcclxuICAgICAgICB2aWV3LmJpbmRFdmVudExpc3RlbmVycygpO1xyXG4gICAgICAgIHZpZXcuc2lkZU1lbnUuc2lkZU1lbnVFbGVtZW50cy5zdGVwSW5wdXQudmFsdWUgPSAnNTAnO1xyXG4gICAgICAgIHZpZXcuc2lkZU1lbnUuc2lkZU1lbnVFbGVtZW50cy5zdGVwSW5wdXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NoYW5nZScpKTtcclxuICAgICAgICBleHBlY3Qodmlldy5kYXRhUmVxdWVzdFRvTW9kZWwubmVlZFN0ZXBXaWR0aCkudG9FcXVhbCh7IG5hbWU6ICcnLCB2YWx1ZTogJ3RydWUnIH0pO1xyXG4gICAgfSk7XHJcbn0pO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuY29uc3QgbW9kZWxUZXN0ID0gcmVxdWlyZS5jb250ZXh0KCcuLi9Nb2RlbCcsIHRydWUsIC90ZXN0LnRzJC8pO1xyXG5jb25zdCBwcmVzZW50ZXJUZXN0cyA9IHJlcXVpcmUuY29udGV4dCgnLi4vUHJlc2VudGVyJywgdHJ1ZSwgL3Rlc3QudHMkLyk7XHJcbmNvbnN0IHZpZXdUZXN0cyA9IHJlcXVpcmUuY29udGV4dCgnLi4vVmlldycsIHRydWUsIC90ZXN0LnRzJC8pO1xyXG5tb2RlbFRlc3Qua2V5cygpLmZvckVhY2gobW9kZWxUZXN0KTtcclxucHJlc2VudGVyVGVzdHMua2V5cygpLmZvckVhY2gocHJlc2VudGVyVGVzdHMpO1xyXG52aWV3VGVzdHMua2V5cygpLmZvckVhY2godmlld1Rlc3RzKTtcclxuY29uc3QgbW9kZWxDb21wb25lbnRzID0gcmVxdWlyZS5jb250ZXh0KCcuLi9Nb2RlbCcsIHRydWUsIC8udHMkLyk7XHJcbmNvbnN0IHByZXNlbnRlckNvbXBvbmVudHMgPSByZXF1aXJlLmNvbnRleHQoJy4uL1ByZXNlbnRlcicsIHRydWUsIC8udHMkLyk7XHJcbmNvbnN0IHZpZXdDb21wb25lbnRzID0gcmVxdWlyZS5jb250ZXh0KCcuLi9WaWV3JywgdHJ1ZSwgLy50cyQvKTtcclxubW9kZWxDb21wb25lbnRzLmtleXMoKS5mb3JFYWNoKG1vZGVsQ29tcG9uZW50cyk7XHJcbnByZXNlbnRlckNvbXBvbmVudHMua2V5cygpLmZvckVhY2gocHJlc2VudGVyQ29tcG9uZW50cyk7XHJcbnZpZXdDb21wb25lbnRzLmtleXMoKS5mb3JFYWNoKHZpZXdDb21wb25lbnRzKTtcclxuIiwiLyohXG5KYXNtaW5lLWpRdWVyeTogYSBzZXQgb2YgalF1ZXJ5IGhlbHBlcnMgZm9yIEphc21pbmUgdGVzdHMuXG5cblZlcnNpb24gMi4xLjFcblxuaHR0cHM6Ly9naXRodWIuY29tL3ZlbGVzaW4vamFzbWluZS1qcXVlcnlcblxuQ29weXJpZ2h0IChjKSAyMDEwLTIwMTQgV29qY2llY2ggWmF3aXN0b3dza2ksIFRyYXZpcyBKZWZmZXJ5XG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xuYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG5cIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbndpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbmRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xucGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG50aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG5pbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbkVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkRcbk5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkVcbkxJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT05cbk9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTlxuV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4qL1xuXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgICAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIGZhY3Rvcnkocm9vdCwgcm9vdC5qYXNtaW5lLCByZXF1aXJlKCdqcXVlcnknKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZmFjdG9yeShyb290LCByb290Lmphc21pbmUsIHJvb3QualF1ZXJ5KTtcbiAgICB9XG59KChmdW5jdGlvbigpIHtyZXR1cm4gdGhpczsgfSkoKSwgZnVuY3Rpb24gKHdpbmRvdywgamFzbWluZSwgJCkgeyBcInVzZSBzdHJpY3RcIjtcblxuICBqYXNtaW5lLnNwaWVkRXZlbnRzS2V5ID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBldmVudE5hbWUpIHtcbiAgICByZXR1cm4gWyQoc2VsZWN0b3IpLnNlbGVjdG9yLCBldmVudE5hbWVdLnRvU3RyaW5nKClcbiAgfVxuXG4gIGphc21pbmUuZ2V0Rml4dHVyZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGphc21pbmUuY3VycmVudEZpeHR1cmVzXyA9IGphc21pbmUuY3VycmVudEZpeHR1cmVzXyB8fCBuZXcgamFzbWluZS5GaXh0dXJlcygpXG4gIH1cblxuICBqYXNtaW5lLmdldFN0eWxlRml4dHVyZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGphc21pbmUuY3VycmVudFN0eWxlRml4dHVyZXNfID0gamFzbWluZS5jdXJyZW50U3R5bGVGaXh0dXJlc18gfHwgbmV3IGphc21pbmUuU3R5bGVGaXh0dXJlcygpXG4gIH1cblxuICBqYXNtaW5lLkZpeHR1cmVzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY29udGFpbmVySWQgPSAnamFzbWluZS1maXh0dXJlcydcbiAgICB0aGlzLmZpeHR1cmVzQ2FjaGVfID0ge31cbiAgICB0aGlzLmZpeHR1cmVzUGF0aCA9ICdzcGVjL2phdmFzY3JpcHRzL2ZpeHR1cmVzJ1xuICB9XG5cbiAgamFzbWluZS5GaXh0dXJlcy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGh0bWwpIHtcbiAgICB0aGlzLmNsZWFuVXAoKVxuICAgIHJldHVybiB0aGlzLmNyZWF0ZUNvbnRhaW5lcl8oaHRtbClcbiAgfVxuXG4gIGphc21pbmUuRml4dHVyZXMucHJvdG90eXBlLmFwcGVuZFNldD0gZnVuY3Rpb24gKGh0bWwpIHtcbiAgICB0aGlzLmFkZFRvQ29udGFpbmVyXyhodG1sKVxuICB9XG5cbiAgamFzbWluZS5GaXh0dXJlcy5wcm90b3R5cGUucHJlbG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlYWQuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICB9XG5cbiAgamFzbWluZS5GaXh0dXJlcy5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNsZWFuVXAoKVxuICAgIHRoaXMuY3JlYXRlQ29udGFpbmVyXyh0aGlzLnJlYWQuYXBwbHkodGhpcywgYXJndW1lbnRzKSlcbiAgfVxuXG4gIGphc21pbmUuRml4dHVyZXMucHJvdG90eXBlLmFwcGVuZExvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hZGRUb0NvbnRhaW5lcl8odGhpcy5yZWFkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpXG4gIH1cblxuICBqYXNtaW5lLkZpeHR1cmVzLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBodG1sQ2h1bmtzID0gW11cbiAgICAgICwgZml4dHVyZVVybHMgPSBhcmd1bWVudHNcblxuICAgIGZvcih2YXIgdXJsQ291bnQgPSBmaXh0dXJlVXJscy5sZW5ndGgsIHVybEluZGV4ID0gMDsgdXJsSW5kZXggPCB1cmxDb3VudDsgdXJsSW5kZXgrKykge1xuICAgICAgaHRtbENodW5rcy5wdXNoKHRoaXMuZ2V0Rml4dHVyZUh0bWxfKGZpeHR1cmVVcmxzW3VybEluZGV4XSkpXG4gICAgfVxuXG4gICAgcmV0dXJuIGh0bWxDaHVua3Muam9pbignJylcbiAgfVxuXG4gIGphc21pbmUuRml4dHVyZXMucHJvdG90eXBlLmNsZWFyQ2FjaGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5maXh0dXJlc0NhY2hlXyA9IHt9XG4gIH1cblxuICBqYXNtaW5lLkZpeHR1cmVzLnByb3RvdHlwZS5jbGVhblVwID0gZnVuY3Rpb24gKCkge1xuICAgICQoJyMnICsgdGhpcy5jb250YWluZXJJZCkucmVtb3ZlKClcbiAgfVxuXG4gIGphc21pbmUuRml4dHVyZXMucHJvdG90eXBlLnNhbmRib3ggPSBmdW5jdGlvbiAoYXR0cmlidXRlcykge1xuICAgIHZhciBhdHRyaWJ1dGVzVG9TZXQgPSBhdHRyaWJ1dGVzIHx8IHt9XG4gICAgcmV0dXJuICQoJzxkaXYgaWQ9XCJzYW5kYm94XCIgLz4nKS5hdHRyKGF0dHJpYnV0ZXNUb1NldClcbiAgfVxuXG4gIGphc21pbmUuRml4dHVyZXMucHJvdG90eXBlLmNyZWF0ZUNvbnRhaW5lcl8gPSBmdW5jdGlvbiAoaHRtbCkge1xuICAgIHZhciBjb250YWluZXIgPSAkKCc8ZGl2PicpXG4gICAgLmF0dHIoJ2lkJywgdGhpcy5jb250YWluZXJJZClcbiAgICAuaHRtbChodG1sKVxuXG4gICAgJChkb2N1bWVudC5ib2R5KS5hcHBlbmQoY29udGFpbmVyKVxuICAgIHJldHVybiBjb250YWluZXJcbiAgfVxuXG4gIGphc21pbmUuRml4dHVyZXMucHJvdG90eXBlLmFkZFRvQ29udGFpbmVyXyA9IGZ1bmN0aW9uIChodG1sKXtcbiAgICB2YXIgY29udGFpbmVyID0gJChkb2N1bWVudC5ib2R5KS5maW5kKCcjJyt0aGlzLmNvbnRhaW5lcklkKS5hcHBlbmQoaHRtbClcblxuICAgIGlmICghY29udGFpbmVyLmxlbmd0aCkge1xuICAgICAgdGhpcy5jcmVhdGVDb250YWluZXJfKGh0bWwpXG4gICAgfVxuICB9XG5cbiAgamFzbWluZS5GaXh0dXJlcy5wcm90b3R5cGUuZ2V0Rml4dHVyZUh0bWxfID0gZnVuY3Rpb24gKHVybCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5maXh0dXJlc0NhY2hlX1t1cmxdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5sb2FkRml4dHVyZUludG9DYWNoZV8odXJsKVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5maXh0dXJlc0NhY2hlX1t1cmxdXG4gIH1cblxuICBqYXNtaW5lLkZpeHR1cmVzLnByb3RvdHlwZS5sb2FkRml4dHVyZUludG9DYWNoZV8gPSBmdW5jdGlvbiAocmVsYXRpdmVVcmwpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXNcbiAgICAgICwgdXJsID0gdGhpcy5tYWtlRml4dHVyZVVybF8ocmVsYXRpdmVVcmwpXG4gICAgICAsIGh0bWxUZXh0ID0gJydcbiAgICAgICwgcmVxdWVzdCA9ICQuYWpheCh7XG4gICAgICAgIGFzeW5jOiBmYWxzZSwgLy8gbXVzdCBiZSBzeW5jaHJvbm91cyB0byBndWFyYW50ZWUgdGhhdCBubyB0ZXN0cyBhcmUgcnVuIGJlZm9yZSBmaXh0dXJlIGlzIGxvYWRlZFxuICAgICAgICBjYWNoZTogZmFsc2UsXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBkYXRhVHlwZTogJ2h0bWwnLFxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCAkeGhyKSB7XG4gICAgICAgICAgaHRtbFRleHQgPSAkeGhyLnJlc3BvbnNlVGV4dFxuICAgICAgICB9XG4gICAgICB9KS5mYWlsKGZ1bmN0aW9uICgkeGhyLCBzdGF0dXMsIGVycikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRml4dHVyZSBjb3VsZCBub3QgYmUgbG9hZGVkOiAnICsgdXJsICsgJyAoc3RhdHVzOiAnICsgc3RhdHVzICsgJywgbWVzc2FnZTogJyArIGVyci5tZXNzYWdlICsgJyknKVxuICAgICAgfSlcblxuICAgICAgdmFyIHNjcmlwdHMgPSAkKCQucGFyc2VIVE1MKGh0bWxUZXh0LCB0cnVlKSkuZmluZCgnc2NyaXB0W3NyY10nKSB8fCBbXTtcblxuICAgICAgc2NyaXB0cy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICBhc3luYzogZmFsc2UsIC8vIG11c3QgYmUgc3luY2hyb25vdXMgdG8gZ3VhcmFudGVlIHRoYXQgbm8gdGVzdHMgYXJlIHJ1biBiZWZvcmUgZml4dHVyZSBpcyBsb2FkZWRcbiAgICAgICAgICAgIGNhY2hlOiBmYWxzZSxcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnc2NyaXB0JyxcbiAgICAgICAgICAgIHVybDogJCh0aGlzKS5hdHRyKCdzcmMnKSxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsICR4aHIpIHtcbiAgICAgICAgICAgICAgICBodG1sVGV4dCArPSAnPHNjcmlwdD4nICsgJHhoci5yZXNwb25zZVRleHQgKyAnPC9zY3JpcHQ+J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoJHhociwgc3RhdHVzLCBlcnIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NjcmlwdCBjb3VsZCBub3QgYmUgbG9hZGVkOiAnICsgdXJsICsgJyAoc3RhdHVzOiAnICsgc3RhdHVzICsgJywgbWVzc2FnZTogJyArIGVyci5tZXNzYWdlICsgJyknKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pXG5cbiAgICAgIHNlbGYuZml4dHVyZXNDYWNoZV9bcmVsYXRpdmVVcmxdID0gaHRtbFRleHQ7XG4gIH1cblxuICBqYXNtaW5lLkZpeHR1cmVzLnByb3RvdHlwZS5tYWtlRml4dHVyZVVybF8gPSBmdW5jdGlvbiAocmVsYXRpdmVVcmwpe1xuICAgIHJldHVybiB0aGlzLmZpeHR1cmVzUGF0aC5tYXRjaCgnLyQnKSA/IHRoaXMuZml4dHVyZXNQYXRoICsgcmVsYXRpdmVVcmwgOiB0aGlzLmZpeHR1cmVzUGF0aCArICcvJyArIHJlbGF0aXZlVXJsXG4gIH1cblxuICBqYXNtaW5lLkZpeHR1cmVzLnByb3RvdHlwZS5wcm94eUNhbGxUb18gPSBmdW5jdGlvbiAobWV0aG9kTmFtZSwgcGFzc2VkQXJndW1lbnRzKSB7XG4gICAgcmV0dXJuIHRoaXNbbWV0aG9kTmFtZV0uYXBwbHkodGhpcywgcGFzc2VkQXJndW1lbnRzKVxuICB9XG5cblxuICBqYXNtaW5lLlN0eWxlRml4dHVyZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5maXh0dXJlc0NhY2hlXyA9IHt9XG4gICAgdGhpcy5maXh0dXJlc05vZGVzXyA9IFtdXG4gICAgdGhpcy5maXh0dXJlc1BhdGggPSAnc3BlYy9qYXZhc2NyaXB0cy9maXh0dXJlcydcbiAgfVxuXG4gIGphc21pbmUuU3R5bGVGaXh0dXJlcy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGNzcykge1xuICAgIHRoaXMuY2xlYW5VcCgpXG4gICAgdGhpcy5jcmVhdGVTdHlsZV8oY3NzKVxuICB9XG5cbiAgamFzbWluZS5TdHlsZUZpeHR1cmVzLnByb3RvdHlwZS5hcHBlbmRTZXQgPSBmdW5jdGlvbiAoY3NzKSB7XG4gICAgdGhpcy5jcmVhdGVTdHlsZV8oY3NzKVxuICB9XG5cbiAgamFzbWluZS5TdHlsZUZpeHR1cmVzLnByb3RvdHlwZS5wcmVsb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucmVhZF8uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICB9XG5cbiAgamFzbWluZS5TdHlsZUZpeHR1cmVzLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY2xlYW5VcCgpXG4gICAgdGhpcy5jcmVhdGVTdHlsZV8odGhpcy5yZWFkXy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKVxuICB9XG5cbiAgamFzbWluZS5TdHlsZUZpeHR1cmVzLnByb3RvdHlwZS5hcHBlbmRMb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY3JlYXRlU3R5bGVfKHRoaXMucmVhZF8uYXBwbHkodGhpcywgYXJndW1lbnRzKSlcbiAgfVxuXG4gIGphc21pbmUuU3R5bGVGaXh0dXJlcy5wcm90b3R5cGUuY2xlYW5VcCA9IGZ1bmN0aW9uICgpIHtcbiAgICB3aGlsZSh0aGlzLmZpeHR1cmVzTm9kZXNfLmxlbmd0aCkge1xuICAgICAgdGhpcy5maXh0dXJlc05vZGVzXy5wb3AoKS5yZW1vdmUoKVxuICAgIH1cbiAgfVxuXG4gIGphc21pbmUuU3R5bGVGaXh0dXJlcy5wcm90b3R5cGUuY3JlYXRlU3R5bGVfID0gZnVuY3Rpb24gKGh0bWwpIHtcbiAgICB2YXIgc3R5bGVUZXh0ID0gJCgnPGRpdj48L2Rpdj4nKS5odG1sKGh0bWwpLnRleHQoKVxuICAgICAgLCBzdHlsZSA9ICQoJzxzdHlsZT4nICsgc3R5bGVUZXh0ICsgJzwvc3R5bGU+JylcblxuICAgIHRoaXMuZml4dHVyZXNOb2Rlc18ucHVzaChzdHlsZSlcbiAgICAkKCdoZWFkJykuYXBwZW5kKHN0eWxlKVxuICB9XG5cbiAgamFzbWluZS5TdHlsZUZpeHR1cmVzLnByb3RvdHlwZS5jbGVhckNhY2hlID0gamFzbWluZS5GaXh0dXJlcy5wcm90b3R5cGUuY2xlYXJDYWNoZVxuICBqYXNtaW5lLlN0eWxlRml4dHVyZXMucHJvdG90eXBlLnJlYWRfID0gamFzbWluZS5GaXh0dXJlcy5wcm90b3R5cGUucmVhZFxuICBqYXNtaW5lLlN0eWxlRml4dHVyZXMucHJvdG90eXBlLmdldEZpeHR1cmVIdG1sXyA9IGphc21pbmUuRml4dHVyZXMucHJvdG90eXBlLmdldEZpeHR1cmVIdG1sX1xuICBqYXNtaW5lLlN0eWxlRml4dHVyZXMucHJvdG90eXBlLmxvYWRGaXh0dXJlSW50b0NhY2hlXyA9IGphc21pbmUuRml4dHVyZXMucHJvdG90eXBlLmxvYWRGaXh0dXJlSW50b0NhY2hlX1xuICBqYXNtaW5lLlN0eWxlRml4dHVyZXMucHJvdG90eXBlLm1ha2VGaXh0dXJlVXJsXyA9IGphc21pbmUuRml4dHVyZXMucHJvdG90eXBlLm1ha2VGaXh0dXJlVXJsX1xuICBqYXNtaW5lLlN0eWxlRml4dHVyZXMucHJvdG90eXBlLnByb3h5Q2FsbFRvXyA9IGphc21pbmUuRml4dHVyZXMucHJvdG90eXBlLnByb3h5Q2FsbFRvX1xuXG4gIGphc21pbmUuZ2V0SlNPTkZpeHR1cmVzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBqYXNtaW5lLmN1cnJlbnRKU09ORml4dHVyZXNfID0gamFzbWluZS5jdXJyZW50SlNPTkZpeHR1cmVzXyB8fCBuZXcgamFzbWluZS5KU09ORml4dHVyZXMoKVxuICB9XG5cbiAgamFzbWluZS5KU09ORml4dHVyZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5maXh0dXJlc0NhY2hlXyA9IHt9XG4gICAgdGhpcy5maXh0dXJlc1BhdGggPSAnc3BlYy9qYXZhc2NyaXB0cy9maXh0dXJlcy9qc29uJ1xuICB9XG5cbiAgamFzbWluZS5KU09ORml4dHVyZXMucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5yZWFkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICByZXR1cm4gdGhpcy5maXh0dXJlc0NhY2hlX1xuICB9XG5cbiAgamFzbWluZS5KU09ORml4dHVyZXMucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGZpeHR1cmVVcmxzID0gYXJndW1lbnRzXG5cbiAgICBmb3IodmFyIHVybENvdW50ID0gZml4dHVyZVVybHMubGVuZ3RoLCB1cmxJbmRleCA9IDA7IHVybEluZGV4IDwgdXJsQ291bnQ7IHVybEluZGV4KyspIHtcbiAgICAgIHRoaXMuZ2V0Rml4dHVyZURhdGFfKGZpeHR1cmVVcmxzW3VybEluZGV4XSlcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5maXh0dXJlc0NhY2hlX1xuICB9XG5cbiAgamFzbWluZS5KU09ORml4dHVyZXMucHJvdG90eXBlLmNsZWFyQ2FjaGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5maXh0dXJlc0NhY2hlXyA9IHt9XG4gIH1cblxuICBqYXNtaW5lLkpTT05GaXh0dXJlcy5wcm90b3R5cGUuZ2V0Rml4dHVyZURhdGFfID0gZnVuY3Rpb24gKHVybCkge1xuICAgIGlmICghdGhpcy5maXh0dXJlc0NhY2hlX1t1cmxdKSB0aGlzLmxvYWRGaXh0dXJlSW50b0NhY2hlXyh1cmwpXG4gICAgcmV0dXJuIHRoaXMuZml4dHVyZXNDYWNoZV9bdXJsXVxuICB9XG5cbiAgamFzbWluZS5KU09ORml4dHVyZXMucHJvdG90eXBlLmxvYWRGaXh0dXJlSW50b0NhY2hlXyA9IGZ1bmN0aW9uIChyZWxhdGl2ZVVybCkge1xuICAgIHZhciBzZWxmID0gdGhpc1xuICAgICAgLCB1cmwgPSB0aGlzLmZpeHR1cmVzUGF0aC5tYXRjaCgnLyQnKSA/IHRoaXMuZml4dHVyZXNQYXRoICsgcmVsYXRpdmVVcmwgOiB0aGlzLmZpeHR1cmVzUGF0aCArICcvJyArIHJlbGF0aXZlVXJsXG5cbiAgICAkLmFqYXgoe1xuICAgICAgYXN5bmM6IGZhbHNlLCAvLyBtdXN0IGJlIHN5bmNocm9ub3VzIHRvIGd1YXJhbnRlZSB0aGF0IG5vIHRlc3RzIGFyZSBydW4gYmVmb3JlIGZpeHR1cmUgaXMgbG9hZGVkXG4gICAgICBjYWNoZTogZmFsc2UsXG4gICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBzZWxmLmZpeHR1cmVzQ2FjaGVfW3JlbGF0aXZlVXJsXSA9IGRhdGFcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24gKCR4aHIsIHN0YXR1cywgZXJyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSlNPTkZpeHR1cmUgY291bGQgbm90IGJlIGxvYWRlZDogJyArIHVybCArICcgKHN0YXR1czogJyArIHN0YXR1cyArICcsIG1lc3NhZ2U6ICcgKyBlcnIubWVzc2FnZSArICcpJylcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgamFzbWluZS5KU09ORml4dHVyZXMucHJvdG90eXBlLnByb3h5Q2FsbFRvXyA9IGZ1bmN0aW9uIChtZXRob2ROYW1lLCBwYXNzZWRBcmd1bWVudHMpIHtcbiAgICByZXR1cm4gdGhpc1ttZXRob2ROYW1lXS5hcHBseSh0aGlzLCBwYXNzZWRBcmd1bWVudHMpXG4gIH1cblxuICBqYXNtaW5lLmpRdWVyeSA9IGZ1bmN0aW9uICgpIHt9XG5cbiAgamFzbWluZS5qUXVlcnkuYnJvd3NlclRhZ0Nhc2VJbmRlcGVuZGVudEh0bWwgPSBmdW5jdGlvbiAoaHRtbCkge1xuICAgIHJldHVybiAkKCc8ZGl2Lz4nKS5hcHBlbmQoaHRtbCkuaHRtbCgpXG4gIH1cblxuICBqYXNtaW5lLmpRdWVyeS5lbGVtZW50VG9TdHJpbmcgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHJldHVybiAkKGVsZW1lbnQpLm1hcChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLm91dGVySFRNTDsgfSkudG9BcnJheSgpLmpvaW4oJywgJylcbiAgfVxuXG4gIHZhciBkYXRhID0ge1xuICAgICAgc3BpZWRFdmVudHM6IHt9XG4gICAgLCBoYW5kbGVyczogICAgW11cbiAgfVxuXG4gIGphc21pbmUualF1ZXJ5LmV2ZW50cyA9IHtcbiAgICBzcHlPbjogZnVuY3Rpb24gKHNlbGVjdG9yLCBldmVudE5hbWUpIHtcbiAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIGNhbGxzID0gKHR5cGVvZiBkYXRhLnNwaWVkRXZlbnRzW2phc21pbmUuc3BpZWRFdmVudHNLZXkoc2VsZWN0b3IsIGV2ZW50TmFtZSldICE9PSAndW5kZWZpbmVkJykgPyBkYXRhLnNwaWVkRXZlbnRzW2phc21pbmUuc3BpZWRFdmVudHNLZXkoc2VsZWN0b3IsIGV2ZW50TmFtZSldLmNhbGxzIDogMFxuICAgICAgICBkYXRhLnNwaWVkRXZlbnRzW2phc21pbmUuc3BpZWRFdmVudHNLZXkoc2VsZWN0b3IsIGV2ZW50TmFtZSldID0ge1xuICAgICAgICAgIGFyZ3M6IGphc21pbmUudXRpbC5hcmdzVG9BcnJheShhcmd1bWVudHMpLFxuICAgICAgICAgIGNhbGxzOiArK2NhbGxzXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJChzZWxlY3Rvcikub24oZXZlbnROYW1lLCBoYW5kbGVyKVxuICAgICAgZGF0YS5oYW5kbGVycy5wdXNoKGhhbmRsZXIpXG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICAgICAgZXZlbnROYW1lOiBldmVudE5hbWUsXG4gICAgICAgIGhhbmRsZXI6IGhhbmRsZXIsXG4gICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKXtcbiAgICAgICAgICBkZWxldGUgZGF0YS5zcGllZEV2ZW50c1tqYXNtaW5lLnNwaWVkRXZlbnRzS2V5KHNlbGVjdG9yLCBldmVudE5hbWUpXVxuICAgICAgICB9LFxuICAgICAgICBjYWxsczoge1xuICAgICAgICAgIGNvdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBkYXRhLnNwaWVkRXZlbnRzW2phc21pbmUuc3BpZWRFdmVudHNLZXkoc2VsZWN0b3IsIGV2ZW50TmFtZSldID9cbiAgICAgICAgICAgICAgICBkYXRhLnNwaWVkRXZlbnRzW2phc21pbmUuc3BpZWRFdmVudHNLZXkoc2VsZWN0b3IsIGV2ZW50TmFtZSldLmNhbGxzIDogMDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFueTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gZGF0YS5zcGllZEV2ZW50c1tqYXNtaW5lLnNwaWVkRXZlbnRzS2V5KHNlbGVjdG9yLCBldmVudE5hbWUpXSA/XG4gICAgICAgICAgICAgICAgISFkYXRhLnNwaWVkRXZlbnRzW2phc21pbmUuc3BpZWRFdmVudHNLZXkoc2VsZWN0b3IsIGV2ZW50TmFtZSldLmNhbGxzIDogZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFyZ3M6IGZ1bmN0aW9uIChzZWxlY3RvciwgZXZlbnROYW1lKSB7XG4gICAgICB2YXIgYWN0dWFsQXJncyA9IGRhdGEuc3BpZWRFdmVudHNbamFzbWluZS5zcGllZEV2ZW50c0tleShzZWxlY3RvciwgZXZlbnROYW1lKV0uYXJnc1xuXG4gICAgICBpZiAoIWFjdHVhbEFyZ3MpIHtcbiAgICAgICAgdGhyb3cgXCJUaGVyZSBpcyBubyBzcHkgZm9yIFwiICsgZXZlbnROYW1lICsgXCIgb24gXCIgKyBzZWxlY3Rvci50b1N0cmluZygpICsgXCIuIE1ha2Ugc3VyZSB0byBjcmVhdGUgYSBzcHkgdXNpbmcgc3B5T25FdmVudC5cIlxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWN0dWFsQXJnc1xuICAgIH0sXG5cbiAgICB3YXNUcmlnZ2VyZWQ6IGZ1bmN0aW9uIChzZWxlY3RvciwgZXZlbnROYW1lKSB7XG4gICAgICByZXR1cm4gISEoZGF0YS5zcGllZEV2ZW50c1tqYXNtaW5lLnNwaWVkRXZlbnRzS2V5KHNlbGVjdG9yLCBldmVudE5hbWUpXSlcbiAgICB9LFxuXG4gICAgd2FzVHJpZ2dlcmVkV2l0aDogZnVuY3Rpb24gKHNlbGVjdG9yLCBldmVudE5hbWUsIGV4cGVjdGVkQXJncywgdXRpbCwgY3VzdG9tRXF1YWxpdHlUZXN0ZXJzKSB7XG4gICAgICB2YXIgYWN0dWFsQXJncyA9IGphc21pbmUualF1ZXJ5LmV2ZW50cy5hcmdzKHNlbGVjdG9yLCBldmVudE5hbWUpLnNsaWNlKDEpXG5cbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZXhwZWN0ZWRBcmdzKSAhPT0gJ1tvYmplY3QgQXJyYXldJylcbiAgICAgICAgYWN0dWFsQXJncyA9IGFjdHVhbEFyZ3NbMF1cblxuICAgICAgcmV0dXJuIHV0aWwuZXF1YWxzKGFjdHVhbEFyZ3MsIGV4cGVjdGVkQXJncywgY3VzdG9tRXF1YWxpdHlUZXN0ZXJzKVxuICAgIH0sXG5cbiAgICB3YXNQcmV2ZW50ZWQ6IGZ1bmN0aW9uIChzZWxlY3RvciwgZXZlbnROYW1lKSB7XG4gICAgICB2YXIgc3BpZWRFdmVudCA9IGRhdGEuc3BpZWRFdmVudHNbamFzbWluZS5zcGllZEV2ZW50c0tleShzZWxlY3RvciwgZXZlbnROYW1lKV1cbiAgICAgICAgLCBhcmdzID0gKGphc21pbmUudXRpbC5pc1VuZGVmaW5lZChzcGllZEV2ZW50KSkgPyB7fSA6IHNwaWVkRXZlbnQuYXJnc1xuICAgICAgICAsIGUgPSBhcmdzID8gYXJnc1swXSA6IHVuZGVmaW5lZFxuXG4gICAgICByZXR1cm4gZSAmJiBlLmlzRGVmYXVsdFByZXZlbnRlZCgpXG4gICAgfSxcblxuICAgIHdhc1N0b3BwZWQ6IGZ1bmN0aW9uIChzZWxlY3RvciwgZXZlbnROYW1lKSB7XG4gICAgICB2YXIgc3BpZWRFdmVudCA9IGRhdGEuc3BpZWRFdmVudHNbamFzbWluZS5zcGllZEV2ZW50c0tleShzZWxlY3RvciwgZXZlbnROYW1lKV1cbiAgICAgICAgLCBhcmdzID0gKGphc21pbmUudXRpbC5pc1VuZGVmaW5lZChzcGllZEV2ZW50KSkgPyB7fSA6IHNwaWVkRXZlbnQuYXJnc1xuICAgICAgICAsIGUgPSBhcmdzID8gYXJnc1swXSA6IHVuZGVmaW5lZFxuXG4gICAgICByZXR1cm4gZSAmJiBlLmlzUHJvcGFnYXRpb25TdG9wcGVkKClcbiAgICB9LFxuXG4gICAgY2xlYW5VcDogZnVuY3Rpb24gKCkge1xuICAgICAgZGF0YS5zcGllZEV2ZW50cyA9IHt9XG4gICAgICBkYXRhLmhhbmRsZXJzICAgID0gW11cbiAgICB9XG4gIH1cblxuICB2YXIgaGFzUHJvcGVydHkgPSBmdW5jdGlvbiAoYWN0dWFsVmFsdWUsIGV4cGVjdGVkVmFsdWUpIHtcbiAgICBpZiAoZXhwZWN0ZWRWYWx1ZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgcmV0dXJuIGFjdHVhbFZhbHVlICE9PSB1bmRlZmluZWRcblxuICAgIHJldHVybiBhY3R1YWxWYWx1ZSA9PT0gZXhwZWN0ZWRWYWx1ZVxuICB9XG5cbiAgYmVmb3JlRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgamFzbWluZS5hZGRNYXRjaGVycyh7XG4gICAgICB0b0hhdmVDbGFzczogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbXBhcmU6IGZ1bmN0aW9uIChhY3R1YWwsIGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgcGFzczogJChhY3R1YWwpLmhhc0NsYXNzKGNsYXNzTmFtZSkgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgdG9IYXZlQ3NzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29tcGFyZTogZnVuY3Rpb24gKGFjdHVhbCwgY3NzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIGNzcyl7XG4gICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGNzc1twcm9wXVxuICAgICAgICAgICAgICAvLyBzZWUgaXNzdWUgIzE0NyBvbiBnaFxuICAgICAgICAgICAgICA7aWYgKHZhbHVlID09PSAnYXV0bycgJiYgJChhY3R1YWwpLmdldCgwKS5zdHlsZVtwcm9wXSA9PT0gJ2F1dG8nKSBjb250aW51ZVxuICAgICAgICAgICAgICBpZiAoJChhY3R1YWwpLmNzcyhwcm9wKSAhPT0gdmFsdWUpIHJldHVybiB7IHBhc3M6IGZhbHNlIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHBhc3M6IHRydWUgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgdG9CZVZpc2libGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb21wYXJlOiBmdW5jdGlvbiAoYWN0dWFsKSB7XG4gICAgICAgICAgICByZXR1cm4geyBwYXNzOiAkKGFjdHVhbCkuaXMoJzp2aXNpYmxlJykgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgdG9CZUhpZGRlbjogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbXBhcmU6IGZ1bmN0aW9uIChhY3R1YWwpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHBhc3M6ICQoYWN0dWFsKS5pcygnOmhpZGRlbicpIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHRvQmVTZWxlY3RlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbXBhcmU6IGZ1bmN0aW9uIChhY3R1YWwpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHBhc3M6ICQoYWN0dWFsKS5pcygnOnNlbGVjdGVkJykgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgdG9CZUNoZWNrZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb21wYXJlOiBmdW5jdGlvbiAoYWN0dWFsKSB7XG4gICAgICAgICAgICByZXR1cm4geyBwYXNzOiAkKGFjdHVhbCkuaXMoJzpjaGVja2VkJykgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgdG9CZUVtcHR5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29tcGFyZTogZnVuY3Rpb24gKGFjdHVhbCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgcGFzczogJChhY3R1YWwpLmlzKCc6ZW1wdHknKSB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB0b0JlSW5ET006IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb21wYXJlOiBmdW5jdGlvbiAoYWN0dWFsKSB7XG4gICAgICAgICAgICByZXR1cm4geyBwYXNzOiAkLmNvbnRhaW5zKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgJChhY3R1YWwpWzBdKSB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB0b0V4aXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29tcGFyZTogZnVuY3Rpb24gKGFjdHVhbCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgcGFzczogJChhY3R1YWwpLmxlbmd0aCB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB0b0hhdmVMZW5ndGg6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb21wYXJlOiBmdW5jdGlvbiAoYWN0dWFsLCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHBhc3M6ICQoYWN0dWFsKS5sZW5ndGggPT09IGxlbmd0aCB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB0b0hhdmVBdHRyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29tcGFyZTogZnVuY3Rpb24gKGFjdHVhbCwgYXR0cmlidXRlTmFtZSwgZXhwZWN0ZWRBdHRyaWJ1dGVWYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgcGFzczogaGFzUHJvcGVydHkoJChhY3R1YWwpLmF0dHIoYXR0cmlidXRlTmFtZSksIGV4cGVjdGVkQXR0cmlidXRlVmFsdWUpIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHRvSGF2ZVByb3A6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb21wYXJlOiBmdW5jdGlvbiAoYWN0dWFsLCBwcm9wZXJ0eU5hbWUsIGV4cGVjdGVkUHJvcGVydHlWYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgcGFzczogaGFzUHJvcGVydHkoJChhY3R1YWwpLnByb3AocHJvcGVydHlOYW1lKSwgZXhwZWN0ZWRQcm9wZXJ0eVZhbHVlKSB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB0b0hhdmVJZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbXBhcmU6IGZ1bmN0aW9uIChhY3R1YWwsIGlkKSB7XG4gICAgICAgICAgICByZXR1cm4geyBwYXNzOiAkKGFjdHVhbCkuYXR0cignaWQnKSA9PSBpZCB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB0b0hhdmVIdG1sOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29tcGFyZTogZnVuY3Rpb24gKGFjdHVhbCwgaHRtbCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgcGFzczogJChhY3R1YWwpLmh0bWwoKSA9PSBqYXNtaW5lLmpRdWVyeS5icm93c2VyVGFnQ2FzZUluZGVwZW5kZW50SHRtbChodG1sKSB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB0b0NvbnRhaW5IdG1sOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29tcGFyZTogZnVuY3Rpb24gKGFjdHVhbCwgaHRtbCkge1xuICAgICAgICAgICAgdmFyIGFjdHVhbEh0bWwgPSAkKGFjdHVhbCkuaHRtbCgpXG4gICAgICAgICAgICAgICwgZXhwZWN0ZWRIdG1sID0gamFzbWluZS5qUXVlcnkuYnJvd3NlclRhZ0Nhc2VJbmRlcGVuZGVudEh0bWwoaHRtbClcblxuICAgICAgICAgICAgcmV0dXJuIHsgcGFzczogKGFjdHVhbEh0bWwuaW5kZXhPZihleHBlY3RlZEh0bWwpID49IDApIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHRvSGF2ZVRleHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb21wYXJlOiBmdW5jdGlvbiAoYWN0dWFsLCB0ZXh0KSB7XG4gICAgICAgICAgICB2YXIgYWN0dWFsVGV4dCA9ICQoYWN0dWFsKS50ZXh0KClcbiAgICAgICAgICAgIHZhciB0cmltbWVkVGV4dCA9ICQudHJpbShhY3R1YWxUZXh0KVxuXG4gICAgICAgICAgICBpZiAodGV4dCAmJiAkLmlzRnVuY3Rpb24odGV4dC50ZXN0KSkge1xuICAgICAgICAgICAgICByZXR1cm4geyBwYXNzOiB0ZXh0LnRlc3QoYWN0dWFsVGV4dCkgfHwgdGV4dC50ZXN0KHRyaW1tZWRUZXh0KSB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4geyBwYXNzOiAoYWN0dWFsVGV4dCA9PSB0ZXh0IHx8IHRyaW1tZWRUZXh0ID09IHRleHQpIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHRvQ29udGFpblRleHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb21wYXJlOiBmdW5jdGlvbiAoYWN0dWFsLCB0ZXh0KSB7XG4gICAgICAgICAgICB2YXIgdHJpbW1lZFRleHQgPSAkLnRyaW0oJChhY3R1YWwpLnRleHQoKSlcblxuICAgICAgICAgICAgaWYgKHRleHQgJiYgJC5pc0Z1bmN0aW9uKHRleHQudGVzdCkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHsgcGFzczogdGV4dC50ZXN0KHRyaW1tZWRUZXh0KSB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4geyBwYXNzOiB0cmltbWVkVGV4dC5pbmRleE9mKHRleHQpICE9IC0xIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHRvSGF2ZVZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29tcGFyZTogZnVuY3Rpb24gKGFjdHVhbCwgdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHBhc3M6ICQoYWN0dWFsKS52YWwoKSA9PT0gdmFsdWUgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgdG9IYXZlRGF0YTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbXBhcmU6IGZ1bmN0aW9uIChhY3R1YWwsIGtleSwgZXhwZWN0ZWRWYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgcGFzczogaGFzUHJvcGVydHkoJChhY3R1YWwpLmRhdGEoa2V5KSwgZXhwZWN0ZWRWYWx1ZSkgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgdG9Db250YWluRWxlbWVudDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbXBhcmU6IGZ1bmN0aW9uIChhY3R1YWwsIHNlbGVjdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4geyBwYXNzOiAkKGFjdHVhbCkuZmluZChzZWxlY3RvcikubGVuZ3RoIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHRvQmVNYXRjaGVkQnk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb21wYXJlOiBmdW5jdGlvbiAoYWN0dWFsLCBzZWxlY3Rvcikge1xuICAgICAgICAgICAgcmV0dXJuIHsgcGFzczogJChhY3R1YWwpLmZpbHRlcihzZWxlY3RvcikubGVuZ3RoIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHRvQmVEaXNhYmxlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbXBhcmU6IGZ1bmN0aW9uIChhY3R1YWwsIHNlbGVjdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4geyBwYXNzOiAkKGFjdHVhbCkuaXMoJzpkaXNhYmxlZCcpIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHRvQmVGb2N1c2VkOiBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb21wYXJlOiBmdW5jdGlvbiAoYWN0dWFsLCBzZWxlY3Rvcikge1xuICAgICAgICAgICAgcmV0dXJuIHsgcGFzczogJChhY3R1YWwpWzBdID09PSAkKGFjdHVhbClbMF0ub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHRvSGFuZGxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29tcGFyZTogZnVuY3Rpb24gKGFjdHVhbCwgZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICggIWFjdHVhbCB8fCBhY3R1YWwubGVuZ3RoID09PSAwICkgcmV0dXJuIHsgcGFzczogZmFsc2UgfTtcbiAgICAgICAgICAgIHZhciBldmVudHMgPSAkLl9kYXRhKCQoYWN0dWFsKS5nZXQoMCksIFwiZXZlbnRzXCIpXG5cbiAgICAgICAgICAgIGlmICghZXZlbnRzIHx8ICFldmVudCB8fCB0eXBlb2YgZXZlbnQgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHsgcGFzczogZmFsc2UgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbmFtZXNwYWNlcyA9IGV2ZW50LnNwbGl0KFwiLlwiKVxuICAgICAgICAgICAgICAsIGV2ZW50VHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKVxuICAgICAgICAgICAgICAsIHNvcnRlZE5hbWVzcGFjZXMgPSBuYW1lc3BhY2VzLnNsaWNlKDApLnNvcnQoKVxuICAgICAgICAgICAgICAsIG5hbWVzcGFjZVJlZ0V4cCA9IG5ldyBSZWdFeHAoXCIoXnxcXFxcLilcIiArIHNvcnRlZE5hbWVzcGFjZXMuam9pbihcIlxcXFwuKD86LipcXFxcLik/XCIpICsgXCIoXFxcXC58JClcIilcblxuICAgICAgICAgICAgaWYgKGV2ZW50c1tldmVudFR5cGVdICYmIG5hbWVzcGFjZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRzW2V2ZW50VHlwZV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbmFtZXNwYWNlID0gZXZlbnRzW2V2ZW50VHlwZV1baV0ubmFtZXNwYWNlXG5cbiAgICAgICAgICAgICAgICBpZiAobmFtZXNwYWNlUmVnRXhwLnRlc3QobmFtZXNwYWNlKSlcbiAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3M6IHRydWUgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4geyBwYXNzOiAoZXZlbnRzW2V2ZW50VHlwZV0gJiYgZXZlbnRzW2V2ZW50VHlwZV0ubGVuZ3RoID4gMCkgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4geyBwYXNzOiBmYWxzZSB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB0b0hhbmRsZVdpdGg6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb21wYXJlOiBmdW5jdGlvbiAoYWN0dWFsLCBldmVudE5hbWUsIGV2ZW50SGFuZGxlcikge1xuICAgICAgICAgICAgaWYgKCAhYWN0dWFsIHx8IGFjdHVhbC5sZW5ndGggPT09IDAgKSByZXR1cm4geyBwYXNzOiBmYWxzZSB9O1xuICAgICAgICAgICAgdmFyIG5vcm1hbGl6ZWRFdmVudE5hbWUgPSBldmVudE5hbWUuc3BsaXQoJy4nKVswXVxuICAgICAgICAgICAgICAsIHN0YWNrID0gJC5fZGF0YSgkKGFjdHVhbCkuZ2V0KDApLCBcImV2ZW50c1wiKVtub3JtYWxpemVkRXZlbnROYW1lXVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGlmIChzdGFja1tpXS5oYW5kbGVyID09IGV2ZW50SGFuZGxlcikgcmV0dXJuIHsgcGFzczogdHJ1ZSB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7IHBhc3M6IGZhbHNlIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHRvSGF2ZUJlZW5UcmlnZ2VyZWRPbjogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbXBhcmU6IGZ1bmN0aW9uIChhY3R1YWwsIHNlbGVjdG9yKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0geyBwYXNzOiBqYXNtaW5lLmpRdWVyeS5ldmVudHMud2FzVHJpZ2dlcmVkKHNlbGVjdG9yLCBhY3R1YWwpIH1cblxuICAgICAgICAgICAgcmVzdWx0Lm1lc3NhZ2UgPSByZXN1bHQucGFzcyA/XG4gICAgICAgICAgICAgIFwiRXhwZWN0ZWQgZXZlbnQgXCIgKyAkKGFjdHVhbCkgKyBcIiBub3QgdG8gaGF2ZSBiZWVuIHRyaWdnZXJlZCBvbiBcIiArIHNlbGVjdG9yIDpcbiAgICAgICAgICAgICAgXCJFeHBlY3RlZCBldmVudCBcIiArICQoYWN0dWFsKSArIFwiIHRvIGhhdmUgYmVlbiB0cmlnZ2VyZWQgb24gXCIgKyBzZWxlY3RvclxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgdG9IYXZlQmVlblRyaWdnZXJlZDogZnVuY3Rpb24gKCl7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29tcGFyZTogZnVuY3Rpb24gKGFjdHVhbCkge1xuICAgICAgICAgICAgdmFyIGV2ZW50TmFtZSA9IGFjdHVhbC5ldmVudE5hbWVcbiAgICAgICAgICAgICAgLCBzZWxlY3RvciA9IGFjdHVhbC5zZWxlY3RvclxuICAgICAgICAgICAgICAsIHJlc3VsdCA9IHsgcGFzczogamFzbWluZS5qUXVlcnkuZXZlbnRzLndhc1RyaWdnZXJlZChzZWxlY3RvciwgZXZlbnROYW1lKSB9XG5cbiAgICAgICAgICAgIHJlc3VsdC5tZXNzYWdlID0gcmVzdWx0LnBhc3MgP1xuICAgICAgICAgICAgXCJFeHBlY3RlZCBldmVudCBcIiArIGV2ZW50TmFtZSArIFwiIG5vdCB0byBoYXZlIGJlZW4gdHJpZ2dlcmVkIG9uIFwiICsgc2VsZWN0b3IgOlxuICAgICAgICAgICAgICBcIkV4cGVjdGVkIGV2ZW50IFwiICsgZXZlbnROYW1lICsgXCIgdG8gaGF2ZSBiZWVuIHRyaWdnZXJlZCBvbiBcIiArIHNlbGVjdG9yXG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHRvSGF2ZUJlZW5UcmlnZ2VyZWRPbkFuZFdpdGg6IGZ1bmN0aW9uIChqJCwgY3VzdG9tRXF1YWxpdHlUZXN0ZXJzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29tcGFyZTogZnVuY3Rpb24gKGFjdHVhbCwgc2VsZWN0b3IsIGV4cGVjdGVkQXJncykge1xuICAgICAgICAgICAgdmFyIHdhc1RyaWdnZXJlZCA9IGphc21pbmUualF1ZXJ5LmV2ZW50cy53YXNUcmlnZ2VyZWQoc2VsZWN0b3IsIGFjdHVhbClcbiAgICAgICAgICAgICAgLCByZXN1bHQgPSB7IHBhc3M6IHdhc1RyaWdnZXJlZCAmJiBqYXNtaW5lLmpRdWVyeS5ldmVudHMud2FzVHJpZ2dlcmVkV2l0aChzZWxlY3RvciwgYWN0dWFsLCBleHBlY3RlZEFyZ3MsIGokLCBjdXN0b21FcXVhbGl0eVRlc3RlcnMpIH1cblxuICAgICAgICAgICAgICBpZiAod2FzVHJpZ2dlcmVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFjdHVhbEFyZ3MgPSBqYXNtaW5lLmpRdWVyeS5ldmVudHMuYXJncyhzZWxlY3RvciwgYWN0dWFsLCBleHBlY3RlZEFyZ3MpWzFdXG4gICAgICAgICAgICAgICAgcmVzdWx0Lm1lc3NhZ2UgPSByZXN1bHQucGFzcyA/XG4gICAgICAgICAgICAgICAgICBcIkV4cGVjdGVkIGV2ZW50IFwiICsgYWN0dWFsICsgXCIgbm90IHRvIGhhdmUgYmVlbiB0cmlnZ2VyZWQgd2l0aCBcIiArIGphc21pbmUucHAoZXhwZWN0ZWRBcmdzKSArIFwiIGJ1dCBpdCB3YXMgdHJpZ2dlcmVkIHdpdGggXCIgKyBqYXNtaW5lLnBwKGFjdHVhbEFyZ3MpIDpcbiAgICAgICAgICAgICAgICAgIFwiRXhwZWN0ZWQgZXZlbnQgXCIgKyBhY3R1YWwgKyBcIiB0byBoYXZlIGJlZW4gdHJpZ2dlcmVkIHdpdGggXCIgKyBqYXNtaW5lLnBwKGV4cGVjdGVkQXJncykgKyBcIiAgYnV0IGl0IHdhcyB0cmlnZ2VyZWQgd2l0aCBcIiArIGphc21pbmUucHAoYWN0dWFsQXJncylcblxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHRvZG8gY2hlY2sgb24gdGhpc1xuICAgICAgICAgICAgICAgIHJlc3VsdC5tZXNzYWdlID0gcmVzdWx0LnBhc3MgP1xuICAgICAgICAgICAgICAgICAgXCJFeHBlY3RlZCBldmVudCBcIiArIGFjdHVhbCArIFwiIG5vdCB0byBoYXZlIGJlZW4gdHJpZ2dlcmVkIG9uIFwiICsgc2VsZWN0b3IgOlxuICAgICAgICAgICAgICAgICAgXCJFeHBlY3RlZCBldmVudCBcIiArIGFjdHVhbCArIFwiIHRvIGhhdmUgYmVlbiB0cmlnZ2VyZWQgb24gXCIgKyBzZWxlY3RvclxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgdG9IYXZlQmVlblByZXZlbnRlZE9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29tcGFyZTogZnVuY3Rpb24gKGFjdHVhbCwgc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB7IHBhc3M6IGphc21pbmUualF1ZXJ5LmV2ZW50cy53YXNQcmV2ZW50ZWQoc2VsZWN0b3IsIGFjdHVhbCkgfVxuXG4gICAgICAgICAgICByZXN1bHQubWVzc2FnZSA9IHJlc3VsdC5wYXNzID9cbiAgICAgICAgICAgICAgXCJFeHBlY3RlZCBldmVudCBcIiArIGFjdHVhbCArIFwiIG5vdCB0byBoYXZlIGJlZW4gcHJldmVudGVkIG9uIFwiICsgc2VsZWN0b3IgOlxuICAgICAgICAgICAgICBcIkV4cGVjdGVkIGV2ZW50IFwiICsgYWN0dWFsICsgXCIgdG8gaGF2ZSBiZWVuIHByZXZlbnRlZCBvbiBcIiArIHNlbGVjdG9yXG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHRvSGF2ZUJlZW5QcmV2ZW50ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb21wYXJlOiBmdW5jdGlvbiAoYWN0dWFsKSB7XG4gICAgICAgICAgICB2YXIgZXZlbnROYW1lID0gYWN0dWFsLmV2ZW50TmFtZVxuICAgICAgICAgICAgICAsIHNlbGVjdG9yID0gYWN0dWFsLnNlbGVjdG9yXG4gICAgICAgICAgICAgICwgcmVzdWx0ID0geyBwYXNzOiBqYXNtaW5lLmpRdWVyeS5ldmVudHMud2FzUHJldmVudGVkKHNlbGVjdG9yLCBldmVudE5hbWUpIH1cblxuICAgICAgICAgICAgcmVzdWx0Lm1lc3NhZ2UgPSByZXN1bHQucGFzcyA/XG4gICAgICAgICAgICAgIFwiRXhwZWN0ZWQgZXZlbnQgXCIgKyBldmVudE5hbWUgKyBcIiBub3QgdG8gaGF2ZSBiZWVuIHByZXZlbnRlZCBvbiBcIiArIHNlbGVjdG9yIDpcbiAgICAgICAgICAgICAgXCJFeHBlY3RlZCBldmVudCBcIiArIGV2ZW50TmFtZSArIFwiIHRvIGhhdmUgYmVlbiBwcmV2ZW50ZWQgb24gXCIgKyBzZWxlY3RvclxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB0b0hhdmVCZWVuU3RvcHBlZE9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29tcGFyZTogZnVuY3Rpb24gKGFjdHVhbCwgc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB7IHBhc3M6IGphc21pbmUualF1ZXJ5LmV2ZW50cy53YXNTdG9wcGVkKHNlbGVjdG9yLCBhY3R1YWwpIH1cblxuICAgICAgICAgICAgcmVzdWx0Lm1lc3NhZ2UgPSByZXN1bHQucGFzcyA/XG4gICAgICAgICAgICAgIFwiRXhwZWN0ZWQgZXZlbnQgXCIgKyBhY3R1YWwgKyBcIiBub3QgdG8gaGF2ZSBiZWVuIHN0b3BwZWQgb24gXCIgKyBzZWxlY3RvciA6XG4gICAgICAgICAgICAgIFwiRXhwZWN0ZWQgZXZlbnQgXCIgKyBhY3R1YWwgKyBcIiB0byBoYXZlIGJlZW4gc3RvcHBlZCBvbiBcIiArIHNlbGVjdG9yXG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB0b0hhdmVCZWVuU3RvcHBlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbXBhcmU6IGZ1bmN0aW9uIChhY3R1YWwpIHtcbiAgICAgICAgICAgIHZhciBldmVudE5hbWUgPSBhY3R1YWwuZXZlbnROYW1lXG4gICAgICAgICAgICAgICwgc2VsZWN0b3IgPSBhY3R1YWwuc2VsZWN0b3JcbiAgICAgICAgICAgICAgLCByZXN1bHQgPSB7IHBhc3M6IGphc21pbmUualF1ZXJ5LmV2ZW50cy53YXNTdG9wcGVkKHNlbGVjdG9yLCBldmVudE5hbWUpIH1cblxuICAgICAgICAgICAgcmVzdWx0Lm1lc3NhZ2UgPSByZXN1bHQucGFzcyA/XG4gICAgICAgICAgICAgIFwiRXhwZWN0ZWQgZXZlbnQgXCIgKyBldmVudE5hbWUgKyBcIiBub3QgdG8gaGF2ZSBiZWVuIHN0b3BwZWQgb24gXCIgKyBzZWxlY3RvciA6XG4gICAgICAgICAgICAgIFwiRXhwZWN0ZWQgZXZlbnQgXCIgKyBldmVudE5hbWUgKyBcIiB0byBoYXZlIGJlZW4gc3RvcHBlZCBvbiBcIiArIHNlbGVjdG9yXG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgamFzbWluZS5nZXRFbnYoKS5hZGRDdXN0b21FcXVhbGl0eVRlc3RlcihmdW5jdGlvbihhLCBiKSB7XG4gICAgIGlmIChhICYmIGIpIHtcbiAgICAgICBpZiAoYSBpbnN0YW5jZW9mICQgfHwgamFzbWluZS5pc0RvbU5vZGUoYSkpIHtcbiAgICAgICAgIHZhciAkYSA9ICQoYSlcblxuICAgICAgICAgaWYgKGIgaW5zdGFuY2VvZiAkKVxuICAgICAgICAgICByZXR1cm4gJGEubGVuZ3RoID09IGIubGVuZ3RoICYmIGEuaXMoYilcblxuICAgICAgICAgcmV0dXJuICRhLmlzKGIpO1xuICAgICAgIH1cblxuICAgICAgIGlmIChiIGluc3RhbmNlb2YgJCB8fCBqYXNtaW5lLmlzRG9tTm9kZShiKSkge1xuICAgICAgICAgdmFyICRiID0gJChiKVxuXG4gICAgICAgICBpZiAoYSBpbnN0YW5jZW9mICQpXG4gICAgICAgICAgIHJldHVybiBhLmxlbmd0aCA9PSAkYi5sZW5ndGggJiYgJGIuaXMoYSlcblxuICAgICAgICAgcmV0dXJuICQoYikuaXMoYSk7XG4gICAgICAgfVxuICAgICB9XG4gICAgfSlcblxuICAgIGphc21pbmUuZ2V0RW52KCkuYWRkQ3VzdG9tRXF1YWxpdHlUZXN0ZXIoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgaWYgKGEgaW5zdGFuY2VvZiAkICYmIGIgaW5zdGFuY2VvZiAkICYmIGEuc2l6ZSgpID09IGIuc2l6ZSgpKVxuICAgICAgICByZXR1cm4gYS5pcyhiKVxuICAgIH0pXG4gIH0pXG5cbiAgYWZ0ZXJFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICBqYXNtaW5lLmdldEZpeHR1cmVzKCkuY2xlYW5VcCgpXG4gICAgamFzbWluZS5nZXRTdHlsZUZpeHR1cmVzKCkuY2xlYW5VcCgpXG4gICAgamFzbWluZS5qUXVlcnkuZXZlbnRzLmNsZWFuVXAoKVxuICB9KVxuXG4gIHdpbmRvdy5yZWFkRml4dHVyZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGphc21pbmUuZ2V0Rml4dHVyZXMoKS5wcm94eUNhbGxUb18oJ3JlYWQnLCBhcmd1bWVudHMpXG4gIH1cblxuICB3aW5kb3cucHJlbG9hZEZpeHR1cmVzID0gZnVuY3Rpb24gKCkge1xuICAgIGphc21pbmUuZ2V0Rml4dHVyZXMoKS5wcm94eUNhbGxUb18oJ3ByZWxvYWQnLCBhcmd1bWVudHMpXG4gIH1cblxuICB3aW5kb3cubG9hZEZpeHR1cmVzID0gZnVuY3Rpb24gKCkge1xuICAgIGphc21pbmUuZ2V0Rml4dHVyZXMoKS5wcm94eUNhbGxUb18oJ2xvYWQnLCBhcmd1bWVudHMpXG4gIH1cblxuICB3aW5kb3cuYXBwZW5kTG9hZEZpeHR1cmVzID0gZnVuY3Rpb24gKCkge1xuICAgIGphc21pbmUuZ2V0Rml4dHVyZXMoKS5wcm94eUNhbGxUb18oJ2FwcGVuZExvYWQnLCBhcmd1bWVudHMpXG4gIH1cblxuICB3aW5kb3cuc2V0Rml4dHVyZXMgPSBmdW5jdGlvbiAoaHRtbCkge1xuICAgIHJldHVybiBqYXNtaW5lLmdldEZpeHR1cmVzKCkucHJveHlDYWxsVG9fKCdzZXQnLCBhcmd1bWVudHMpXG4gIH1cblxuICB3aW5kb3cuYXBwZW5kU2V0Rml4dHVyZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgamFzbWluZS5nZXRGaXh0dXJlcygpLnByb3h5Q2FsbFRvXygnYXBwZW5kU2V0JywgYXJndW1lbnRzKVxuICB9XG5cbiAgd2luZG93LnNhbmRib3ggPSBmdW5jdGlvbiAoYXR0cmlidXRlcykge1xuICAgIHJldHVybiBqYXNtaW5lLmdldEZpeHR1cmVzKCkuc2FuZGJveChhdHRyaWJ1dGVzKVxuICB9XG5cbiAgd2luZG93LnNweU9uRXZlbnQgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIGV2ZW50TmFtZSkge1xuICAgIHJldHVybiBqYXNtaW5lLmpRdWVyeS5ldmVudHMuc3B5T24oc2VsZWN0b3IsIGV2ZW50TmFtZSlcbiAgfVxuXG4gIHdpbmRvdy5wcmVsb2FkU3R5bGVGaXh0dXJlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBqYXNtaW5lLmdldFN0eWxlRml4dHVyZXMoKS5wcm94eUNhbGxUb18oJ3ByZWxvYWQnLCBhcmd1bWVudHMpXG4gIH1cblxuICB3aW5kb3cubG9hZFN0eWxlRml4dHVyZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgamFzbWluZS5nZXRTdHlsZUZpeHR1cmVzKCkucHJveHlDYWxsVG9fKCdsb2FkJywgYXJndW1lbnRzKVxuICB9XG5cbiAgd2luZG93LmFwcGVuZExvYWRTdHlsZUZpeHR1cmVzID0gZnVuY3Rpb24gKCkge1xuICAgIGphc21pbmUuZ2V0U3R5bGVGaXh0dXJlcygpLnByb3h5Q2FsbFRvXygnYXBwZW5kTG9hZCcsIGFyZ3VtZW50cylcbiAgfVxuXG4gIHdpbmRvdy5zZXRTdHlsZUZpeHR1cmVzID0gZnVuY3Rpb24gKGh0bWwpIHtcbiAgICBqYXNtaW5lLmdldFN0eWxlRml4dHVyZXMoKS5wcm94eUNhbGxUb18oJ3NldCcsIGFyZ3VtZW50cylcbiAgfVxuXG4gIHdpbmRvdy5hcHBlbmRTZXRTdHlsZUZpeHR1cmVzID0gZnVuY3Rpb24gKGh0bWwpIHtcbiAgICBqYXNtaW5lLmdldFN0eWxlRml4dHVyZXMoKS5wcm94eUNhbGxUb18oJ2FwcGVuZFNldCcsIGFyZ3VtZW50cylcbiAgfVxuXG4gIHdpbmRvdy5sb2FkSlNPTkZpeHR1cmVzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBqYXNtaW5lLmdldEpTT05GaXh0dXJlcygpLnByb3h5Q2FsbFRvXygnbG9hZCcsIGFyZ3VtZW50cylcbiAgfVxuXG4gIHdpbmRvdy5nZXRKU09ORml4dHVyZSA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICByZXR1cm4gamFzbWluZS5nZXRKU09ORml4dHVyZXMoKS5wcm94eUNhbGxUb18oJ3JlYWQnLCBhcmd1bWVudHMpW3VybF1cbiAgfVxufSkpO1xuIiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjYuMFxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDIxLTAzLTAyVDE3OjA4WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBmbGF0ID0gYXJyLmZsYXQgPyBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuZmxhdC5jYWxsKCBhcnJheSApO1xufSA6IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5jb25jYXQuYXBwbHkoIFtdLCBhcnJheSApO1xufTtcblxuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuXHRcdC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuXHRcdC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG5cdFx0Ly8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuXHRcdC8vIFN1cHBvcnQ6IFF0V2ViIDw9My44LjUsIFdlYktpdCA8PTUzNC4zNCwgd2todG1sdG9wZGYgdG9vbCA8PTAuMTIuNVxuXHRcdC8vIFBsdXMgZm9yIG9sZCBXZWJLaXQsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCBjb2xsZWN0aW9uc1xuXHRcdC8vIChlLmcuLCBgdHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGl2XCIpID09PSBcImZ1bmN0aW9uXCJgKS4gKGdoLTQ3NTYpXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiICYmXG5cdFx0XHR0eXBlb2Ygb2JqLml0ZW0gIT09IFwiZnVuY3Rpb25cIjtcblx0fTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub25jZTogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIG5vZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSwgdmFsLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA2NCssIEVkZ2UgMTgrXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgXCJub25jZVwiIHByb3BlcnR5IG9uIHNjcmlwdHMuXG5cdFx0XHRcdC8vIE9uIHRoZSBvdGhlciBoYW5kLCBqdXN0IHVzaW5nIGBnZXRBdHRyaWJ1dGVgIGlzIG5vdCBlbm91Z2ggYXNcblx0XHRcdFx0Ly8gdGhlIGBub25jZWAgYXR0cmlidXRlIGlzIHJlc2V0IHRvIGFuIGVtcHR5IHN0cmluZyB3aGVuZXZlciBpdFxuXHRcdFx0XHQvLyBiZWNvbWVzIGJyb3dzaW5nLWNvbnRleHQgY29ubmVjdGVkLlxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy8yMzY5XG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNub25jZS1hdHRyaWJ1dGVzXG5cdFx0XHRcdC8vIFRoZSBgbm9kZS5nZXRBdHRyaWJ1dGVgIGNoZWNrIHdhcyBhZGRlZCBmb3IgdGhlIHNha2Ugb2Zcblx0XHRcdFx0Ly8gYGpRdWVyeS5nbG9iYWxFdmFsYCBzbyB0aGF0IGl0IGNhbiBmYWtlIGEgbm9uY2UtY29udGFpbmluZyBub2RlXG5cdFx0XHRcdC8vIHZpYSBhbiBvYmplY3QuXG5cdFx0XHRcdHZhbCA9IG5vZGVbIGkgXSB8fCBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSggaSApO1xuXHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKCBpLCB2YWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuNi4wXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRldmVuOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gKCBpICsgMSApICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRvZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBpICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgT2JqZWN0LnByb3RvdHlwZSBwb2xsdXRpb25cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIG5hbWUgPT09IFwiX19wcm90b19fXCIgfHwgdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXHRcdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHByb3BlciB0eXBlIGZvciB0aGUgc291cmNlIHZhbHVlXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSAmJiAhQXJyYXkuaXNBcnJheSggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFjb3B5SXNBcnJheSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSB7fTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgcHJvdmlkZWQgY29udGV4dDsgZmFsbHMgYmFjayB0byB0aGUgZ2xvYmFsIG9uZVxuXHQvLyBpZiBub3Qgc3BlY2lmaWVkLlxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSwgb3B0aW9ucywgZG9jICkge1xuXHRcdERPTUV2YWwoIGNvZGUsIHsgbm9uY2U6IG9wdGlvbnMgJiYgb3B0aW9ucy5ub25jZSB9LCBkb2MgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBmbGF0KCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHRcdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjZcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcy5mb3VuZGF0aW9uL1xuICpcbiAqIERhdGU6IDIwMjEtMDItMTZcbiAqL1xuKCBmdW5jdGlvbiggd2luZG93ICkge1xudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKCB7fSApLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaE5hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFsgaSBdID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58XCIgK1xuXHRcdFwiaXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc3ludGF4LTMvI2lkZW50LXRva2VuLWRpYWdyYW1cblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiP3xcXFxcXFxcXFteXFxcXHJcXFxcblxcXFxmXXxbXFxcXHctXXxbXlxcMC1cXFxceDdmXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV1cblx0XHQvLyBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcIiApLFxuXHRyZGVzY2VuZCA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcInw+XCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaHRtbCA9IC9IVE1MJC9pLFxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3xcXFxcXFxcXChbXlxcXFxyXFxcXG5cXFxcZl0pXCIsIFwiZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBlc2NhcGUsIG5vbkhleCApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZS5zbGljZSggMSApIC0gMHgxMDAwMDtcblxuXHRcdHJldHVybiBub25IZXggP1xuXG5cdFx0XHQvLyBTdHJpcCB0aGUgYmFja3NsYXNoIHByZWZpeCBmcm9tIGEgbm9uLWhleCBlc2NhcGUgc2VxdWVuY2Vcblx0XHRcdG5vbkhleCA6XG5cblx0XHRcdC8vIFJlcGxhY2UgYSBoZXhhZGVjaW1hbCBlc2NhcGUgc2VxdWVuY2Ugd2l0aCB0aGUgZW5jb2RlZCBVbmljb2RlIGNvZGUgcG9pbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTErXG5cdFx0XHQvLyBGb3IgdmFsdWVzIG91dHNpZGUgdGhlIEJhc2ljIE11bHRpbGluZ3VhbCBQbGFuZSAoQk1QKSwgbWFudWFsbHkgY29uc3RydWN0IGFcblx0XHRcdC8vIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICtcblx0XHRcdFx0Y2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGluRGlzYWJsZWRGaWVsZHNldCA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZmllbGRzZXRcIjtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdCggYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSApLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoTmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoIGVscyApICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAoIHRhcmdldFsgaisrIF0gPSBlbHNbIGkrKyBdICkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKCBtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKCBtID0gbWF0Y2hbIDEgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmICggZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDIgXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKCBtID0gbWF0Y2hbIDMgXSApICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCggIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkgKSAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDggb25seVxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHQoIG5vZGVUeXBlICE9PSAxIHx8IGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApICkge1xuXG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXG5cdFx0XHRcdC8vIHFTQSBjb25zaWRlcnMgZWxlbWVudHMgb3V0c2lkZSBhIHNjb3Bpbmcgcm9vdCB3aGVuIGV2YWx1YXRpbmcgY2hpbGQgb3Jcblx0XHRcdFx0Ly8gZGVzY2VuZGFudCBjb21iaW5hdG9ycywgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudC5cblx0XHRcdFx0Ly8gSW4gc3VjaCBjYXNlcywgd2Ugd29yayBhcm91bmQgdGhlIGJlaGF2aW9yIGJ5IHByZWZpeGluZyBldmVyeSBzZWxlY3RvciBpbiB0aGVcblx0XHRcdFx0Ly8gbGlzdCB3aXRoIGFuIElEIHNlbGVjdG9yIHJlZmVyZW5jaW5nIHRoZSBzY29wZSBjb250ZXh0LlxuXHRcdFx0XHQvLyBUaGUgdGVjaG5pcXVlIGhhcyB0byBiZSB1c2VkIGFzIHdlbGwgd2hlbiBhIGxlYWRpbmcgY29tYmluYXRvciBpcyB1c2VkXG5cdFx0XHRcdC8vIGFzIHN1Y2ggc2VsZWN0b3JzIGFyZSBub3QgcmVjb2duaXplZCBieSBxdWVyeVNlbGVjdG9yQWxsLlxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB0ZWNobmlxdWUuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHQoIHJkZXNjZW5kLnRlc3QoIHNlbGVjdG9yICkgfHwgcmNvbWJpbmF0b3JzLnRlc3QoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblxuXHRcdFx0XHRcdC8vIFdlIGNhbiB1c2UgOnNjb3BlIGluc3RlYWQgb2YgdGhlIElEIGhhY2sgaWYgdGhlIGJyb3dzZXJcblx0XHRcdFx0XHQvLyBzdXBwb3J0cyBpdCAmIGlmIHdlJ3JlIG5vdCBjaGFuZ2luZyB0aGUgY29udGV4dC5cblx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgIT09IGNvbnRleHQgfHwgIXN1cHBvcnQuc2NvcGUgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0XHRpZiAoICggbmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApICkgKSB7XG5cdFx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAoIG5pZCA9IGV4cGFuZG8gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzWyBpIF0gPSAoIG5pZCA/IFwiI1wiICsgbmlkIDogXCI6c2NvcGVcIiApICsgXCIgXCIgK1xuXHRcdFx0XHRcdFx0XHR0b1NlbGVjdG9yKCBncm91cHNbIGkgXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblxuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKCBjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlICk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblxuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KCBcInxcIiApLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyWyBpIF0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIubmV4dFNpYmxpbmcgKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAoIG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiICkgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0aW5EaXNhYmxlZEZpZWxkc2V0KCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoIGogPSBtYXRjaEluZGV4ZXNbIGkgXSApIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFsgaiBdID0gISggbWF0Y2hlc1sgaiBdID0gc2VlZFsgaiBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0gKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBuYW1lc3BhY2UgPSBlbGVtICYmIGVsZW0ubmFtZXNwYWNlVVJJLFxuXHRcdGRvY0VsZW0gPSBlbGVtICYmICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdC8vIEFzc3VtZSBIVE1MIHdoZW4gZG9jdW1lbnRFbGVtZW50IGRvZXNuJ3QgeWV0IGV4aXN0LCBzdWNoIGFzIGluc2lkZSBsb2FkaW5nIGlmcmFtZXNcblx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzQ4MzNcblx0cmV0dXJuICFyaHRtbC50ZXN0KCBuYW1lc3BhY2UgfHwgZG9jRWxlbSAmJiBkb2NFbGVtLm5vZGVOYW1lIHx8IFwiSFRNTFwiICk7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBkb2MgPT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBwcmVmZXJyZWREb2MgIT0gZG9jdW1lbnQgJiZcblx0XHQoIHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3ICkgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDExKywgRWRnZSAxMiAtIDE4KywgQ2hyb21lIDw9MTYgLSAyNSBvbmx5LCBGaXJlZm94IDw9My42IC0gMzEgb25seSxcblx0Ly8gU2FmYXJpIDQgLSA1IG9ubHksIE9wZXJhIDw9MTEuNiAtIDEyLnggb25seVxuXHQvLyBJRS9FZGdlICYgb2xkZXIgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgOnNjb3BlIHBzZXVkby1jbGFzcy5cblx0Ly8gU3VwcG9ydDogU2FmYXJpIDYuMCBvbmx5XG5cdC8vIFNhZmFyaSA2LjAgc3VwcG9ydHMgOnNjb3BlIGJ1dCBpdCdzIGFuIGFsaWFzIG9mIDpyb290IHRoZXJlLlxuXHRzdXBwb3J0LnNjb3BlID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cdFx0cmV0dXJuIHR5cGVvZiBlbC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHQhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6c2NvcGUgZmllbGRzZXQgZGl2XCIgKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NOYW1lXCIgKTtcblx0fSApO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KCBcIlwiICkgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcIipcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJpZFwiICkgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kWyBcIlRBR1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFsgXCJDTEFTU1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKCBzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApICkgKSB7XG5cblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHRcdHZhciBpbnB1dDtcblxuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltzZWxlY3RlZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJ+PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdFx0Ly8gSUUgMTEvRWRnZSBkb24ndCBmaW5kIGVsZW1lbnRzIG9uIGEgYFtuYW1lPScnXWAgcXVlcnkgaW4gc29tZSBjYXNlcy5cblx0XHRcdC8vIEFkZGluZyBhIHRlbXBvcmFyeSBhdHRyaWJ1dGUgdG8gdGhlIGRvY3VtZW50IGJlZm9yZSB0aGUgc2VsZWN0aW9uIHdvcmtzXG5cdFx0XHQvLyBhcm91bmQgdGhlIGlzc3VlLlxuXHRcdFx0Ly8gSW50ZXJlc3RpbmdseSwgSUUgMTAgJiBvbGRlciBkb24ndCBzZWVtIHRvIGhhdmUgdGhlIGlzc3VlLlxuXHRcdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIipuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqPVwiICtcblx0XHRcdFx0XHR3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6Y2hlY2tlZFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6Y2hlY2tlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIuIy4rWyt+XVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD0zLjYgLSA1IG9ubHlcblx0XHRcdC8vIE9sZCBGaXJlZm94IGRvZXNuJ3QgdGhyb3cgb24gYSBiYWRseS1lc2NhcGVkIGlkZW50aWZpZXIuXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIlxcXFxcXGZcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiW1xcXFxyXFxcXG5cXFxcZl1cIiApO1xuXHRcdH0gKTtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9ZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZW5hYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmRpc2FibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogT3BlcmEgMTAgLSAxMSBvbmx5XG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCggXCIqLDp4XCIgKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIiwuKjpcIiApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKCBtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IgKSApICkgKSB7XG5cblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbiggXCJ8XCIgKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKCBcInxcIiApICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpICk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBiID0gYi5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCAhc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlICkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYSA9PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGEgKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBiID09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYiApICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0cmV0dXJuIGEgPT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFsgaSBdID09PSBicFsgaSBdICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblxuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwWyBpIF0sIGJwWyBpIF0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0YXBbIGkgXSA9PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFsgaSBdID09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdHNldERvY3VtZW50KCBlbGVtICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cblx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggZXhwciwgdHJ1ZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKCBzZWwgKyBcIlwiICkucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblxuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAoIG5vZGUgPSBlbGVtWyBpKysgXSApICkge1xuXG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblxuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbIDMgXSA9ICggbWF0Y2hbIDMgXSB8fCBtYXRjaFsgNCBdIHx8XG5cdFx0XHRcdG1hdGNoWyA1IF0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDIgXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFsgMyBdID0gXCIgXCIgKyBtYXRjaFsgMyBdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblxuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDEgXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFsgNCBdID0gKyggbWF0Y2hbIDQgXSA/XG5cdFx0XHRcdFx0bWF0Y2hbIDUgXSArICggbWF0Y2hbIDYgXSB8fCAxICkgOlxuXHRcdFx0XHRcdDIgKiAoIG1hdGNoWyAzIF0gPT09IFwiZXZlblwiIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFsgNSBdID0gKyggKCBtYXRjaFsgNyBdICsgbWF0Y2hbIDggXSApIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWyA2IF0gJiYgbWF0Y2hbIDIgXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbIFwiQ0hJTERcIiBdLnRlc3QoIG1hdGNoWyAwIF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSBtYXRjaFsgNCBdIHx8IG1hdGNoWyA1IF0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdCggZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkgKSAmJlxuXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoIGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCApICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdCggcGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFx0XHRcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSApICYmIGNsYXNzQ2FjaGUoXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8XG5cdFx0XHRcdFx0XHRcdFx0XCJcIlxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cblxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgX2FyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9IG5vZGVbIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8ICggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblxuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpIF0gPSAhKCBtYXRjaGVzWyBpIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KCBsYW5nIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwieG1sOmxhbmdcIiApIHx8IGVsZW0uZ2V0QXR0cmlidXRlKCBcImxhbmdcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoIGVsZW0gPSBlbGVtLnBhcmVudE5vZGUgKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiZcblx0XHRcdFx0KCAhZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSApICYmXG5cdFx0XHRcdCEhKCBlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4ICk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQgKSB8fFxuXHRcdFx0XHQoIG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCApO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zWyBcImVtcHR5XCIgXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoICggYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICkgPT0gbnVsbCB8fFxuXHRcdFx0XHRcdGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSApLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSApLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9ICksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/XG5cdFx0XHRcdGFyZ3VtZW50ICsgbGVuZ3RoIDpcblx0XHRcdFx0YXJndW1lbnQgPiBsZW5ndGggP1xuXHRcdFx0XHRcdGxlbmd0aCA6XG5cdFx0XHRcdFx0YXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9IClcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zWyBcIm50aFwiIF0gPSBFeHByLnBzZXVkb3NbIFwiZXFcIiBdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAoIG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbIDAgXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAoIHRva2VucyA9IFtdICkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKCBtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFsgMCBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9ICk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAoIG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSApICYmICggIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQoIG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApICkgKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zWyBpIF0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblxuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKCBlbGVtWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAoIG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdICkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKCBuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoICggbmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbIGkgXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1sgMCBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzWyBpIF0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKFxuXHRcdFx0XHRzZWxlY3RvciB8fCBcIipcIixcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCxcblx0XHRcdFx0W11cblx0XHRcdCksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKCBlbGVtID0gdGVtcFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFsgaSBdIF0gPSAhKCBtYXRjaGVySW5bIHBvc3RNYXBbIGkgXSBdID0gZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAoIG1hdGNoZXJJblsgaSBdID0gZWxlbSApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsICggbWF0Y2hlck91dCA9IFtdICksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICYmXG5cdFx0XHRcdFx0XHQoIHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwWyBpIF0gKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkWyB0ZW1wIF0gPSAhKCByZXN1bHRzWyB0ZW1wIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAwIF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVsgXCIgXCIgXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KCBjaGVja0NvbnRleHQgPSBjb250ZXh0ICkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblxuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGkgXS50eXBlIF0gKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKCBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlciApIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zWyBpIF0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbIGkgXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGogXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3RvcihcblxuXHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0dG9rZW5zXG5cdFx0XHRcdFx0XHQuc2xpY2UoIDAsIGkgLSAxIClcblx0XHRcdFx0XHRcdC5jb25jYXQoIHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9IClcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICggdG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkgKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbIFwiVEFHXCIgXSggXCIqXCIsIG91dGVybW9zdCApLFxuXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoIGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xICksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtICkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBzZXRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEoIHVubWF0Y2hlZFsgaSBdIHx8IHNldE1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbIGkgXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoWyBpIF0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoXG5cdFx0XHRzZWxlY3Rvcixcblx0XHRcdG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApXG5cdFx0KTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKCBzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yICkgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKCB0b2tlbiA9IHRva2Vuc1sgMCBdICkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMSBdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kWyBcIklEXCIgXSggdG9rZW4ubWF0Y2hlc1sgMCBdXG5cdFx0XHRcdC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLCBjb250ZXh0ICkgfHwgW10gKVsgMCBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwclsgXCJuZWVkc0NvbnRleHRcIiBdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zWyBpIF07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKCB0eXBlID0gdG9rZW4udHlwZSApIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoIGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSApICkge1xuXG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoICggc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1sgMCBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWyAwIF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dFxuXHRcdFx0XHQpICkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoIFwiXCIgKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKCBcIlwiICkgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICkgKSAmIDE7XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwiaHJlZlwiICkgPT09IFwiI1wiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBfbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKCBcImRpc2FibGVkXCIgKSA9PSBudWxsO1xufSApICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHQoIHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSApO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59ICkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuXHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufVxudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEZpbHRlcmVkIGRpcmVjdGx5IGZvciBib3RoIHNpbXBsZSBhbmQgY29tcGxleCBzZWxlY3RvcnNcblx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0aWYgKCBlbGVtLmNvbnRlbnREb2N1bWVudCAhPSBudWxsICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExK1xuXHRcdFx0Ly8gPG9iamVjdD4gZWxlbWVudHMgd2l0aCBubyBgZGF0YWAgYXR0cmlidXRlIGhhcyBhbiBvYmplY3Rcblx0XHRcdC8vIGBjb250ZW50RG9jdW1lbnRgIHdpdGggYSBgbnVsbGAgcHJvdG90eXBlLlxuXHRcdFx0Z2V0UHJvdG8oIGVsZW0uY29udGVudERvY3VtZW50ICkgKSB7XG5cblx0XHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcblx0XHQvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcblx0XHQvLyBkb24ndCBzdXBwb3J0IGl0LlxuXHRcdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuXHRcdFx0ZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggX2ksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBpc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMyBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9jayxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBwcmltYXJ5IERlZmVycmVkXG5cdFx0XHRwcmltYXJ5ID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdHByaW1hcnkucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIHByaW1hcnkuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgcHJpbWFyeS5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBwcmltYXJ5LnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBwcmltYXJ5LnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIHByaW1hcnkucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByaW1hcnkucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggdG9UeXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBfa2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBfYWxsLCBsZXR0ZXIgKSB7XG5cdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbn1cblxuLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuLy8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuZnVuY3Rpb24gY2FtZWxDYXNlKCBzdHJpbmcgKSB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xufVxudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBjYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0gY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG5cdHZhciBpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0XHR9LFxuXHRcdGNvbXBvc2VkID0geyBjb21wb3NlZDogdHJ1ZSB9O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCssIGlPUyAxMC4wIC0gMTAuMiBvbmx5XG5cdC8vIENoZWNrIGF0dGFjaG1lbnQgYWNyb3NzIHNoYWRvdyBET00gYm91bmRhcmllcyB3aGVuIHBvc3NpYmxlIChnaC0zNTA0KVxuXHQvLyBTdXBwb3J0OiBpT1MgMTAuMC0xMC4yIG9ubHlcblx0Ly8gRWFybHkgaU9TIDEwIHZlcnNpb25zIHN1cHBvcnQgYGF0dGFjaFNoYWRvd2AgYnV0IG5vdCBgZ2V0Um9vdE5vZGVgLFxuXHQvLyBsZWFkaW5nIHRvIGVycm9ycy4gV2UgbmVlZCB0byBjaGVjayBmb3IgYGdldFJvb3ROb2RlYC5cblx0aWYgKCBkb2N1bWVudEVsZW1lbnQuZ2V0Um9vdE5vZGUgKSB7XG5cdFx0aXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRSb290Tm9kZSggY29tcG9zZWQgKSA9PT0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdH07XG5cdH1cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRpc0F0dGFjaGVkKCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9IGVsZW0ubm9kZVR5cGUgJiZcblx0XHRcdCggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdC8vIElFIDw9OSByZXBsYWNlcyA8b3B0aW9uPiB0YWdzIHdpdGggdGhlaXIgY29udGVudHMgd2hlbiBpbnNlcnRlZCBvdXRzaWRlIG9mXG5cdC8vIHRoZSBzZWxlY3QgZWxlbWVudC5cblx0ZGl2LmlubmVySFRNTCA9IFwiPG9wdGlvbj48L29wdGlvbj5cIjtcblx0c3VwcG9ydC5vcHRpb24gPSAhIWRpdi5sYXN0Q2hpbGQ7XG59ICkoKTtcblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5pZiAoICFzdXBwb3J0Lm9wdGlvbiApIHtcblx0d3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uID0gWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdO1xufVxuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGF0dGFjaGVkLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggdG9UeXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRhdHRhY2hlZCA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggYXR0YWNoZWQgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbnZhciBydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcbi8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzLCBleGNlcHQgd2hlbiB0aGV5IGFyZSBuby1vcC5cbi8vIFNvIGV4cGVjdCBmb2N1cyB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIGFscmVhZHkgYWN0aXZlLFxuLy8gYW5kIGJsdXIgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBub3QgYWxyZWFkeSBhY3RpdmUuXG4vLyAoZm9jdXMgYW5kIGJsdXIgYXJlIGFsd2F5cyBzeW5jaHJvbm91cyBpbiBvdGhlciBzdXBwb3J0ZWQgYnJvd3NlcnMsXG4vLyB0aGlzIGp1c3QgZGVmaW5lcyB3aGVuIHdlIGNhbiBjb3VudCBvbiBpdCkuXG5mdW5jdGlvbiBleHBlY3RTeW5jKCBlbGVtLCB0eXBlICkge1xuXHRyZXR1cm4gKCBlbGVtID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICkgPT09ICggdHlwZSA9PT0gXCJmb2N1c1wiICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBBY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gdGhyb3cgdW5leHBlY3RlZGx5XG4vLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzOTNcbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gT25seSBhdHRhY2ggZXZlbnRzIHRvIG9iamVjdHMgdGhhdCBhY2NlcHQgZGF0YVxuXHRcdGlmICggIWFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSBPYmplY3QuY3JlYXRlKCBudWxsICk7XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cblx0XHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApLFxuXG5cdFx0XHRoYW5kbGVycyA9IChcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApXG5cdFx0XHQpWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGUgZXZlbnQgaXMgbmFtZXNwYWNlZCwgdGhlbiBlYWNoIGhhbmRsZXIgaXMgb25seSBpbnZva2VkIGlmIGl0IGlzXG5cdFx0XHRcdC8vIHNwZWNpYWxseSB1bml2ZXJzYWwgb3IgaXRzIG5hbWVzcGFjZXMgYXJlIGEgc3VwZXJzZXQgb2YgdGhlIGV2ZW50J3MuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgaGFuZGxlT2JqLm5hbWVzcGFjZSA9PT0gZmFsc2UgfHxcblx0XHRcdFx0XHRldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBpc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCB0byBlbnN1cmUgY29ycmVjdCBzdGF0ZSBmb3IgY2hlY2thYmxlIGlucHV0c1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gZGF0YVByaXYuc2V0KCBlbCwgXCJjbGlja1wiLCAuLi4gKVxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiLCByZXR1cm5UcnVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlcmluZyBhIGNsaWNrXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIHN1cHByZXNzIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0Ly8gQWxzbyBwcmV2ZW50IGl0IGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGUgYSBsZXZlcmFnZWQgbmF0aXZlLWV2ZW50IHN0YWNrXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdFx0XHRyZXR1cm4gcmNoZWNrYWJsZVR5cGUudGVzdCggdGFyZ2V0LnR5cGUgKSAmJlxuXHRcdFx0XHRcdHRhcmdldC5jbGljayAmJiBub2RlTmFtZSggdGFyZ2V0LCBcImlucHV0XCIgKSAmJlxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGFyZ2V0LCBcImNsaWNrXCIgKSB8fFxuXHRcdFx0XHRcdG5vZGVOYW1lKCB0YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gRW5zdXJlIHRoZSBwcmVzZW5jZSBvZiBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGhhbmRsZXMgbWFudWFsbHktdHJpZ2dlcmVkXG4vLyBzeW50aGV0aWMgZXZlbnRzIGJ5IGludGVycnVwdGluZyBwcm9ncmVzcyB1bnRpbCByZWludm9rZWQgaW4gcmVzcG9uc2UgdG9cbi8vICpuYXRpdmUqIGV2ZW50cyB0aGF0IGl0IGZpcmVzIGRpcmVjdGx5LCBlbnN1cmluZyB0aGF0IHN0YXRlIGNoYW5nZXMgaGF2ZVxuLy8gYWxyZWFkeSBvY2N1cnJlZCBiZWZvcmUgb3RoZXIgbGlzdGVuZXJzIGFyZSBpbnZva2VkLlxuZnVuY3Rpb24gbGV2ZXJhZ2VOYXRpdmUoIGVsLCB0eXBlLCBleHBlY3RTeW5jICkge1xuXG5cdC8vIE1pc3NpbmcgZXhwZWN0U3luYyBpbmRpY2F0ZXMgYSB0cmlnZ2VyIGNhbGwsIHdoaWNoIG11c3QgZm9yY2Ugc2V0dXAgdGhyb3VnaCBqUXVlcnkuZXZlbnQuYWRkXG5cdGlmICggIWV4cGVjdFN5bmMgKSB7XG5cdFx0aWYgKCBkYXRhUHJpdi5nZXQoIGVsLCB0eXBlICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjb250cm9sbGVyIGFzIGEgc3BlY2lhbCB1bml2ZXJzYWwgaGFuZGxlciBmb3IgYWxsIGV2ZW50IG5hbWVzcGFjZXNcblx0ZGF0YVByaXYuc2V0KCBlbCwgdHlwZSwgZmFsc2UgKTtcblx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHtcblx0XHRuYW1lc3BhY2U6IGZhbHNlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBub3RBc3luYywgcmVzdWx0LFxuXHRcdFx0XHRzYXZlZCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRpZiAoICggZXZlbnQuaXNUcmlnZ2VyICYgMSApICYmIHRoaXNbIHR5cGUgXSApIHtcblxuXHRcdFx0XHQvLyBJbnRlcnJ1cHQgcHJvY2Vzc2luZyBvZiB0aGUgb3V0ZXIgc3ludGhldGljIC50cmlnZ2VyKCllZCBldmVudFxuXHRcdFx0XHQvLyBTYXZlZCBkYXRhIHNob3VsZCBiZSBmYWxzZSBpbiBzdWNoIGNhc2VzLCBidXQgbWlnaHQgYmUgYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdFxuXHRcdFx0XHQvLyBmcm9tIGFuIGFzeW5jIG5hdGl2ZSBoYW5kbGVyIChnaC00MzUwKVxuXHRcdFx0XHRpZiAoICFzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBhcmd1bWVudHMgZm9yIHVzZSB3aGVuIGhhbmRsaW5nIHRoZSBpbm5lciBuYXRpdmUgZXZlbnRcblx0XHRcdFx0XHQvLyBUaGVyZSB3aWxsIGFsd2F5cyBiZSBhdCBsZWFzdCBvbmUgYXJndW1lbnQgKGFuIGV2ZW50IG9iamVjdCksIHNvIHRoaXMgYXJyYXlcblx0XHRcdFx0XHQvLyB3aWxsIG5vdCBiZSBjb25mdXNlZCB3aXRoIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3QuXG5cdFx0XHRcdFx0c2F2ZWQgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHNhdmVkICk7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyIHRoZSBuYXRpdmUgZXZlbnQgYW5kIGNhcHR1cmUgaXRzIHJlc3VsdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdC8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzXG5cdFx0XHRcdFx0bm90QXN5bmMgPSBleHBlY3RTeW5jKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0dGhpc1sgdHlwZSBdKCk7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0IHx8IG5vdEFzeW5jICkge1xuXHRcdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBmYWxzZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYW5jZWwgdGhlIG91dGVyIHN5bnRoZXRpYyBldmVudFxuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgODYrXG5cdFx0XHRcdFx0XHQvLyBJbiBDaHJvbWUsIGlmIGFuIGVsZW1lbnQgaGF2aW5nIGEgZm9jdXNvdXQgaGFuZGxlciBpcyBibHVycmVkIGJ5XG5cdFx0XHRcdFx0XHQvLyBjbGlja2luZyBvdXRzaWRlIG9mIGl0LCBpdCBpbnZva2VzIHRoZSBoYW5kbGVyIHN5bmNocm9ub3VzbHkuIElmXG5cdFx0XHRcdFx0XHQvLyB0aGF0IGhhbmRsZXIgY2FsbHMgYC5yZW1vdmUoKWAgb24gdGhlIGVsZW1lbnQsIHRoZSBkYXRhIGlzIGNsZWFyZWQsXG5cdFx0XHRcdFx0XHQvLyBsZWF2aW5nIGByZXN1bHRgIHVuZGVmaW5lZC4gV2UgbmVlZCB0byBndWFyZCBhZ2FpbnN0IHRoaXMuXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0ICYmIHJlc3VsdC52YWx1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgZm9yIGFuIGV2ZW50IHdpdGggYSBidWJibGluZyBzdXJyb2dhdGVcblx0XHRcdFx0Ly8gKGZvY3VzIG9yIGJsdXIpLCBhc3N1bWUgdGhhdCB0aGUgc3Vycm9nYXRlIGFscmVhZHkgcHJvcGFnYXRlZCBmcm9tIHRyaWdnZXJpbmcgdGhlXG5cdFx0XHRcdC8vIG5hdGl2ZSBldmVudCBhbmQgcHJldmVudCB0aGF0IGZyb20gaGFwcGVuaW5nIGFnYWluIGhlcmUuXG5cdFx0XHRcdC8vIFRoaXMgdGVjaG5pY2FsbHkgZ2V0cyB0aGUgb3JkZXJpbmcgd3Jvbmcgdy5yLnQuIHRvIGAudHJpZ2dlcigpYCAoaW4gd2hpY2ggdGhlXG5cdFx0XHRcdC8vIGJ1YmJsaW5nIHN1cnJvZ2F0ZSBwcm9wYWdhdGVzICphZnRlciogdGhlIG5vbi1idWJibGluZyBiYXNlKSwgYnV0IHRoYXQgc2VlbXNcblx0XHRcdFx0Ly8gbGVzcyBiYWQgdGhhbiBkdXBsaWNhdGlvbi5cblx0XHRcdFx0fSBlbHNlIGlmICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9ICkuZGVsZWdhdGVUeXBlICkge1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBuYXRpdmUgZXZlbnQgdHJpZ2dlcmVkIGFib3ZlLCBldmVyeXRoaW5nIGlzIG5vdyBpbiBvcmRlclxuXHRcdFx0Ly8gRmlyZSBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgd2l0aCB0aGUgb3JpZ2luYWwgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHtcblx0XHRcdFx0XHR2YWx1ZTogalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdFx0Ly8gRXh0ZW5kIHdpdGggdGhlIHByb3RvdHlwZSB0byByZXNldCB0aGUgYWJvdmUgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcblx0XHRcdFx0XHRcdGpRdWVyeS5leHRlbmQoIHNhdmVkWyAwIF0sIGpRdWVyeS5FdmVudC5wcm90b3R5cGUgKSxcblx0XHRcdFx0XHRcdHNhdmVkLnNsaWNlKCAxICksXG5cdFx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaGFuZGxpbmcgb2YgdGhlIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblx0d2hpY2g6IHRydWVcbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgZXhwZWN0U3luYyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcHJlc3MgbmF0aXZlIGZvY3VzIG9yIGJsdXIgYXMgaXQncyBhbHJlYWR5IGJlaW5nIGZpcmVkXG5cdFx0Ly8gaW4gbGV2ZXJhZ2VOYXRpdmUuXG5cdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdGRlbGVnYXRlVHlwZTogZGVsZWdhdGVUeXBlXG5cdH07XG59ICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5nZXQoIHNyYyApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkZXN0LCBcImhhbmRsZSBldmVudHNcIiApO1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gZmxhdCggYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSwgZG9jICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIG5vZGUsIGRvYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgaXNBdHRhY2hlZCggbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWw7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2sgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5jYWxsKCBlbGVtICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsQm94U3R5bGVzOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxCb3hTdHlsZXNWYWw7XG5cdFx0fSxcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9LFxuXHRcdHNjcm9sbGJveFNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBzY3JvbGxib3hTaXplVmFsO1xuXHRcdH0sXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBCZWhhdmlvciBpbiBJRSA5IGlzIG1vcmUgc3VidGxlIHRoYW4gaW4gbmV3ZXIgdmVyc2lvbnMgJiBpdCBwYXNzZXNcblx0XHQvLyBzb21lIHZlcnNpb25zIG9mIHRoaXMgdGVzdDsgbWFrZSBzdXJlIG5vdCB0byBtYWtlIGl0IHBhc3MgdGhlcmUhXG5cdFx0Ly9cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDcwK1xuXHRcdC8vIE9ubHkgRmlyZWZveCBpbmNsdWRlcyBib3JkZXIgd2lkdGhzXG5cdFx0Ly8gaW4gY29tcHV0ZWQgZGltZW5zaW9ucy4gKGdoLTQ1MjkpXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHRhYmxlLCB0ciwgdHJDaGlsZCwgdHJTdHlsZTtcblx0XHRcdGlmICggcmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRhYmxlXCIgKTtcblx0XHRcdFx0dHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRyXCIgKTtcblx0XHRcdFx0dHJDaGlsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHRcdFx0XHR0YWJsZS5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O2JvcmRlci1jb2xsYXBzZTpzZXBhcmF0ZVwiO1xuXHRcdFx0XHR0ci5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MXB4IHNvbGlkXCI7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDg2K1xuXHRcdFx0XHQvLyBIZWlnaHQgc2V0IHRocm91Z2ggY3NzVGV4dCBkb2VzIG5vdCBnZXQgYXBwbGllZC5cblx0XHRcdFx0Ly8gQ29tcHV0ZWQgaGVpZ2h0IHRoZW4gY29tZXMgYmFjayBhcyAwLlxuXHRcdFx0XHR0ci5zdHlsZS5oZWlnaHQgPSBcIjFweFwiO1xuXHRcdFx0XHR0ckNoaWxkLnN0eWxlLmhlaWdodCA9IFwiOXB4XCI7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA4IENocm9tZSA4Nitcblx0XHRcdFx0Ly8gSW4gb3VyIGJvZHlCYWNrZ3JvdW5kLmh0bWwgaWZyYW1lLFxuXHRcdFx0XHQvLyBkaXNwbGF5IGZvciBhbGwgZGl2IGVsZW1lbnRzIGlzIHNldCB0byBcImlubGluZVwiLFxuXHRcdFx0XHQvLyB3aGljaCBjYXVzZXMgYSBwcm9ibGVtIG9ubHkgaW4gQW5kcm9pZCA4IENocm9tZSA4Ni5cblx0XHRcdFx0Ly8gRW5zdXJpbmcgdGhlIGRpdiBpcyBkaXNwbGF5OiBibG9ja1xuXHRcdFx0XHQvLyBnZXRzIGFyb3VuZCB0aGlzIGlzc3VlLlxuXHRcdFx0XHR0ckNoaWxkLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50XG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0YWJsZSApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ciApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ckNoaWxkICk7XG5cblx0XHRcdFx0dHJTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCB0ciApO1xuXHRcdFx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9ICggcGFyc2VJbnQoIHRyU3R5bGUuaGVpZ2h0LCAxMCApICtcblx0XHRcdFx0XHRwYXJzZUludCggdHJTdHlsZS5ib3JkZXJUb3BXaWR0aCwgMTAgKSArXG5cdFx0XHRcdFx0cGFyc2VJbnQoIHRyU3R5bGUuYm9yZGVyQm90dG9tV2lkdGgsIDEwICkgKSA9PT0gdHIub2Zmc2V0SGVpZ2h0O1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggdGFibGUgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFpc0F0dGFjaGVkKCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhciBjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGUsXG5cdHZlbmRvclByb3BzID0ge307XG5cbi8vIFJldHVybiBhIHZlbmRvci1wcmVmaXhlZCBwcm9wZXJ0eSBvciB1bmRlZmluZWRcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwb3RlbnRpYWxseS1tYXBwZWQgalF1ZXJ5LmNzc1Byb3BzIG9yIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIGZpbmFsID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gfHwgdmVuZG9yUHJvcHNbIG5hbWUgXTtcblxuXHRpZiAoIGZpbmFsICkge1xuXHRcdHJldHVybiBmaW5hbDtcblx0fVxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXHRyZXR1cm4gdmVuZG9yUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fTtcblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIF9lbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gVXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3Igd2hlbiBib3ggc2l6aW5nIGlzIHVucmVsaWFibGUuXG5cdC8vIEluIHRob3NlIGNhc2VzLCB0aGUgY29tcHV0ZWQgdmFsdWUgY2FuIGJlIHRydXN0ZWQgdG8gYmUgYm9yZGVyLWJveC5cblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDEwIC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBJbnRlcmVzdGluZ2x5LCBpbiBzb21lIGNhc2VzIElFIDkgZG9lc24ndCBzdWZmZXIgZnJvbSB0aGlzIGlzc3VlLlxuXHRcdCFzdXBwb3J0LnJlbGlhYmxlVHJEaW1lbnNpb25zKCkgJiYgbm9kZU5hbWUoIGVsZW0sIFwidHJcIiApIHx8XG5cblx0XHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0XHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdFx0dmFsID09PSBcImF1dG9cIiB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdFx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApICYmXG5cblx0XHQvLyBNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSAmIGNvbm5lY3RlZFxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwiZ3JpZEFyZWFcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5cIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5FbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5TdGFydFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1wiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd0VuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1N0YXJ0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBfaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0XHRcdC8vIE9ubHkgcmVhZCBzdHlsZXMucG9zaXRpb24gaWYgdGhlIHRlc3QgaGFzIGEgY2hhbmNlIHRvIGZhaWxcblx0XHRcdFx0Ly8gdG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdy5cblx0XHRcdFx0c2Nyb2xsYm94U2l6ZUJ1Z2d5ID0gIXN1cHBvcnQuc2Nyb2xsYm94U2l6ZSgpICYmXG5cdFx0XHRcdFx0c3R5bGVzLnBvc2l0aW9uID09PSBcImFic29sdXRlXCIsXG5cblx0XHRcdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtMzk5MSlcblx0XHRcdFx0Ym94U2l6aW5nTmVlZGVkID0gc2Nyb2xsYm94U2l6ZUJ1Z2d5IHx8IGV4dHJhLFxuXHRcdFx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgP1xuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRcdGlzQm9yZGVyQm94LFxuXHRcdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdFx0KSA6XG5cdFx0XHRcdFx0MDtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzY3JvbGxib3hTaXplQnVnZ3kgKSB7XG5cdFx0XHRcdHN1YnRyYWN0IC09IE1hdGguY2VpbChcblx0XHRcdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIHN0eWxlc1sgZGltZW5zaW9uIF0gKSAtXG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIFwiYm9yZGVyXCIsIGZhbHNlLCBzdHlsZXMgKSAtXG5cdFx0XHRcdFx0MC41XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBkaW1lbnNpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSB8fFxuXHRcdFx0XHRcdHR3ZWVuLmVsZW0uc3R5bGVbIGZpbmFsUHJvcE5hbWUoIHR3ZWVuLnByb3AgKSBdICE9IG51bGwgKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdHJlc3VsdC5zdG9wLmJpbmQoIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRpc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IERhdGUubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgdmFsdWVJc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRzdG9wUHJvcGFnYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH07XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgbGFzdEVsZW1lbnQsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IGxhc3RFbGVtZW50ID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBIYW5kbGU6IHJlZ3VsYXIgbm9kZXMgKHZpYSBgdGhpcy5vd25lckRvY3VtZW50YCksIHdpbmRvd1xuXHRcdFx0XHQvLyAodmlhIGB0aGlzLmRvY3VtZW50YCkgJiBkb2N1bWVudCAodmlhIGB0aGlzYCkuXG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSB7IGd1aWQ6IERhdGUubm93KCkgfTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sLCBwYXJzZXJFcnJvckVsZW07XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHt9XG5cblx0cGFyc2VyRXJyb3JFbGVtID0geG1sICYmIHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiIClbIDAgXTtcblx0aWYgKCAheG1sIHx8IHBhcnNlckVycm9yRWxlbSApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgKFxuXHRcdFx0cGFyc2VyRXJyb3JFbGVtID9cblx0XHRcdFx0alF1ZXJ5Lm1hcCggcGFyc2VyRXJyb3JFbGVtLmNoaWxkTm9kZXMsIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWwudGV4dENvbnRlbnQ7XG5cdFx0XHRcdH0gKS5qb2luKCBcIlxcblwiICkgOlxuXHRcdFx0XHRkYXRhXG5cdFx0KSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgdG9UeXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdGlmICggYSA9PSBudWxsICkge1xuXHRcdHJldHVybiBcIlwiO1xuXHR9XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9ICkubWFwKCBmdW5jdGlvbiggX2ksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cbm9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gPVxuXHRcdFx0XHRcdFx0XHRcdFx0KCByZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gfHwgW10gKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuY29uY2F0KCBtYXRjaFsgMiBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSArIFwiIFwiIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoLmpvaW4oIFwiLCBcIiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UuZ3VpZCsrICkgK1xuXHRcdFx0XHRcdHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVc2UgYSBub29wIGNvbnZlcnRlciBmb3IgbWlzc2luZyBzY3JpcHQgYnV0IG5vdCBpZiBqc29ucFxuXHRcdFx0aWYgKCAhaXNTdWNjZXNzICYmXG5cdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBcInNjcmlwdFwiLCBzLmRhdGFUeXBlcyApID4gLTEgJiZcblx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIFwianNvblwiLCBzLmRhdGFUeXBlcyApIDwgMCApIHtcblx0XHRcdFx0cy5jb252ZXJ0ZXJzWyBcInRleHQgc2NyaXB0XCIgXSA9IGZ1bmN0aW9uKCkge307XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIF9pLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0dmFyIGk7XG5cdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdGlmICggaS50b0xvd2VyQ2FzZSgpID09PSBcImNvbnRlbnQtdHlwZVwiICkge1xuXHRcdFx0cy5jb250ZW50VHlwZSA9IHMuaGVhZGVyc1sgaSBdIHx8IFwiXCI7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCwgb3B0aW9ucywgZG9jICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cblx0XHQvLyBPbmx5IGV2YWx1YXRlIHRoZSByZXNwb25zZSBpZiBpdCBpcyBzdWNjZXNzZnVsIChnaC00MTI2KVxuXHRcdC8vIGRhdGFGaWx0ZXIgaXMgbm90IGludm9rZWQgZm9yIGZhaWx1cmUgcmVzcG9uc2VzLCBzbyB1c2luZyBpdCBpbnN0ZWFkXG5cdFx0Ly8gb2YgdGhlIGRlZmF1bHQgY29udmVydGVyIGlzIGtsdWRneSBidXQgaXQgd29ya3MuXG5cdFx0Y29udmVydGVyczoge1xuXHRcdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbigpIHt9XG5cdFx0fSxcblx0XHRkYXRhRmlsdGVyOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggcmVzcG9uc2UsIG9wdGlvbnMsIGRvYyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlLmd1aWQrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBpc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIF9pLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7XG5cdFx0cGFkZGluZzogXCJpbm5lclwiICsgbmFtZSxcblx0XHRjb250ZW50OiB0eXBlLFxuXHRcdFwiXCI6IFwib3V0ZXJcIiArIG5hbWVcblx0fSwgZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggX2ksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9LFxuXG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaChcblx0KCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblxuXHRcdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdFx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdFx0fTtcblx0fVxuKTtcblxuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG4vLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1BcbnZhciBydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxualF1ZXJ5LnRyaW0gPSBmdW5jdGlvbiggdGV4dCApIHtcblx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XCJcIiA6XG5cdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG59O1xuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggdHlwZW9mIG5vR2xvYmFsID09PSBcInVuZGVmaW5lZFwiICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCJ2YXIgbWFwID0ge1xuXHRcIi4vTW9kZWwudHNcIjogXCIuL3NyYy9Nb2RlbC9Nb2RlbC50c1wiLFxuXHRcIi4vbW9kZWwudGVzdC50c1wiOiBcIi4vc3JjL01vZGVsL21vZGVsLnRlc3QudHNcIixcblx0XCIuL3R5cGVzLnRzXCI6IFwiLi9zcmMvTW9kZWwvdHlwZXMudHNcIlxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IFwiLi9zcmMvTW9kZWwgc3luYyByZWN1cnNpdmUgLnRzJFwiOyIsInZhciBtYXAgPSB7XG5cdFwiLi9tb2RlbC50ZXN0LnRzXCI6IFwiLi9zcmMvTW9kZWwvbW9kZWwudGVzdC50c1wiXG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gXCIuL3NyYy9Nb2RlbCBzeW5jIHJlY3Vyc2l2ZSB0ZXN0LnRzJFwiOyIsInZhciBtYXAgPSB7XG5cdFwiLi9QcmVzZW50ZXIudHNcIjogXCIuL3NyYy9QcmVzZW50ZXIvUHJlc2VudGVyLnRzXCIsXG5cdFwiLi9wcmVzZW50ZXIudGVzdC50c1wiOiBcIi4vc3JjL1ByZXNlbnRlci9wcmVzZW50ZXIudGVzdC50c1wiXG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gXCIuL3NyYy9QcmVzZW50ZXIgc3luYyByZWN1cnNpdmUgLnRzJFwiOyIsInZhciBtYXAgPSB7XG5cdFwiLi9wcmVzZW50ZXIudGVzdC50c1wiOiBcIi4vc3JjL1ByZXNlbnRlci9wcmVzZW50ZXIudGVzdC50c1wiXG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gXCIuL3NyYy9QcmVzZW50ZXIgc3luYyByZWN1cnNpdmUgdGVzdC50cyRcIjsiLCJ2YXIgbWFwID0ge1xuXHRcIi4vSGFuZGxlcy9IYW5kbGVzLnRzXCI6IFwiLi9zcmMvVmlldy9IYW5kbGVzL0hhbmRsZXMudHNcIixcblx0XCIuL0hhbmRsZXMvaGFuZGxlcy50ZXN0LnRzXCI6IFwiLi9zcmMvVmlldy9IYW5kbGVzL2hhbmRsZXMudGVzdC50c1wiLFxuXHRcIi4vSGFuZGxlcy90eXBlcy50c1wiOiBcIi4vc3JjL1ZpZXcvSGFuZGxlcy90eXBlcy50c1wiLFxuXHRcIi4vTW92ZW1lbnQvTW92ZW1lbnQudHNcIjogXCIuL3NyYy9WaWV3L01vdmVtZW50L01vdmVtZW50LnRzXCIsXG5cdFwiLi9Nb3ZlbWVudC9tb3ZlbWVudC50ZXN0LnRzXCI6IFwiLi9zcmMvVmlldy9Nb3ZlbWVudC9tb3ZlbWVudC50ZXN0LnRzXCIsXG5cdFwiLi9Nb3ZlbWVudC90eXBlcy50c1wiOiBcIi4vc3JjL1ZpZXcvTW92ZW1lbnQvdHlwZXMudHNcIixcblx0XCIuL1NlbGVjdGVkSW50ZXJ2YWwvU2VsZWN0ZWRJbnRlcnZhbC50c1wiOiBcIi4vc3JjL1ZpZXcvU2VsZWN0ZWRJbnRlcnZhbC9TZWxlY3RlZEludGVydmFsLnRzXCIsXG5cdFwiLi9TZWxlY3RlZEludGVydmFsL3NlbGVjdGVkSW50ZXJ2YWwudGVzdC50c1wiOiBcIi4vc3JjL1ZpZXcvU2VsZWN0ZWRJbnRlcnZhbC9zZWxlY3RlZEludGVydmFsLnRlc3QudHNcIixcblx0XCIuL1NlbGVjdGVkSW50ZXJ2YWwvdHlwZXMudHNcIjogXCIuL3NyYy9WaWV3L1NlbGVjdGVkSW50ZXJ2YWwvdHlwZXMudHNcIixcblx0XCIuL1NpZGVNZW51L1NpZGVNZW51LnRzXCI6IFwiLi9zcmMvVmlldy9TaWRlTWVudS9TaWRlTWVudS50c1wiLFxuXHRcIi4vU2lkZU1lbnUvc2lkZU1lbnUudGVzdC50c1wiOiBcIi4vc3JjL1ZpZXcvU2lkZU1lbnUvc2lkZU1lbnUudGVzdC50c1wiLFxuXHRcIi4vU2lkZU1lbnUvdHlwZXMudHNcIjogXCIuL3NyYy9WaWV3L1NpZGVNZW51L3R5cGVzLnRzXCIsXG5cdFwiLi9TbGlkZXIvU2xpZGVyLnRzXCI6IFwiLi9zcmMvVmlldy9TbGlkZXIvU2xpZGVyLnRzXCIsXG5cdFwiLi9TbGlkZXIvc2xpZGVyLnRlc3QudHNcIjogXCIuL3NyYy9WaWV3L1NsaWRlci9zbGlkZXIudGVzdC50c1wiLFxuXHRcIi4vU2xpZGVyL3R5cGVzLnRzXCI6IFwiLi9zcmMvVmlldy9TbGlkZXIvdHlwZXMudHNcIixcblx0XCIuL1ZhbHVlc1NjYWxlL1ZhbHVlc1NjYWxlLnRzXCI6IFwiLi9zcmMvVmlldy9WYWx1ZXNTY2FsZS9WYWx1ZXNTY2FsZS50c1wiLFxuXHRcIi4vVmFsdWVzU2NhbGUvaW50ZXJmYWNlcy50c1wiOiBcIi4vc3JjL1ZpZXcvVmFsdWVzU2NhbGUvaW50ZXJmYWNlcy50c1wiLFxuXHRcIi4vVmFsdWVzU2NhbGUvdmFsdWVTY2FsZS50ZXN0LnRzXCI6IFwiLi9zcmMvVmlldy9WYWx1ZXNTY2FsZS92YWx1ZVNjYWxlLnRlc3QudHNcIixcblx0XCIuL1ZpZXcudHNcIjogXCIuL3NyYy9WaWV3L1ZpZXcudHNcIixcblx0XCIuL3R5cGVzLnRzXCI6IFwiLi9zcmMvVmlldy90eXBlcy50c1wiLFxuXHRcIi4vdmlldy50ZXN0LnRzXCI6IFwiLi9zcmMvVmlldy92aWV3LnRlc3QudHNcIlxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IFwiLi9zcmMvVmlldyBzeW5jIHJlY3Vyc2l2ZSAudHMkXCI7IiwidmFyIG1hcCA9IHtcblx0XCIuL0hhbmRsZXMvaGFuZGxlcy50ZXN0LnRzXCI6IFwiLi9zcmMvVmlldy9IYW5kbGVzL2hhbmRsZXMudGVzdC50c1wiLFxuXHRcIi4vTW92ZW1lbnQvbW92ZW1lbnQudGVzdC50c1wiOiBcIi4vc3JjL1ZpZXcvTW92ZW1lbnQvbW92ZW1lbnQudGVzdC50c1wiLFxuXHRcIi4vU2VsZWN0ZWRJbnRlcnZhbC9zZWxlY3RlZEludGVydmFsLnRlc3QudHNcIjogXCIuL3NyYy9WaWV3L1NlbGVjdGVkSW50ZXJ2YWwvc2VsZWN0ZWRJbnRlcnZhbC50ZXN0LnRzXCIsXG5cdFwiLi9TaWRlTWVudS9zaWRlTWVudS50ZXN0LnRzXCI6IFwiLi9zcmMvVmlldy9TaWRlTWVudS9zaWRlTWVudS50ZXN0LnRzXCIsXG5cdFwiLi9TbGlkZXIvc2xpZGVyLnRlc3QudHNcIjogXCIuL3NyYy9WaWV3L1NsaWRlci9zbGlkZXIudGVzdC50c1wiLFxuXHRcIi4vVmFsdWVzU2NhbGUvdmFsdWVTY2FsZS50ZXN0LnRzXCI6IFwiLi9zcmMvVmlldy9WYWx1ZXNTY2FsZS92YWx1ZVNjYWxlLnRlc3QudHNcIixcblx0XCIuL3ZpZXcudGVzdC50c1wiOiBcIi4vc3JjL1ZpZXcvdmlldy50ZXN0LnRzXCJcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSBcIi4vc3JjL1ZpZXcgc3luYyByZWN1cnNpdmUgdGVzdC50cyRcIjsiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJNb2RlbCIsImNvbnN0cnVjdG9yIiwic2V0dGluZ3MiLCJ2YWx1ZXMiLCJtaW4iLCJ0cnVuY2F0ZXNOdW1iZXJzQWZ0ZXJEb3QiLCJOdW1iZXIiLCJtYXgiLCJmcm9tIiwidG8iLCJ3cml0ZXNEYXRhVG9Nb2RlbCIsImRhdGEiLCJ0YXJnZXQiLCJpc0xhc3RaZXJvIiwiaXNJbnRlZ2VyIiwidG9GaXhlZCIsInNsaWNlIiwiYXJlTGFzdFR3b1plcm8iLCJjYWxjdWxhdGVWYWx1ZXNCeVBvc2l0aW9uIiwiY2FsY3VsYXRlVmFsdWVzIiwiY2FsY3VsYXRpb25EYXRhIiwicG9zaXRpb24iLCJzbGlkZXJXaWR0aCIsImNhbGN1bGF0ZURhdGFGb3JWYWx1ZVNjYWxlIiwiY2FsY3VsYXRlUG9zaXRpb24iLCJyYXRpbyIsImFzc2lnblZhbHVlRnJvbVNjYWxlIiwiaXNEb3VibGUiLCJmcm9tRGlmZmVyZW5jZSIsIk1hdGgiLCJhYnMiLCJ0b0RpZmZlcmVuY2UiLCJpc0Zyb21EaWZmZXJlbmNlTGVzcyIsInJlc3VsdCIsInRvdGFsVmFsdWVzIiwibWluVmFsdWUiLCJjYWxjdWxhdGVTdGVwV2lkdGgiLCJoYW5kbGVXaWR0aCIsInN0ZXAiLCJtaW5TdGVwIiwic3RlcFdpZHRoIiwiU3RyaW5nIiwiY2hlY2tJc1ZhbHVlU21hbGxlclRoYW5NaW4iLCJjaGVja0lzVmFsdWVCaWdnZXJUaGFuTWF4IiwiY2hlY2tJc0Zyb21WYWx1ZUJpZ2dlclRoYW5UbyIsIm5hbWUiLCJjaGVja0lzVG9WYWx1ZVNtYWxsZXJUaGFuRnJvbSIsImNvcnJlY3RGcm9tQmlnZ2VyVGhlblRvIiwiYWRqdXN0T2Zmc2V0Iiwicm91bmQiLCJuZXdIYW5kbGVWYWx1ZSIsImNvcnJlY3RzRG91YmxlVmFsdWVzIiwicHJlcGFyZUlucHV0VmFsdWVGb3JSZWNvcmQiLCJjb3JyZWN0c1ZhbHVlQmlnZ2VyVGhhbk1heCIsImNvcnJlY3RzVmFsdWVMZXNzVGhhbk1pbiIsImNoYW5nZVNsaWRlclZhbHVlc1JhbmdlIiwiTW9kZWxfMSIsInJlcXVpcmUiLCJkZXNjcmliZSIsIm1vZGVsIiwiYmVmb3JlRWFjaCIsIml0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsInRvRXF1YWwiLCJwb3NpdGlvbnMiLCJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsImtleSIsImRlc2MiLCJjIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImQiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJpIiwiUHJlc2VudGVyIiwiYXV0b2JpbmRfZGVjb3JhdG9yXzEiLCJ2aWV3TGluayIsIm1vZGVsTGluayIsInZpZXciLCJiaW5kUHJveHlUb0hhbmRsZXNNb3ZlbWVudCIsIlByb3h5IiwibW92ZW1lbnQiLCJzZXQiLCJwcm9wIiwidmFsIiwiaXNFeHRyYVJhbmdlIiwic2xpZGVyIiwib2Zmc2V0V2lkdGgiLCJoYW5kbGVzIiwiZnJvbUhhbmRsZSIsImlzSW5wdXRDaGFuZ2VzIiwic2lkZU1lbnUiLCJkaXN0cmlidXRlc0RhdGFGb3JTY2FsZSIsInZhbHVlc1NjYWxlIiwicmVmcmVzaFZhbHVlU2NhbGUiLCJjZW50ZXJzVmFsdWVzIiwicHJlcGFyZURhdGFGb3JBZGp1c3RQb3NpdGlvbiIsInByZXBhcmVOZXdIYW5kbGVzUG9zaXRpb25zRGF0YSIsImhhbmRsZURhdGEiLCJhZGp1c3RQb3NpdGlvbnMiLCJkaXN0cmlidXRlRGF0YUZvclN0YXJ0UG9zaXRpb24iLCJkYXRhRm9yRnJvbSIsImRhdGFGb3JUbyIsInN0YXJ0RnJvbSIsInN0YXJ0VG8iLCJpbnRlcnZhbCIsImFkanVzdFBvc2l0aW9uUmVsYXRpdmVWYWx1ZSIsInJlZnJlc2hBbGxDb21wb25lbnRzIiwiaXNUb0ZpeGVkIiwiYmFzaWNTZXR0aW5ncyIsImludGVnZXIiLCJkaXN0cmlidXRlU3RlcFdpZHRoIiwid3JpdGVzTmV3U3RlcFdpZHRoIiwic2lkZU1lbnVFbGVtZW50cyIsInN0ZXBJbnB1dCIsImRpc3RyaWJ1dGVOZXdWYWx1ZXNGb3JBcHBseSIsImRvdWJsZSIsInRvSGFuZGxlIiwibmV3UG9zaXRpb24iLCJkaXN0cmlidXRlVmFsdWVGcm9tU2NhbGVUb0FwcGx5IiwiZGlzdHJpYnV0ZVNsaWRlclZhbHVlc1JhbmdlVG9BcHBseSIsImRhdGFSZXF1ZXN0VG9Nb2RlbCIsIm5lZWREYXRhRm9yU3RhcnRQb3NpdGlvbiIsIm5lZWREYXRhRm9yU2NhbGUiLCJuZWVkU3RlcFdpZHRoIiwiaGFuZGxlc1JlcXVlc3RzRnJvbVZpZXciLCJwcm9wZXJ0eSIsImJpbmRQcm94eVRvVmlld1JlcXVlc3RzIiwidGhhdCIsImJpbmRQcm94eVRvTW9kZWwiLCJpbml0aWFsaXplIiwiZGVmYXVsdCIsIlByZXNlbnRlcl8xIiwiVmlld18xIiwicHJlc2VudGVyIiwidmlld1NldHRpbmdzIiwiaGFuZGxlc1ZhbHVlcyIsInZhbHVlU2NhbGUiLCJ2ZXJ0aWNhbCIsInZpZXdUYXJnZXQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJtb2RlbFNldHRpbmdzIiwiX2EiLCJWaWV3IiwicXVlcnlTZWxlY3RvciIsImFwcGVuZCIsInN0eWxlIiwid2lkdGgiLCJwcmVwYXJlU2xpZGVyRm9yVXNlIiwiYmluZEV2ZW50TGlzdGVuZXJzIiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50IiwiaW5uZXJUZXh0IiwibWF4VmFsdWUiLCJuZWVkQXBwbHlOZXdWYWx1ZSIsIm5lZWRBcHBseVZhbHVlRnJvbVNjYWxlIiwiSGFuZGxlcyIsInN0YXRpY0VsZW1lbnRzRGVzY3JpcHRpb24iLCJjc3NDbGFzc2VzIiwiZnJvbVZhbHVlIiwidG9WYWx1ZSIsInByZXBhcmVDbGFzc0VsZW1lbnRzIiwiZWxlbWVudCIsImZvckVhY2giLCJjc3NDbGFzcyIsImNsYXNzTGlzdCIsImFkZCIsImlzQXNzaWduVmFsdWVzTmVlZCIsInNldEF0dHJpYnV0ZSIsImNvcnJlY3RzSGFuZGxlc092ZXJsYXBzIiwiaXNUb05vdEluRXh0cmEiLCJsZWZ0IiwicmVmcmVzaFZhbHVlcyIsImhhbmRsZXNEYXRhIiwiaXNSb3VuZFVwTmVlZCIsImRpZmZlcmVuY2VCZXR3ZWVuUG9zaXRpb25zIiwiaXNFeHRyYVBvc2l0aW9uIiwiaXNIYW5kbGVzT3ZlcmxhcHMiLCJkYXRhVG9SZWZyZXNoIiwiaGFuZGxlTGluayIsImNhbGN1bGF0ZU5ld1Bvc2l0aW9uIiwiY2hlY2tJc05lZWRUb01ha2VWZXJ0aWNhbCIsImlzVmVydGljYWwiLCJjb250YWlucyIsImNoZWNrSXNOZWVkVG9NYWtlSG9yaXpvbnRhbGx5IiwiY2hlY2tJc1RvTmVlZEhpZGUiLCJkaXNwbGF5IiwiY2hlY2tJc1RvTmVlZFNob3ciLCJjaGFuZ2VQbGFuZSIsImNoYW5nZVZlcnRpY2FsQ2xhc3MiLCJ0b2dnbGUiLCJjb250cm9sSGFuZGxlc1Bvc2l0aW9uIiwiaXNXcm9uZ0Zyb21Qb3NpdGlvbiIsImV4dHJlbWVGcm9tUG9zaXRpb24iLCJjb250cm9sSGFuZGxlc0Rpc3BsYXkiLCJoaWRlSGFuZGxlVmFsdWVzIiwiaXNIYW5kbGVWYWx1ZXMiLCJzZWxlY3RzSGFuZGxlVG9Nb3ZlIiwidGFyZ2V0UG9zaXRpb24iLCJhY2NlcHROZXdQb3NpdGlvbiIsIkhhbmRsZXNfMSIsInRvSGF2ZUNsYXNzIiwibm90IiwicG9zaXRpb25JbWl0YXRvciIsImJvZHkiLCJ0b0JlRmFsc2UiLCJNb3ZlbWVudCIsImRhdGFGb3JNb3ZlbWVudCIsImRpc3RhbmNlVG9DdXJzb3IiLCJjaGVja0lzVG9CaWdnZXJUaGFuUmlnaHRFZGdlIiwicmlnaHRTbGlkZXJFZGdlIiwiY2hlY2tJc0Zyb21CaWdnZXJUaGFuUmlnaHRFZGdlIiwiY2hlY2tJc0RvdWJsZSIsImNoZWNrSXNGcm9tQmlnZ2VyVGhhblRvIiwiY2hlY2tJc1RvU21hbGxlclRoYW5Gcm9tIiwiY2hlY2tJc1N0ZXBTZXRDb3JyZWN0bHkiLCJjaGVja0lzU3RlcFdpZHRoUGFzc2VkIiwiY3VycmVudFBvc2l0aW9uIiwiY29ycmVjdFN0ZXBQYXNzZWQiLCJzdGVwUmF0ZSIsImlzTm90SW5TdGVwUmFuZ2UiLCJpc1JhbmdlV2hlcmVQYXNzZWQiLCJmbG9vciIsImNlaWwiLCJjb3JyZWN0c0ltcG9zc2libGVQb3NpdGlvbiIsImNvcnJlY3REb3VibGVQb3NpdGlvbnMiLCJjb3JyZWN0c0ludGVydmFsUG9zaXRpb24iLCJyaWdodCIsImFwcGx5TmV3UG9zaXRpb24iLCJjaGVja0lzRWRnZVBvc2l0aW9uIiwiY29udHJvbFN0ZXBNb3ZlbWVudCIsImRpZmZlcmVuY2UiLCJuZXdUYXJnZXRQb3NpdGlvbiIsInRydW5jIiwiaGFuZGxlRG9jdW1lbnRNb3VzZU1vdmUiLCJldmVudCIsIngiLCJjbGllbnRYIiwieSIsImNsaWVudFkiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0b3AiLCJoYW5kbGVMaXN0ZW5lciIsInNldHRpbmciLCJldmVudEluZm8iLCJ0ZXN0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaGFuZGxlRG9jdW1lbnRNb3VzZVVwIiwiYWRkRXZlbnRMaXN0ZW5lciIsIk1vdmVtZW50XzEiLCJTZWxlY3RlZEludGVydmFsXzEiLCJTbGlkZXJfMSIsIlNsaWRlciIsIlNlbGVjdGVkSW50ZXJ2YWwiLCJhZnRlckVhY2giLCJyZW1vdmUiLCJjaGVja0lzSW50ZXJ2YWxOZWVkSGlkZSIsImNoZWNrSXNJbnRlcnZhbE5lZWRTaG93IiwiaGlkZVNlbGVjdGVkSW50ZXJ2YWwiLCJTaWRlTWVudSIsImluaXRpYWxpemVTaWRlTWVudSIsImNyZWF0ZU91dHB1dHMiLCJjdXJyZW50VmFsdWVzV3JhcHBlciIsImN1cnJlbnRWYWx1ZXNPYmplY3RpdmUiLCJ0ZXh0IiwiZnJvbU91dHB1dCIsInRvT3V0cHV0IiwiYXR0ciIsImNyZWF0ZVdyYXBwZXJzIiwidG9XcmFwcGVyIiwidG9Ub2dnbGVXcmFwcGVyIiwiaW5wdXRXcmFwcGVyIiwiZnJvbUlucHV0V3JhcHBlciIsInN0ZXBJbnB1dFdyYXBwZXIiLCJtaW5JbnB1dFdyYXBwZXIiLCJtYXhJbnB1dFdyYXBwZXIiLCJ0b0lucHV0V3JhcHBlciIsImhhbmRsZVZhbHVlc1dyYXBwZXIiLCJ2YWx1ZVNjYWxlV3JhcHBlciIsInBsYW5lV3JhcHBlciIsImludGVnZXJXcmFwcGVyIiwibGFiZWxFbGVtZW50IiwiY2xvbmVOb2RlIiwiaGFuZGxlVmFsdWVzVG9nZ2xlV3JhcHBlciIsInZhbHVlU2NhbGVUb2dnbGVXcmFwcGVyIiwicGxhbmVUb2dnbGVXcmFwcGVyIiwiaW50ZWdlclRvZ2dsZVdyYXBwZXIiLCJjcmVhdGVJbnB1dHMiLCJpbnB1dE9iamVjdGl2ZSIsImZyb21JbnB1dCIsInRvSW5wdXQiLCJtaW5pbXVtSW5wdXQiLCJtYXhpbXVtSW5wdXQiLCJjcmVhdGVUb2dnbGVzIiwidG9Ub2dnbGVPYmplY3RpdmUiLCJ0b1RvZ2dsZSIsImlucHV0RWxlbWVudCIsImhhbmRsZVZhbHVlc1RvZ2dsZSIsInZhbHVlU2NhbGVUb2dnbGUiLCJpbnRlZ2VyVG9nZ2xlIiwidG9Ub2dnbGVCb3JkZXIiLCJoYW5kbGVWYWx1ZXNUb2dnbGVCb3JkZXIiLCJ2YWx1ZVNjYWxlVG9nZ2xlQm9yZGVyIiwiaW50ZWdlclRvZ2dsZUJvcmRlciIsInBsYW5lVG9nZ2xlIiwicGxhbmVUb2dnbGVCb3JkZXIiLCJjcmVhdGVPYmplY3RpdmVzIiwiaGFuZGxlVmFsdWVzT2JqZWN0aXZlIiwidmFsdWVTY2FsZU9iamVjdGl2ZSIsInBsYW5lT2JqZWN0aXZlIiwiaW50ZWdlck9iamVjdGl2ZSIsInNpZGVNZW51Q29udGFpbmVyIiwiZWxlbWVudFBhcmFtcyIsInRleHRDb250ZW50Iiwid3JhcHNPdXRwdXRzIiwid3JhcHNFbGVtZW50c0luV3JhcHBlcnMiLCJ3cmFwc1RvVG9nZ2xlIiwid3JhcHNIYW5kbGVzVmFsdWVzVG9nZ2xlIiwid3JhcHNWYWx1ZXNTY2FsZVRvZ2dsZSIsIndyYXBzUGxhbmVUb2dnbGUiLCJ3cmFwc0ludGVnZXJUb2dnbGUiLCJjb2xsZWN0U2lkZU1lbnUiLCJyZWZyZXNoRGF0YSIsImJyaW5nc1ZhbHVlc1RvRm9ybSIsImhpZGVUb1ZhbHVlcyIsImlzSGlkZVRvVmFsdWVzIiwiY2hhbmdlRGlzcGxheSIsImlucHV0Iiwib3V0cHV0IiwiU2lkZU1lbnVfMSIsInNsaWRlcldyYXBwZXIiLCJjb2xsZWN0U2xpZGVyIiwiaXNTdGVwIiwicmVxdWVzdHMiLCJyZWZyZXNoQWZ0ZXJSZXNpemUiLCJoZWlnaHQiLCJWYWx1ZXNTY2FsZV8xIiwibmVlZENoYW5nZVNsaWRlclZhbHVlc1JhbmdlIiwiVmFsdWVzU2NhbGUiLCJjbGFzc01vZGlmaWVyIiwiY2FsY3VsYXRlRXh0cmVtZVZhbHVlUG9zaXRpb24iLCJjYWxjdWxhdGVWYWx1ZVBvc2l0aW9uIiwiY29lZmZpY2llbnQiLCJjaGFuZ2VDbGFzc2VzIiwiaXNOZWVkVG9DaGFuZ2VDbGFzc2VzIiwiaGlkZVZhbHVlU2NhbGUiLCJpc1ZhbHVlU2NhbGUiLCJhZGRTbGlkZXJUb0RPTSIsImFkZFNpZGVNZW51VG9ET00iLCJjaGVja0lzU3RlcFJlcXVpcmVkIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidXBkYXRlVmlldyIsInR1cm5Pbk1lbnVUb2dnbGVzIiwidGFyZ2V0cyIsImNoZWNrZWQiLCJpc1RhcmdldE5vdFJhbmdlIiwiaGFuZGxlc1JlZnJlc2hSZXN1bHQiLCJpc05lZWRTaWRlTWVudVVwZGF0ZSIsInNjYWxlVmFsdWUiLCJoYW5kbGVTY2FsZVZhbHVlQ2xpY2siLCJoYW5kbGVUb1RvZ2dsZUNoYW5nZSIsImhhbmRsZVBsYW5lVG9nZ2xlQ2hhbmdlIiwiaGFuZGxlVmFsdWVTY2FsZVRvZ2dsZUNoYW5nZSIsImhhbmRsZUhhbmRsZVZhbHVlc0NoYW5nZSIsImhhbmRsZUludGVnZXJUb2dnbGVDaGFuZ2UiLCJ2YWx1ZUlucHV0IiwiaGFuZGxlVmFsdWVJbnB1dENoYW5nZSIsInJhbmdlSW5wdXQiLCJoYW5kbGVSYW5nZUlucHV0Q2hhbmdlIiwiaGFuZGxlU3RlcElucHV0Q2hhbmdlIiwiaGFuZGxlIiwiaGFuZGxlSGFuZGxlQ2xpY2siLCJoYW5kbGVTbGlkZXJDbGljayIsIndpbmRvdyIsImhhbmRsZVdpbmRvd1Jlc2l6ZSIsImlzTm90U2xpZGVyQm9keSIsImhvcml6b250YWxQb3NpdGlvbiIsInZlcnRpY2FsUG9zaXRpb24iLCJ0YXJnZXRIYW5kbGUiLCJjb3JyZWN0ZWRWYWx1ZSIsInRvQ29udGFpbkVsZW1lbnQiLCJ0ZXN0Q29udGFpbmVyIiwidG9CZUNoZWNrZWQiLCJ0b0JlVHJ1ZSIsInRvQmVGYWxzeSIsIm1vZGVsVGVzdCIsImNvbnRleHQiLCJwcmVzZW50ZXJUZXN0cyIsInZpZXdUZXN0cyIsImtleXMiLCJtb2RlbENvbXBvbmVudHMiLCJwcmVzZW50ZXJDb21wb25lbnRzIiwidmlld0NvbXBvbmVudHMiXSwic291cmNlUm9vdCI6IiJ9