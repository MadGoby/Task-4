/*! For license information please see slider.js.LICENSE.txt */
(self.webpackChunktest=self.webpackChunktest||[]).push([[309],{572:(e,A,n)=>{"use strict";function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function l(e,A,n){var l=n.value;if("function"!=typeof l)throw new TypeError("@boundMethod decorator can only be applied to methods not: ".concat(t(l)));var i=!1;return{configurable:!0,get:function(){if(i||this===e.prototype||this.hasOwnProperty(A)||"function"!=typeof l)return l;var n=l.bind(this);return i=!0,Object.defineProperty(this,A,{configurable:!0,get:function(){return n},set:function(e){l=e,delete this[A]}}),i=!1,n},set:function(e){l=e}}}function i(e){var A;return"undefined"!=typeof Reflect&&"function"==typeof Reflect.ownKeys?A=Reflect.ownKeys(e.prototype):(A=Object.getOwnPropertyNames(e.prototype),"function"==typeof Object.getOwnPropertySymbols&&(A=A.concat(Object.getOwnPropertySymbols(e.prototype)))),A.forEach((function(A){if("constructor"!==A){var n=Object.getOwnPropertyDescriptor(e.prototype,A);"function"==typeof n.value&&Object.defineProperty(e.prototype,A,l(e,A,n))}})),e}function s(){return 1===arguments.length?i.apply(void 0,arguments):l.apply(void 0,arguments)}n.r(A),n.d(A,{boundMethod:()=>l,boundClass:()=>i,default:()=>s})},367:(e,A)=>{"use strict";var n,t,l,i,s,o,r=(n="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Model\\Model.ts",t="49ea8768fa8f80f796273189f7372db2284f5795",l=new(0,function(){}.constructor)("return this")(),s={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Model\\Model.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:0},end:{line:3,column:23}},2:{start:{line:6,column:8},end:{line:11,column:10}},3:{start:{line:14,column:8},end:{line:14,column:46}},4:{start:{line:17,column:27},end:{line:17,column:94}},5:{start:{line:18,column:31},end:{line:18,column:71}},6:{start:{line:19,column:26},end:{line:19,column:67}},7:{start:{line:20,column:8},end:{line:27,column:9}},8:{start:{line:22,column:16},end:{line:22,column:40}},9:{start:{line:24,column:16},end:{line:24,column:40}},10:{start:{line:26,column:16},end:{line:26,column:40}},11:{start:{line:30,column:32},end:{line:33,column:9}},12:{start:{line:31,column:27},end:{line:31,column:181}},13:{start:{line:32,column:12},end:{line:32,column:57}},14:{start:{line:34,column:8},end:{line:34,column:94}},15:{start:{line:37,column:34},end:{line:37,column:134}},16:{start:{line:37,column:46},end:{line:37,column:133}},17:{start:{line:38,column:8},end:{line:45,column:10}},18:{start:{line:48,column:31},end:{line:48,column:81}},19:{start:{line:49,column:29},end:{line:49,column:77}},20:{start:{line:50,column:37},end:{line:50,column:79}},21:{start:{line:52,column:8},end:{line:57,column:9}},22:{start:{line:53,column:12},end:{line:53,column:47}},23:{start:{line:56,column:12},end:{line:56,column:45}},24:{start:{line:58,column:8},end:{line:58,column:39}},25:{start:{line:59,column:8},end:{line:64,column:10}},26:{start:{line:67,column:45},end:{line:67,column:53}},27:{start:{line:68,column:23},end:{line:68,column:31}},28:{start:{line:69,column:8},end:{line:70,column:24}},29:{start:{line:70,column:12},end:{line:70,column:24}},30:{start:{line:71,column:26},end:{line:71,column:124}},31:{start:{line:72,column:8},end:{line:72,column:69}},32:{start:{line:75,column:8},end:{line:75,column:55}},33:{start:{line:78,column:8},end:{line:78,column:55}},34:{start:{line:81,column:8},end:{line:81,column:108}},35:{start:{line:84,column:8},end:{line:84,column:108}},36:{start:{line:88,column:8},end:{line:93,column:9}},37:{start:{line:89,column:12},end:{line:89,column:41}},38:{start:{line:92,column:12},end:{line:92,column:91}},39:{start:{line:94,column:29},end:{line:94,column:31}},40:{start:{line:95,column:8},end:{line:100,column:9}},41:{start:{line:96,column:12},end:{line:96,column:107}},42:{start:{line:98,column:13},end:{line:100,column:9}},43:{start:{line:99,column:12},end:{line:99,column:109}},44:{start:{line:101,column:8},end:{line:101,column:30}},45:{start:{line:104,column:21},end:{line:108,column:10}},46:{start:{line:109,column:24},end:{line:109,column:32}},47:{start:{line:110,column:8},end:{line:112,column:9}},48:{start:{line:111,column:12},end:{line:111,column:71}},49:{start:{line:113,column:8},end:{line:115,column:9}},50:{start:{line:114,column:12},end:{line:114,column:73}},51:{start:{line:116,column:8},end:{line:116,column:21}},52:{start:{line:119,column:8},end:{line:120,column:45}},53:{start:{line:120,column:12},end:{line:120,column:45}},54:{start:{line:121,column:8},end:{line:122,column:45}},55:{start:{line:122,column:12},end:{line:122,column:45}},56:{start:{line:123,column:8},end:{line:124,column:65}},57:{start:{line:124,column:12},end:{line:124,column:65}},58:{start:{line:125,column:8},end:{line:125,column:81}},59:{start:{line:126,column:8},end:{line:131,column:10}},60:{start:{line:134,column:8},end:{line:135,column:56}},61:{start:{line:135,column:12},end:{line:135,column:56}},62:{start:{line:136,column:8},end:{line:136,column:21}},63:{start:{line:139,column:8},end:{line:140,column:56}},64:{start:{line:140,column:12},end:{line:140,column:56}},65:{start:{line:141,column:8},end:{line:141,column:21}},66:{start:{line:144,column:25},end:{line:144,column:33}},67:{start:{line:145,column:24},end:{line:145,column:32}},68:{start:{line:146,column:8},end:{line:157,column:9}},69:{start:{line:148,column:16},end:{line:148,column:103}},70:{start:{line:149,column:16},end:{line:149,column:40}},71:{start:{line:150,column:16},end:{line:150,column:22}},72:{start:{line:152,column:16},end:{line:152,column:101}},73:{start:{line:153,column:16},end:{line:153,column:40}},74:{start:{line:154,column:16},end:{line:154,column:22}},75:{start:{line:156,column:16},end:{line:156,column:22}},76:{start:{line:158,column:8},end:{line:159,column:47}},77:{start:{line:159,column:12},end:{line:159,column:47}},78:{start:{line:160,column:8},end:{line:161,column:45}},79:{start:{line:161,column:12},end:{line:161,column:45}},80:{start:{line:164,column:0},end:{line:164,column:22}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:26},end:{line:12,column:5}},line:5},1:{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:28},end:{line:15,column:5}},line:13},2:{name:"(anonymous_2)",decl:{start:{line:16,column:4},end:{line:16,column:5}},loc:{start:{line:16,column:43},end:{line:28,column:5}},line:16},3:{name:"(anonymous_3)",decl:{start:{line:29,column:4},end:{line:29,column:5}},loc:{start:{line:29,column:40},end:{line:35,column:5}},line:29},4:{name:"(anonymous_4)",decl:{start:{line:30,column:32},end:{line:30,column:33}},loc:{start:{line:30,column:53},end:{line:33,column:9}},line:30},5:{name:"(anonymous_5)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:33},end:{line:46,column:5}},line:36},6:{name:"(anonymous_6)",decl:{start:{line:37,column:34},end:{line:37,column:35}},loc:{start:{line:37,column:46},end:{line:37,column:133}},line:37},7:{name:"(anonymous_7)",decl:{start:{line:47,column:4},end:{line:47,column:5}},loc:{start:{line:47,column:42},end:{line:65,column:5}},line:47},8:{name:"(anonymous_8)",decl:{start:{line:66,column:4},end:{line:66,column:5}},loc:{start:{line:66,column:33},end:{line:73,column:5}},line:66},9:{name:"(anonymous_9)",decl:{start:{line:74,column:4},end:{line:74,column:5}},loc:{start:{line:74,column:38},end:{line:76,column:5}},line:74},10:{name:"(anonymous_10)",decl:{start:{line:77,column:4},end:{line:77,column:5}},loc:{start:{line:77,column:37},end:{line:79,column:5}},line:77},11:{name:"(anonymous_11)",decl:{start:{line:80,column:4},end:{line:80,column:5}},loc:{start:{line:80,column:65},end:{line:82,column:5}},line:80},12:{name:"(anonymous_12)",decl:{start:{line:83,column:4},end:{line:83,column:5}},loc:{start:{line:83,column:66},end:{line:85,column:5}},line:83},13:{name:"(anonymous_13)",decl:{start:{line:86,column:4},end:{line:86,column:5}},loc:{start:{line:86,column:52},end:{line:102,column:5}},line:86},14:{name:"(anonymous_14)",decl:{start:{line:103,column:4},end:{line:103,column:5}},loc:{start:{line:103,column:35},end:{line:117,column:5}},line:103},15:{name:"(anonymous_15)",decl:{start:{line:118,column:4},end:{line:118,column:5}},loc:{start:{line:118,column:41},end:{line:132,column:5}},line:118},16:{name:"(anonymous_16)",decl:{start:{line:133,column:4},end:{line:133,column:5}},loc:{start:{line:133,column:38},end:{line:137,column:5}},line:133},17:{name:"(anonymous_17)",decl:{start:{line:138,column:4},end:{line:138,column:5}},loc:{start:{line:138,column:36},end:{line:142,column:5}},line:138},18:{name:"(anonymous_18)",decl:{start:{line:143,column:4},end:{line:143,column:5}},loc:{start:{line:143,column:38},end:{line:162,column:5}},line:143}},branchMap:{0:{loc:{start:{line:17,column:27},end:{line:17,column:94}},type:"binary-expr",locations:[{start:{line:17,column:27},end:{line:17,column:51}},{start:{line:17,column:55},end:{line:17,column:94}}],line:17},1:{loc:{start:{line:19,column:26},end:{line:19,column:67}},type:"binary-expr",locations:[{start:{line:19,column:26},end:{line:19,column:49}},{start:{line:19,column:53},end:{line:19,column:67}}],line:19},2:{loc:{start:{line:20,column:8},end:{line:27,column:9}},type:"switch",locations:[{start:{line:21,column:12},end:{line:22,column:40}},{start:{line:23,column:12},end:{line:24,column:40}},{start:{line:25,column:12},end:{line:26,column:40}}],line:20},3:{loc:{start:{line:50,column:37},end:{line:50,column:79}},type:"binary-expr",locations:[{start:{line:50,column:37},end:{line:50,column:66}},{start:{line:50,column:70},end:{line:50,column:79}}],line:50},4:{loc:{start:{line:52,column:8},end:{line:57,column:9}},type:"if",locations:[{start:{line:52,column:8},end:{line:57,column:9}},{start:{line:52,column:8},end:{line:57,column:9}}],line:52},5:{loc:{start:{line:69,column:8},end:{line:70,column:24}},type:"if",locations:[{start:{line:69,column:8},end:{line:70,column:24}},{start:{line:69,column:8},end:{line:70,column:24}}],line:69},6:{loc:{start:{line:81,column:15},end:{line:81,column:107}},type:"binary-expr",locations:[{start:{line:81,column:16},end:{line:81,column:31}},{start:{line:81,column:37},end:{line:81,column:106}}],line:81},7:{loc:{start:{line:84,column:15},end:{line:84,column:107}},type:"binary-expr",locations:[{start:{line:84,column:16},end:{line:84,column:29}},{start:{line:84,column:35},end:{line:84,column:106}}],line:84},8:{loc:{start:{line:88,column:8},end:{line:93,column:9}},type:"if",locations:[{start:{line:88,column:8},end:{line:93,column:9}},{start:{line:88,column:8},end:{line:93,column:9}}],line:88},9:{loc:{start:{line:95,column:8},end:{line:100,column:9}},type:"if",locations:[{start:{line:95,column:8},end:{line:100,column:9}},{start:{line:95,column:8},end:{line:100,column:9}}],line:95},10:{loc:{start:{line:98,column:13},end:{line:100,column:9}},type:"if",locations:[{start:{line:98,column:13},end:{line:100,column:9}},{start:{line:98,column:13},end:{line:100,column:9}}],line:98},11:{loc:{start:{line:110,column:8},end:{line:112,column:9}},type:"if",locations:[{start:{line:110,column:8},end:{line:112,column:9}},{start:{line:110,column:8},end:{line:112,column:9}}],line:110},12:{loc:{start:{line:113,column:8},end:{line:115,column:9}},type:"if",locations:[{start:{line:113,column:8},end:{line:115,column:9}},{start:{line:113,column:8},end:{line:115,column:9}}],line:113},13:{loc:{start:{line:119,column:8},end:{line:120,column:45}},type:"if",locations:[{start:{line:119,column:8},end:{line:120,column:45}},{start:{line:119,column:8},end:{line:120,column:45}}],line:119},14:{loc:{start:{line:121,column:8},end:{line:122,column:45}},type:"if",locations:[{start:{line:121,column:8},end:{line:122,column:45}},{start:{line:121,column:8},end:{line:122,column:45}}],line:121},15:{loc:{start:{line:123,column:8},end:{line:124,column:65}},type:"if",locations:[{start:{line:123,column:8},end:{line:124,column:65}},{start:{line:123,column:8},end:{line:124,column:65}}],line:123},16:{loc:{start:{line:134,column:8},end:{line:135,column:56}},type:"if",locations:[{start:{line:134,column:8},end:{line:135,column:56}},{start:{line:134,column:8},end:{line:135,column:56}}],line:134},17:{loc:{start:{line:139,column:8},end:{line:140,column:56}},type:"if",locations:[{start:{line:139,column:8},end:{line:140,column:56}},{start:{line:139,column:8},end:{line:140,column:56}}],line:139},18:{loc:{start:{line:146,column:8},end:{line:157,column:9}},type:"switch",locations:[{start:{line:147,column:12},end:{line:150,column:22}},{start:{line:151,column:12},end:{line:154,column:22}},{start:{line:155,column:12},end:{line:156,column:22}}],line:146},19:{loc:{start:{line:158,column:8},end:{line:159,column:47}},type:"if",locations:[{start:{line:158,column:8},end:{line:159,column:47}},{start:{line:158,column:8},end:{line:159,column:47}}],line:158},20:{loc:{start:{line:160,column:8},end:{line:161,column:45}},type:"if",locations:[{start:{line:160,column:8},end:{line:161,column:45}},{start:{line:160,column:8},end:{line:161,column:45}}],line:160}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0},b:{0:[0,0],1:[0,0],2:[0,0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0],16:[0,0],17:[0,0],18:[0,0,0],19:[0,0],20:[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Model\\Model.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Model\\Model.ts"],names:[],mappings:"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",sourcesContent:["import { DataForAdjustPosition, DataForAdjustPositionBasic } from '../View/Handles/types';\r\nimport {\r\n  BasicModelSettings,\r\n  CalculationData,\r\n  DataForPrepareValue,\r\n  DataForRefreshingModel,\r\n  DataForValueScale,\r\n  StepCalculateData,\r\n  StepInfoFromModel,\r\n  ValuesRangeData,\r\n} from './types';\r\n\r\nclass Model {\r\n  public values: BasicModelSettings;\r\n\r\n  constructor(settings: BasicModelSettings) {\r\n    this.values = {\r\n      min: Model.truncatesNumbersAfterDot(Number(settings.min)),\r\n      max: Model.truncatesNumbersAfterDot(Number(settings.max)),\r\n      from: Model.truncatesNumbersAfterDot(Number(settings.from)),\r\n      to: Model.truncatesNumbersAfterDot(Number(settings.to)),\r\n    };\r\n  }\r\n\r\n  private writesDataToModel(data: DataForRefreshingModel): void {\r\n    this.values[data.target] = data.value;\r\n  }\r\n\r\n  public static truncatesNumbersAfterDot(value: number): string {\r\n    const isLastZero: boolean = !Number.isInteger(value) && `${value.toFixed(2)}`.slice(-1) === '0';\r\n    const areLastTwoZero: boolean = `${value.toFixed(2)}`.slice(-2) === '00';\r\n    const isInteger: boolean = Number.isInteger(value) || areLastTwoZero;\r\n\r\n    switch (true) {\r\n      case isInteger:\r\n        return value.toFixed(0);\r\n      case isLastZero:\r\n        return value.toFixed(1);\r\n      default:\r\n        return value.toFixed(2);\r\n    }\r\n  }\r\n\r\n  public calculateValuesByPosition(settings: CalculationData): void {\r\n    const calculateValues = (calculationData: CalculationData): string => {\r\n      const value: number = (Number(this.values.min) + (Number(calculationData.position) / (\r\n        Number(calculationData.sliderWidth) / (Number(this.values.max) - Number(this.values.min)))\r\n      ));\r\n      return Model.truncatesNumbersAfterDot(value);\r\n    };\r\n\r\n    this.writesDataToModel({ target: settings.target, value: calculateValues(settings) });\r\n  }\r\n\r\n  public calculateDataForValueScale(): DataForValueScale {\r\n    const calculatePosition = (ratio: number) => (\r\n      ((Number(this.values.max) - Number(this.values.min)) * ratio) + Number(this.values.min)\r\n    );\r\n\r\n    return {\r\n      min: Model.truncatesNumbersAfterDot(Number(this.values.min)),\r\n      max: Model.truncatesNumbersAfterDot(Number(this.values.max)),\r\n      20: Model.truncatesNumbersAfterDot(calculatePosition(0.2)),\r\n      40: Model.truncatesNumbersAfterDot(calculatePosition(0.4)),\r\n      60: Model.truncatesNumbersAfterDot(calculatePosition(0.6)),\r\n      80: Model.truncatesNumbersAfterDot(calculatePosition(0.8)),\r\n    };\r\n  }\r\n\r\n  public assignValueFromScale(value: string, isDouble: boolean): DataForAdjustPosition {\r\n    const fromDifference = Math.abs(Number(this.values.from) - Number(value));\r\n    const toDifference = Math.abs(Number(this.values.to) - Number(value));\r\n    const isFromDifferenceLess = fromDifference < toDifference || !isDouble;\r\n    let result: DataForAdjustPositionBasic;\r\n\r\n    if (isFromDifferenceLess) {\r\n      result = { target: 'from', value };\r\n    } else {\r\n      result = { target: 'to', value };\r\n    }\r\n\r\n    this.writesDataToModel(result);\r\n    return {\r\n      target: result.target,\r\n      value: result.value,\r\n      totalValues: Number(this.values.max) - Number(this.values.min),\r\n      minValue: this.values.min,\r\n    };\r\n  }\r\n\r\n  public calculateStepWidth(settings: StepCalculateData): StepInfoFromModel {\r\n    const { sliderWidth, handleWidth } = settings;\r\n    let { step } = settings;\r\n\r\n    if (step < 0.01) step = 0.01;\r\n\r\n    const stepWidth: number = (\r\n      (sliderWidth - handleWidth) / (Number(this.values.max) - Number(this.values.min))\r\n    ) * Number(step);\r\n\r\n    return { minStep: 0.01, stepWidth: String(stepWidth), step };\r\n  }\r\n\r\n  private checkIsValueSmallerThanMin(value: string): boolean {\r\n    return Number(value) < Number(this.values.min);\r\n  }\r\n\r\n  private checkIsValueBiggerThanMax(value: string): boolean {\r\n    return Number(value) > Number(this.values.max);\r\n  }\r\n\r\n  private checkIsFromValueBiggerThanTo(name: string, value: string, step: string, handleWidth: number): boolean {\r\n    return (name === 'from') && (Number(value) > Number(this.values.to) - (handleWidth / Number(step)));\r\n  }\r\n\r\n  private checkIsToValueSmallerThanFrom(name: string, value: string, step: string, handleWidth: number): boolean {\r\n    return (name === 'to') && (Number(value) < Number(this.values.from) + (handleWidth / Number(step)));\r\n  }\r\n\r\n  private correctFromBiggerThenTo(settings: DataForPrepareValue, step: StepInfoFromModel, target: string): string {\r\n    let adjustOffset: number;\r\n\r\n    if (typeof settings.step === 'number') {\r\n      adjustOffset = settings.step;\r\n    } else {\r\n      adjustOffset = Number(Math.round(settings.handleWidth * Number(step.minStep)));\r\n    }\r\n\r\n    let newHandleValue: string = '';\r\n\r\n    if (target === 'to') {\r\n      newHandleValue = String(Model.truncatesNumbersAfterDot(Number(this.values.to) - adjustOffset));\r\n    } else if (target === 'from') {\r\n      newHandleValue = String(Model.truncatesNumbersAfterDot(Number(this.values.from) + adjustOffset));\r\n    }\r\n\r\n    return newHandleValue;\r\n  }\r\n\r\n  private correctsDoubleValues(settings: DataForPrepareValue): string {\r\n    const step: StepInfoFromModel = this.calculateStepWidth({\r\n      step: 0.01,\r\n      sliderWidth: settings.sliderWidth,\r\n      handleWidth: settings.handleWidth,\r\n    });\r\n    let { value } = settings;\r\n\r\n    if (this.checkIsFromValueBiggerThanTo(settings.name, settings.value, step.stepWidth, settings.handleWidth)) {\r\n      value = this.correctFromBiggerThenTo(settings, step, 'to');\r\n    }\r\n\r\n    if (this.checkIsToValueSmallerThanFrom(settings.name, settings.value, step.stepWidth, settings.handleWidth)) {\r\n      value = this.correctFromBiggerThenTo(settings, step, 'from');\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  public prepareInputValueForRecord(settings: DataForPrepareValue): DataForAdjustPosition {\r\n    if (this.checkIsValueSmallerThanMin(settings.value)) settings.value = this.values.min;\r\n    if (this.checkIsValueBiggerThanMax(settings.value)) settings.value = this.values.max;\r\n    if (settings.isDouble) settings.value = this.correctsDoubleValues(settings);\r\n\r\n    this.writesDataToModel({ target: settings.name, value: settings.value });\r\n    return {\r\n      target: settings.name,\r\n      value: settings.value,\r\n      totalValues: Number(this.values.max) - Number(this.values.min),\r\n      minValue: this.values.min,\r\n    };\r\n  }\r\n\r\n  private correctsValueBiggerThanMax(value: string): string {\r\n    if (value >= this.values.max) value = String(Number(this.values.max) - 1);\r\n    return value;\r\n  }\r\n\r\n  private correctsValueLessThanMin(value: string): string {\r\n    if (value <= this.values.min) value = String(Number(this.values.min) + 1);\r\n    return value;\r\n  }\r\n\r\n  public changeSliderValuesRange(settings: ValuesRangeData) {\r\n    const { name } = settings;\r\n    let { value } = settings;\r\n\r\n    switch (name) {\r\n      case 'min':\r\n        value = Model.truncatesNumbersAfterDot(Number(\r\n          this.correctsValueBiggerThanMax(value),\r\n        ));\r\n        this.values.min = value;\r\n        break;\r\n      case 'max':\r\n        value = Model.truncatesNumbersAfterDot(Number(\r\n          this.correctsValueLessThanMin(value),\r\n        ));\r\n        this.values.max = value;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (Number(this.values.from) < Number(this.values.min)) this.values.from = this.values.min;\r\n    if (Number(this.values.to) > Number(this.values.max)) this.values.to = this.values.max;\r\n  }\r\n}\r\n\r\nexport { Model };\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(o=l[i="__coverage__"]||(l[i]={}))[n]&&o[n].hash===t?o[n]:(s.hash=t,o[n]=s));r.s[0]++,Object.defineProperty(A,"__esModule",{value:!0}),r.s[1]++,A.Model=void 0;class a{constructor(e){r.f[0]++,r.s[2]++,this.values={min:a.truncatesNumbersAfterDot(Number(e.min)),max:a.truncatesNumbersAfterDot(Number(e.max)),from:a.truncatesNumbersAfterDot(Number(e.from)),to:a.truncatesNumbersAfterDot(Number(e.to))}}writesDataToModel(e){r.f[1]++,r.s[3]++,this.values[e.target]=e.value}static truncatesNumbersAfterDot(e){r.f[2]++;const A=(r.s[4]++,r.b[0][0]++,!Number.isInteger(e)&&(r.b[0][1]++,"0"===`${e.toFixed(2)}`.slice(-1))),n=(r.s[5]++,"00"===`${e.toFixed(2)}`.slice(-2)),t=(r.s[6]++,r.b[1][0]++,Number.isInteger(e)||(r.b[1][1]++,n));switch(r.s[7]++,!0){case t:return r.b[2][0]++,r.s[8]++,e.toFixed(0);case A:return r.b[2][1]++,r.s[9]++,e.toFixed(1);default:return r.b[2][2]++,r.s[10]++,e.toFixed(2)}}calculateValuesByPosition(e){r.f[3]++,r.s[11]++;r.s[14]++,this.writesDataToModel({target:e.target,value:(e=>{r.f[4]++;const A=(r.s[12]++,Number(this.values.min)+Number(e.position)/(Number(e.sliderWidth)/(Number(this.values.max)-Number(this.values.min))));return r.s[13]++,a.truncatesNumbersAfterDot(A)})(e)})}calculateDataForValueScale(){r.f[5]++,r.s[15]++;const e=e=>(r.f[6]++,r.s[16]++,(Number(this.values.max)-Number(this.values.min))*e+Number(this.values.min));return r.s[17]++,{min:a.truncatesNumbersAfterDot(Number(this.values.min)),max:a.truncatesNumbersAfterDot(Number(this.values.max)),20:a.truncatesNumbersAfterDot(e(.2)),40:a.truncatesNumbersAfterDot(e(.4)),60:a.truncatesNumbersAfterDot(e(.6)),80:a.truncatesNumbersAfterDot(e(.8))}}assignValueFromScale(e,A){r.f[7]++;const n=(r.s[18]++,Math.abs(Number(this.values.from)-Number(e))),t=(r.s[19]++,Math.abs(Number(this.values.to)-Number(e))),l=(r.s[20]++,r.b[3][0]++,n<t||(r.b[3][1]++,!A));let i;return r.s[21]++,l?(r.b[4][0]++,r.s[22]++,i={target:"from",value:e}):(r.b[4][1]++,r.s[23]++,i={target:"to",value:e}),r.s[24]++,this.writesDataToModel(i),r.s[25]++,{target:i.target,value:i.value,totalValues:Number(this.values.max)-Number(this.values.min),minValue:this.values.min}}calculateStepWidth(e){r.f[8]++;const{sliderWidth:A,handleWidth:n}=(r.s[26]++,e);let{step:t}=(r.s[27]++,e);r.s[28]++,t<.01?(r.b[5][0]++,r.s[29]++,t=.01):r.b[5][1]++;const l=(r.s[30]++,(A-n)/(Number(this.values.max)-Number(this.values.min))*Number(t));return r.s[31]++,{minStep:.01,stepWidth:String(l),step:t}}checkIsValueSmallerThanMin(e){return r.f[9]++,r.s[32]++,Number(e)<Number(this.values.min)}checkIsValueBiggerThanMax(e){return r.f[10]++,r.s[33]++,Number(e)>Number(this.values.max)}checkIsFromValueBiggerThanTo(e,A,n,t){return r.f[11]++,r.s[34]++,r.b[6][0]++,"from"===e&&(r.b[6][1]++,Number(A)>Number(this.values.to)-t/Number(n))}checkIsToValueSmallerThanFrom(e,A,n,t){return r.f[12]++,r.s[35]++,r.b[7][0]++,"to"===e&&(r.b[7][1]++,Number(A)<Number(this.values.from)+t/Number(n))}correctFromBiggerThenTo(e,A,n){let t;r.f[13]++,r.s[36]++,"number"==typeof e.step?(r.b[8][0]++,r.s[37]++,t=e.step):(r.b[8][1]++,r.s[38]++,t=Number(Math.round(e.handleWidth*Number(A.minStep))));let l=(r.s[39]++,"");return r.s[40]++,"to"===n?(r.b[9][0]++,r.s[41]++,l=String(a.truncatesNumbersAfterDot(Number(this.values.to)-t))):(r.b[9][1]++,r.s[42]++,"from"===n?(r.b[10][0]++,r.s[43]++,l=String(a.truncatesNumbersAfterDot(Number(this.values.from)+t))):r.b[10][1]++),r.s[44]++,l}correctsDoubleValues(e){r.f[14]++;const A=(r.s[45]++,this.calculateStepWidth({step:.01,sliderWidth:e.sliderWidth,handleWidth:e.handleWidth}));let{value:n}=(r.s[46]++,e);return r.s[47]++,this.checkIsFromValueBiggerThanTo(e.name,e.value,A.stepWidth,e.handleWidth)?(r.b[11][0]++,r.s[48]++,n=this.correctFromBiggerThenTo(e,A,"to")):r.b[11][1]++,r.s[49]++,this.checkIsToValueSmallerThanFrom(e.name,e.value,A.stepWidth,e.handleWidth)?(r.b[12][0]++,r.s[50]++,n=this.correctFromBiggerThenTo(e,A,"from")):r.b[12][1]++,r.s[51]++,n}prepareInputValueForRecord(e){return r.f[15]++,r.s[52]++,this.checkIsValueSmallerThanMin(e.value)?(r.b[13][0]++,r.s[53]++,e.value=this.values.min):r.b[13][1]++,r.s[54]++,this.checkIsValueBiggerThanMax(e.value)?(r.b[14][0]++,r.s[55]++,e.value=this.values.max):r.b[14][1]++,r.s[56]++,e.isDouble?(r.b[15][0]++,r.s[57]++,e.value=this.correctsDoubleValues(e)):r.b[15][1]++,r.s[58]++,this.writesDataToModel({target:e.name,value:e.value}),r.s[59]++,{target:e.name,value:e.value,totalValues:Number(this.values.max)-Number(this.values.min),minValue:this.values.min}}correctsValueBiggerThanMax(e){return r.f[16]++,r.s[60]++,e>=this.values.max?(r.b[16][0]++,r.s[61]++,e=String(Number(this.values.max)-1)):r.b[16][1]++,r.s[62]++,e}correctsValueLessThanMin(e){return r.f[17]++,r.s[63]++,e<=this.values.min?(r.b[17][0]++,r.s[64]++,e=String(Number(this.values.min)+1)):r.b[17][1]++,r.s[65]++,e}changeSliderValuesRange(e){r.f[18]++;const{name:A}=(r.s[66]++,e);let{value:n}=(r.s[67]++,e);switch(r.s[68]++,A){case"min":r.b[18][0]++,r.s[69]++,n=a.truncatesNumbersAfterDot(Number(this.correctsValueBiggerThanMax(n))),r.s[70]++,this.values.min=n,r.s[71]++;break;case"max":r.b[18][1]++,r.s[72]++,n=a.truncatesNumbersAfterDot(Number(this.correctsValueLessThanMin(n))),r.s[73]++,this.values.max=n,r.s[74]++;break;default:r.b[18][2]++,r.s[75]++}r.s[76]++,Number(this.values.from)<Number(this.values.min)?(r.b[19][0]++,r.s[77]++,this.values.from=this.values.min):r.b[19][1]++,r.s[78]++,Number(this.values.to)>Number(this.values.max)?(r.b[20][0]++,r.s[79]++,this.values.to=this.values.max):r.b[20][1]++}}r.s[80]++,A.Model=a},694:function(e,A,n){"use strict";var t,l,i,s,o,r,a,C=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Presenter\\Presenter.ts",l="e04003a9bcfe4953d6587d2b371adc4cccdc2207",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Presenter\\Presenter.ts",statementMap:{0:{start:{line:2,column:17},end:{line:7,column:1}},1:{start:{line:3,column:12},end:{line:3,column:28}},2:{start:{line:3,column:34},end:{line:3,column:125}},3:{start:{line:4,column:4},end:{line:5,column:150}},4:{start:{line:4,column:79},end:{line:4,column:131}},5:{start:{line:5,column:9},end:{line:5,column:150}},6:{start:{line:5,column:58},end:{line:5,column:150}},7:{start:{line:5,column:81},end:{line:5,column:150}},8:{start:{line:6,column:4},end:{line:6,column:66}},9:{start:{line:9,column:0},end:{line:9,column:62}},10:{start:{line:10,column:0},end:{line:10,column:27}},11:{start:{line:11,column:29},end:{line:11,column:58}},12:{start:{line:12,column:16},end:{line:196,column:1}},13:{start:{line:14,column:8},end:{line:14,column:29}},14:{start:{line:15,column:8},end:{line:15,column:31}},15:{start:{line:18,column:8},end:{line:34,column:11}},16:{start:{line:20,column:37},end:{line:20,column:126}},17:{start:{line:21,column:33},end:{line:25,column:17}},18:{start:{line:26,column:16},end:{line:29,column:17}},19:{start:{line:27,column:20},end:{line:27,column:55}},20:{start:{line:28,column:20},end:{line:28,column:56}},21:{start:{line:30,column:16},end:{line:30,column:35}},22:{start:{line:31,column:16},end:{line:31,column:58}},23:{start:{line:32,column:16},end:{line:32,column:28}},24:{start:{line:37,column:23},end:{line:37,column:62}},25:{start:{line:38,column:8},end:{line:38,column:56}},26:{start:{line:39,column:8},end:{line:39,column:166}},27:{start:{line:42,column:8},end:{line:47,column:10}},28:{start:{line:50,column:8},end:{line:50,column:98}},29:{start:{line:53,column:28},end:{line:53,column:93}},30:{start:{line:54,column:26},end:{line:54,column:87}},31:{start:{line:55,column:26},end:{line:55,column:74}},32:{start:{line:56,column:24},end:{line:56,column:70}},33:{start:{line:57,column:32},end:{line:57,column:78}},34:{start:{line:58,column:8},end:{line:58,column:35}},35:{start:{line:59,column:8},end:{line:59,column:33}},36:{start:{line:60,column:8},end:{line:60,column:71}},37:{start:{line:61,column:8},end:{line:61,column:67}},38:{start:{line:62,column:8},end:{line:66,column:11}},39:{start:{line:67,column:8},end:{line:71,column:11}},40:{start:{line:74,column:35},end:{line:86,column:9}},41:{start:{line:75,column:40},end:{line:79,column:14}},42:{start:{line:80,column:12},end:{line:80,column:53}},43:{start:{line:81,column:12},end:{line:81,column:69}},44:{start:{line:82,column:12},end:{line:85,column:13}},45:{start:{line:83,column:16},end:{line:83,column:83}},46:{start:{line:84,column:16},end:{line:84,column:99}},47:{start:{line:87,column:8},end:{line:88,column:33}},48:{start:{line:88,column:12},end:{line:88,column:33}},49:{start:{line:91,column:26},end:{line:91,column:31}},50:{start:{line:92,column:8},end:{line:97,column:9}},51:{start:{line:93,column:12},end:{line:93,column:33}},52:{start:{line:95,column:13},end:{line:97,column:9}},53:{start:{line:96,column:12},end:{line:96,column:31}},54:{start:{line:98,column:8},end:{line:98,column:27}},55:{start:{line:101,column:28},end:{line:101,column:64}},56:{start:{line:102,column:8},end:{line:103,column:19}},57:{start:{line:103,column:12},end:{line:103,column:19}},58:{start:{line:104,column:23},end:{line:115,column:10}},59:{start:{line:116,column:28},end:{line:116,column:106}},60:{start:{line:117,column:8},end:{line:117,column:48}},61:{start:{line:118,column:8},end:{line:118,column:49}},62:{start:{line:119,column:8},end:{line:119,column:68}},63:{start:{line:120,column:8},end:{line:120,column:88}},64:{start:{line:123,column:23},end:{line:123,column:93}},65:{start:{line:124,column:28},end:{line:124,column:106}},66:{start:{line:125,column:8},end:{line:125,column:48}},67:{start:{line:126,column:8},end:{line:126,column:49}},68:{start:{line:127,column:8},end:{line:127,column:68}},69:{start:{line:128,column:8},end:{line:129,column:77}},70:{start:{line:129,column:12},end:{line:129,column:77}},71:{start:{line:130,column:8},end:{line:131,column:75}},72:{start:{line:131,column:12},end:{line:131,column:75}},73:{start:{line:134,column:8},end:{line:137,column:11}},74:{start:{line:138,column:8},end:{line:138,column:92}},75:{start:{line:139,column:8},end:{line:139,column:84}},76:{start:{line:140,column:8},end:{line:140,column:81}},77:{start:{line:143,column:8},end:{line:164,column:9}},78:{start:{line:145,column:16},end:{line:145,column:47}},79:{start:{line:146,column:16},end:{line:146,column:22}},80:{start:{line:148,column:16},end:{line:148,column:54}},81:{start:{line:149,column:16},end:{line:149,column:22}},82:{start:{line:151,column:16},end:{line:151,column:43}},83:{start:{line:152,column:16},end:{line:152,column:22}},84:{start:{line:154,column:16},end:{line:154,column:74}},85:{start:{line:155,column:16},end:{line:155,column:22}},86:{start:{line:157,column:16},end:{line:157,column:66}},87:{start:{line:158,column:16},end:{line:158,column:22}},88:{start:{line:160,column:16},end:{line:160,column:63}},89:{start:{line:161,column:16},end:{line:161,column:22}},90:{start:{line:163,column:16},end:{line:163,column:22}},91:{start:{line:167,column:21},end:{line:167,column:25}},92:{start:{line:168,column:8},end:{line:175,column:11}},93:{start:{line:170,column:16},end:{line:171,column:33}},94:{start:{line:171,column:20},end:{line:171,column:33}},95:{start:{line:172,column:16},end:{line:172,column:62}},96:{start:{line:173,column:16},end:{line:173,column:28}},97:{start:{line:178,column:8},end:{line:188,column:11}},98:{start:{line:180,column:16},end:{line:180,column:41}},99:{start:{line:181,column:16},end:{line:185,column:19}},100:{start:{line:186,column:16},end:{line:186,column:28}},101:{start:{line:191,column:32},end:{line:191,column:36}},102:{start:{line:192,column:8},end:{line:192,column:79}},103:{start:{line:193,column:8},end:{line:193,column:65}},104:{start:{line:194,column:8},end:{line:194,column:51}},105:{start:{line:197,column:0},end:{line:199,column:14}},106:{start:{line:200,column:0},end:{line:200,column:30}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:46},end:{line:2,column:47}},loc:{start:{line:2,column:87},end:{line:7,column:1}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:37},end:{line:16,column:5}},line:13},2:{name:"(anonymous_2)",decl:{start:{line:17,column:4},end:{line:17,column:5}},loc:{start:{line:17,column:44},end:{line:35,column:5}},line:17},3:{name:"(anonymous_3)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:30},end:{line:40,column:5}},line:36},4:{name:"(anonymous_4)",decl:{start:{line:41,column:4},end:{line:41,column:5}},loc:{start:{line:41,column:48},end:{line:48,column:5}},line:41},5:{name:"(anonymous_5)",decl:{start:{line:49,column:4},end:{line:49,column:5}},loc:{start:{line:49,column:47},end:{line:51,column:5}},line:49},6:{name:"(anonymous_6)",decl:{start:{line:52,column:4},end:{line:52,column:5}},loc:{start:{line:52,column:37},end:{line:72,column:5}},line:52},7:{name:"(anonymous_7)",decl:{start:{line:73,column:4},end:{line:73,column:5}},loc:{start:{line:73,column:26},end:{line:89,column:5}},line:73},8:{name:"(anonymous_8)",decl:{start:{line:74,column:35},end:{line:74,column:36}},loc:{start:{line:74,column:41},end:{line:86,column:9}},line:74},9:{name:"(anonymous_9)",decl:{start:{line:90,column:4},end:{line:90,column:5}},loc:{start:{line:90,column:36},end:{line:99,column:5}},line:90},10:{name:"(anonymous_10)",decl:{start:{line:100,column:4},end:{line:100,column:5}},loc:{start:{line:100,column:45},end:{line:121,column:5}},line:100},11:{name:"(anonymous_11)",decl:{start:{line:122,column:4},end:{line:122,column:5}},loc:{start:{line:122,column:43},end:{line:132,column:5}},line:122},12:{name:"(anonymous_12)",decl:{start:{line:133,column:4},end:{line:133,column:5}},loc:{start:{line:133,column:46},end:{line:141,column:5}},line:133},13:{name:"(anonymous_13)",decl:{start:{line:142,column:4},end:{line:142,column:5}},loc:{start:{line:142,column:45},end:{line:165,column:5}},line:142},14:{name:"(anonymous_14)",decl:{start:{line:166,column:4},end:{line:166,column:5}},loc:{start:{line:166,column:30},end:{line:176,column:5}},line:166},15:{name:"(anonymous_15)",decl:{start:{line:177,column:4},end:{line:177,column:5}},loc:{start:{line:177,column:27},end:{line:189,column:5}},line:177},16:{name:"(anonymous_16)",decl:{start:{line:190,column:4},end:{line:190,column:5}},loc:{start:{line:190,column:17},end:{line:195,column:5}},line:190}},branchMap:{0:{loc:{start:{line:2,column:17},end:{line:7,column:1}},type:"binary-expr",locations:[{start:{line:2,column:18},end:{line:2,column:22}},{start:{line:2,column:26},end:{line:2,column:41}},{start:{line:2,column:46},end:{line:7,column:1}}],line:2},1:{loc:{start:{line:3,column:34},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:42},end:{line:3,column:48}},{start:{line:3,column:51},end:{line:3,column:125}}],line:3},2:{loc:{start:{line:3,column:51},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:67},end:{line:3,column:118}},{start:{line:3,column:121},end:{line:3,column:125}}],line:3},3:{loc:{start:{line:4,column:4},end:{line:5,column:150}},type:"if",locations:[{start:{line:4,column:4},end:{line:5,column:150}},{start:{line:4,column:4},end:{line:5,column:150}}],line:4},4:{loc:{start:{line:4,column:8},end:{line:4,column:77}},type:"binary-expr",locations:[{start:{line:4,column:8},end:{line:4,column:35}},{start:{line:4,column:39},end:{line:4,column:77}}],line:4},5:{loc:{start:{line:5,column:58},end:{line:5,column:150}},type:"if",locations:[{start:{line:5,column:58},end:{line:5,column:150}},{start:{line:5,column:58},end:{line:5,column:150}}],line:5},6:{loc:{start:{line:5,column:85},end:{line:5,column:149}},type:"binary-expr",locations:[{start:{line:5,column:86},end:{line:5,column:143}},{start:{line:5,column:148},end:{line:5,column:149}}],line:5},7:{loc:{start:{line:5,column:86},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:94},end:{line:5,column:98}},{start:{line:5,column:101},end:{line:5,column:143}}],line:5},8:{loc:{start:{line:5,column:101},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:109},end:{line:5,column:126}},{start:{line:5,column:129},end:{line:5,column:143}}],line:5},9:{loc:{start:{line:6,column:11},end:{line:6,column:62}},type:"binary-expr",locations:[{start:{line:6,column:11},end:{line:6,column:16}},{start:{line:6,column:20},end:{line:6,column:21}},{start:{line:6,column:25},end:{line:6,column:62}}],line:6},10:{loc:{start:{line:20,column:37},end:{line:20,column:126}},type:"binary-expr",locations:[{start:{line:20,column:37},end:{line:20,column:46}},{start:{line:20,column:50},end:{line:20,column:126}}],line:20},11:{loc:{start:{line:26,column:16},end:{line:29,column:17}},type:"if",locations:[{start:{line:26,column:16},end:{line:29,column:17}},{start:{line:26,column:16},end:{line:29,column:17}}],line:26},12:{loc:{start:{line:82,column:12},end:{line:85,column:13}},type:"if",locations:[{start:{line:82,column:12},end:{line:85,column:13}},{start:{line:82,column:12},end:{line:85,column:13}}],line:82},13:{loc:{start:{line:87,column:8},end:{line:88,column:33}},type:"if",locations:[{start:{line:87,column:8},end:{line:88,column:33}},{start:{line:87,column:8},end:{line:88,column:33}}],line:87},14:{loc:{start:{line:92,column:8},end:{line:97,column:9}},type:"if",locations:[{start:{line:92,column:8},end:{line:97,column:9}},{start:{line:92,column:8},end:{line:97,column:9}}],line:92},15:{loc:{start:{line:95,column:13},end:{line:97,column:9}},type:"if",locations:[{start:{line:95,column:13},end:{line:97,column:9}},{start:{line:95,column:13},end:{line:97,column:9}}],line:95},16:{loc:{start:{line:102,column:8},end:{line:103,column:19}},type:"if",locations:[{start:{line:102,column:8},end:{line:103,column:19}},{start:{line:102,column:8},end:{line:103,column:19}}],line:102},17:{loc:{start:{line:128,column:8},end:{line:129,column:77}},type:"if",locations:[{start:{line:128,column:8},end:{line:129,column:77}},{start:{line:128,column:8},end:{line:129,column:77}}],line:128},18:{loc:{start:{line:130,column:8},end:{line:131,column:75}},type:"if",locations:[{start:{line:130,column:8},end:{line:131,column:75}},{start:{line:130,column:8},end:{line:131,column:75}}],line:130},19:{loc:{start:{line:135,column:18},end:{line:135,column:74}},type:"cond-expr",locations:[{start:{line:135,column:55},end:{line:135,column:61}},{start:{line:135,column:64},end:{line:135,column:74}}],line:135},20:{loc:{start:{line:135,column:18},end:{line:135,column:52}},type:"binary-expr",locations:[{start:{line:135,column:18},end:{line:135,column:32}},{start:{line:135,column:36},end:{line:135,column:52}}],line:135},21:{loc:{start:{line:143,column:8},end:{line:164,column:9}},type:"switch",locations:[{start:{line:144,column:12},end:{line:146,column:22}},{start:{line:147,column:12},end:{line:149,column:22}},{start:{line:150,column:12},end:{line:152,column:22}},{start:{line:153,column:12},end:{line:155,column:22}},{start:{line:156,column:12},end:{line:158,column:22}},{start:{line:159,column:12},end:{line:161,column:22}},{start:{line:162,column:12},end:{line:163,column:22}}],line:143},22:{loc:{start:{line:170,column:16},end:{line:171,column:33}},type:"if",locations:[{start:{line:170,column:16},end:{line:171,column:33}},{start:{line:170,column:16},end:{line:171,column:33}}],line:170}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0,87:0,88:0,89:0,90:0,91:0,92:0,93:0,94:0,95:0,96:0,97:0,98:0,99:0,100:0,101:0,102:0,103:0,104:0,105:0,106:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0},b:{0:[0,0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0],16:[0,0],17:[0,0],18:[0,0],19:[0,0],20:[0,0],21:[0,0,0,0,0,0,0],22:[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Presenter\\Presenter.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\Presenter\\Presenter.ts"],names:[],mappings:"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",sourcesContent:["import autobind from 'autobind-decorator';\r\nimport { BasicModelSettings, CalculationData, DataForValueScale } from '../Model/types';\r\nimport { Model } from '../Model/Model';\r\nimport { DataForAdjustPosition } from '../View/Handles/types';\r\nimport { RefreshIntervalPositions } from '../View/SelectedInterval/types';\r\nimport { View } from '../View/View';\r\nimport { HandlesPosition } from '../View/Movement/types';\r\nimport { DataRequestToModel, DataRequestValue } from '../View/types';\r\n\r\n@autobind\r\nexport class Presenter {\r\n  private readonly view: View;\r\n\r\n  private readonly model: Model;\r\n\r\n  constructor(viewLink: View, modelLink: Model) {\r\n    this.view = viewLink;\r\n    this.model = modelLink;\r\n  }\r\n\r\n  private bindProxyToHandlesMovement(view: View, model: Model): HandlesPosition {\r\n    return new Proxy(this.view.movement.positions, {\r\n      set(target, prop: 'from' | 'to', val) {\r\n        const isExtraRange = val === 0 || val === view.slider.slider.offsetWidth - view.handles.fromHandle.offsetWidth;\r\n        const settings: CalculationData = {\r\n          position: String(val),\r\n          target: prop,\r\n          sliderWidth: view.slider.slider.offsetWidth - view.handles.fromHandle.offsetWidth,\r\n        };\r\n\r\n        if (isExtraRange) {\r\n          view.handles.isInputChanges = true;\r\n          view.sideMenu.isInputChanges = true;\r\n        }\r\n\r\n        target[prop] = val;\r\n        model.calculateValuesByPosition(settings);\r\n\r\n        return true;\r\n      },\r\n    });\r\n  }\r\n\r\n  private distributesDataForScale(): void {\r\n    const values: DataForValueScale = this.model.calculateDataForValueScale();\r\n    this.view.valuesScale.refreshValueScale(values);\r\n    this.view.valuesScale.centersValues(\r\n      this.view.slider.slider.offsetWidth - this.view.handles.fromHandle.offsetWidth,\r\n      this.view.handles.fromHandle.offsetWidth,\r\n    );\r\n  }\r\n\r\n  private prepareDataForAdjustPosition(target: 'from' | 'to', value: string): DataForAdjustPosition {\r\n    return {\r\n      target,\r\n      value,\r\n      totalValues: Number(this.model.values.max) - Number(this.model.values.min),\r\n      minValue: this.model.values.min,\r\n    };\r\n  }\r\n\r\n  private prepareNewHandlesPositionsData(handleData: DataForAdjustPosition): RefreshIntervalPositions {\r\n    return this.view.handles.adjustPositions(\r\n      handleData,\r\n      this.view.slider.slider.offsetWidth,\r\n    );\r\n  }\r\n\r\n  private distributeDataForStartPosition(): void {\r\n    const dataForFrom: DataForAdjustPosition = this.prepareDataForAdjustPosition('from', this.model.values.from);\r\n    const dataForTo: DataForAdjustPosition = this.prepareDataForAdjustPosition('to', this.model.values.to);\r\n    const startFrom: RefreshIntervalPositions = this.prepareNewHandlesPositionsData(dataForFrom);\r\n    const startTo: RefreshIntervalPositions = this.prepareNewHandlesPositionsData(dataForTo);\r\n    const adjustPositions = this.view.interval.adjustPositionRelativeValue;\r\n    adjustPositions(startFrom);\r\n    adjustPositions(startTo);\r\n    this.view.movement.positions.from = Number(startFrom.position);\r\n    this.view.movement.positions.to = Number(startTo.position);\r\n    this.view.refreshAllComponents({\r\n      value: this.model.values.min,\r\n      target: 'min',\r\n      isToFixed: this.view.basicSettings.integer,\r\n    });\r\n    this.view.refreshAllComponents({\r\n      value: this.model.values.max,\r\n      target: 'max',\r\n      isToFixed: this.view.basicSettings.integer,\r\n    });\r\n  }\r\n\r\n  private distributeStepWidth(): void {\r\n    const writesNewStepWidth = (): void => {\r\n      const { stepWidth, step } = this.model.calculateStepWidth({\r\n        step: Number(this.view.basicSettings.step),\r\n        sliderWidth: this.view.slider.slider.offsetWidth,\r\n        handleWidth: this.view.handles.fromHandle.offsetWidth,\r\n      });\r\n      this.view.movement.stepWidth = stepWidth;\r\n\r\n      this.view.basicSettings.integer = Number.isInteger(step);\r\n\r\n      if (this.view.basicSettings.sideMenu) {\r\n        this.view.sideMenu.sideMenuElements.stepInput!.value = String(step);\r\n        this.view.sideMenu.sideMenuElements.integerToggle!.checked = Number.isInteger(step);\r\n      }\r\n    };\r\n\r\n    if (typeof this.view.basicSettings.step === 'number') writesNewStepWidth();\r\n  }\r\n\r\n  private static checkCorrectTarget(name: string): 'from' | 'to' | false {\r\n    let correctName: 'from' | 'to' | false = false;\r\n    if (name === 'from') {\r\n      correctName = 'from';\r\n    } else if (name === 'to') {\r\n      correctName = 'to';\r\n    }\r\n    return correctName;\r\n  }\r\n\r\n  private distributeNewValuesForApply(name: string, value: string): void {\r\n    const correctName: 'from' | 'to' | false = Presenter.checkCorrectTarget(name);\r\n    if (!correctName) return;\r\n\r\n    const result: DataForAdjustPosition = this.model.prepareInputValueForRecord({\r\n      name: correctName,\r\n      value,\r\n      step: this.view.basicSettings.step,\r\n      isDouble: this.view.basicSettings.double,\r\n      positions: {\r\n        from: this.view.movement.positions.from,\r\n        to: this.view.movement.positions.to,\r\n      },\r\n      handleWidth: this.view.handles.toHandle.offsetWidth,\r\n      sliderWidth: this.view.slider.slider.offsetWidth,\r\n    });\r\n    const newPosition: RefreshIntervalPositions = this.view.handles.adjustPositions(\r\n      result,\r\n      this.view.slider.slider.offsetWidth,\r\n    );\r\n\r\n    this.view.handles.isInputChanges = true;\r\n    this.view.sideMenu.isInputChanges = true;\r\n    this.view.interval.adjustPositionRelativeValue(newPosition);\r\n    this.view.movement.positions[newPosition.target] = Number(newPosition.position);\r\n  }\r\n\r\n  private distributeValueFromScaleToApply(value: string): void {\r\n    const result: DataForAdjustPosition = this.model.assignValueFromScale(value, this.view.basicSettings.double);\r\n    const newPosition: RefreshIntervalPositions = this.view.handles.adjustPositions(\r\n      result,\r\n      this.view.slider.slider.offsetWidth,\r\n    );\r\n    this.view.handles.isInputChanges = true;\r\n    this.view.sideMenu.isInputChanges = true;\r\n    this.view.interval.adjustPositionRelativeValue(newPosition);\r\n    if (newPosition.target === 'from') this.view.movement.positions.from = Number(newPosition.position);\r\n    if (newPosition.target === 'to') this.view.movement.positions.to = Number(newPosition.position);\r\n  }\r\n\r\n  private distributeSliderValuesRangeToApply(value: DataRequestValue): void {\r\n    this.model.changeSliderValuesRange({\r\n      name: value?.name,\r\n      value: value.value,\r\n    });\r\n    this.view.dataRequestToModel.needDataForStartPosition = { name: '', value: 'true' };\r\n    this.view.dataRequestToModel.needDataForScale = { name: '', value: 'true' };\r\n    this.view.dataRequestToModel.needStepWidth = { name: '', value: 'true' };\r\n  }\r\n\r\n  private handlesRequestsFromView(property: string, value: DataRequestValue): void {\r\n    switch (property) {\r\n      case 'needDataForScale':\r\n        this.distributesDataForScale();\r\n        break;\r\n      case 'needDataForStartPosition':\r\n        this.distributeDataForStartPosition();\r\n        break;\r\n      case 'needStepWidth':\r\n        this.distributeStepWidth();\r\n        break;\r\n      case 'needApplyNewValue':\r\n        this.distributeNewValuesForApply(value.name, value.value);\r\n        break;\r\n      case 'needApplyValueFromScale':\r\n        this.distributeValueFromScaleToApply(value.value);\r\n        break;\r\n      case 'needChangeSliderValuesRange':\r\n        this.distributeSliderValuesRangeToApply(value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  private bindProxyToViewRequests(): DataRequestToModel {\r\n    const that: this = this;\r\n    return new Proxy(this.view.dataRequestToModel, {\r\n      set(target: DataRequestToModel, property: string, value: DataRequestValue) {\r\n        if (!value) return false;\r\n        that.handlesRequestsFromView(property, value);\r\n        return true;\r\n      },\r\n    });\r\n  }\r\n\r\n  private bindProxyToModel(view: View): BasicModelSettings {\r\n    return new Proxy(this.model.values, {\r\n      set(target: BasicModelSettings, property: 'min' | 'max' | 'from' | 'to', value: string) {\r\n        target[property] = value;\r\n\r\n        view.refreshAllComponents({\r\n          value,\r\n          target: property,\r\n          isToFixed: view.basicSettings.integer,\r\n        });\r\n\r\n        return true;\r\n      },\r\n    });\r\n  }\r\n\r\n  public initialize(): void {\r\n    const { view, model } = this;\r\n\r\n    view.movement.positions = this.bindProxyToHandlesMovement(view, model);\r\n    view.dataRequestToModel = this.bindProxyToViewRequests();\r\n    model.values = this.bindProxyToModel(view);\r\n  }\r\n}\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(r=i[s="__coverage__"]||(i[s]={}))[t]&&r[t].hash===l?r[t]:(o.hash=l,r[t]=o)),u=(C.s[0]++,C.b[0][0]++,this&&(C.b[0][1]++,this.__decorate)||(C.b[0][2]++,function(e,A,n,t){C.f[0]++;var l,i=(C.s[1]++,arguments.length),s=(C.s[2]++,i<3?(C.b[1][0]++,A):(C.b[1][1]++,null===t?(C.b[2][0]++,t=Object.getOwnPropertyDescriptor(A,n)):(C.b[2][1]++,t)));if(C.s[3]++,C.b[4][0]++,"object"==typeof Reflect&&(C.b[4][1]++,"function"==typeof Reflect.decorate))C.b[3][0]++,C.s[4]++,s=Reflect.decorate(e,A,n,t);else{C.b[3][1]++,C.s[5]++;for(var o=e.length-1;o>=0;o--)C.s[6]++,(l=e[o])?(C.b[5][0]++,C.s[7]++,C.b[6][0]++,s=(i<3?(C.b[7][0]++,l(s)):(C.b[7][1]++,i>3?(C.b[8][0]++,l(A,n,s)):(C.b[8][1]++,l(A,n))))||(C.b[6][1]++,s)):C.b[5][1]++}return C.s[8]++,C.b[9][0]++,i>3&&(C.b[9][1]++,s)&&(C.b[9][2]++,Object.defineProperty(A,n,s)),s}));C.s[9]++,Object.defineProperty(A,"__esModule",{value:!0}),C.s[10]++,A.Presenter=void 0;const c=(C.s[11]++,n(572));let m=(C.s[12]++,a=class{constructor(e,A){C.f[1]++,C.s[13]++,this.view=e,C.s[14]++,this.model=A}bindProxyToHandlesMovement(e,A){return C.f[2]++,C.s[15]++,new Proxy(this.view.movement.positions,{set(n,t,l){const i=(C.s[16]++,C.b[10][0]++,0===l||(C.b[10][1]++,l===e.slider.slider.offsetWidth-e.handles.fromHandle.offsetWidth)),s=(C.s[17]++,{position:String(l),target:t,sliderWidth:e.slider.slider.offsetWidth-e.handles.fromHandle.offsetWidth});return C.s[18]++,i?(C.b[11][0]++,C.s[19]++,e.handles.isInputChanges=!0,C.s[20]++,e.sideMenu.isInputChanges=!0):C.b[11][1]++,C.s[21]++,n[t]=l,C.s[22]++,A.calculateValuesByPosition(s),C.s[23]++,!0}})}distributesDataForScale(){C.f[3]++;const e=(C.s[24]++,this.model.calculateDataForValueScale());C.s[25]++,this.view.valuesScale.refreshValueScale(e),C.s[26]++,this.view.valuesScale.centersValues(this.view.slider.slider.offsetWidth-this.view.handles.fromHandle.offsetWidth,this.view.handles.fromHandle.offsetWidth)}prepareDataForAdjustPosition(e,A){return C.f[4]++,C.s[27]++,{target:e,value:A,totalValues:Number(this.model.values.max)-Number(this.model.values.min),minValue:this.model.values.min}}prepareNewHandlesPositionsData(e){return C.f[5]++,C.s[28]++,this.view.handles.adjustPositions(e,this.view.slider.slider.offsetWidth)}distributeDataForStartPosition(){C.f[6]++;const e=(C.s[29]++,this.prepareDataForAdjustPosition("from",this.model.values.from)),A=(C.s[30]++,this.prepareDataForAdjustPosition("to",this.model.values.to)),n=(C.s[31]++,this.prepareNewHandlesPositionsData(e)),t=(C.s[32]++,this.prepareNewHandlesPositionsData(A)),l=(C.s[33]++,this.view.interval.adjustPositionRelativeValue);C.s[34]++,l(n),C.s[35]++,l(t),C.s[36]++,this.view.movement.positions.from=Number(n.position),C.s[37]++,this.view.movement.positions.to=Number(t.position),C.s[38]++,this.view.refreshAllComponents({value:this.model.values.min,target:"min",isToFixed:this.view.basicSettings.integer}),C.s[39]++,this.view.refreshAllComponents({value:this.model.values.max,target:"max",isToFixed:this.view.basicSettings.integer})}distributeStepWidth(){C.f[7]++,C.s[40]++;const e=()=>{C.f[8]++;const{stepWidth:e,step:A}=(C.s[41]++,this.model.calculateStepWidth({step:Number(this.view.basicSettings.step),sliderWidth:this.view.slider.slider.offsetWidth,handleWidth:this.view.handles.fromHandle.offsetWidth}));C.s[42]++,this.view.movement.stepWidth=e,C.s[43]++,this.view.basicSettings.integer=Number.isInteger(A),C.s[44]++,this.view.basicSettings.sideMenu?(C.b[12][0]++,C.s[45]++,this.view.sideMenu.sideMenuElements.stepInput.value=String(A),C.s[46]++,this.view.sideMenu.sideMenuElements.integerToggle.checked=Number.isInteger(A)):C.b[12][1]++};C.s[47]++,"number"==typeof this.view.basicSettings.step?(C.b[13][0]++,C.s[48]++,e()):C.b[13][1]++}static checkCorrectTarget(e){C.f[9]++;let A=(C.s[49]++,!1);return C.s[50]++,"from"===e?(C.b[14][0]++,C.s[51]++,A="from"):(C.b[14][1]++,C.s[52]++,"to"===e?(C.b[15][0]++,C.s[53]++,A="to"):C.b[15][1]++),C.s[54]++,A}distributeNewValuesForApply(e,A){C.f[10]++;const n=(C.s[55]++,a.checkCorrectTarget(e));if(C.s[56]++,!n)return C.b[16][0]++,void C.s[57]++;C.b[16][1]++;const t=(C.s[58]++,this.model.prepareInputValueForRecord({name:n,value:A,step:this.view.basicSettings.step,isDouble:this.view.basicSettings.double,positions:{from:this.view.movement.positions.from,to:this.view.movement.positions.to},handleWidth:this.view.handles.toHandle.offsetWidth,sliderWidth:this.view.slider.slider.offsetWidth})),l=(C.s[59]++,this.view.handles.adjustPositions(t,this.view.slider.slider.offsetWidth));C.s[60]++,this.view.handles.isInputChanges=!0,C.s[61]++,this.view.sideMenu.isInputChanges=!0,C.s[62]++,this.view.interval.adjustPositionRelativeValue(l),C.s[63]++,this.view.movement.positions[l.target]=Number(l.position)}distributeValueFromScaleToApply(e){C.f[11]++;const A=(C.s[64]++,this.model.assignValueFromScale(e,this.view.basicSettings.double)),n=(C.s[65]++,this.view.handles.adjustPositions(A,this.view.slider.slider.offsetWidth));C.s[66]++,this.view.handles.isInputChanges=!0,C.s[67]++,this.view.sideMenu.isInputChanges=!0,C.s[68]++,this.view.interval.adjustPositionRelativeValue(n),C.s[69]++,"from"===n.target?(C.b[17][0]++,C.s[70]++,this.view.movement.positions.from=Number(n.position)):C.b[17][1]++,C.s[71]++,"to"===n.target?(C.b[18][0]++,C.s[72]++,this.view.movement.positions.to=Number(n.position)):C.b[18][1]++}distributeSliderValuesRangeToApply(e){C.f[12]++,C.s[73]++,this.model.changeSliderValuesRange({name:(C.b[20][0]++,null===e||(C.b[20][1]++,void 0===e)?void C.b[19][0]++:(C.b[19][1]++,e.name)),value:e.value}),C.s[74]++,this.view.dataRequestToModel.needDataForStartPosition={name:"",value:"true"},C.s[75]++,this.view.dataRequestToModel.needDataForScale={name:"",value:"true"},C.s[76]++,this.view.dataRequestToModel.needStepWidth={name:"",value:"true"}}handlesRequestsFromView(e,A){switch(C.f[13]++,C.s[77]++,e){case"needDataForScale":C.b[21][0]++,C.s[78]++,this.distributesDataForScale(),C.s[79]++;break;case"needDataForStartPosition":C.b[21][1]++,C.s[80]++,this.distributeDataForStartPosition(),C.s[81]++;break;case"needStepWidth":C.b[21][2]++,C.s[82]++,this.distributeStepWidth(),C.s[83]++;break;case"needApplyNewValue":C.b[21][3]++,C.s[84]++,this.distributeNewValuesForApply(A.name,A.value),C.s[85]++;break;case"needApplyValueFromScale":C.b[21][4]++,C.s[86]++,this.distributeValueFromScaleToApply(A.value),C.s[87]++;break;case"needChangeSliderValuesRange":C.b[21][5]++,C.s[88]++,this.distributeSliderValuesRangeToApply(A),C.s[89]++;break;default:C.b[21][6]++,C.s[90]++}}bindProxyToViewRequests(){C.f[14]++;const e=(C.s[91]++,this);return C.s[92]++,new Proxy(this.view.dataRequestToModel,{set:(A,n,t)=>(C.s[93]++,t?(C.b[22][1]++,C.s[95]++,e.handlesRequestsFromView(n,t),C.s[96]++,!0):(C.b[22][0]++,C.s[94]++,!1))})}bindProxyToModel(e){return C.f[15]++,C.s[97]++,new Proxy(this.model.values,{set:(A,n,t)=>(C.s[98]++,A[n]=t,C.s[99]++,e.refreshAllComponents({value:t,target:n,isToFixed:e.basicSettings.integer}),C.s[100]++,!0)})}initialize(){C.f[16]++;const{view:e,model:A}=(C.s[101]++,this);C.s[102]++,e.movement.positions=this.bindProxyToHandlesMovement(e,A),C.s[103]++,e.dataRequestToModel=this.bindProxyToViewRequests(),C.s[104]++,A.values=this.bindProxyToModel(e)}});C.s[105]++,m=a=u([c.default],m),C.s[106]++,A.Presenter=m},263:(e,A)=>{"use strict";var n,t,l,i,s,o,r=(n="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Handles\\Handles.ts",t="4127fec052b567a8e05b009cd2846f386342fc7f",l=new(0,function(){}.constructor)("return this")(),s={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Handles\\Handles.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:0},end:{line:3,column:25}},2:{start:{line:6,column:8},end:{line:6,column:36}},3:{start:{line:7,column:8},end:{line:28,column:10}},4:{start:{line:29,column:8},end:{line:29,column:83}},5:{start:{line:30,column:8},end:{line:30,column:81}},6:{start:{line:31,column:8},end:{line:31,column:82}},7:{start:{line:32,column:8},end:{line:32,column:80}},8:{start:{line:33,column:8},end:{line:33,column:47}},9:{start:{line:34,column:8},end:{line:34,column:43}},10:{start:{line:35,column:8},end:{line:35,column:36}},11:{start:{line:38,column:8},end:{line:38,column:47}},12:{start:{line:39,column:8},end:{line:39,column:43}},13:{start:{line:45,column:58},end:{line:45,column:66}},14:{start:{line:46,column:24},end:{line:46,column:54}},15:{start:{line:47,column:8},end:{line:49,column:11}},16:{start:{line:48,column:12},end:{line:48,column:44}},17:{start:{line:50,column:35},end:{line:50,column:48}},18:{start:{line:51,column:8},end:{line:52,column:46}},19:{start:{line:52,column:12},end:{line:52,column:46}},20:{start:{line:53,column:8},end:{line:53,column:23}},21:{start:{line:56,column:43},end:{line:56,column:51}},22:{start:{line:57,column:31},end:{line:57,column:85}},23:{start:{line:58,column:8},end:{line:65,column:9}},24:{start:{line:59,column:12},end:{line:59,column:91}},25:{start:{line:60,column:12},end:{line:60,column:72}},26:{start:{line:63,column:12},end:{line:63,column:91}},27:{start:{line:64,column:12},end:{line:64,column:72}},28:{start:{line:68,column:28},end:{line:68,column:32}},29:{start:{line:69,column:23},end:{line:69,column:51}},30:{start:{line:70,column:30},end:{line:70,column:68}},31:{start:{line:71,column:43},end:{line:71,column:92}},32:{start:{line:72,column:32},end:{line:73,column:93}},33:{start:{line:74,column:34},end:{line:75,column:71}},34:{start:{line:76,column:21},end:{line:76,column:25}},35:{start:{line:77,column:8},end:{line:85,column:9}},36:{start:{line:78,column:12},end:{line:78,column:52}},37:{start:{line:79,column:12},end:{line:79,column:27}},38:{start:{line:82,column:12},end:{line:82,column:102}},39:{start:{line:83,column:12},end:{line:84,column:44}},40:{start:{line:84,column:16},end:{line:84,column:44}},41:{start:{line:86,column:8},end:{line:86,column:22}},42:{start:{line:89,column:27},end:{line:89,column:58}},43:{start:{line:90,column:23},end:{line:90,column:39}},44:{start:{line:92,column:12},end:{line:93,column:82}},45:{start:{line:95,column:28},end:{line:95,column:50}},46:{start:{line:96,column:8},end:{line:96,column:47}},47:{start:{line:97,column:8},end:{line:102,column:10}},48:{start:{line:105,column:8},end:{line:106,column:110}},49:{start:{line:109,column:8},end:{line:110,column:110}},50:{start:{line:113,column:8},end:{line:113,column:79}},51:{start:{line:116,column:8},end:{line:116,column:70}},52:{start:{line:120,column:12},end:{line:120,column:78}},53:{start:{line:121,column:12},end:{line:121,column:76}},54:{start:{line:123,column:8},end:{line:132,column:9}},55:{start:{line:125,column:16},end:{line:125,column:66}},56:{start:{line:126,column:16},end:{line:126,column:22}},57:{start:{line:128,column:16},end:{line:128,column:66}},58:{start:{line:129,column:16},end:{line:129,column:22}},59:{start:{line:131,column:16},end:{line:131,column:22}},60:{start:{line:135,column:43},end:{line:135,column:51}},61:{start:{line:136,column:28},end:{line:136,column:67}},62:{start:{line:137,column:8},end:{line:137,column:54}},63:{start:{line:138,column:8},end:{line:138,column:35}},64:{start:{line:139,column:36},end:{line:139,column:122}},65:{start:{line:140,column:8},end:{line:144,column:9}},66:{start:{line:141,column:40},end:{line:141,column:117}},67:{start:{line:142,column:12},end:{line:142,column:68}},68:{start:{line:143,column:12},end:{line:143,column:57}},69:{start:{line:147,column:29},end:{line:147,column:37}},70:{start:{line:148,column:8},end:{line:154,column:9}},71:{start:{line:149,column:12},end:{line:149,column:49}},72:{start:{line:151,column:13},end:{line:154,column:9}},73:{start:{line:152,column:12},end:{line:152,column:57}},74:{start:{line:153,column:12},end:{line:153,column:50}},75:{start:{line:157,column:8},end:{line:164,column:9}},76:{start:{line:158,column:12},end:{line:158,column:48}},77:{start:{line:159,column:12},end:{line:159,column:50}},78:{start:{line:162,column:12},end:{line:162,column:56}},79:{start:{line:163,column:12},end:{line:163,column:58}},80:{start:{line:167,column:56},end:{line:167,column:64}},81:{start:{line:168,column:31},end:{line:168,column:88}},82:{start:{line:169,column:29},end:{line:169,column:84}},83:{start:{line:170,column:37},end:{line:170,column:79}},84:{start:{line:171,column:8},end:{line:172,column:35}},85:{start:{line:172,column:12},end:{line:172,column:35}},86:{start:{line:173,column:8},end:{line:173,column:29}},87:{start:{line:176,column:45},end:{line:176,column:53}},88:{start:{line:177,column:8},end:{line:184,column:9}},89:{start:{line:178,column:12},end:{line:178,column:54}},90:{start:{line:179,column:12},end:{line:179,column:35}},91:{start:{line:182,column:12},end:{line:182,column:52}},92:{start:{line:183,column:12},end:{line:183,column:33}},93:{start:{line:187,column:0},end:{line:187,column:26}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:18},end:{line:36,column:5}},line:5},1:{name:"(anonymous_1)",decl:{start:{line:37,column:4},end:{line:37,column:5}},loc:{start:{line:37,column:27},end:{line:40,column:5}},line:37},2:{name:"(anonymous_2)",decl:{start:{line:41,column:4},end:{line:41,column:5}},loc:{start:{line:41,column:35},end:{line:54,column:5}},line:41},3:{name:"(anonymous_3)",decl:{start:{line:47,column:27},end:{line:47,column:28}},loc:{start:{line:47,column:41},end:{line:49,column:9}},line:47},4:{name:"(anonymous_4)",decl:{start:{line:55,column:4},end:{line:55,column:5}},loc:{start:{line:55,column:38},end:{line:66,column:5}},line:55},5:{name:"(anonymous_5)",decl:{start:{line:67,column:4},end:{line:67,column:5}},loc:{start:{line:67,column:35},end:{line:87,column:5}},line:67},6:{name:"(anonymous_6)",decl:{start:{line:88,column:4},end:{line:88,column:5}},loc:{start:{line:88,column:48},end:{line:103,column:5}},line:88},7:{name:"calculateNewPosition",decl:{start:{line:91,column:17},end:{line:91,column:37}},loc:{start:{line:91,column:40},end:{line:94,column:9}},line:91},8:{name:"(anonymous_8)",decl:{start:{line:104,column:4},end:{line:104,column:5}},loc:{start:{line:104,column:42},end:{line:107,column:5}},line:104},9:{name:"(anonymous_9)",decl:{start:{line:108,column:4},end:{line:108,column:5}},loc:{start:{line:108,column:46},end:{line:111,column:5}},line:108},10:{name:"(anonymous_10)",decl:{start:{line:112,column:4},end:{line:112,column:5}},loc:{start:{line:112,column:32},end:{line:114,column:5}},line:112},11:{name:"(anonymous_11)",decl:{start:{line:115,column:4},end:{line:115,column:5}},loc:{start:{line:115,column:32},end:{line:117,column:5}},line:115},12:{name:"(anonymous_12)",decl:{start:{line:118,column:4},end:{line:118,column:5}},loc:{start:{line:118,column:28},end:{line:133,column:5}},line:118},13:{name:"changeVerticalClass",decl:{start:{line:119,column:17},end:{line:119,column:36}},loc:{start:{line:119,column:47},end:{line:122,column:9}},line:119},14:{name:"(anonymous_14)",decl:{start:{line:134,column:4},end:{line:134,column:5}},loc:{start:{line:134,column:37},end:{line:145,column:5}},line:134},15:{name:"(anonymous_15)",decl:{start:{line:146,column:4},end:{line:146,column:5}},loc:{start:{line:146,column:36},end:{line:155,column:5}},line:146},16:{name:"(anonymous_16)",decl:{start:{line:156,column:4},end:{line:156,column:5}},loc:{start:{line:156,column:37},end:{line:165,column:5}},line:156},17:{name:"(anonymous_17)",decl:{start:{line:166,column:4},end:{line:166,column:5}},loc:{start:{line:166,column:34},end:{line:174,column:5}},line:166},18:{name:"(anonymous_18)",decl:{start:{line:175,column:4},end:{line:175,column:5}},loc:{start:{line:175,column:32},end:{line:185,column:5}},line:175}},branchMap:{0:{loc:{start:{line:42,column:16},end:{line:45,column:9}},type:"default-arg",locations:[{start:{line:42,column:29},end:{line:45,column:9}}],line:42},1:{loc:{start:{line:45,column:11},end:{line:45,column:30}},type:"default-arg",locations:[{start:{line:45,column:18},end:{line:45,column:30}}],line:45},2:{loc:{start:{line:45,column:32},end:{line:45,column:52}},type:"default-arg",locations:[{start:{line:45,column:40},end:{line:45,column:52}}],line:45},3:{loc:{start:{line:50,column:35},end:{line:50,column:48}},type:"binary-expr",locations:[{start:{line:50,column:35},end:{line:50,column:39}},{start:{line:50,column:43},end:{line:50,column:48}}],line:50},4:{loc:{start:{line:51,column:8},end:{line:52,column:46}},type:"if",locations:[{start:{line:51,column:8},end:{line:52,column:46}},{start:{line:51,column:8},end:{line:52,column:46}}],line:51},5:{loc:{start:{line:58,column:8},end:{line:65,column:9}},type:"if",locations:[{start:{line:58,column:8},end:{line:65,column:9}},{start:{line:58,column:8},end:{line:65,column:9}}],line:58},6:{loc:{start:{line:70,column:30},end:{line:70,column:68}},type:"binary-expr",locations:[{start:{line:70,column:30},end:{line:70,column:44}},{start:{line:70,column:48},end:{line:70,column:68}}],line:70},7:{loc:{start:{line:72,column:32},end:{line:73,column:93}},type:"binary-expr",locations:[{start:{line:72,column:32},end:{line:72,column:62}},{start:{line:73,column:15},end:{line:73,column:93}}],line:72},8:{loc:{start:{line:74,column:34},end:{line:75,column:71}},type:"binary-expr",locations:[{start:{line:74,column:34},end:{line:74,column:49}},{start:{line:74,column:53},end:{line:74,column:71}},{start:{line:75,column:15},end:{line:75,column:71}}],line:74},9:{loc:{start:{line:77,column:8},end:{line:85,column:9}},type:"if",locations:[{start:{line:77,column:8},end:{line:85,column:9}},{start:{line:77,column:8},end:{line:85,column:9}}],line:77},10:{loc:{start:{line:82,column:37},end:{line:82,column:101}},type:"cond-expr",locations:[{start:{line:82,column:53},end:{line:82,column:88}},{start:{line:82,column:91},end:{line:82,column:101}}],line:82},11:{loc:{start:{line:83,column:12},end:{line:84,column:44}},type:"if",locations:[{start:{line:83,column:12},end:{line:84,column:44}},{start:{line:83,column:12},end:{line:84,column:44}}],line:83},12:{loc:{start:{line:105,column:15},end:{line:106,column:109}},type:"binary-expr",locations:[{start:{line:105,column:16},end:{line:105,column:94}},{start:{line:106,column:16},end:{line:106,column:92}},{start:{line:106,column:98},end:{line:106,column:108}}],line:105},13:{loc:{start:{line:109,column:15},end:{line:110,column:109}},type:"binary-expr",locations:[{start:{line:109,column:16},end:{line:109,column:93}},{start:{line:110,column:16},end:{line:110,column:91}},{start:{line:110,column:97},end:{line:110,column:108}}],line:109},14:{loc:{start:{line:113,column:15},end:{line:113,column:78}},type:"binary-expr",locations:[{start:{line:113,column:16},end:{line:113,column:25}},{start:{line:113,column:31},end:{line:113,column:77}}],line:113},15:{loc:{start:{line:116,column:15},end:{line:116,column:69}},type:"binary-expr",locations:[{start:{line:116,column:16},end:{line:116,column:24}},{start:{line:116,column:30},end:{line:116,column:68}}],line:116},16:{loc:{start:{line:123,column:8},end:{line:132,column:9}},type:"switch",locations:[{start:{line:124,column:12},end:{line:126,column:22}},{start:{line:127,column:12},end:{line:129,column:22}},{start:{line:130,column:12},end:{line:131,column:22}}],line:123},17:{loc:{start:{line:140,column:8},end:{line:144,column:9}},type:"if",locations:[{start:{line:140,column:8},end:{line:144,column:9}},{start:{line:140,column:8},end:{line:144,column:9}}],line:140},18:{loc:{start:{line:148,column:8},end:{line:154,column:9}},type:"if",locations:[{start:{line:148,column:8},end:{line:154,column:9}},{start:{line:148,column:8},end:{line:154,column:9}}],line:148},19:{loc:{start:{line:151,column:13},end:{line:154,column:9}},type:"if",locations:[{start:{line:151,column:13},end:{line:154,column:9}},{start:{line:151,column:13},end:{line:154,column:9}}],line:151},20:{loc:{start:{line:157,column:8},end:{line:164,column:9}},type:"if",locations:[{start:{line:157,column:8},end:{line:164,column:9}},{start:{line:157,column:8},end:{line:164,column:9}}],line:157},21:{loc:{start:{line:170,column:37},end:{line:170,column:79}},type:"binary-expr",locations:[{start:{line:170,column:37},end:{line:170,column:66}},{start:{line:170,column:70},end:{line:170,column:79}}],line:170},22:{loc:{start:{line:171,column:8},end:{line:172,column:35}},type:"if",locations:[{start:{line:171,column:8},end:{line:172,column:35}},{start:{line:171,column:8},end:{line:172,column:35}}],line:171},23:{loc:{start:{line:177,column:8},end:{line:184,column:9}},type:"if",locations:[{start:{line:177,column:8},end:{line:184,column:9}},{start:{line:177,column:8},end:{line:184,column:9}}],line:177}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0,87:0,88:0,89:0,90:0,91:0,92:0,93:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0},b:{0:[0],1:[0],2:[0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0,0],9:[0,0],10:[0,0],11:[0,0],12:[0,0,0],13:[0,0,0],14:[0,0],15:[0,0],16:[0,0,0],17:[0,0],18:[0,0],19:[0,0],20:[0,0],21:[0,0],22:[0,0],23:[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Handles\\Handles.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Handles\\Handles.ts"],names:[],mappings:"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",sourcesContent:["import { RefreshIntervalPositions } from '../SelectedInterval/types';\r\nimport {\r\n  DataForAdjustPosition,\r\n  HandlesElementsInfo,\r\n  StaticElementsDescription,\r\n  HandleHideData,\r\n  RefreshHandlesData,\r\n  HandlesOverlaps,\r\n} from './types';\r\nimport { RefreshData } from '../types';\r\nimport { HandlesPosition } from '../Movement/types';\r\n\r\nexport class Handles {\r\n  readonly fromHandle: HTMLSpanElement;\r\n\r\n  readonly toHandle: HTMLSpanElement;\r\n\r\n  readonly fromValue: HTMLSpanElement;\r\n\r\n  readonly toValue: HTMLSpanElement;\r\n\r\n  public isInputChanges = false;\r\n\r\n  readonly staticElementsDescription: StaticElementsDescription = [\r\n    {\r\n      cssClasses: ['goby-slider__handle', 'goby-slider__handle_type_from'],\r\n      name: 'style',\r\n      value: 'display: inline-block',\r\n    },\r\n    {\r\n      cssClasses: ['goby-slider__handle', 'goby-slider__handle_type_to'],\r\n      name: 'style',\r\n      value: 'display: inline-block',\r\n    },\r\n    {\r\n      cssClasses: ['goby-slider__handle-value', 'goby-slider__handle-value_type_from'],\r\n      name: 'style',\r\n      value: 'display: inline-block',\r\n    },\r\n    {\r\n      cssClasses: ['goby-slider__handle-value', 'goby-slider__handle-value_type_to'],\r\n      name: 'style',\r\n      value: 'display: inline-block',\r\n    },\r\n  ];\r\n\r\n  constructor() {\r\n    this.fromHandle = Handles.createElement(this.staticElementsDescription[0]);\r\n    this.toHandle = Handles.createElement(this.staticElementsDescription[1]);\r\n    this.fromValue = Handles.createElement(this.staticElementsDescription[2]);\r\n    this.toValue = Handles.createElement(this.staticElementsDescription[3]);\r\n    this.fromHandle.append(this.fromValue);\r\n    this.toHandle.append(this.toValue);\r\n    this.prepareClassElements();\r\n  }\r\n\r\n  private prepareClassElements(): void {\r\n    this.fromHandle.append(this.fromValue);\r\n    this.toHandle.append(this.toValue);\r\n  }\r\n\r\n  static createElement(settings: HandlesElementsInfo): HTMLSpanElement {\r\n    const {\r\n      cssClasses = [\r\n        'for-change',\r\n        'for-change',\r\n      ],\r\n      name = 'for-change',\r\n      value = 'for-change',\r\n    } = settings;\r\n    const element: HTMLSpanElement = document.createElement('span');\r\n\r\n    cssClasses.forEach((cssClass: string) => {\r\n      element.classList.add(cssClass);\r\n    });\r\n\r\n    const isAssignValuesNeed = name && value;\r\n    if (isAssignValuesNeed) element.setAttribute(name, value);\r\n\r\n    return element;\r\n  }\r\n\r\n  private correctsHandlesOverlaps(settings: HandlesOverlaps) {\r\n    const { positions, sliderWidth } = settings;\r\n    const isToNotInExtra: boolean = positions.to < sliderWidth - this.toHandle.offsetWidth;\r\n\r\n    if (isToNotInExtra) {\r\n      this.toHandle.style.left = `${positions.from + this.fromHandle.offsetWidth}px`;\r\n      positions.to = positions.from + this.fromHandle.offsetWidth;\r\n    } else {\r\n      this.fromHandle.style.left = `${positions.to - this.fromHandle.offsetWidth}px`;\r\n      positions.from = positions.to - this.fromHandle.offsetWidth;\r\n    }\r\n  }\r\n\r\n  public refreshValues(data: RefreshData, positions: HandlesOverlaps): boolean {\r\n    const handlesData: RefreshHandlesData = data as RefreshHandlesData;\r\n    const target: 'fromValue' | 'toValue' = `${handlesData.target}Value`;\r\n    const isRoundUpNeed: boolean = data.isToFixed && !this.isInputChanges;\r\n    const differenceBetweenPositions: number = positions.positions.to - positions.positions.from;\r\n    const isExtraPosition = positions.positions.from === 0\r\n      || positions.positions.to === positions.sliderWidth - this.fromHandle.offsetWidth;\r\n    const isHandlesOverlaps: boolean = isExtraPosition && positions.isDouble\r\n      && differenceBetweenPositions < this.fromHandle.offsetWidth;\r\n\r\n    let result: boolean = true;\r\n    if (isHandlesOverlaps) {\r\n      this.correctsHandlesOverlaps(positions);\r\n      result = false;\r\n    } else {\r\n      this[target].innerText = isRoundUpNeed ? `${Math.round(Number(data.value))}` : data.value;\r\n      if (this.isInputChanges) this.isInputChanges = false;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public adjustPositions(dataToRefresh: DataForAdjustPosition, sliderWidth: number): RefreshIntervalPositions {\r\n    const handleLink: 'fromHandle' | 'toHandle' = `${dataToRefresh.target}Handle`;\r\n    const target = this[handleLink];\r\n\r\n    function calculateNewPosition(): string {\r\n      return String(((sliderWidth - target.offsetWidth) / dataToRefresh.totalValues)\r\n        * (Number(dataToRefresh.value) - Number(dataToRefresh.minValue)));\r\n    }\r\n\r\n    const newPosition: string = calculateNewPosition();\r\n    target.style.left = `${newPosition}px`;\r\n\r\n    return {\r\n      target: dataToRefresh.target,\r\n      position: newPosition,\r\n      sliderWidth: sliderWidth - target.offsetWidth,\r\n      handleWidth: target.offsetWidth,\r\n    };\r\n  }\r\n\r\n  private checkIsNeedToMakeVertical(isVertical: boolean): boolean {\r\n    return (!this.fromValue.classList.contains('goby-slider__handle-value_state_vertical'))\r\n      && (!this.toValue.classList.contains('goby-slider__handle-value_state_vertical')) && (isVertical);\r\n  }\r\n\r\n  private checkIsNeedToMakeHorizontally(isVertical: boolean): boolean {\r\n    return (this.fromValue.classList.contains('goby-slider__handle-value_state_vertical'))\r\n      && (this.toValue.classList.contains('goby-slider__handle-value_state_vertical')) && (!isVertical);\r\n  }\r\n\r\n  private checkIsToNeedHide(isDouble: boolean): boolean {\r\n    return (!isDouble) && (this.toHandle.style.display === 'inline-block');\r\n  }\r\n\r\n  private checkIsToNeedShow(isDouble: boolean): boolean {\r\n    return (isDouble) && (this.toHandle.style.display === 'none');\r\n  }\r\n\r\n  public changePlane(isVertical: boolean): void {\r\n    function changeVerticalClass(from: HTMLSpanElement, to: HTMLSpanElement) {\r\n      from.classList.toggle('goby-slider__handle-value_state_vertical');\r\n      to.classList.toggle('goby-slider__handle-value_state_vertical');\r\n    }\r\n\r\n    switch (true) {\r\n      case this.checkIsNeedToMakeVertical(isVertical):\r\n        changeVerticalClass(this.fromValue, this.toValue);\r\n        break;\r\n      case this.checkIsNeedToMakeHorizontally(isVertical):\r\n        changeVerticalClass(this.fromValue, this.toValue);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  private controlHandlesPosition(settings: HandleHideData) {\r\n    const { sliderWidth, positions } = settings;\r\n\r\n    const newPosition: number = sliderWidth - this.toHandle.offsetWidth;\r\n    this.toHandle.style.left = `${newPosition}px`;\r\n    positions.to = newPosition;\r\n    const isWrongFromPosition = positions.from > sliderWidth - this.toHandle.offsetWidth - this.fromHandle.offsetWidth;\r\n\r\n    if (isWrongFromPosition) {\r\n      const extremeFromPosition = String(sliderWidth - this.toHandle.offsetWidth - this.fromHandle.offsetWidth);\r\n      this.fromHandle.style.left = `${extremeFromPosition}px`;\r\n      positions.from = Number(extremeFromPosition);\r\n    }\r\n  }\r\n\r\n  public controlHandlesDisplay(settings: HandleHideData): void {\r\n    const { isDouble } = settings;\r\n\r\n    if (this.checkIsToNeedHide(isDouble)) {\r\n      this.toHandle.style.display = 'none';\r\n    } else if (this.checkIsToNeedShow(isDouble)) {\r\n      this.toHandle.style.display = 'inline-block';\r\n      this.controlHandlesPosition(settings);\r\n    }\r\n  }\r\n\r\n  public hideHandleValues(isHandleValues: boolean): void {\r\n    if (!isHandleValues) {\r\n      this.toValue.style.display = 'none';\r\n      this.fromValue.style.display = 'none';\r\n    } else {\r\n      this.toValue.style.display = 'inline-block';\r\n      this.fromValue.style.display = 'inline-block';\r\n    }\r\n  }\r\n\r\n  public selectsHandleToMove(settings: {\r\n    targetPosition: number,\r\n    positions: HandlesPosition,\r\n    isDouble: boolean,\r\n  }): HTMLSpanElement {\r\n    const { targetPosition, positions, isDouble } = settings;\r\n    const fromDifference = Math.abs(Number(positions.from) - Number(targetPosition));\r\n    const toDifference = Math.abs(Number(positions.to) - Number(targetPosition));\r\n    const isFromDifferenceLess = fromDifference < toDifference || !isDouble;\r\n\r\n    if (isFromDifferenceLess) return this.fromHandle;\r\n    return this.toHandle;\r\n  }\r\n\r\n  public acceptNewPosition(settings: {\r\n    target: HTMLSpanElement,\r\n    value: number,\r\n    positions: HandlesPosition,\r\n  }): void {\r\n    const { target, value, positions } = settings;\r\n\r\n    if (target === this.fromHandle) {\r\n      this.fromHandle.style.left = `${value}px`;\r\n      positions.from = value;\r\n    } else {\r\n      this.toHandle.style.left = `${value}px`;\r\n      positions.to = value;\r\n    }\r\n  }\r\n}\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(o=l[i="__coverage__"]||(l[i]={}))[n]&&o[n].hash===t?o[n]:(s.hash=t,o[n]=s));r.s[0]++,Object.defineProperty(A,"__esModule",{value:!0}),r.s[1]++,A.Handles=void 0;class a{constructor(){r.f[0]++,r.s[2]++,this.isInputChanges=!1,r.s[3]++,this.staticElementsDescription=[{cssClasses:["goby-slider__handle","goby-slider__handle_type_from"],name:"style",value:"display: inline-block"},{cssClasses:["goby-slider__handle","goby-slider__handle_type_to"],name:"style",value:"display: inline-block"},{cssClasses:["goby-slider__handle-value","goby-slider__handle-value_type_from"],name:"style",value:"display: inline-block"},{cssClasses:["goby-slider__handle-value","goby-slider__handle-value_type_to"],name:"style",value:"display: inline-block"}],r.s[4]++,this.fromHandle=a.createElement(this.staticElementsDescription[0]),r.s[5]++,this.toHandle=a.createElement(this.staticElementsDescription[1]),r.s[6]++,this.fromValue=a.createElement(this.staticElementsDescription[2]),r.s[7]++,this.toValue=a.createElement(this.staticElementsDescription[3]),r.s[8]++,this.fromHandle.append(this.fromValue),r.s[9]++,this.toHandle.append(this.toValue),r.s[10]++,this.prepareClassElements()}prepareClassElements(){r.f[1]++,r.s[11]++,this.fromHandle.append(this.fromValue),r.s[12]++,this.toHandle.append(this.toValue)}static createElement(e){r.f[2]++;const{cssClasses:A=(r.b[0][0]++,["for-change","for-change"]),name:n=(r.b[1][0]++,"for-change"),value:t=(r.b[2][0]++,"for-change")}=(r.s[13]++,e),l=(r.s[14]++,document.createElement("span"));r.s[15]++,A.forEach((e=>{r.f[3]++,r.s[16]++,l.classList.add(e)}));const i=(r.s[17]++,r.b[3][0]++,n&&(r.b[3][1]++,t));return r.s[18]++,i?(r.b[4][0]++,r.s[19]++,l.setAttribute(n,t)):r.b[4][1]++,r.s[20]++,l}correctsHandlesOverlaps(e){r.f[4]++;const{positions:A,sliderWidth:n}=(r.s[21]++,e),t=(r.s[22]++,A.to<n-this.toHandle.offsetWidth);r.s[23]++,t?(r.b[5][0]++,r.s[24]++,this.toHandle.style.left=`${A.from+this.fromHandle.offsetWidth}px`,r.s[25]++,A.to=A.from+this.fromHandle.offsetWidth):(r.b[5][1]++,r.s[26]++,this.fromHandle.style.left=A.to-this.fromHandle.offsetWidth+"px",r.s[27]++,A.from=A.to-this.fromHandle.offsetWidth)}refreshValues(e,A){r.f[5]++;const n=(r.s[28]++,e),t=(r.s[29]++,`${n.target}Value`),l=(r.s[30]++,r.b[6][0]++,e.isToFixed&&(r.b[6][1]++,!this.isInputChanges)),i=(r.s[31]++,A.positions.to-A.positions.from),s=(r.s[32]++,r.b[7][0]++,0===A.positions.from||(r.b[7][1]++,A.positions.to===A.sliderWidth-this.fromHandle.offsetWidth)),o=(r.s[33]++,r.b[8][0]++,s&&(r.b[8][1]++,A.isDouble)&&(r.b[8][2]++,i<this.fromHandle.offsetWidth));let a=(r.s[34]++,!0);return r.s[35]++,o?(r.b[9][0]++,r.s[36]++,this.correctsHandlesOverlaps(A),r.s[37]++,a=!1):(r.b[9][1]++,r.s[38]++,this[t].innerText=l?(r.b[10][0]++,`${Math.round(Number(e.value))}`):(r.b[10][1]++,e.value),r.s[39]++,this.isInputChanges?(r.b[11][0]++,r.s[40]++,this.isInputChanges=!1):r.b[11][1]++),r.s[41]++,a}adjustPositions(e,A){r.f[6]++;const n=(r.s[42]++,`${e.target}Handle`),t=(r.s[43]++,this[n]);const l=(r.s[45]++,r.f[7]++,r.s[44]++,String((A-t.offsetWidth)/e.totalValues*(Number(e.value)-Number(e.minValue))));return r.s[46]++,t.style.left=`${l}px`,r.s[47]++,{target:e.target,position:l,sliderWidth:A-t.offsetWidth,handleWidth:t.offsetWidth}}checkIsNeedToMakeVertical(e){return r.f[8]++,r.s[48]++,r.b[12][0]++,!this.fromValue.classList.contains("goby-slider__handle-value_state_vertical")&&(r.b[12][1]++,!this.toValue.classList.contains("goby-slider__handle-value_state_vertical"))&&(r.b[12][2]++,e)}checkIsNeedToMakeHorizontally(e){return r.f[9]++,r.s[49]++,r.b[13][0]++,this.fromValue.classList.contains("goby-slider__handle-value_state_vertical")&&(r.b[13][1]++,this.toValue.classList.contains("goby-slider__handle-value_state_vertical"))&&(r.b[13][2]++,!e)}checkIsToNeedHide(e){return r.f[10]++,r.s[50]++,r.b[14][0]++,!e&&(r.b[14][1]++,"inline-block"===this.toHandle.style.display)}checkIsToNeedShow(e){return r.f[11]++,r.s[51]++,r.b[15][0]++,e&&(r.b[15][1]++,"none"===this.toHandle.style.display)}changePlane(e){function A(e,A){r.f[13]++,r.s[52]++,e.classList.toggle("goby-slider__handle-value_state_vertical"),r.s[53]++,A.classList.toggle("goby-slider__handle-value_state_vertical")}switch(r.f[12]++,r.s[54]++,!0){case this.checkIsNeedToMakeVertical(e):r.b[16][0]++,r.s[55]++,A(this.fromValue,this.toValue),r.s[56]++;break;case this.checkIsNeedToMakeHorizontally(e):r.b[16][1]++,r.s[57]++,A(this.fromValue,this.toValue),r.s[58]++;break;default:r.b[16][2]++,r.s[59]++}}controlHandlesPosition(e){r.f[14]++;const{sliderWidth:A,positions:n}=(r.s[60]++,e),t=(r.s[61]++,A-this.toHandle.offsetWidth);r.s[62]++,this.toHandle.style.left=`${t}px`,r.s[63]++,n.to=t;const l=(r.s[64]++,n.from>A-this.toHandle.offsetWidth-this.fromHandle.offsetWidth);if(r.s[65]++,l){r.b[17][0]++;const e=(r.s[66]++,String(A-this.toHandle.offsetWidth-this.fromHandle.offsetWidth));r.s[67]++,this.fromHandle.style.left=`${e}px`,r.s[68]++,n.from=Number(e)}else r.b[17][1]++}controlHandlesDisplay(e){r.f[15]++;const{isDouble:A}=(r.s[69]++,e);r.s[70]++,this.checkIsToNeedHide(A)?(r.b[18][0]++,r.s[71]++,this.toHandle.style.display="none"):(r.b[18][1]++,r.s[72]++,this.checkIsToNeedShow(A)?(r.b[19][0]++,r.s[73]++,this.toHandle.style.display="inline-block",r.s[74]++,this.controlHandlesPosition(e)):r.b[19][1]++)}hideHandleValues(e){r.f[16]++,r.s[75]++,e?(r.b[20][1]++,r.s[78]++,this.toValue.style.display="inline-block",r.s[79]++,this.fromValue.style.display="inline-block"):(r.b[20][0]++,r.s[76]++,this.toValue.style.display="none",r.s[77]++,this.fromValue.style.display="none")}selectsHandleToMove(e){r.f[17]++;const{targetPosition:A,positions:n,isDouble:t}=(r.s[80]++,e),l=(r.s[81]++,Math.abs(Number(n.from)-Number(A))),i=(r.s[82]++,Math.abs(Number(n.to)-Number(A))),s=(r.s[83]++,r.b[21][0]++,l<i||(r.b[21][1]++,!t));return r.s[84]++,s?(r.b[22][0]++,r.s[85]++,this.fromHandle):(r.b[22][1]++,r.s[86]++,this.toHandle)}acceptNewPosition(e){r.f[18]++;const{target:A,value:n,positions:t}=(r.s[87]++,e);r.s[88]++,A===this.fromHandle?(r.b[23][0]++,r.s[89]++,this.fromHandle.style.left=`${n}px`,r.s[90]++,t.from=n):(r.b[23][1]++,r.s[91]++,this.toHandle.style.left=`${n}px`,r.s[92]++,t.to=n)}}r.s[93]++,A.Handles=a},330:function(e,A,n){"use strict";var t,l,i,s,o,r,a=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Movement\\Movement.ts",l="656c4587eb28ee9d864172244771ac35e04b71ce",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Movement\\Movement.ts",statementMap:{0:{start:{line:2,column:17},end:{line:7,column:1}},1:{start:{line:3,column:12},end:{line:3,column:28}},2:{start:{line:3,column:34},end:{line:3,column:125}},3:{start:{line:4,column:4},end:{line:5,column:150}},4:{start:{line:4,column:79},end:{line:4,column:131}},5:{start:{line:5,column:9},end:{line:5,column:150}},6:{start:{line:5,column:58},end:{line:5,column:150}},7:{start:{line:5,column:81},end:{line:5,column:150}},8:{start:{line:6,column:4},end:{line:6,column:66}},9:{start:{line:8,column:0},end:{line:8,column:62}},10:{start:{line:9,column:0},end:{line:9,column:26}},11:{start:{line:10,column:29},end:{line:10,column:58}},12:{start:{line:11,column:15},end:{line:181,column:1}},13:{start:{line:13,column:8},end:{line:13,column:38}},14:{start:{line:14,column:8},end:{line:14,column:40}},15:{start:{line:15,column:8},end:{line:15,column:36}},16:{start:{line:16,column:8},end:{line:16,column:47}},17:{start:{line:17,column:8},end:{line:17,column:42}},18:{start:{line:18,column:8},end:{line:18,column:46}},19:{start:{line:19,column:8},end:{line:24,column:9}},20:{start:{line:20,column:12},end:{line:20,column:35}},21:{start:{line:23,column:12},end:{line:23,column:32}},22:{start:{line:25,column:8},end:{line:28,column:10}},23:{start:{line:31,column:8},end:{line:31,column:88}},24:{start:{line:34,column:8},end:{line:34,column:90}},25:{start:{line:37,column:8},end:{line:37,column:36}},26:{start:{line:40,column:8},end:{line:41,column:91}},27:{start:{line:44,column:8},end:{line:45,column:93}},28:{start:{line:48,column:8},end:{line:48,column:122}},29:{start:{line:51,column:34},end:{line:51,column:102}},30:{start:{line:52,column:25},end:{line:52,column:65}},31:{start:{line:53,column:33},end:{line:53,column:60}},32:{start:{line:54,column:35},end:{line:55,column:76}},33:{start:{line:56,column:8},end:{line:56,column:77}},34:{start:{line:59,column:20},end:{line:59,column:31}},35:{start:{line:60,column:39},end:{line:68,column:9}},36:{start:{line:61,column:12},end:{line:62,column:84}},37:{start:{line:62,column:16},end:{line:62,column:84}},38:{start:{line:63,column:12},end:{line:65,column:13}},39:{start:{line:64,column:16},end:{line:64,column:86}},40:{start:{line:66,column:12},end:{line:67,column:40}},41:{start:{line:67,column:16},end:{line:67,column:40}},42:{start:{line:69,column:8},end:{line:70,column:22}},43:{start:{line:70,column:12},end:{line:70,column:22}},44:{start:{line:71,column:8},end:{line:72,column:36}},45:{start:{line:72,column:12},end:{line:72,column:36}},46:{start:{line:73,column:8},end:{line:75,column:9}},47:{start:{line:74,column:12},end:{line:74,column:37}},48:{start:{line:76,column:8},end:{line:76,column:21}},49:{start:{line:79,column:8},end:{line:79,column:112}},50:{start:{line:80,column:8},end:{line:81,column:64}},51:{start:{line:84,column:27},end:{line:84,column:47}},52:{start:{line:85,column:8},end:{line:85,column:47}},53:{start:{line:86,column:8},end:{line:91,column:9}},54:{start:{line:87,column:12},end:{line:87,column:46}},55:{start:{line:90,column:12},end:{line:90,column:44}},56:{start:{line:92,column:8},end:{line:92,column:40}},57:{start:{line:95,column:8},end:{line:95,column:122}},58:{start:{line:98,column:27},end:{line:98,column:55}},59:{start:{line:99,column:34},end:{line:100,column:63}},60:{start:{line:101,column:8},end:{line:110,column:9}},61:{start:{line:103,column:16},end:{line:103,column:51}},62:{start:{line:104,column:16},end:{line:104,column:22}},63:{start:{line:106,column:16},end:{line:106,column:119}},64:{start:{line:107,column:16},end:{line:107,column:22}},65:{start:{line:109,column:16},end:{line:109,column:22}},66:{start:{line:113,column:18},end:{line:113,column:31}},67:{start:{line:114,column:18},end:{line:114,column:31}},68:{start:{line:115,column:32},end:{line:115,column:97}},69:{start:{line:117,column:8},end:{line:122,column:9}},70:{start:{line:118,column:12},end:{line:118,column:49}},71:{start:{line:121,column:12},end:{line:121,column:47}},72:{start:{line:124,column:8},end:{line:129,column:9}},73:{start:{line:125,column:12},end:{line:125,column:138}},74:{start:{line:128,column:12},end:{line:128,column:111}},75:{start:{line:130,column:8},end:{line:130,column:84}},76:{start:{line:131,column:8},end:{line:136,column:9}},77:{start:{line:132,column:12},end:{line:132,column:66}},78:{start:{line:135,column:12},end:{line:135,column:47}},79:{start:{line:143,column:29},end:{line:143,column:36}},80:{start:{line:145,column:8},end:{line:150,column:9}},81:{start:{line:146,column:12},end:{line:146,column:31}},82:{start:{line:149,column:12},end:{line:149,column:29}},83:{start:{line:152,column:8},end:{line:157,column:9}},84:{start:{line:153,column:12},end:{line:153,column:103}},85:{start:{line:156,column:12},end:{line:156,column:81}},86:{start:{line:158,column:8},end:{line:163,column:9}},87:{start:{line:159,column:12},end:{line:162,column:15}},88:{start:{line:164,column:8},end:{line:167,column:10}},89:{start:{line:168,column:8},end:{line:168,column:34}},90:{start:{line:171,column:8},end:{line:171,column:80}},91:{start:{line:172,column:8},end:{line:172,column:76}},92:{start:{line:175,column:8},end:{line:175,column:36}},93:{start:{line:178,column:8},end:{line:178,column:77}},94:{start:{line:179,column:8},end:{line:179,column:73}},95:{start:{line:182,column:0},end:{line:184,column:13}},96:{start:{line:185,column:0},end:{line:185,column:28}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:46},end:{line:2,column:47}},loc:{start:{line:2,column:87},end:{line:7,column:1}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:26},end:{line:29,column:5}},line:12},2:{name:"(anonymous_2)",decl:{start:{line:30,column:4},end:{line:30,column:5}},loc:{start:{line:30,column:63},end:{line:32,column:5}},line:30},3:{name:"(anonymous_3)",decl:{start:{line:33,column:4},end:{line:33,column:5}},loc:{start:{line:33,column:65},end:{line:35,column:5}},line:33},4:{name:"(anonymous_4)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:20},end:{line:38,column:5}},line:36},5:{name:"(anonymous_5)",decl:{start:{line:39,column:4},end:{line:39,column:5}},loc:{start:{line:39,column:41},end:{line:42,column:5}},line:39},6:{name:"(anonymous_6)",decl:{start:{line:43,column:4},end:{line:43,column:5}},loc:{start:{line:43,column:42},end:{line:46,column:5}},line:43},7:{name:"(anonymous_7)",decl:{start:{line:47,column:4},end:{line:47,column:5}},loc:{start:{line:47,column:30},end:{line:49,column:5}},line:47},8:{name:"(anonymous_8)",decl:{start:{line:50,column:4},end:{line:50,column:5}},loc:{start:{line:50,column:60},end:{line:57,column:5}},line:50},9:{name:"(anonymous_9)",decl:{start:{line:58,column:4},end:{line:58,column:5}},loc:{start:{line:58,column:61},end:{line:77,column:5}},line:58},10:{name:"(anonymous_10)",decl:{start:{line:60,column:39},end:{line:60,column:40}},loc:{start:{line:60,column:45},end:{line:68,column:9}},line:60},11:{name:"(anonymous_11)",decl:{start:{line:78,column:4},end:{line:78,column:5}},loc:{start:{line:78,column:31},end:{line:82,column:5}},line:78},12:{name:"(anonymous_12)",decl:{start:{line:83,column:4},end:{line:83,column:5}},loc:{start:{line:83,column:34},end:{line:93,column:5}},line:83},13:{name:"(anonymous_13)",decl:{start:{line:94,column:4},end:{line:94,column:5}},loc:{start:{line:94,column:37},end:{line:96,column:5}},line:94},14:{name:"(anonymous_14)",decl:{start:{line:97,column:4},end:{line:97,column:5}},loc:{start:{line:97,column:53},end:{line:111,column:5}},line:97},15:{name:"(anonymous_15)",decl:{start:{line:112,column:4},end:{line:112,column:5}},loc:{start:{line:112,column:35},end:{line:137,column:5}},line:112},16:{name:"(anonymous_16)",decl:{start:{line:138,column:4},end:{line:138,column:5}},loc:{start:{line:138,column:28},end:{line:169,column:5}},line:138},17:{name:"(anonymous_17)",decl:{start:{line:170,column:4},end:{line:170,column:5}},loc:{start:{line:170,column:27},end:{line:173,column:5}},line:170},18:{name:"(anonymous_18)",decl:{start:{line:174,column:4},end:{line:174,column:5}},loc:{start:{line:174,column:28},end:{line:176,column:5}},line:174},19:{name:"(anonymous_19)",decl:{start:{line:177,column:4},end:{line:177,column:5}},loc:{start:{line:177,column:25},end:{line:180,column:5}},line:177}},branchMap:{0:{loc:{start:{line:2,column:17},end:{line:7,column:1}},type:"binary-expr",locations:[{start:{line:2,column:18},end:{line:2,column:22}},{start:{line:2,column:26},end:{line:2,column:41}},{start:{line:2,column:46},end:{line:7,column:1}}],line:2},1:{loc:{start:{line:3,column:34},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:42},end:{line:3,column:48}},{start:{line:3,column:51},end:{line:3,column:125}}],line:3},2:{loc:{start:{line:3,column:51},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:67},end:{line:3,column:118}},{start:{line:3,column:121},end:{line:3,column:125}}],line:3},3:{loc:{start:{line:4,column:4},end:{line:5,column:150}},type:"if",locations:[{start:{line:4,column:4},end:{line:5,column:150}},{start:{line:4,column:4},end:{line:5,column:150}}],line:4},4:{loc:{start:{line:4,column:8},end:{line:4,column:77}},type:"binary-expr",locations:[{start:{line:4,column:8},end:{line:4,column:35}},{start:{line:4,column:39},end:{line:4,column:77}}],line:4},5:{loc:{start:{line:5,column:58},end:{line:5,column:150}},type:"if",locations:[{start:{line:5,column:58},end:{line:5,column:150}},{start:{line:5,column:58},end:{line:5,column:150}}],line:5},6:{loc:{start:{line:5,column:85},end:{line:5,column:149}},type:"binary-expr",locations:[{start:{line:5,column:86},end:{line:5,column:143}},{start:{line:5,column:148},end:{line:5,column:149}}],line:5},7:{loc:{start:{line:5,column:86},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:94},end:{line:5,column:98}},{start:{line:5,column:101},end:{line:5,column:143}}],line:5},8:{loc:{start:{line:5,column:101},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:109},end:{line:5,column:126}},{start:{line:5,column:129},end:{line:5,column:143}}],line:5},9:{loc:{start:{line:6,column:11},end:{line:6,column:62}},type:"binary-expr",locations:[{start:{line:6,column:11},end:{line:6,column:16}},{start:{line:6,column:20},end:{line:6,column:21}},{start:{line:6,column:25},end:{line:6,column:62}}],line:6},10:{loc:{start:{line:19,column:8},end:{line:24,column:9}},type:"if",locations:[{start:{line:19,column:8},end:{line:24,column:9}},{start:{line:19,column:8},end:{line:24,column:9}}],line:19},11:{loc:{start:{line:31,column:15},end:{line:31,column:87}},type:"binary-expr",locations:[{start:{line:31,column:15},end:{line:31,column:44}},{start:{line:31,column:48},end:{line:31,column:87}}],line:31},12:{loc:{start:{line:34,column:15},end:{line:34,column:89}},type:"binary-expr",locations:[{start:{line:34,column:15},end:{line:34,column:44}},{start:{line:34,column:48},end:{line:34,column:89}}],line:34},13:{loc:{start:{line:40,column:15},end:{line:41,column:90}},type:"binary-expr",locations:[{start:{line:40,column:16},end:{line:40,column:57}},{start:{line:41,column:16},end:{line:41,column:89}}],line:40},14:{loc:{start:{line:44,column:15},end:{line:45,column:92}},type:"binary-expr",locations:[{start:{line:44,column:16},end:{line:44,column:55}},{start:{line:45,column:16},end:{line:45,column:91}}],line:44},15:{loc:{start:{line:48,column:15},end:{line:48,column:121}},type:"binary-expr",locations:[{start:{line:48,column:16},end:{line:48,column:44}},{start:{line:48,column:50},end:{line:48,column:84}},{start:{line:48,column:90},end:{line:48,column:120}}],line:48},16:{loc:{start:{line:54,column:35},end:{line:55,column:76}},type:"binary-expr",locations:[{start:{line:54,column:35},end:{line:54,column:97}},{start:{line:55,column:15},end:{line:55,column:76}}],line:54},17:{loc:{start:{line:56,column:15},end:{line:56,column:76}},type:"binary-expr",locations:[{start:{line:56,column:15},end:{line:56,column:32}},{start:{line:56,column:37},end:{line:56,column:53}},{start:{line:56,column:57},end:{line:56,column:75}}],line:56},18:{loc:{start:{line:61,column:12},end:{line:62,column:84}},type:"if",locations:[{start:{line:61,column:12},end:{line:62,column:84}},{start:{line:61,column:12},end:{line:62,column:84}}],line:61},19:{loc:{start:{line:63,column:12},end:{line:65,column:13}},type:"if",locations:[{start:{line:63,column:12},end:{line:65,column:13}},{start:{line:63,column:12},end:{line:65,column:13}}],line:63},20:{loc:{start:{line:66,column:12},end:{line:67,column:40}},type:"if",locations:[{start:{line:66,column:12},end:{line:67,column:40}},{start:{line:66,column:12},end:{line:67,column:40}}],line:66},21:{loc:{start:{line:69,column:8},end:{line:70,column:22}},type:"if",locations:[{start:{line:69,column:8},end:{line:70,column:22}},{start:{line:69,column:8},end:{line:70,column:22}}],line:69},22:{loc:{start:{line:71,column:8},end:{line:72,column:36}},type:"if",locations:[{start:{line:71,column:8},end:{line:72,column:36}},{start:{line:71,column:8},end:{line:72,column:36}}],line:71},23:{loc:{start:{line:73,column:8},end:{line:75,column:9}},type:"if",locations:[{start:{line:73,column:8},end:{line:75,column:9}},{start:{line:73,column:8},end:{line:75,column:9}}],line:73},24:{loc:{start:{line:86,column:8},end:{line:91,column:9}},type:"if",locations:[{start:{line:86,column:8},end:{line:91,column:9}},{start:{line:86,column:8},end:{line:91,column:9}}],line:86},25:{loc:{start:{line:95,column:15},end:{line:95,column:121}},type:"binary-expr",locations:[{start:{line:95,column:16},end:{line:95,column:33}},{start:{line:95,column:39},end:{line:95,column:120}}],line:95},26:{loc:{start:{line:101,column:8},end:{line:110,column:9}},type:"switch",locations:[{start:{line:102,column:12},end:{line:104,column:22}},{start:{line:105,column:12},end:{line:107,column:22}},{start:{line:108,column:12},end:{line:109,column:22}}],line:101},27:{loc:{start:{line:117,column:8},end:{line:122,column:9}},type:"if",locations:[{start:{line:117,column:8},end:{line:122,column:9}},{start:{line:117,column:8},end:{line:122,column:9}}],line:117},28:{loc:{start:{line:124,column:8},end:{line:129,column:9}},type:"if",locations:[{start:{line:124,column:8},end:{line:129,column:9}},{start:{line:124,column:8},end:{line:129,column:9}}],line:124},29:{loc:{start:{line:131,column:8},end:{line:136,column:9}},type:"if",locations:[{start:{line:131,column:8},end:{line:136,column:9}},{start:{line:131,column:8},end:{line:136,column:9}}],line:131},30:{loc:{start:{line:139,column:16},end:{line:143,column:9}},type:"default-arg",locations:[{start:{line:139,column:28},end:{line:143,column:9}}],line:139},31:{loc:{start:{line:143,column:11},end:{line:143,column:23}},type:"default-arg",locations:[{start:{line:143,column:18},end:{line:143,column:23}}],line:143},32:{loc:{start:{line:145,column:8},end:{line:150,column:9}},type:"if",locations:[{start:{line:145,column:8},end:{line:150,column:9}},{start:{line:145,column:8},end:{line:150,column:9}}],line:145},33:{loc:{start:{line:152,column:8},end:{line:157,column:9}},type:"if",locations:[{start:{line:152,column:8},end:{line:157,column:9}},{start:{line:152,column:8},end:{line:157,column:9}}],line:152},34:{loc:{start:{line:158,column:8},end:{line:163,column:9}},type:"if",locations:[{start:{line:158,column:8},end:{line:163,column:9}},{start:{line:158,column:8},end:{line:163,column:9}}],line:158}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0,87:0,88:0,89:0,90:0,91:0,92:0,93:0,94:0,95:0,96:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0},b:{0:[0,0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0,0],16:[0,0],17:[0,0,0],18:[0,0],19:[0,0],20:[0,0],21:[0,0],22:[0,0],23:[0,0],24:[0,0],25:[0,0],26:[0,0,0],27:[0,0],28:[0,0],29:[0,0],30:[0],31:[0],32:[0,0],33:[0,0],34:[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Movement\\Movement.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Movement\\Movement.ts"],names:[],mappings:"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",sourcesContent:["import autobind from 'autobind-decorator';\r\nimport { BasicViewSettings } from '../types';\r\nimport {\r\n  HandleClickData,\r\n  HandlesPosition,\r\n  MovementEvent,\r\n  MovementSettings,\r\n  TestMouseEvent,\r\n} from './types';\r\n\r\n@autobind\r\nexport class Movement {\r\n  readonly slider: HTMLDivElement;\r\n\r\n  readonly from: HTMLSpanElement;\r\n\r\n  readonly to: HTMLSpanElement;\r\n\r\n  readonly settings: BasicViewSettings;\r\n\r\n  readonly interval: HTMLDivElement;\r\n\r\n  public stepWidth: string | boolean;\r\n\r\n  public positions: HandlesPosition;\r\n\r\n  public dataForMovement: HandleClickData;\r\n\r\n  constructor(settings: MovementSettings) {\r\n    this.slider = settings.slider;\r\n    this.from = settings.fromHandle;\r\n    this.to = settings.toHandle;\r\n    this.settings = settings.basicSettings;\r\n    this.interval = settings.interval;\r\n    this.positions = { from: 0, to: 100 };\r\n    if (!this.settings.step) {\r\n      this.stepWidth = false;\r\n    } else {\r\n      this.stepWidth = '';\r\n    }\r\n    this.dataForMovement = {\r\n      distanceToCursor: 0,\r\n      target: this.from,\r\n    };\r\n  }\r\n\r\n  private checkIsToBiggerThanRightEdge(rightSliderEdge: number, newPosition: number): boolean {\r\n    return newPosition > rightSliderEdge && this.dataForMovement.target === this.to;\r\n  }\r\n\r\n  private checkIsFromBiggerThanRightEdge(rightSliderEdge: number, newPosition: number): boolean {\r\n    return newPosition > rightSliderEdge && this.dataForMovement.target === this.from;\r\n  }\r\n\r\n  private checkIsDouble(): boolean {\r\n    return this.settings.double;\r\n  }\r\n\r\n  private checkIsFromBiggerThanTo(newPosition: number): boolean {\r\n    return (this.dataForMovement.target === this.from)\r\n      && (newPosition > this.positions.to - this.dataForMovement.target.offsetWidth);\r\n  }\r\n\r\n  private checkIsToSmallerThanFrom(newPosition: number): boolean {\r\n    return (this.dataForMovement.target === this.to)\r\n      && (newPosition < this.positions.from + this.dataForMovement.target.offsetWidth);\r\n  }\r\n\r\n  private checkIsStepSetCorrectly(): boolean {\r\n    return (this.settings.step !== false) && (typeof this.stepWidth === 'string') && (Number(this.stepWidth) >= 0.01);\r\n  }\r\n\r\n  private checkIsStepWidthPassed(targetPosition: number, currentPosition: number): boolean {\r\n    const correctStepPassed = Math.abs(targetPosition - currentPosition) >= Number(this.stepWidth);\r\n    const stepRate: number = currentPosition / Number(this.stepWidth);\r\n    const isNotInStepRange: boolean = !Number.isInteger(stepRate);\r\n    const isRangeWherePassed: boolean = Math.floor(stepRate) * Number(this.stepWidth) > targetPosition\r\n      || Math.ceil(stepRate) * Number(this.stepWidth) < targetPosition;\r\n\r\n    return correctStepPassed || (isNotInStepRange && isRangeWherePassed);\r\n  }\r\n\r\n  public correctsImpossiblePosition(rightSliderEdge: number, newPosition: number): number {\r\n    let value: number = newPosition;\r\n\r\n    const correctDoublePositions = (): void => {\r\n      if (this.checkIsFromBiggerThanTo(newPosition)) value = this.positions.to - this.dataForMovement.target.offsetWidth;\r\n      if (this.checkIsToSmallerThanFrom(newPosition)) {\r\n        value = this.positions.from + this.dataForMovement.target.offsetWidth;\r\n      }\r\n      if (this.checkIsToBiggerThanRightEdge(rightSliderEdge, newPosition)) value = rightSliderEdge;\r\n    };\r\n\r\n    if (newPosition < 0) value = 0;\r\n    if (this.checkIsFromBiggerThanRightEdge(rightSliderEdge, newPosition)) value = rightSliderEdge;\r\n    if (this.checkIsDouble()) {\r\n      correctDoublePositions();\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  public correctsIntervalPosition(): void {\r\n    this.interval.style.left = `${(this.positions.from + (this.dataForMovement.target.offsetWidth / 2))}px`;\r\n    this.interval.style.right = `${(this.slider.offsetWidth - this.positions.to)\r\n    - (this.dataForMovement.target.offsetWidth / 2)}px`;\r\n  }\r\n\r\n  private applyNewPosition(newPosition: number): void {\r\n    const { target } = this.dataForMovement;\r\n    target.style.left = `${newPosition}px`;\r\n\r\n    if (this.dataForMovement.target === this.from) {\r\n      this.positions.from = newPosition;\r\n    } else {\r\n      this.positions.to = newPosition;\r\n    }\r\n\r\n    this.correctsIntervalPosition();\r\n  }\r\n\r\n  private checkIsEdgePosition(newPosition: number): boolean {\r\n    return (newPosition === 0) || (newPosition === this.slider.offsetWidth - this.dataForMovement.target.offsetWidth);\r\n  }\r\n\r\n  private controlStepMovement(newPosition: number, targetPosition: number): void {\r\n    const difference = newPosition - targetPosition;\r\n    const newTargetPosition: number = targetPosition + Number(this.stepWidth)\r\n      * (Math.trunc(difference / Number(this.stepWidth)));\r\n\r\n    switch (true) {\r\n      case this.checkIsEdgePosition(newPosition):\r\n        this.applyNewPosition(newPosition);\r\n        break;\r\n      case this.checkIsStepWidthPassed(newPosition, targetPosition):\r\n        this.applyNewPosition(\r\n          Math.round(newTargetPosition / Number(this.stepWidth)) * Number(this.stepWidth),\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  private handleDocumentMouseMove(event: MouseEvent | TestMouseEvent): void {\r\n    const x: number = event.clientX;\r\n    const y: number = event.clientY;\r\n    const rightSliderEdge: number = this.slider.offsetWidth - this.dataForMovement.target.offsetWidth;\r\n    let targetPosition: number;\r\n\r\n    if (this.dataForMovement.target === this.from) {\r\n      targetPosition = this.positions.from;\r\n    } else {\r\n      targetPosition = this.positions.to;\r\n    }\r\n\r\n    let newPosition: number;\r\n\r\n    if (this.settings.vertical) {\r\n      newPosition = this.slider.offsetWidth - (\r\n        y - this.dataForMovement.distanceToCursor - this.slider.getBoundingClientRect().top\r\n      );\r\n    } else {\r\n      newPosition = x - this.dataForMovement.distanceToCursor - this.slider.getBoundingClientRect().left;\r\n    }\r\n\r\n    newPosition = this.correctsImpossiblePosition(rightSliderEdge, newPosition);\r\n\r\n    if (this.checkIsStepSetCorrectly()) {\r\n      this.controlStepMovement(newPosition, targetPosition);\r\n    } else {\r\n      this.applyNewPosition(newPosition);\r\n    }\r\n  }\r\n\r\n  public handleListener(setting: MovementEvent): void {\r\n    const {\r\n      eventInfo = {\r\n        x: 0,\r\n        y: 0,\r\n        target: false,\r\n      },\r\n      test = false,\r\n    } = setting;\r\n\r\n    let target: HTMLSpanElement;\r\n    if (eventInfo.target === this.from) {\r\n      target = this.from;\r\n    } else {\r\n      target = this.to;\r\n    }\r\n\r\n    let distanceToCursor: number;\r\n    if (this.settings.vertical) {\r\n      distanceToCursor = eventInfo.y - target.getBoundingClientRect().top - (target.offsetWidth);\r\n    } else {\r\n      distanceToCursor = eventInfo.x - target.getBoundingClientRect().left;\r\n    }\r\n\r\n    if (test) {\r\n      this.handleDocumentMouseMove({\r\n        clientX: test.x,\r\n        clientY: test.y,\r\n      });\r\n    }\r\n\r\n    this.dataForMovement = {\r\n      target,\r\n      distanceToCursor,\r\n    };\r\n\r\n    this.bindEventListeners();\r\n  }\r\n\r\n  private removeEventListeners(): void {\r\n    document.removeEventListener('mousemove', this.handleDocumentMouseMove);\r\n    document.removeEventListener('mouseup', this.handleDocumentMouseUp);\r\n  }\r\n\r\n  private handleDocumentMouseUp(): void {\r\n    this.removeEventListeners();\r\n  }\r\n\r\n  private bindEventListeners(): void {\r\n    document.addEventListener('mousemove', this.handleDocumentMouseMove);\r\n    document.addEventListener('mouseup', this.handleDocumentMouseUp);\r\n  }\r\n}\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(r=i[s="__coverage__"]||(i[s]={}))[t]&&r[t].hash===l?r[t]:(o.hash=l,r[t]=o)),C=(a.s[0]++,a.b[0][0]++,this&&(a.b[0][1]++,this.__decorate)||(a.b[0][2]++,function(e,A,n,t){a.f[0]++;var l,i=(a.s[1]++,arguments.length),s=(a.s[2]++,i<3?(a.b[1][0]++,A):(a.b[1][1]++,null===t?(a.b[2][0]++,t=Object.getOwnPropertyDescriptor(A,n)):(a.b[2][1]++,t)));if(a.s[3]++,a.b[4][0]++,"object"==typeof Reflect&&(a.b[4][1]++,"function"==typeof Reflect.decorate))a.b[3][0]++,a.s[4]++,s=Reflect.decorate(e,A,n,t);else{a.b[3][1]++,a.s[5]++;for(var o=e.length-1;o>=0;o--)a.s[6]++,(l=e[o])?(a.b[5][0]++,a.s[7]++,a.b[6][0]++,s=(i<3?(a.b[7][0]++,l(s)):(a.b[7][1]++,i>3?(a.b[8][0]++,l(A,n,s)):(a.b[8][1]++,l(A,n))))||(a.b[6][1]++,s)):a.b[5][1]++}return a.s[8]++,a.b[9][0]++,i>3&&(a.b[9][1]++,s)&&(a.b[9][2]++,Object.defineProperty(A,n,s)),s}));a.s[9]++,Object.defineProperty(A,"__esModule",{value:!0}),a.s[10]++,A.Movement=void 0;const u=(a.s[11]++,n(572));a.s[12]++;let c=class{constructor(e){a.f[1]++,a.s[13]++,this.slider=e.slider,a.s[14]++,this.from=e.fromHandle,a.s[15]++,this.to=e.toHandle,a.s[16]++,this.settings=e.basicSettings,a.s[17]++,this.interval=e.interval,a.s[18]++,this.positions={from:0,to:100},a.s[19]++,this.settings.step?(a.b[10][1]++,a.s[21]++,this.stepWidth=""):(a.b[10][0]++,a.s[20]++,this.stepWidth=!1),a.s[22]++,this.dataForMovement={distanceToCursor:0,target:this.from}}checkIsToBiggerThanRightEdge(e,A){return a.f[2]++,a.s[23]++,a.b[11][0]++,A>e&&(a.b[11][1]++,this.dataForMovement.target===this.to)}checkIsFromBiggerThanRightEdge(e,A){return a.f[3]++,a.s[24]++,a.b[12][0]++,A>e&&(a.b[12][1]++,this.dataForMovement.target===this.from)}checkIsDouble(){return a.f[4]++,a.s[25]++,this.settings.double}checkIsFromBiggerThanTo(e){return a.f[5]++,a.s[26]++,a.b[13][0]++,this.dataForMovement.target===this.from&&(a.b[13][1]++,e>this.positions.to-this.dataForMovement.target.offsetWidth)}checkIsToSmallerThanFrom(e){return a.f[6]++,a.s[27]++,a.b[14][0]++,this.dataForMovement.target===this.to&&(a.b[14][1]++,e<this.positions.from+this.dataForMovement.target.offsetWidth)}checkIsStepSetCorrectly(){return a.f[7]++,a.s[28]++,a.b[15][0]++,!1!==this.settings.step&&(a.b[15][1]++,"string"==typeof this.stepWidth)&&(a.b[15][2]++,Number(this.stepWidth)>=.01)}checkIsStepWidthPassed(e,A){a.f[8]++;const n=(a.s[29]++,Math.abs(e-A)>=Number(this.stepWidth)),t=(a.s[30]++,A/Number(this.stepWidth)),l=(a.s[31]++,!Number.isInteger(t)),i=(a.s[32]++,a.b[16][0]++,Math.floor(t)*Number(this.stepWidth)>e||(a.b[16][1]++,Math.ceil(t)*Number(this.stepWidth)<e));return a.s[33]++,a.b[17][0]++,n||(a.b[17][1]++,l&&(a.b[17][2]++,i))}correctsImpossiblePosition(e,A){a.f[9]++;let n=(a.s[34]++,A);a.s[35]++;const t=()=>{a.f[10]++,a.s[36]++,this.checkIsFromBiggerThanTo(A)?(a.b[18][0]++,a.s[37]++,n=this.positions.to-this.dataForMovement.target.offsetWidth):a.b[18][1]++,a.s[38]++,this.checkIsToSmallerThanFrom(A)?(a.b[19][0]++,a.s[39]++,n=this.positions.from+this.dataForMovement.target.offsetWidth):a.b[19][1]++,a.s[40]++,this.checkIsToBiggerThanRightEdge(e,A)?(a.b[20][0]++,a.s[41]++,n=e):a.b[20][1]++};return a.s[42]++,A<0?(a.b[21][0]++,a.s[43]++,n=0):a.b[21][1]++,a.s[44]++,this.checkIsFromBiggerThanRightEdge(e,A)?(a.b[22][0]++,a.s[45]++,n=e):a.b[22][1]++,a.s[46]++,this.checkIsDouble()?(a.b[23][0]++,a.s[47]++,t()):a.b[23][1]++,a.s[48]++,n}correctsIntervalPosition(){a.f[11]++,a.s[49]++,this.interval.style.left=`${this.positions.from+this.dataForMovement.target.offsetWidth/2}px`,a.s[50]++,this.interval.style.right=this.slider.offsetWidth-this.positions.to-this.dataForMovement.target.offsetWidth/2+"px"}applyNewPosition(e){a.f[12]++;const{target:A}=(a.s[51]++,this.dataForMovement);a.s[52]++,A.style.left=`${e}px`,a.s[53]++,this.dataForMovement.target===this.from?(a.b[24][0]++,a.s[54]++,this.positions.from=e):(a.b[24][1]++,a.s[55]++,this.positions.to=e),a.s[56]++,this.correctsIntervalPosition()}checkIsEdgePosition(e){return a.f[13]++,a.s[57]++,a.b[25][0]++,0===e||(a.b[25][1]++,e===this.slider.offsetWidth-this.dataForMovement.target.offsetWidth)}controlStepMovement(e,A){a.f[14]++;const n=(a.s[58]++,e-A),t=(a.s[59]++,A+Number(this.stepWidth)*Math.trunc(n/Number(this.stepWidth)));switch(a.s[60]++,!0){case this.checkIsEdgePosition(e):a.b[26][0]++,a.s[61]++,this.applyNewPosition(e),a.s[62]++;break;case this.checkIsStepWidthPassed(e,A):a.b[26][1]++,a.s[63]++,this.applyNewPosition(Math.round(t/Number(this.stepWidth))*Number(this.stepWidth)),a.s[64]++;break;default:a.b[26][2]++,a.s[65]++}}handleDocumentMouseMove(e){a.f[15]++;const A=(a.s[66]++,e.clientX),n=(a.s[67]++,e.clientY),t=(a.s[68]++,this.slider.offsetWidth-this.dataForMovement.target.offsetWidth);let l,i;a.s[69]++,this.dataForMovement.target===this.from?(a.b[27][0]++,a.s[70]++,l=this.positions.from):(a.b[27][1]++,a.s[71]++,l=this.positions.to),a.s[72]++,this.settings.vertical?(a.b[28][0]++,a.s[73]++,i=this.slider.offsetWidth-(n-this.dataForMovement.distanceToCursor-this.slider.getBoundingClientRect().top)):(a.b[28][1]++,a.s[74]++,i=A-this.dataForMovement.distanceToCursor-this.slider.getBoundingClientRect().left),a.s[75]++,i=this.correctsImpossiblePosition(t,i),a.s[76]++,this.checkIsStepSetCorrectly()?(a.b[29][0]++,a.s[77]++,this.controlStepMovement(i,l)):(a.b[29][1]++,a.s[78]++,this.applyNewPosition(i))}handleListener(e){a.f[16]++;const{eventInfo:A=(a.b[30][0]++,{x:0,y:0,target:!1}),test:n=(a.b[31][0]++,!1)}=(a.s[79]++,e);let t,l;a.s[80]++,A.target===this.from?(a.b[32][0]++,a.s[81]++,t=this.from):(a.b[32][1]++,a.s[82]++,t=this.to),a.s[83]++,this.settings.vertical?(a.b[33][0]++,a.s[84]++,l=A.y-t.getBoundingClientRect().top-t.offsetWidth):(a.b[33][1]++,a.s[85]++,l=A.x-t.getBoundingClientRect().left),a.s[86]++,n?(a.b[34][0]++,a.s[87]++,this.handleDocumentMouseMove({clientX:n.x,clientY:n.y})):a.b[34][1]++,a.s[88]++,this.dataForMovement={target:t,distanceToCursor:l},a.s[89]++,this.bindEventListeners()}removeEventListeners(){a.f[17]++,a.s[90]++,document.removeEventListener("mousemove",this.handleDocumentMouseMove),a.s[91]++,document.removeEventListener("mouseup",this.handleDocumentMouseUp)}handleDocumentMouseUp(){a.f[18]++,a.s[92]++,this.removeEventListeners()}bindEventListeners(){a.f[19]++,a.s[93]++,document.addEventListener("mousemove",this.handleDocumentMouseMove),a.s[94]++,document.addEventListener("mouseup",this.handleDocumentMouseUp)}};a.s[95]++,c=C([u.default],c),a.s[96]++,A.Movement=c},414:function(e,A,n){"use strict";var t,l,i,s,o,r,a=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SelectedInterval\\SelectedInterval.ts",l="7c1b2b26ad8a54631fe0f4f8b1d752be226b6518",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SelectedInterval\\SelectedInterval.ts",statementMap:{0:{start:{line:2,column:17},end:{line:7,column:1}},1:{start:{line:3,column:12},end:{line:3,column:28}},2:{start:{line:3,column:34},end:{line:3,column:125}},3:{start:{line:4,column:4},end:{line:5,column:150}},4:{start:{line:4,column:79},end:{line:4,column:131}},5:{start:{line:5,column:9},end:{line:5,column:150}},6:{start:{line:5,column:58},end:{line:5,column:150}},7:{start:{line:5,column:81},end:{line:5,column:150}},8:{start:{line:6,column:4},end:{line:6,column:66}},9:{start:{line:8,column:0},end:{line:8,column:62}},10:{start:{line:9,column:0},end:{line:9,column:34}},11:{start:{line:10,column:29},end:{line:10,column:58}},12:{start:{line:11,column:23},end:{line:46,column:1}},13:{start:{line:13,column:8},end:{line:13,column:54}},14:{start:{line:14,column:8},end:{line:14,column:61}},15:{start:{line:15,column:8},end:{line:15,column:62}},16:{start:{line:18,column:8},end:{line:24,column:9}},17:{start:{line:19,column:12},end:{line:19,column:111}},18:{start:{line:22,column:12},end:{line:23,column:54}},19:{start:{line:27,column:8},end:{line:27,column:72}},20:{start:{line:30,column:8},end:{line:30,column:70}},21:{start:{line:33,column:42},end:{line:33,column:50}},22:{start:{line:34,column:8},end:{line:44,column:9}},23:{start:{line:36,column:16},end:{line:36,column:53}},24:{start:{line:37,column:16},end:{line:37,column:22}},25:{start:{line:39,column:16},end:{line:39,column:54}},26:{start:{line:40,column:16},end:{line:40,column:67}},27:{start:{line:41,column:16},end:{line:41,column:22}},28:{start:{line:43,column:16},end:{line:43,column:22}},29:{start:{line:47,column:0},end:{line:49,column:21}},30:{start:{line:50,column:0},end:{line:50,column:44}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:46},end:{line:2,column:47}},loc:{start:{line:2,column:87},end:{line:7,column:1}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:18},end:{line:16,column:5}},line:12},2:{name:"(anonymous_2)",decl:{start:{line:17,column:4},end:{line:17,column:5}},loc:{start:{line:17,column:47},end:{line:25,column:5}},line:17},3:{name:"(anonymous_3)",decl:{start:{line:26,column:4},end:{line:26,column:5}},loc:{start:{line:26,column:38},end:{line:28,column:5}},line:26},4:{name:"(anonymous_4)",decl:{start:{line:29,column:4},end:{line:29,column:5}},loc:{start:{line:29,column:38},end:{line:31,column:5}},line:29},5:{name:"(anonymous_5)",decl:{start:{line:32,column:4},end:{line:32,column:5}},loc:{start:{line:32,column:35},end:{line:45,column:5}},line:32}},branchMap:{0:{loc:{start:{line:2,column:17},end:{line:7,column:1}},type:"binary-expr",locations:[{start:{line:2,column:18},end:{line:2,column:22}},{start:{line:2,column:26},end:{line:2,column:41}},{start:{line:2,column:46},end:{line:7,column:1}}],line:2},1:{loc:{start:{line:3,column:34},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:42},end:{line:3,column:48}},{start:{line:3,column:51},end:{line:3,column:125}}],line:3},2:{loc:{start:{line:3,column:51},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:67},end:{line:3,column:118}},{start:{line:3,column:121},end:{line:3,column:125}}],line:3},3:{loc:{start:{line:4,column:4},end:{line:5,column:150}},type:"if",locations:[{start:{line:4,column:4},end:{line:5,column:150}},{start:{line:4,column:4},end:{line:5,column:150}}],line:4},4:{loc:{start:{line:4,column:8},end:{line:4,column:77}},type:"binary-expr",locations:[{start:{line:4,column:8},end:{line:4,column:35}},{start:{line:4,column:39},end:{line:4,column:77}}],line:4},5:{loc:{start:{line:5,column:58},end:{line:5,column:150}},type:"if",locations:[{start:{line:5,column:58},end:{line:5,column:150}},{start:{line:5,column:58},end:{line:5,column:150}}],line:5},6:{loc:{start:{line:5,column:85},end:{line:5,column:149}},type:"binary-expr",locations:[{start:{line:5,column:86},end:{line:5,column:143}},{start:{line:5,column:148},end:{line:5,column:149}}],line:5},7:{loc:{start:{line:5,column:86},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:94},end:{line:5,column:98}},{start:{line:5,column:101},end:{line:5,column:143}}],line:5},8:{loc:{start:{line:5,column:101},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:109},end:{line:5,column:126}},{start:{line:5,column:129},end:{line:5,column:143}}],line:5},9:{loc:{start:{line:6,column:11},end:{line:6,column:62}},type:"binary-expr",locations:[{start:{line:6,column:11},end:{line:6,column:16}},{start:{line:6,column:20},end:{line:6,column:21}},{start:{line:6,column:25},end:{line:6,column:62}}],line:6},10:{loc:{start:{line:18,column:8},end:{line:24,column:9}},type:"if",locations:[{start:{line:18,column:8},end:{line:24,column:9}},{start:{line:18,column:8},end:{line:24,column:9}}],line:18},11:{loc:{start:{line:27,column:15},end:{line:27,column:71}},type:"binary-expr",locations:[{start:{line:27,column:16},end:{line:27,column:25}},{start:{line:27,column:31},end:{line:27,column:70}}],line:27},12:{loc:{start:{line:30,column:15},end:{line:30,column:69}},type:"binary-expr",locations:[{start:{line:30,column:16},end:{line:30,column:24}},{start:{line:30,column:30},end:{line:30,column:68}}],line:30},13:{loc:{start:{line:34,column:8},end:{line:44,column:9}},type:"switch",locations:[{start:{line:35,column:12},end:{line:37,column:22}},{start:{line:38,column:12},end:{line:41,column:22}},{start:{line:42,column:12},end:{line:43,column:22}}],line:34}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0},f:{0:0,1:0,2:0,3:0,4:0,5:0},b:{0:[0,0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SelectedInterval\\SelectedInterval.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SelectedInterval\\SelectedInterval.ts"],names:[],mappings:";;;;;;;;;AAAA,2DAA0C;AAI1C,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;IAG3B;QACE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;QACrD,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;IACxD,CAAC;IAEM,2BAA2B,CAAC,aAAuC;QACxE,IAAI,aAAa,CAAC,MAAM,KAAK,MAAM,EAAE;YACnC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC;SACpG;aAAM;YACL,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,aAAa,CAAC,WAAW,GAAG,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;kBACrF,CAAC,aAAa,CAAC,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC;SACzC;IACH,CAAC;IAEO,uBAAuB,CAAC,QAAiB;QAC/C,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,KAAK,OAAO,CAAC,CAAC;IAClE,CAAC;IAEO,uBAAuB,CAAC,QAAiB;QAC/C,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,KAAK,MAAM,CAAC,CAAC;IAChE,CAAC;IAEM,oBAAoB,CAAC,QAA6B;QACvD,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,QAAQ,CAAC;QAE3C,QAAQ,IAAI,EAAE;YACZ,KAAK,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC;gBACzC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;gBACrC,MAAM;YACR,KAAK,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC;gBACzC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;gBACtC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,WAAW,GAAG,CAAC,IAAI,CAAC;gBACnD,MAAM;YACR;gBACE,MAAM;SACT;IACH,CAAC;CACF,CAAA;AAzCY,gBAAgB;IAD5B,4BAAQ;GACI,gBAAgB,CAyC5B;AAzCY,4CAAgB",sourcesContent:["import autobind from 'autobind-decorator';\r\nimport { IntervalDisplayData, RefreshIntervalPositions } from './types';\r\n\r\n@autobind\r\nexport class SelectedInterval {\r\n  readonly interval: HTMLDivElement;\r\n\r\n  constructor() {\r\n    this.interval = document.createElement('div');\r\n    this.interval.classList.add('goby-slider__interval');\r\n    this.interval.setAttribute('style', 'display: block');\r\n  }\r\n\r\n  public adjustPositionRelativeValue(dataToRefresh: RefreshIntervalPositions): void {\r\n    if (dataToRefresh.target === 'from') {\r\n      this.interval.style.left = `${Number(dataToRefresh.position) + (dataToRefresh.handleWidth / 2)}px`;\r\n    } else {\r\n      this.interval.style.right = `${dataToRefresh.sliderWidth - Number(dataToRefresh.position)\r\n        + (dataToRefresh.handleWidth / 2)}px`;\r\n    }\r\n  }\r\n\r\n  private checkIsIntervalNeedHide(isDouble: boolean): boolean {\r\n    return (!isDouble) && (this.interval.style.display === 'block');\r\n  }\r\n\r\n  private checkIsIntervalNeedShow(isDouble: boolean): boolean {\r\n    return (isDouble) && (this.interval.style.display === 'none');\r\n  }\r\n\r\n  public hideSelectedInterval(settings: IntervalDisplayData): void {\r\n    const { isDouble, handleWidth } = settings;\r\n\r\n    switch (true) {\r\n      case this.checkIsIntervalNeedHide(isDouble):\r\n        this.interval.style.display = 'none';\r\n        break;\r\n      case this.checkIsIntervalNeedShow(isDouble):\r\n        this.interval.style.display = 'block';\r\n        this.interval.style.right = `${handleWidth / 2}px`;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n}\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(r=i[s="__coverage__"]||(i[s]={}))[t]&&r[t].hash===l?r[t]:(o.hash=l,r[t]=o)),C=(a.s[0]++,a.b[0][0]++,this&&(a.b[0][1]++,this.__decorate)||(a.b[0][2]++,function(e,A,n,t){a.f[0]++;var l,i=(a.s[1]++,arguments.length),s=(a.s[2]++,i<3?(a.b[1][0]++,A):(a.b[1][1]++,null===t?(a.b[2][0]++,t=Object.getOwnPropertyDescriptor(A,n)):(a.b[2][1]++,t)));if(a.s[3]++,a.b[4][0]++,"object"==typeof Reflect&&(a.b[4][1]++,"function"==typeof Reflect.decorate))a.b[3][0]++,a.s[4]++,s=Reflect.decorate(e,A,n,t);else{a.b[3][1]++,a.s[5]++;for(var o=e.length-1;o>=0;o--)a.s[6]++,(l=e[o])?(a.b[5][0]++,a.s[7]++,a.b[6][0]++,s=(i<3?(a.b[7][0]++,l(s)):(a.b[7][1]++,i>3?(a.b[8][0]++,l(A,n,s)):(a.b[8][1]++,l(A,n))))||(a.b[6][1]++,s)):a.b[5][1]++}return a.s[8]++,a.b[9][0]++,i>3&&(a.b[9][1]++,s)&&(a.b[9][2]++,Object.defineProperty(A,n,s)),s}));a.s[9]++,Object.defineProperty(A,"__esModule",{value:!0}),a.s[10]++,A.SelectedInterval=void 0;const u=(a.s[11]++,n(572));a.s[12]++;let c=class{constructor(){a.f[1]++,a.s[13]++,this.interval=document.createElement("div"),a.s[14]++,this.interval.classList.add("goby-slider__interval"),a.s[15]++,this.interval.setAttribute("style","display: block")}adjustPositionRelativeValue(e){a.f[2]++,a.s[16]++,"from"===e.target?(a.b[10][0]++,a.s[17]++,this.interval.style.left=`${Number(e.position)+e.handleWidth/2}px`):(a.b[10][1]++,a.s[18]++,this.interval.style.right=e.sliderWidth-Number(e.position)+e.handleWidth/2+"px")}checkIsIntervalNeedHide(e){return a.f[3]++,a.s[19]++,a.b[11][0]++,!e&&(a.b[11][1]++,"block"===this.interval.style.display)}checkIsIntervalNeedShow(e){return a.f[4]++,a.s[20]++,a.b[12][0]++,e&&(a.b[12][1]++,"none"===this.interval.style.display)}hideSelectedInterval(e){a.f[5]++;const{isDouble:A,handleWidth:n}=(a.s[21]++,e);switch(a.s[22]++,!0){case this.checkIsIntervalNeedHide(A):a.b[13][0]++,a.s[23]++,this.interval.style.display="none",a.s[24]++;break;case this.checkIsIntervalNeedShow(A):a.b[13][1]++,a.s[25]++,this.interval.style.display="block",a.s[26]++,this.interval.style.right=n/2+"px",a.s[27]++;break;default:a.b[13][2]++,a.s[28]++}}};a.s[29]++,c=C([u.default],c),a.s[30]++,A.SelectedInterval=c},235:(e,A)=>{"use strict";var n,t,l,i,s,o,r=(n="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SideMenu\\SideMenu.ts",t="3f2bf1a4e461da84cfae0036b5bd93a48e927dad",l=new(0,function(){}.constructor)("return this")(),s={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SideMenu\\SideMenu.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:0},end:{line:3,column:26}},2:{start:{line:6,column:8},end:{line:6,column:36}},3:{start:{line:7,column:8},end:{line:7,column:35}},4:{start:{line:8,column:8},end:{line:8,column:34}},5:{start:{line:11,column:8},end:{line:14,column:11}},6:{start:{line:15,column:8},end:{line:19,column:11}},7:{start:{line:20,column:8},end:{line:23,column:11}},8:{start:{line:24,column:8},end:{line:28,column:11}},9:{start:{line:31,column:8},end:{line:34,column:11}},10:{start:{line:35,column:8},end:{line:38,column:11}},11:{start:{line:39,column:8},end:{line:42,column:11}},12:{start:{line:43,column:8},end:{line:47,column:11}},13:{start:{line:48,column:8},end:{line:52,column:11}},14:{start:{line:53,column:8},end:{line:57,column:11}},15:{start:{line:58,column:8},end:{line:62,column:11}},16:{start:{line:63,column:8},end:{line:68,column:11}},17:{start:{line:69,column:8},end:{line:72,column:11}},18:{start:{line:73,column:8},end:{line:76,column:11}},19:{start:{line:77,column:8},end:{line:80,column:11}},20:{start:{line:81,column:8},end:{line:84,column:11}},21:{start:{line:85,column:29},end:{line:85,column:78}},22:{start:{line:86,column:8},end:{line:86,column:83}},23:{start:{line:87,column:8},end:{line:87,column:81}},24:{start:{line:88,column:8},end:{line:88,column:76}},25:{start:{line:89,column:8},end:{line:89,column:78}},26:{start:{line:92,column:8},end:{line:96,column:11}},27:{start:{line:97,column:8},end:{line:101,column:11}},28:{start:{line:102,column:8},end:{line:106,column:11}},29:{start:{line:107,column:8},end:{line:111,column:11}},30:{start:{line:112,column:8},end:{line:116,column:11}},31:{start:{line:117,column:8},end:{line:121,column:11}},32:{start:{line:124,column:8},end:{line:128,column:11}},33:{start:{line:129,column:8},end:{line:133,column:11}},34:{start:{line:134,column:29},end:{line:134,column:71}},35:{start:{line:135,column:8},end:{line:135,column:76}},36:{start:{line:136,column:8},end:{line:136,column:74}},37:{start:{line:137,column:8},end:{line:137,column:71}},38:{start:{line:138,column:8},end:{line:141,column:11}},39:{start:{line:142,column:8},end:{line:145,column:11}},40:{start:{line:146,column:8},end:{line:149,column:11}},41:{start:{line:150,column:8},end:{line:153,column:11}},42:{start:{line:154,column:8},end:{line:158,column:11}},43:{start:{line:159,column:8},end:{line:162,column:11}},44:{start:{line:165,column:8},end:{line:169,column:11}},45:{start:{line:170,column:8},end:{line:174,column:11}},46:{start:{line:175,column:8},end:{line:179,column:11}},47:{start:{line:180,column:8},end:{line:184,column:11}},48:{start:{line:187,column:8},end:{line:187,column:29}},49:{start:{line:188,column:8},end:{line:188,column:30}},50:{start:{line:189,column:8},end:{line:189,column:28}},51:{start:{line:190,column:8},end:{line:190,column:29}},52:{start:{line:191,column:8},end:{line:191,column:32}},53:{start:{line:192,column:8},end:{line:195,column:11}},54:{start:{line:198,column:24},end:{line:198,column:66}},55:{start:{line:199,column:8},end:{line:201,column:11}},56:{start:{line:200,column:12},end:{line:200,column:44}},57:{start:{line:202,column:8},end:{line:203,column:53}},58:{start:{line:203,column:12},end:{line:203,column:53}},59:{start:{line:204,column:8},end:{line:205,column:84}},60:{start:{line:205,column:12},end:{line:205,column:84}},61:{start:{line:206,column:8},end:{line:206,column:23}},62:{start:{line:209,column:8},end:{line:209,column:170}},63:{start:{line:212,column:8},end:{line:212,column:87}},64:{start:{line:213,column:8},end:{line:213,column:83}},65:{start:{line:214,column:8},end:{line:214,column:87}},66:{start:{line:215,column:8},end:{line:215,column:89}},67:{start:{line:216,column:8},end:{line:216,column:89}},68:{start:{line:217,column:8},end:{line:217,column:284}},69:{start:{line:220,column:8},end:{line:220,column:123}},70:{start:{line:221,column:8},end:{line:221,column:127}},71:{start:{line:224,column:8},end:{line:224,column:153}},72:{start:{line:225,column:8},end:{line:225,column:151}},73:{start:{line:228,column:8},end:{line:228,column:147}},74:{start:{line:229,column:8},end:{line:229,column:145}},75:{start:{line:232,column:8},end:{line:232,column:132}},76:{start:{line:233,column:8},end:{line:233,column:130}},77:{start:{line:236,column:8},end:{line:236,column:138}},78:{start:{line:237,column:8},end:{line:237,column:136}},79:{start:{line:240,column:8},end:{line:240,column:28}},80:{start:{line:241,column:8},end:{line:241,column:39}},81:{start:{line:242,column:8},end:{line:242,column:29}},82:{start:{line:243,column:8},end:{line:243,column:40}},83:{start:{line:244,column:8},end:{line:244,column:38}},84:{start:{line:245,column:8},end:{line:245,column:32}},85:{start:{line:246,column:8},end:{line:246,column:34}},86:{start:{line:247,column:8},end:{line:247,column:326}},87:{start:{line:250,column:30},end:{line:250,column:75}},88:{start:{line:251,column:35},end:{line:251,column:102}},89:{start:{line:251,column:47},end:{line:251,column:101}},90:{start:{line:252,column:8},end:{line:269,column:9}},91:{start:{line:254,column:16},end:{line:254,column:95}},92:{start:{line:255,column:16},end:{line:255,column:94}},93:{start:{line:256,column:16},end:{line:256,column:22}},94:{start:{line:258,column:16},end:{line:258,column:101}},95:{start:{line:259,column:16},end:{line:259,column:92}},96:{start:{line:260,column:16},end:{line:260,column:22}},97:{start:{line:262,column:16},end:{line:262,column:77}},98:{start:{line:263,column:16},end:{line:263,column:22}},99:{start:{line:265,column:16},end:{line:265,column:77}},100:{start:{line:266,column:16},end:{line:266,column:22}},101:{start:{line:268,column:16},end:{line:268,column:22}},102:{start:{line:270,column:8},end:{line:270,column:36}},103:{start:{line:273,column:30},end:{line:276,column:9}},104:{start:{line:274,column:12},end:{line:274,column:71}},105:{start:{line:275,column:12},end:{line:275,column:66}},106:{start:{line:277,column:8},end:{line:282,column:9}},107:{start:{line:278,column:12},end:{line:278,column:42}},108:{start:{line:281,column:12},end:{line:281,column:45}},109:{start:{line:285,column:0},end:{line:285,column:28}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:18},end:{line:9,column:5}},line:5},1:{name:"(anonymous_1)",decl:{start:{line:10,column:4},end:{line:10,column:5}},loc:{start:{line:10,column:20},end:{line:29,column:5}},line:10},2:{name:"(anonymous_2)",decl:{start:{line:30,column:4},end:{line:30,column:5}},loc:{start:{line:30,column:21},end:{line:90,column:5}},line:30},3:{name:"(anonymous_3)",decl:{start:{line:91,column:4},end:{line:91,column:5}},loc:{start:{line:91,column:19},end:{line:122,column:5}},line:91},4:{name:"(anonymous_4)",decl:{start:{line:123,column:4},end:{line:123,column:5}},loc:{start:{line:123,column:20},end:{line:163,column:5}},line:123},5:{name:"(anonymous_5)",decl:{start:{line:164,column:4},end:{line:164,column:5}},loc:{start:{line:164,column:23},end:{line:185,column:5}},line:164},6:{name:"(anonymous_6)",decl:{start:{line:186,column:4},end:{line:186,column:5}},loc:{start:{line:186,column:25},end:{line:196,column:5}},line:186},7:{name:"(anonymous_7)",decl:{start:{line:197,column:4},end:{line:197,column:5}},loc:{start:{line:197,column:40},end:{line:207,column:5}},line:197},8:{name:"(anonymous_8)",decl:{start:{line:199,column:41},end:{line:199,column:42}},loc:{start:{line:199,column:55},end:{line:201,column:9}},line:199},9:{name:"(anonymous_9)",decl:{start:{line:208,column:4},end:{line:208,column:5}},loc:{start:{line:208,column:19},end:{line:210,column:5}},line:208},10:{name:"(anonymous_10)",decl:{start:{line:211,column:4},end:{line:211,column:5}},loc:{start:{line:211,column:30},end:{line:218,column:5}},line:211},11:{name:"(anonymous_11)",decl:{start:{line:219,column:4},end:{line:219,column:5}},loc:{start:{line:219,column:20},end:{line:222,column:5}},line:219},12:{name:"(anonymous_12)",decl:{start:{line:223,column:4},end:{line:223,column:5}},loc:{start:{line:223,column:31},end:{line:226,column:5}},line:223},13:{name:"(anonymous_13)",decl:{start:{line:227,column:4},end:{line:227,column:5}},loc:{start:{line:227,column:29},end:{line:230,column:5}},line:227},14:{name:"(anonymous_14)",decl:{start:{line:231,column:4},end:{line:231,column:5}},loc:{start:{line:231,column:23},end:{line:234,column:5}},line:231},15:{name:"(anonymous_15)",decl:{start:{line:235,column:4},end:{line:235,column:5}},loc:{start:{line:235,column:25},end:{line:238,column:5}},line:235},16:{name:"(anonymous_16)",decl:{start:{line:239,column:4},end:{line:239,column:5}},loc:{start:{line:239,column:22},end:{line:248,column:5}},line:239},17:{name:"(anonymous_17)",decl:{start:{line:249,column:4},end:{line:249,column:5}},loc:{start:{line:249,column:31},end:{line:271,column:5}},line:249},18:{name:"(anonymous_18)",decl:{start:{line:251,column:35},end:{line:251,column:36}},loc:{start:{line:251,column:47},end:{line:251,column:101}},line:251},19:{name:"(anonymous_19)",decl:{start:{line:272,column:4},end:{line:272,column:5}},loc:{start:{line:272,column:33},end:{line:283,column:5}},line:272},20:{name:"(anonymous_20)",decl:{start:{line:273,column:30},end:{line:273,column:31}},loc:{start:{line:273,column:49},end:{line:276,column:9}},line:273}},branchMap:{0:{loc:{start:{line:202,column:8},end:{line:203,column:53}},type:"if",locations:[{start:{line:202,column:8},end:{line:203,column:53}},{start:{line:202,column:8},end:{line:203,column:53}}],line:202},1:{loc:{start:{line:204,column:8},end:{line:205,column:84}},type:"if",locations:[{start:{line:204,column:8},end:{line:205,column:84}},{start:{line:204,column:8},end:{line:205,column:84}}],line:204},2:{loc:{start:{line:250,column:30},end:{line:250,column:75}},type:"binary-expr",locations:[{start:{line:250,column:30},end:{line:250,column:51}},{start:{line:250,column:55},end:{line:250,column:75}}],line:250},3:{loc:{start:{line:251,column:47},end:{line:251,column:101}},type:"cond-expr",locations:[{start:{line:251,column:63},end:{line:251,column:93}},{start:{line:251,column:96},end:{line:251,column:101}}],line:251},4:{loc:{start:{line:252,column:8},end:{line:269,column:9}},type:"switch",locations:[{start:{line:253,column:12},end:{line:256,column:22}},{start:{line:257,column:12},end:{line:260,column:22}},{start:{line:261,column:12},end:{line:263,column:22}},{start:{line:264,column:12},end:{line:266,column:22}},{start:{line:267,column:12},end:{line:268,column:22}}],line:252},5:{loc:{start:{line:277,column:8},end:{line:282,column:9}},type:"if",locations:[{start:{line:277,column:8},end:{line:282,column:9}},{start:{line:277,column:8},end:{line:282,column:9}}],line:277}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0,87:0,88:0,89:0,90:0,91:0,92:0,93:0,94:0,95:0,96:0,97:0,98:0,99:0,100:0,101:0,102:0,103:0,104:0,105:0,106:0,107:0,108:0,109:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0,0,0,0],5:[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SideMenu\\SideMenu.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\SideMenu\\SideMenu.ts"],names:[],mappings:";;;AAGA,MAAa,QAAQ;IAKnB;QAFO,mBAAc,GAAG,KAAK,CAAC;QAG5B,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAEO,aAAa;QACnB,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,GAAG,QAAQ,CAAC,aAAa,CAAC;YAClE,IAAI,EAAE,KAAK;YACX,UAAU,EAAE,CAAC,8BAA8B,CAAC;SAC7C,CAAmB,CAAC;QACrB,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,GAAG,QAAQ,CAAC,aAAa,CAAC;YACpE,IAAI,EAAE,MAAM;YACZ,UAAU,EAAE,CAAC,gCAAgC,CAAC;YAC9C,IAAI,EAAE,oBAAoB;SAC3B,CAAoB,CAAC;QACtB,IAAI,CAAC,gBAAgB,CAAC,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC;YACxD,IAAI,EAAE,QAAQ;YACd,UAAU,EAAE,CAAC,uBAAuB,EAAE,iCAAiC,CAAC;SACzE,CAAsB,CAAC;QACxB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC;YACtD,IAAI,EAAE,QAAQ;YACd,UAAU,EAAE,CAAC,uBAAuB,EAAE,+BAA+B,CAAC;YACtE,IAAI,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,iBAAiB,EAAE;SAClD,CAAsB,CAAC;IAC1B,CAAC;IAEO,cAAc;QACpB,IAAI,CAAC,gBAAgB,CAAC,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC;YACvD,IAAI,EAAE,KAAK;YACX,UAAU,EAAE,CAAC,8BAA8B,CAAC;SAC7C,CAAmB,CAAC;QAErB,IAAI,CAAC,gBAAgB,CAAC,eAAe,GAAG,QAAQ,CAAC,aAAa,CAAC;YAC7D,IAAI,EAAE,OAAO;YACb,UAAU,EAAE,CAAC,qCAAqC,CAAC;SACpD,CAAqB,CAAC;QAEvB,IAAI,CAAC,gBAAgB,CAAC,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC;YAC1D,IAAI,EAAE,KAAK;YACX,UAAU,EAAE,CAAC,8BAA8B,CAAC;SAC7C,CAAmB,CAAC;QAErB,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,GAAG,QAAQ,CAAC,aAAa,CAAC;YAC9D,IAAI,EAAE,OAAO;YACb,UAAU,EAAE,CAAC,+BAA+B,CAAC;YAC7C,IAAI,EAAE,MAAM;SACb,CAAqB,CAAC;QAEvB,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,GAAG,QAAQ,CAAC,aAAa,CAAC;YAC9D,IAAI,EAAE,OAAO;YACb,UAAU,EAAE,CAAC,+BAA+B,CAAC;YAC7C,IAAI,EAAE,OAAO;SACd,CAAqB,CAAC;QAEvB,IAAI,CAAC,gBAAgB,CAAC,eAAe,GAAG,QAAQ,CAAC,aAAa,CAAC;YAC7D,IAAI,EAAE,OAAO;YACb,UAAU,EAAE,CAAC,+BAA+B,CAAC;YAC7C,IAAI,EAAE,OAAO;SACd,CAAqB,CAAC;QAEvB,IAAI,CAAC,gBAAgB,CAAC,eAAe,GAAG,QAAQ,CAAC,aAAa,CAAC;YAC7D,IAAI,EAAE,OAAO;YACb,UAAU,EAAE,CAAC,+BAA+B,CAAC;YAC7C,IAAI,EAAE,QAAQ;SACf,CAAqB,CAAC;QAEvB,IAAI,CAAC,gBAAgB,CAAC,cAAc,GAAG,QAAQ,CAAC,aAAa,CAAC;YAC5D,IAAI,EAAE,OAAO;YACb,UAAU,EAAE,CAAC,+BAA+B,CAAC;YAC7C,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,gBAAgB,EAAE;SACjD,CAAqB,CAAC;QAEvB,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,GAAG,QAAQ,CAAC,aAAa,CAAC;YACjE,IAAI,EAAE,KAAK;YACX,UAAU,EAAE,CAAC,8BAA8B,CAAC;SAC7C,CAAmB,CAAC;QAErB,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,GAAG,QAAQ,CAAC,aAAa,CAAC;YAC/D,IAAI,EAAE,KAAK;YACX,UAAU,EAAE,CAAC,8BAA8B,CAAC;SAC7C,CAAmB,CAAC;QAErB,IAAI,CAAC,gBAAgB,CAAC,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC;YAC1D,IAAI,EAAE,KAAK;YACX,UAAU,EAAE,CAAC,8BAA8B,CAAC;SAC7C,CAAmB,CAAC;QAErB,IAAI,CAAC,gBAAgB,CAAC,cAAc,GAAG,QAAQ,CAAC,aAAa,CAAC;YAC5D,IAAI,EAAE,KAAK;YACX,UAAU,EAAE,CAAC,8BAA8B,CAAC;SAC7C,CAAmB,CAAC;QAErB,MAAM,YAAY,GAAS,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,SAAS,EAAE,CAAC;QAC7E,IAAI,CAAC,gBAAgB,CAAC,yBAAyB,GAAG,YAAY,CAAC,SAAS,EAAsB,CAAC;QAC/F,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,GAAG,YAAY,CAAC,SAAS,EAAsB,CAAC;QAC7F,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,GAAG,YAAY,CAAC,SAAS,EAAsB,CAAC;QACxF,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,GAAG,YAAY,CAAC,SAAS,EAAsB,CAAC;IAC5F,CAAC;IAEO,YAAY;QAClB,IAAI,CAAC,gBAAgB,CAAC,cAAc,GAAG,QAAQ,CAAC,aAAa,CAAC;YAC5D,IAAI,EAAE,MAAM;YACZ,UAAU,EAAE,CAAC,gCAAgC,CAAC;YAC9C,IAAI,EAAE,qBAAqB;SAC5B,CAAoB,CAAC;QACtB,IAAI,CAAC,gBAAgB,CAAC,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC;YACvD,IAAI,EAAE,OAAO;YACb,UAAU,EAAE,CAAC,uBAAuB,CAAC;YACrC,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE;SACxC,CAAqB,CAAC;QACvB,IAAI,CAAC,gBAAgB,CAAC,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC;YACrD,IAAI,EAAE,OAAO;YACb,UAAU,EAAE,CAAC,uBAAuB,CAAC;YACrC,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE;SACxC,CAAqB,CAAC;QACvB,IAAI,CAAC,gBAAgB,CAAC,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC;YACvD,IAAI,EAAE,OAAO;YACb,UAAU,EAAE,CAAC,uBAAuB,CAAC;YACrC,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE;SACxC,CAAqB,CAAC;QACvB,IAAI,CAAC,gBAAgB,CAAC,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC;YAC1D,IAAI,EAAE,OAAO;YACb,UAAU,EAAE,CAAC,uBAAuB,CAAC;YACrC,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE;SACxC,CAAqB,CAAC;QACvB,IAAI,CAAC,gBAAgB,CAAC,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC;YAC1D,IAAI,EAAE,OAAO;YACb,UAAU,EAAE,CAAC,uBAAuB,CAAC;YACrC,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE;SACxC,CAAqB,CAAC;IACzB,CAAC;IAEO,aAAa;QACnB,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,GAAG,QAAQ,CAAC,aAAa,CAAC;YAC/D,IAAI,EAAE,MAAM;YACZ,UAAU,EAAE,CAAC,gCAAgC,CAAC;YAC9C,IAAI,EAAE,4BAA4B;SACnC,CAAoB,CAAC;QAEtB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC;YACtD,IAAI,EAAE,OAAO;YACb,UAAU,EAAE,CAAC,6BAA6B,CAAC;YAC3C,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE;SAC1C,CAAqB,CAAC;QACvB,MAAM,YAAY,GAAS,IAAI,CAAC,gBAAiB,CAAC,QAAS,CAAC,SAAS,EAAE,CAAC;QACxE,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,GAAG,YAAY,CAAC,SAAS,EAAsB,CAAC;QACxF,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,GAAG,YAAY,CAAC,SAAS,EAAsB,CAAC;QACtF,IAAI,CAAC,gBAAgB,CAAC,aAAa,GAAG,YAAY,CAAC,SAAS,EAAsB,CAAC;QAEnF,IAAI,CAAC,gBAAgB,CAAC,cAAc,GAAG,QAAQ,CAAC,aAAa,CAAC;YAC5D,IAAI,EAAE,MAAM;YACZ,UAAU,EAAE,CAAC,oCAAoC,CAAC;SACnD,CAAoB,CAAC;QAEtB,IAAI,CAAC,gBAAgB,CAAC,wBAAwB,GAAG,QAAQ,CAAC,aAAa,CAAC;YACtE,IAAI,EAAE,MAAM;YACZ,UAAU,EAAE,CAAC,oCAAoC,CAAC;SACnD,CAAoB,CAAC;QAEtB,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,GAAG,QAAQ,CAAC,aAAa,CAAC;YACpE,IAAI,EAAE,MAAM;YACZ,UAAU,EAAE,CAAC,oCAAoC,CAAC;SACnD,CAAoB,CAAC;QAEtB,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,GAAG,QAAQ,CAAC,aAAa,CAAC;YACjE,IAAI,EAAE,MAAM;YACZ,UAAU,EAAE,CAAC,oCAAoC,CAAC;SACnD,CAAoB,CAAC;QAEtB,IAAI,CAAC,gBAAgB,CAAC,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC;YACzD,IAAI,EAAE,OAAO;YACb,UAAU,EAAE,CAAC,6BAA6B,CAAC;YAC3C,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE;SAC1C,CAAqB,CAAC;QAEvB,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,GAAG,QAAQ,CAAC,aAAa,CAAC;YAC/D,IAAI,EAAE,MAAM;YACZ,UAAU,EAAE,CAAC,oCAAoC,CAAC;SACnD,CAAoB,CAAC;IACxB,CAAC;IAEO,gBAAgB;QACtB,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,GAAG,QAAQ,CAAC,aAAa,CAAC;YACnE,IAAI,EAAE,MAAM;YACZ,UAAU,EAAE,CAAC,gCAAgC,CAAC;YAC9C,IAAI,EAAE,oCAAoC;SAC3C,CAAoB,CAAC;QAEtB,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,GAAG,QAAQ,CAAC,aAAa,CAAC;YACjE,IAAI,EAAE,MAAM;YACZ,UAAU,EAAE,CAAC,gCAAgC,CAAC;YAC9C,IAAI,EAAE,2BAA2B;SAClC,CAAoB,CAAC;QAEtB,IAAI,CAAC,gBAAgB,CAAC,cAAc,GAAG,QAAQ,CAAC,aAAa,CAAC;YAC5D,IAAI,EAAE,MAAM;YACZ,UAAU,EAAE,CAAC,gCAAgC,CAAC;YAC9C,IAAI,EAAE,sBAAsB;SAC7B,CAAoB,CAAC;QAEtB,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,GAAG,QAAQ,CAAC,aAAa,CAAC;YAC9D,IAAI,EAAE,MAAM;YACZ,UAAU,EAAE,CAAC,gCAAgC,CAAC;YAC9C,IAAI,EAAE,sBAAsB;SAC7B,CAAoB,CAAC;IACxB,CAAC;IAEO,kBAAkB;QACxB,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAExB,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,GAAG,QAAQ,CAAC,aAAa,CAAC;YAC/D,IAAI,EAAE,KAAK;YACX,UAAU,EAAE,CAAC,gBAAgB,CAAC;SAC/B,CAAmB,CAAC;IACvB,CAAC;IAEO,MAAM,CAAC,aAAa,CAAC,aAA4B;QACvD,MAAM,OAAO,GAAgB,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAExE,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,QAAgB,EAAQ,EAAE;YAC1D,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,IAAI,aAAa,CAAC,IAAI;YAAE,OAAO,CAAC,WAAW,GAAG,aAAa,CAAC,IAAI,CAAC;QACjE,IAAI,aAAa,CAAC,IAAI;YAAE,OAAO,CAAC,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEhG,OAAO,OAAO,CAAC;IACjB,CAAC;IAEO,YAAY;QAClB,IAAI,CAAC,gBAAgB,CAAC,oBAAqB,CAAC,MAAM,CAChD,IAAI,CAAC,gBAAgB,CAAC,sBAAuB,EAC7C,IAAI,CAAC,gBAAgB,CAAC,UAAW,EACjC,IAAI,CAAC,gBAAgB,CAAC,QAAS,CAChC,CAAC;IACJ,CAAC;IAEO,uBAAuB;QAC7B,IAAI,CAAC,gBAAgB,CAAC,gBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAU,CAAC,CAAC;QACjF,IAAI,CAAC,gBAAgB,CAAC,cAAe,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAQ,CAAC,CAAC;QAC7E,IAAI,CAAC,gBAAgB,CAAC,gBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAU,CAAC,CAAC;QACjF,IAAI,CAAC,gBAAgB,CAAC,eAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,YAAa,CAAC,CAAC;QACnF,IAAI,CAAC,gBAAgB,CAAC,eAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,YAAa,CAAC,CAAC;QACnF,IAAI,CAAC,gBAAgB,CAAC,YAAa,CAAC,MAAM,CACxC,IAAI,CAAC,gBAAgB,CAAC,cAAe,EACrC,IAAI,CAAC,gBAAgB,CAAC,gBAAiB,EACvC,IAAI,CAAC,gBAAgB,CAAC,cAAe,EACrC,IAAI,CAAC,gBAAgB,CAAC,gBAAiB,EACvC,IAAI,CAAC,gBAAgB,CAAC,eAAgB,EACtC,IAAI,CAAC,gBAAgB,CAAC,eAAgB,CACvC,CAAC;IACJ,CAAC;IAEO,aAAa;QACnB,IAAI,CAAC,gBAAgB,CAAC,eAAgB,CAAC,MAAM,CAC3C,IAAI,CAAC,gBAAgB,CAAC,QAAS,EAC/B,IAAI,CAAC,gBAAgB,CAAC,cAAe,CACtC,CAAC;QACF,IAAI,CAAC,gBAAgB,CAAC,SAAU,CAAC,MAAM,CACrC,IAAI,CAAC,gBAAgB,CAAC,iBAAkB,EACxC,IAAI,CAAC,gBAAgB,CAAC,eAAgB,CACvC,CAAC;IACJ,CAAC;IAEO,wBAAwB;QAC9B,IAAI,CAAC,gBAAgB,CAAC,yBAA0B,CAAC,MAAM,CACrD,IAAI,CAAC,gBAAgB,CAAC,kBAAmB,EACzC,IAAI,CAAC,gBAAgB,CAAC,wBAAyB,CAChD,CAAC;QACF,IAAI,CAAC,gBAAgB,CAAC,mBAAoB,CAAC,MAAM,CAC/C,IAAI,CAAC,gBAAgB,CAAC,qBAAsB,EAC5C,IAAI,CAAC,gBAAgB,CAAC,yBAA0B,CACjD,CAAC;IACJ,CAAC;IAEO,sBAAsB;QAC5B,IAAI,CAAC,gBAAgB,CAAC,uBAAwB,CAAC,MAAM,CACnD,IAAI,CAAC,gBAAgB,CAAC,gBAAiB,EACvC,IAAI,CAAC,gBAAgB,CAAC,sBAAuB,CAC9C,CAAC;QACF,IAAI,CAAC,gBAAgB,CAAC,iBAAkB,CAAC,MAAM,CAC7C,IAAI,CAAC,gBAAgB,CAAC,mBAAoB,EAC1C,IAAI,CAAC,gBAAgB,CAAC,uBAAwB,CAC/C,CAAC;IACJ,CAAC;IAEO,gBAAgB;QACtB,IAAI,CAAC,gBAAgB,CAAC,kBAAmB,CAAC,MAAM,CAC9C,IAAI,CAAC,gBAAgB,CAAC,WAAY,EAClC,IAAI,CAAC,gBAAgB,CAAC,iBAAkB,CACzC,CAAC;QACF,IAAI,CAAC,gBAAgB,CAAC,YAAa,CAAC,MAAM,CACxC,IAAI,CAAC,gBAAgB,CAAC,cAAe,EACrC,IAAI,CAAC,gBAAgB,CAAC,kBAAmB,CAC1C,CAAC;IACJ,CAAC;IAEO,kBAAkB;QACxB,IAAI,CAAC,gBAAgB,CAAC,oBAAqB,CAAC,MAAM,CAChD,IAAI,CAAC,gBAAgB,CAAC,aAAc,EACpC,IAAI,CAAC,gBAAgB,CAAC,mBAAoB,CAC3C,CAAC;QACF,IAAI,CAAC,gBAAgB,CAAC,cAAe,CAAC,MAAM,CAC1C,IAAI,CAAC,gBAAgB,CAAC,gBAAiB,EACvC,IAAI,CAAC,gBAAgB,CAAC,oBAAqB,CAC5C,CAAC;IACJ,CAAC;IAEM,eAAe;QACpB,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC/B,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAChC,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC9B,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAE1B,IAAI,CAAC,gBAAgB,CAAC,iBAAkB,CAAC,MAAM,CAC7C,IAAI,CAAC,gBAAgB,CAAC,oBAAqB,EAC3C,IAAI,CAAC,gBAAgB,CAAC,YAAa,EACnC,IAAI,CAAC,gBAAgB,CAAC,SAAU,EAChC,IAAI,CAAC,gBAAgB,CAAC,mBAAoB,EAC1C,IAAI,CAAC,gBAAgB,CAAC,iBAAkB,EACxC,IAAI,CAAC,gBAAgB,CAAC,YAAa,EACnC,IAAI,CAAC,gBAAgB,CAAC,cAAe,CACtC,CAAC;IACJ,CAAC;IAEM,aAAa,CAAC,WAAwB;QAC3C,MAAM,aAAa,GAAG,WAAW,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;QACpE,MAAM,kBAAkB,GAAG,CAAC,KAAa,EAAU,EAAE,CAAC,CACpD,aAAa,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CACvD,CAAC;QAEF,QAAQ,WAAW,CAAC,MAAM,EAAE;YAC1B,KAAK,MAAM;gBACT,IAAI,CAAC,gBAAgB,CAAC,UAAW,CAAC,KAAK,GAAG,kBAAkB,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBAChF,IAAI,CAAC,gBAAgB,CAAC,SAAU,CAAC,KAAK,GAAG,kBAAkB,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBAC/E,MAAM;YACR,KAAK,IAAI;gBACP,IAAI,CAAC,gBAAgB,CAAC,QAAS,CAAC,KAAK,GAAG,MAAM,kBAAkB,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC;gBACtF,IAAI,CAAC,gBAAgB,CAAC,OAAQ,CAAC,KAAK,GAAG,kBAAkB,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBAC7E,MAAM;YACR,KAAK,KAAK;gBACR,IAAI,CAAC,gBAAgB,CAAC,YAAa,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;gBAC9D,MAAM;YACR,KAAK,KAAK;gBACR,IAAI,CAAC,gBAAgB,CAAC,YAAa,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;gBAC9D,MAAM;YACR;gBACE,MAAM;SACT;QAED,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;IAC9B,CAAC;IAEM,YAAY,CAAC,cAAuB;QACzC,MAAM,aAAa,GAAG,CAAC,KAAa,EAAE,MAAc,EAAQ,EAAE;YAC5D,IAAI,CAAC,gBAAgB,CAAC,cAAe,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;YAC5D,IAAI,CAAC,gBAAgB,CAAC,QAAS,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;QACzD,CAAC,CAAC;QAEF,IAAI,CAAC,cAAc,EAAE;YACnB,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;SAC/B;aAAM;YACL,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;SAClC;IACH,CAAC;CACF;AA1XD,4BA0XC",sourcesContent:["import { RefreshData } from '../types';\r\nimport { ElementParams, SideMenuElements } from './types';\r\n\r\nexport class SideMenu {\r\n  readonly sideMenuElements: SideMenuElements;\r\n\r\n  public isInputChanges = false;\r\n\r\n  constructor() {\r\n    this.sideMenuElements = {};\r\n    this.initializeSideMenu();\r\n  }\r\n\r\n  private createOutputs(): void {\r\n    this.sideMenuElements.currentValuesWrapper = SideMenu.createElement({\r\n      name: 'div',\r\n      cssClasses: ['goby-side-menu__item-wrapper'],\r\n    }) as HTMLDivElement;\r\n    this.sideMenuElements.currentValuesObjective = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-objective'],\r\n      text: 'Текущее занчение: ',\r\n    }) as HTMLSpanElement;\r\n    this.sideMenuElements.fromOutput = SideMenu.createElement({\r\n      name: 'output',\r\n      cssClasses: ['goby-side-menu__value', 'goby-side-menu__value_type_from'],\r\n    }) as HTMLOutputElement;\r\n    this.sideMenuElements.toOutput = SideMenu.createElement({\r\n      name: 'output',\r\n      cssClasses: ['goby-side-menu__value', 'goby-side-menu__value_type_to'],\r\n      attr: { name: 'style', value: 'display: inline' },\r\n    }) as HTMLOutputElement;\r\n  }\r\n\r\n  private createWrappers(): void {\r\n    this.sideMenuElements.toWrapper = SideMenu.createElement({\r\n      name: 'div',\r\n      cssClasses: ['goby-side-menu__item-wrapper'],\r\n    }) as HTMLDivElement;\r\n\r\n    this.sideMenuElements.toToggleWrapper = SideMenu.createElement({\r\n      name: 'label',\r\n      cssClasses: ['goby-side-menu__item-toggle-wrapper'],\r\n    }) as HTMLLabelElement;\r\n\r\n    this.sideMenuElements.inputWrapper = SideMenu.createElement({\r\n      name: 'div',\r\n      cssClasses: ['goby-side-menu__item-wrapper'],\r\n    }) as HTMLDivElement;\r\n\r\n    this.sideMenuElements.fromInputWrapper = SideMenu.createElement({\r\n      name: 'label',\r\n      cssClasses: ['goby-side-menu__input-wrapper'],\r\n      text: 'От: ',\r\n    }) as HTMLLabelElement;\r\n\r\n    this.sideMenuElements.stepInputWrapper = SideMenu.createElement({\r\n      name: 'label',\r\n      cssClasses: ['goby-side-menu__input-wrapper'],\r\n      text: 'Шаг: ',\r\n    }) as HTMLLabelElement;\r\n\r\n    this.sideMenuElements.minInputWrapper = SideMenu.createElement({\r\n      name: 'label',\r\n      cssClasses: ['goby-side-menu__input-wrapper'],\r\n      text: 'Мин: ',\r\n    }) as HTMLLabelElement;\r\n\r\n    this.sideMenuElements.maxInputWrapper = SideMenu.createElement({\r\n      name: 'label',\r\n      cssClasses: ['goby-side-menu__input-wrapper'],\r\n      text: 'Макс: ',\r\n    }) as HTMLLabelElement;\r\n\r\n    this.sideMenuElements.toInputWrapper = SideMenu.createElement({\r\n      name: 'label',\r\n      cssClasses: ['goby-side-menu__input-wrapper'],\r\n      text: 'До: ',\r\n      attr: { name: 'style', value: 'display: block' },\r\n    }) as HTMLLabelElement;\r\n\r\n    this.sideMenuElements.handleValuesWrapper = SideMenu.createElement({\r\n      name: 'div',\r\n      cssClasses: ['goby-side-menu__item-wrapper'],\r\n    }) as HTMLDivElement;\r\n\r\n    this.sideMenuElements.valueScaleWrapper = SideMenu.createElement({\r\n      name: 'div',\r\n      cssClasses: ['goby-side-menu__item-wrapper'],\r\n    }) as HTMLDivElement;\r\n\r\n    this.sideMenuElements.planeWrapper = SideMenu.createElement({\r\n      name: 'div',\r\n      cssClasses: ['goby-side-menu__item-wrapper'],\r\n    }) as HTMLDivElement;\r\n\r\n    this.sideMenuElements.integerWrapper = SideMenu.createElement({\r\n      name: 'div',\r\n      cssClasses: ['goby-side-menu__item-wrapper'],\r\n    }) as HTMLDivElement;\r\n\r\n    const labelElement: Node = this.sideMenuElements.toToggleWrapper.cloneNode();\r\n    this.sideMenuElements.handleValuesToggleWrapper = labelElement.cloneNode() as HTMLLabelElement;\r\n    this.sideMenuElements.valueScaleToggleWrapper = labelElement.cloneNode() as HTMLLabelElement;\r\n    this.sideMenuElements.planeToggleWrapper = labelElement.cloneNode() as HTMLLabelElement;\r\n    this.sideMenuElements.integerToggleWrapper = labelElement.cloneNode() as HTMLLabelElement;\r\n  }\r\n\r\n  private createInputs(): void {\r\n    this.sideMenuElements.inputObjective = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-objective'],\r\n      text: 'Изменить значение: ',\r\n    }) as HTMLSpanElement;\r\n    this.sideMenuElements.fromInput = SideMenu.createElement({\r\n      name: 'input',\r\n      cssClasses: ['goby-side-menu__input'],\r\n      attr: { name: 'type', value: 'number' },\r\n    }) as HTMLInputElement;\r\n    this.sideMenuElements.toInput = SideMenu.createElement({\r\n      name: 'input',\r\n      cssClasses: ['goby-side-menu__input'],\r\n      attr: { name: 'type', value: 'number' },\r\n    }) as HTMLInputElement;\r\n    this.sideMenuElements.stepInput = SideMenu.createElement({\r\n      name: 'input',\r\n      cssClasses: ['goby-side-menu__input'],\r\n      attr: { name: 'type', value: 'number' },\r\n    }) as HTMLInputElement;\r\n    this.sideMenuElements.minimumInput = SideMenu.createElement({\r\n      name: 'input',\r\n      cssClasses: ['goby-side-menu__input'],\r\n      attr: { name: 'type', value: 'number' },\r\n    }) as HTMLInputElement;\r\n    this.sideMenuElements.maximumInput = SideMenu.createElement({\r\n      name: 'input',\r\n      cssClasses: ['goby-side-menu__input'],\r\n      attr: { name: 'type', value: 'number' },\r\n    }) as HTMLInputElement;\r\n  }\r\n\r\n  private createToggles():void {\r\n    this.sideMenuElements.toToggleObjective = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-objective'],\r\n      text: 'Включить второй ползунок: ',\r\n    }) as HTMLSpanElement;\r\n\r\n    this.sideMenuElements.toToggle = SideMenu.createElement({\r\n      name: 'input',\r\n      cssClasses: ['goby-side-menu__item-toggle'],\r\n      attr: { name: 'type', value: 'checkbox' },\r\n    }) as HTMLInputElement;\r\n    const inputElement: Node = this.sideMenuElements!.toToggle!.cloneNode();\r\n    this.sideMenuElements.handleValuesToggle = inputElement.cloneNode() as HTMLInputElement;\r\n    this.sideMenuElements.valueScaleToggle = inputElement.cloneNode() as HTMLInputElement;\r\n    this.sideMenuElements.integerToggle = inputElement.cloneNode() as HTMLInputElement;\r\n\r\n    this.sideMenuElements.toToggleBorder = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-toggle-border'],\r\n    }) as HTMLSpanElement;\r\n\r\n    this.sideMenuElements.handleValuesToggleBorder = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-toggle-border'],\r\n    }) as HTMLSpanElement;\r\n\r\n    this.sideMenuElements.valueScaleToggleBorder = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-toggle-border'],\r\n    }) as HTMLSpanElement;\r\n\r\n    this.sideMenuElements.integerToggleBorder = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-toggle-border'],\r\n    }) as HTMLSpanElement;\r\n\r\n    this.sideMenuElements.planeToggle = SideMenu.createElement({\r\n      name: 'input',\r\n      cssClasses: ['goby-side-menu__item-toggle'],\r\n      attr: { name: 'type', value: 'checkbox' },\r\n    }) as HTMLInputElement;\r\n\r\n    this.sideMenuElements.planeToggleBorder = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-toggle-border'],\r\n    }) as HTMLSpanElement;\r\n  }\r\n\r\n  private createObjectives(): void {\r\n    this.sideMenuElements.handleValuesObjective = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-objective'],\r\n      text: 'Включить значения под ползунками: ',\r\n    }) as HTMLSpanElement;\r\n\r\n    this.sideMenuElements.valueScaleObjective = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-objective'],\r\n      text: 'Включить шкалу значений: ',\r\n    }) as HTMLSpanElement;\r\n\r\n    this.sideMenuElements.planeObjective = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-objective'],\r\n      text: 'Изменить плоскость: ',\r\n    }) as HTMLSpanElement;\r\n\r\n    this.sideMenuElements.integerObjective = SideMenu.createElement({\r\n      name: 'span',\r\n      cssClasses: ['goby-side-menu__item-objective'],\r\n      text: 'Только целые числа: ',\r\n    }) as HTMLSpanElement;\r\n  }\r\n\r\n  private initializeSideMenu(): void {\r\n    this.createOutputs();\r\n    this.createWrappers();\r\n    this.createInputs();\r\n    this.createToggles();\r\n    this.createObjectives();\r\n\r\n    this.sideMenuElements.sideMenuContainer = SideMenu.createElement({\r\n      name: 'div',\r\n      cssClasses: ['goby-side-menu'],\r\n    }) as HTMLDivElement;\r\n  }\r\n\r\n  private static createElement(elementParams: ElementParams): HTMLSpanElement {\r\n    const element: HTMLElement = document.createElement(elementParams.name);\r\n\r\n    elementParams.cssClasses.forEach((cssClass: string): void => {\r\n      element.classList.add(cssClass);\r\n    });\r\n\r\n    if (elementParams.text) element.textContent = elementParams.text;\r\n    if (elementParams.attr) element.setAttribute(elementParams.attr.name, elementParams.attr.value);\r\n\r\n    return element;\r\n  }\r\n\r\n  private wrapsOutputs(): void {\r\n    this.sideMenuElements.currentValuesWrapper!.append(\r\n      this.sideMenuElements.currentValuesObjective!,\r\n      this.sideMenuElements.fromOutput!,\r\n      this.sideMenuElements.toOutput!,\r\n    );\r\n  }\r\n\r\n  private wrapsElementsInWrappers(): void {\r\n    this.sideMenuElements.fromInputWrapper!.append(this.sideMenuElements.fromInput!);\r\n    this.sideMenuElements.toInputWrapper!.append(this.sideMenuElements.toInput!);\r\n    this.sideMenuElements.stepInputWrapper!.append(this.sideMenuElements.stepInput!);\r\n    this.sideMenuElements.minInputWrapper!.append(this.sideMenuElements.minimumInput!);\r\n    this.sideMenuElements.maxInputWrapper!.append(this.sideMenuElements.maximumInput!);\r\n    this.sideMenuElements.inputWrapper!.append(\r\n      this.sideMenuElements.inputObjective!,\r\n      this.sideMenuElements.fromInputWrapper!,\r\n      this.sideMenuElements.toInputWrapper!,\r\n      this.sideMenuElements.stepInputWrapper!,\r\n      this.sideMenuElements.minInputWrapper!,\r\n      this.sideMenuElements.maxInputWrapper!,\r\n    );\r\n  }\r\n\r\n  private wrapsToToggle(): void {\r\n    this.sideMenuElements.toToggleWrapper!.append(\r\n      this.sideMenuElements.toToggle!,\r\n      this.sideMenuElements.toToggleBorder!,\r\n    );\r\n    this.sideMenuElements.toWrapper!.append(\r\n      this.sideMenuElements.toToggleObjective!,\r\n      this.sideMenuElements.toToggleWrapper!,\r\n    );\r\n  }\r\n\r\n  private wrapsHandlesValuesToggle(): void {\r\n    this.sideMenuElements.handleValuesToggleWrapper!.append(\r\n      this.sideMenuElements.handleValuesToggle!,\r\n      this.sideMenuElements.handleValuesToggleBorder!,\r\n    );\r\n    this.sideMenuElements.handleValuesWrapper!.append(\r\n      this.sideMenuElements.handleValuesObjective!,\r\n      this.sideMenuElements.handleValuesToggleWrapper!,\r\n    );\r\n  }\r\n\r\n  private wrapsValuesScaleToggle(): void {\r\n    this.sideMenuElements.valueScaleToggleWrapper!.append(\r\n      this.sideMenuElements.valueScaleToggle!,\r\n      this.sideMenuElements.valueScaleToggleBorder!,\r\n    );\r\n    this.sideMenuElements.valueScaleWrapper!.append(\r\n      this.sideMenuElements.valueScaleObjective!,\r\n      this.sideMenuElements.valueScaleToggleWrapper!,\r\n    );\r\n  }\r\n\r\n  private wrapsPlaneToggle(): void {\r\n    this.sideMenuElements.planeToggleWrapper!.append(\r\n      this.sideMenuElements.planeToggle!,\r\n      this.sideMenuElements.planeToggleBorder!,\r\n    );\r\n    this.sideMenuElements.planeWrapper!.append(\r\n      this.sideMenuElements.planeObjective!,\r\n      this.sideMenuElements.planeToggleWrapper!,\r\n    );\r\n  }\r\n\r\n  private wrapsIntegerToggle(): void {\r\n    this.sideMenuElements.integerToggleWrapper!.append(\r\n      this.sideMenuElements.integerToggle!,\r\n      this.sideMenuElements.integerToggleBorder!,\r\n    );\r\n    this.sideMenuElements.integerWrapper!.append(\r\n      this.sideMenuElements.integerObjective!,\r\n      this.sideMenuElements.integerToggleWrapper!,\r\n    );\r\n  }\r\n\r\n  public collectSideMenu(): void {\r\n    this.wrapsOutputs();\r\n    this.wrapsElementsInWrappers();\r\n    this.wrapsToToggle();\r\n    this.wrapsHandlesValuesToggle();\r\n    this.wrapsValuesScaleToggle();\r\n    this.wrapsPlaneToggle();\r\n    this.wrapsIntegerToggle();\r\n\r\n    this.sideMenuElements.sideMenuContainer!.append(\r\n      this.sideMenuElements.currentValuesWrapper!,\r\n      this.sideMenuElements.inputWrapper!,\r\n      this.sideMenuElements.toWrapper!,\r\n      this.sideMenuElements.handleValuesWrapper!,\r\n      this.sideMenuElements.valueScaleWrapper!,\r\n      this.sideMenuElements.planeWrapper!,\r\n      this.sideMenuElements.integerWrapper!,\r\n    );\r\n  }\r\n\r\n  public refreshValues(refreshData: RefreshData): void {\r\n    const isRoundUpNeed = refreshData.isToFixed && !this.isInputChanges;\r\n    const bringsValuesToForm = (value: string): string => (\r\n      isRoundUpNeed ? `${Math.round(Number(value))}` : value\r\n    );\r\n\r\n    switch (refreshData.target) {\r\n      case 'from':\r\n        this.sideMenuElements.fromOutput!.value = bringsValuesToForm(refreshData.value);\r\n        this.sideMenuElements.fromInput!.value = bringsValuesToForm(refreshData.value);\r\n        break;\r\n      case 'to':\r\n        this.sideMenuElements.toOutput!.value = ` - ${bringsValuesToForm(refreshData.value)}`;\r\n        this.sideMenuElements.toInput!.value = bringsValuesToForm(refreshData.value);\r\n        break;\r\n      case 'min':\r\n        this.sideMenuElements.minimumInput!.value = refreshData.value;\r\n        break;\r\n      case 'max':\r\n        this.sideMenuElements.maximumInput!.value = refreshData.value;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    this.isInputChanges = false;\r\n  }\r\n\r\n  public hideToValues(isHideToValues: boolean): void {\r\n    const changeDisplay = (input: string, output: string): void => {\r\n      this.sideMenuElements.toInputWrapper!.style.display = input;\r\n      this.sideMenuElements.toOutput!.style.display = output;\r\n    };\r\n\r\n    if (!isHideToValues) {\r\n      changeDisplay('none', 'none');\r\n    } else {\r\n      changeDisplay('block', 'inline');\r\n    }\r\n  }\r\n}\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(o=l[i="__coverage__"]||(l[i]={}))[n]&&o[n].hash===t?o[n]:(s.hash=t,o[n]=s));r.s[0]++,Object.defineProperty(A,"__esModule",{value:!0}),r.s[1]++,A.SideMenu=void 0;class a{constructor(){r.f[0]++,r.s[2]++,this.isInputChanges=!1,r.s[3]++,this.sideMenuElements={},r.s[4]++,this.initializeSideMenu()}createOutputs(){r.f[1]++,r.s[5]++,this.sideMenuElements.currentValuesWrapper=a.createElement({name:"div",cssClasses:["goby-side-menu__item-wrapper"]}),r.s[6]++,this.sideMenuElements.currentValuesObjective=a.createElement({name:"span",cssClasses:["goby-side-menu__item-objective"],text:"Текущее занчение: "}),r.s[7]++,this.sideMenuElements.fromOutput=a.createElement({name:"output",cssClasses:["goby-side-menu__value","goby-side-menu__value_type_from"]}),r.s[8]++,this.sideMenuElements.toOutput=a.createElement({name:"output",cssClasses:["goby-side-menu__value","goby-side-menu__value_type_to"],attr:{name:"style",value:"display: inline"}})}createWrappers(){r.f[2]++,r.s[9]++,this.sideMenuElements.toWrapper=a.createElement({name:"div",cssClasses:["goby-side-menu__item-wrapper"]}),r.s[10]++,this.sideMenuElements.toToggleWrapper=a.createElement({name:"label",cssClasses:["goby-side-menu__item-toggle-wrapper"]}),r.s[11]++,this.sideMenuElements.inputWrapper=a.createElement({name:"div",cssClasses:["goby-side-menu__item-wrapper"]}),r.s[12]++,this.sideMenuElements.fromInputWrapper=a.createElement({name:"label",cssClasses:["goby-side-menu__input-wrapper"],text:"От: "}),r.s[13]++,this.sideMenuElements.stepInputWrapper=a.createElement({name:"label",cssClasses:["goby-side-menu__input-wrapper"],text:"Шаг: "}),r.s[14]++,this.sideMenuElements.minInputWrapper=a.createElement({name:"label",cssClasses:["goby-side-menu__input-wrapper"],text:"Мин: "}),r.s[15]++,this.sideMenuElements.maxInputWrapper=a.createElement({name:"label",cssClasses:["goby-side-menu__input-wrapper"],text:"Макс: "}),r.s[16]++,this.sideMenuElements.toInputWrapper=a.createElement({name:"label",cssClasses:["goby-side-menu__input-wrapper"],text:"До: ",attr:{name:"style",value:"display: block"}}),r.s[17]++,this.sideMenuElements.handleValuesWrapper=a.createElement({name:"div",cssClasses:["goby-side-menu__item-wrapper"]}),r.s[18]++,this.sideMenuElements.valueScaleWrapper=a.createElement({name:"div",cssClasses:["goby-side-menu__item-wrapper"]}),r.s[19]++,this.sideMenuElements.planeWrapper=a.createElement({name:"div",cssClasses:["goby-side-menu__item-wrapper"]}),r.s[20]++,this.sideMenuElements.integerWrapper=a.createElement({name:"div",cssClasses:["goby-side-menu__item-wrapper"]});const e=(r.s[21]++,this.sideMenuElements.toToggleWrapper.cloneNode());r.s[22]++,this.sideMenuElements.handleValuesToggleWrapper=e.cloneNode(),r.s[23]++,this.sideMenuElements.valueScaleToggleWrapper=e.cloneNode(),r.s[24]++,this.sideMenuElements.planeToggleWrapper=e.cloneNode(),r.s[25]++,this.sideMenuElements.integerToggleWrapper=e.cloneNode()}createInputs(){r.f[3]++,r.s[26]++,this.sideMenuElements.inputObjective=a.createElement({name:"span",cssClasses:["goby-side-menu__item-objective"],text:"Изменить значение: "}),r.s[27]++,this.sideMenuElements.fromInput=a.createElement({name:"input",cssClasses:["goby-side-menu__input"],attr:{name:"type",value:"number"}}),r.s[28]++,this.sideMenuElements.toInput=a.createElement({name:"input",cssClasses:["goby-side-menu__input"],attr:{name:"type",value:"number"}}),r.s[29]++,this.sideMenuElements.stepInput=a.createElement({name:"input",cssClasses:["goby-side-menu__input"],attr:{name:"type",value:"number"}}),r.s[30]++,this.sideMenuElements.minimumInput=a.createElement({name:"input",cssClasses:["goby-side-menu__input"],attr:{name:"type",value:"number"}}),r.s[31]++,this.sideMenuElements.maximumInput=a.createElement({name:"input",cssClasses:["goby-side-menu__input"],attr:{name:"type",value:"number"}})}createToggles(){r.f[4]++,r.s[32]++,this.sideMenuElements.toToggleObjective=a.createElement({name:"span",cssClasses:["goby-side-menu__item-objective"],text:"Включить второй ползунок: "}),r.s[33]++,this.sideMenuElements.toToggle=a.createElement({name:"input",cssClasses:["goby-side-menu__item-toggle"],attr:{name:"type",value:"checkbox"}});const e=(r.s[34]++,this.sideMenuElements.toToggle.cloneNode());r.s[35]++,this.sideMenuElements.handleValuesToggle=e.cloneNode(),r.s[36]++,this.sideMenuElements.valueScaleToggle=e.cloneNode(),r.s[37]++,this.sideMenuElements.integerToggle=e.cloneNode(),r.s[38]++,this.sideMenuElements.toToggleBorder=a.createElement({name:"span",cssClasses:["goby-side-menu__item-toggle-border"]}),r.s[39]++,this.sideMenuElements.handleValuesToggleBorder=a.createElement({name:"span",cssClasses:["goby-side-menu__item-toggle-border"]}),r.s[40]++,this.sideMenuElements.valueScaleToggleBorder=a.createElement({name:"span",cssClasses:["goby-side-menu__item-toggle-border"]}),r.s[41]++,this.sideMenuElements.integerToggleBorder=a.createElement({name:"span",cssClasses:["goby-side-menu__item-toggle-border"]}),r.s[42]++,this.sideMenuElements.planeToggle=a.createElement({name:"input",cssClasses:["goby-side-menu__item-toggle"],attr:{name:"type",value:"checkbox"}}),r.s[43]++,this.sideMenuElements.planeToggleBorder=a.createElement({name:"span",cssClasses:["goby-side-menu__item-toggle-border"]})}createObjectives(){r.f[5]++,r.s[44]++,this.sideMenuElements.handleValuesObjective=a.createElement({name:"span",cssClasses:["goby-side-menu__item-objective"],text:"Включить значения под ползунками: "}),r.s[45]++,this.sideMenuElements.valueScaleObjective=a.createElement({name:"span",cssClasses:["goby-side-menu__item-objective"],text:"Включить шкалу значений: "}),r.s[46]++,this.sideMenuElements.planeObjective=a.createElement({name:"span",cssClasses:["goby-side-menu__item-objective"],text:"Изменить плоскость: "}),r.s[47]++,this.sideMenuElements.integerObjective=a.createElement({name:"span",cssClasses:["goby-side-menu__item-objective"],text:"Только целые числа: "})}initializeSideMenu(){r.f[6]++,r.s[48]++,this.createOutputs(),r.s[49]++,this.createWrappers(),r.s[50]++,this.createInputs(),r.s[51]++,this.createToggles(),r.s[52]++,this.createObjectives(),r.s[53]++,this.sideMenuElements.sideMenuContainer=a.createElement({name:"div",cssClasses:["goby-side-menu"]})}static createElement(e){r.f[7]++;const A=(r.s[54]++,document.createElement(e.name));return r.s[55]++,e.cssClasses.forEach((e=>{r.f[8]++,r.s[56]++,A.classList.add(e)})),r.s[57]++,e.text?(r.b[0][0]++,r.s[58]++,A.textContent=e.text):r.b[0][1]++,r.s[59]++,e.attr?(r.b[1][0]++,r.s[60]++,A.setAttribute(e.attr.name,e.attr.value)):r.b[1][1]++,r.s[61]++,A}wrapsOutputs(){r.f[9]++,r.s[62]++,this.sideMenuElements.currentValuesWrapper.append(this.sideMenuElements.currentValuesObjective,this.sideMenuElements.fromOutput,this.sideMenuElements.toOutput)}wrapsElementsInWrappers(){r.f[10]++,r.s[63]++,this.sideMenuElements.fromInputWrapper.append(this.sideMenuElements.fromInput),r.s[64]++,this.sideMenuElements.toInputWrapper.append(this.sideMenuElements.toInput),r.s[65]++,this.sideMenuElements.stepInputWrapper.append(this.sideMenuElements.stepInput),r.s[66]++,this.sideMenuElements.minInputWrapper.append(this.sideMenuElements.minimumInput),r.s[67]++,this.sideMenuElements.maxInputWrapper.append(this.sideMenuElements.maximumInput),r.s[68]++,this.sideMenuElements.inputWrapper.append(this.sideMenuElements.inputObjective,this.sideMenuElements.fromInputWrapper,this.sideMenuElements.toInputWrapper,this.sideMenuElements.stepInputWrapper,this.sideMenuElements.minInputWrapper,this.sideMenuElements.maxInputWrapper)}wrapsToToggle(){r.f[11]++,r.s[69]++,this.sideMenuElements.toToggleWrapper.append(this.sideMenuElements.toToggle,this.sideMenuElements.toToggleBorder),r.s[70]++,this.sideMenuElements.toWrapper.append(this.sideMenuElements.toToggleObjective,this.sideMenuElements.toToggleWrapper)}wrapsHandlesValuesToggle(){r.f[12]++,r.s[71]++,this.sideMenuElements.handleValuesToggleWrapper.append(this.sideMenuElements.handleValuesToggle,this.sideMenuElements.handleValuesToggleBorder),r.s[72]++,this.sideMenuElements.handleValuesWrapper.append(this.sideMenuElements.handleValuesObjective,this.sideMenuElements.handleValuesToggleWrapper)}wrapsValuesScaleToggle(){r.f[13]++,r.s[73]++,this.sideMenuElements.valueScaleToggleWrapper.append(this.sideMenuElements.valueScaleToggle,this.sideMenuElements.valueScaleToggleBorder),r.s[74]++,this.sideMenuElements.valueScaleWrapper.append(this.sideMenuElements.valueScaleObjective,this.sideMenuElements.valueScaleToggleWrapper)}wrapsPlaneToggle(){r.f[14]++,r.s[75]++,this.sideMenuElements.planeToggleWrapper.append(this.sideMenuElements.planeToggle,this.sideMenuElements.planeToggleBorder),r.s[76]++,this.sideMenuElements.planeWrapper.append(this.sideMenuElements.planeObjective,this.sideMenuElements.planeToggleWrapper)}wrapsIntegerToggle(){r.f[15]++,r.s[77]++,this.sideMenuElements.integerToggleWrapper.append(this.sideMenuElements.integerToggle,this.sideMenuElements.integerToggleBorder),r.s[78]++,this.sideMenuElements.integerWrapper.append(this.sideMenuElements.integerObjective,this.sideMenuElements.integerToggleWrapper)}collectSideMenu(){r.f[16]++,r.s[79]++,this.wrapsOutputs(),r.s[80]++,this.wrapsElementsInWrappers(),r.s[81]++,this.wrapsToToggle(),r.s[82]++,this.wrapsHandlesValuesToggle(),r.s[83]++,this.wrapsValuesScaleToggle(),r.s[84]++,this.wrapsPlaneToggle(),r.s[85]++,this.wrapsIntegerToggle(),r.s[86]++,this.sideMenuElements.sideMenuContainer.append(this.sideMenuElements.currentValuesWrapper,this.sideMenuElements.inputWrapper,this.sideMenuElements.toWrapper,this.sideMenuElements.handleValuesWrapper,this.sideMenuElements.valueScaleWrapper,this.sideMenuElements.planeWrapper,this.sideMenuElements.integerWrapper)}refreshValues(e){r.f[17]++;const A=(r.s[87]++,r.b[2][0]++,e.isToFixed&&(r.b[2][1]++,!this.isInputChanges));r.s[88]++;const n=e=>(r.f[18]++,r.s[89]++,A?(r.b[3][0]++,`${Math.round(Number(e))}`):(r.b[3][1]++,e));switch(r.s[90]++,e.target){case"from":r.b[4][0]++,r.s[91]++,this.sideMenuElements.fromOutput.value=n(e.value),r.s[92]++,this.sideMenuElements.fromInput.value=n(e.value),r.s[93]++;break;case"to":r.b[4][1]++,r.s[94]++,this.sideMenuElements.toOutput.value=` - ${n(e.value)}`,r.s[95]++,this.sideMenuElements.toInput.value=n(e.value),r.s[96]++;break;case"min":r.b[4][2]++,r.s[97]++,this.sideMenuElements.minimumInput.value=e.value,r.s[98]++;break;case"max":r.b[4][3]++,r.s[99]++,this.sideMenuElements.maximumInput.value=e.value,r.s[100]++;break;default:r.b[4][4]++,r.s[101]++}r.s[102]++,this.isInputChanges=!1}hideToValues(e){r.f[19]++,r.s[103]++;const A=(e,A)=>{r.f[20]++,r.s[104]++,this.sideMenuElements.toInputWrapper.style.display=e,r.s[105]++,this.sideMenuElements.toOutput.style.display=A};r.s[106]++,e?(r.b[5][1]++,r.s[108]++,A("block","inline")):(r.b[5][0]++,r.s[107]++,A("none","none"))}}r.s[109]++,A.SideMenu=a},148:(e,A)=>{"use strict";var n,t,l,i,s,o,r=(n="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Slider\\Slider.ts",t="8f795a134bb3b7cc8661ccbfd8898dad6e6e70e0",l=new(0,function(){}.constructor)("return this")(),s={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Slider\\Slider.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:0},end:{line:3,column:24}},2:{start:{line:6,column:8},end:{line:6,column:52}},3:{start:{line:7,column:8},end:{line:7,column:49}},4:{start:{line:8,column:8},end:{line:8,column:59}},5:{start:{line:9,column:8},end:{line:9,column:64}},6:{start:{line:10,column:8},end:{line:10,column:47}},7:{start:{line:13,column:8},end:{line:13,column:234}},8:{start:{line:16,column:8},end:{line:16,column:97}},9:{start:{line:19,column:8},end:{line:19,column:97}},10:{start:{line:22,column:49},end:{line:22,column:57}},11:{start:{line:24,column:12},end:{line:24,column:68}},12:{start:{line:25,column:12},end:{line:25,column:76}},13:{start:{line:26,column:12},end:{line:27,column:69}},14:{start:{line:27,column:16},end:{line:27,column:69}},15:{start:{line:29,column:8},end:{line:42,column:9}},16:{start:{line:31,column:16},end:{line:31,column:75}},17:{start:{line:32,column:16},end:{line:32,column:75}},18:{start:{line:33,column:16},end:{line:33,column:81}},19:{start:{line:34,column:16},end:{line:34,column:22}},20:{start:{line:36,column:16},end:{line:36,column:75}},21:{start:{line:37,column:16},end:{line:37,column:43}},22:{start:{line:38,column:16},end:{line:38,column:53}},23:{start:{line:39,column:16},end:{line:39,column:22}},24:{start:{line:41,column:16},end:{line:41,column:22}},25:{start:{line:43,column:8},end:{line:43,column:29}},26:{start:{line:46,column:0},end:{line:46,column:24}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:18},end:{line:11,column:5}},line:5},1:{name:"(anonymous_1)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:28},end:{line:14,column:5}},line:12},2:{name:"(anonymous_2)",decl:{start:{line:15,column:4},end:{line:15,column:5}},loc:{start:{line:15,column:46},end:{line:17,column:5}},line:15},3:{name:"(anonymous_3)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:42},end:{line:20,column:5}},line:18},4:{name:"(anonymous_4)",decl:{start:{line:21,column:4},end:{line:21,column:5}},loc:{start:{line:21,column:26},end:{line:44,column:5}},line:21},5:{name:"refreshAfterResize",decl:{start:{line:23,column:17},end:{line:23,column:35}},loc:{start:{line:23,column:38},end:{line:28,column:9}},line:23}},branchMap:{0:{loc:{start:{line:16,column:16},end:{line:16,column:95}},type:"binary-expr",locations:[{start:{line:16,column:17},end:{line:16,column:77}},{start:{line:16,column:83},end:{line:16,column:94}}],line:16},1:{loc:{start:{line:19,column:16},end:{line:19,column:95}},type:"binary-expr",locations:[{start:{line:19,column:17},end:{line:19,column:78}},{start:{line:19,column:84},end:{line:19,column:94}}],line:19},2:{loc:{start:{line:26,column:12},end:{line:27,column:69}},type:"if",locations:[{start:{line:26,column:12},end:{line:27,column:69}},{start:{line:26,column:12},end:{line:27,column:69}}],line:26},3:{loc:{start:{line:29,column:8},end:{line:42,column:9}},type:"switch",locations:[{start:{line:30,column:12},end:{line:34,column:22}},{start:{line:35,column:12},end:{line:39,column:22}},{start:{line:40,column:12},end:{line:41,column:22}}],line:29}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0},f:{0:0,1:0,2:0,3:0,4:0,5:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Slider\\Slider.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\Slider\\Slider.ts"],names:[],mappings:";;;AAEA,MAAa,MAAM;IAKjB;QACE,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC5C,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QACzC,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACnD,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACxD,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACzC,CAAC;IAEM,aAAa,CAAC,QAAiC;QACpD,IAAI,CAAC,MAAM,CAAC,MAAM,CAChB,QAAQ,CAAC,IAAI,EACb,QAAQ,CAAC,EAAE,EACX,QAAQ,CAAC,QAAQ,EACjB,QAAQ,CAAC,UAAU,CAAC,QAAQ,EAC5B,QAAQ,CAAC,UAAU,CAAC,QAAQ,EAC5B,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,EACvB,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,EACvB,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,EACvB,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,CACxB,CAAC;IACJ,CAAC;IAEO,6BAA6B,CAAC,UAAmB;QACvD,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,4BAA4B,CAAC,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3F,CAAC;IAEO,yBAAyB,CAAC,UAAmB;QACnD,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,4BAA4B,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3F,CAAC;IAEM,WAAW,CAAC,QAA6B;QAC9C,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,QAAQ,CAAC;QAElD,SAAS,kBAAkB;YACzB,QAAQ,CAAC,gBAAgB,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;YACxD,QAAQ,CAAC,wBAAwB,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;YAChE,IAAI,MAAM;gBAAE,QAAQ,CAAC,aAAa,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;QACnE,CAAC;QAED,QAAQ,IAAI,EAAE;YACZ,KAAK,IAAI,CAAC,yBAAyB,CAAC,UAAU,CAAC;gBAC7C,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,4BAA4B,CAAC,CAAC;gBAC3D,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC;gBAC3D,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,IAAI,CAAC;gBACjE,MAAM;YACR,KAAK,IAAI,CAAC,6BAA6B,CAAC,UAAU,CAAC;gBACjD,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,4BAA4B,CAAC,CAAC;gBAC3D,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,EAAE,CAAC;gBAC3B,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC;gBACrC,MAAM;YACR;gBACE,MAAM;SACT;QAED,kBAAkB,EAAE,CAAC;IACvB,CAAC;CACF;AA7DD,wBA6DC",sourcesContent:["import { SliderAssemblerSettings, SliderPlaneSettings } from './types';\r\n\r\nexport class Slider {\r\n  readonly slider: HTMLDivElement;\r\n\r\n  readonly sliderWrapper: HTMLDivElement;\r\n\r\n  constructor() {\r\n    this.slider = document.createElement('div');\r\n    this.slider.classList.add('goby-slider');\r\n    this.sliderWrapper = document.createElement('div');\r\n    this.sliderWrapper.classList.add('goby-slider-wrapper');\r\n    this.sliderWrapper.append(this.slider);\r\n  }\r\n\r\n  public collectSlider(settings: SliderAssemblerSettings): void {\r\n    this.slider.append(\r\n      settings.from,\r\n      settings.to,\r\n      settings.interval,\r\n      settings.valueScale.minValue,\r\n      settings.valueScale.maxValue,\r\n      settings.valueScale[20],\r\n      settings.valueScale[40],\r\n      settings.valueScale[60],\r\n      settings.valueScale[80],\r\n    );\r\n  }\r\n\r\n  private checkIsNeedToMakeHorizontally(isVertical: boolean): boolean {\r\n    return ((this.slider.classList.contains('goby-slider_state_vertical')) && (!isVertical));\r\n  }\r\n\r\n  private checkIsNeedToMakeVertical(isVertical: boolean): boolean {\r\n    return ((!this.slider.classList.contains('goby-slider_state_vertical')) && (isVertical));\r\n  }\r\n\r\n  public changePlane(settings: SliderPlaneSettings): void {\r\n    const { isStep, isVertical, requests } = settings;\r\n\r\n    function refreshAfterResize(): void {\r\n      requests.needDataForScale = { name: '', value: 'true' };\r\n      requests.needDataForStartPosition = { name: '', value: 'true' };\r\n      if (isStep) requests.needStepWidth = { name: '', value: 'true' };\r\n    }\r\n\r\n    switch (true) {\r\n      case this.checkIsNeedToMakeVertical(isVertical):\r\n        this.slider.classList.toggle('goby-slider_state_vertical');\r\n        this.slider.style.top = `${this.slider.offsetWidth / 2}px`;\r\n        this.sliderWrapper.style.height = `${this.slider.offsetWidth}px`;\r\n        break;\r\n      case this.checkIsNeedToMakeHorizontally(isVertical):\r\n        this.slider.classList.toggle('goby-slider_state_vertical');\r\n        this.slider.style.top = '';\r\n        this.sliderWrapper.style.height = '';\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    refreshAfterResize();\r\n  }\r\n}\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(o=l[i="__coverage__"]||(l[i]={}))[n]&&o[n].hash===t?o[n]:(s.hash=t,o[n]=s));r.s[0]++,Object.defineProperty(A,"__esModule",{value:!0}),r.s[1]++,A.Slider=void 0;r.s[26]++,A.Slider=class{constructor(){r.f[0]++,r.s[2]++,this.slider=document.createElement("div"),r.s[3]++,this.slider.classList.add("goby-slider"),r.s[4]++,this.sliderWrapper=document.createElement("div"),r.s[5]++,this.sliderWrapper.classList.add("goby-slider-wrapper"),r.s[6]++,this.sliderWrapper.append(this.slider)}collectSlider(e){r.f[1]++,r.s[7]++,this.slider.append(e.from,e.to,e.interval,e.valueScale.minValue,e.valueScale.maxValue,e.valueScale[20],e.valueScale[40],e.valueScale[60],e.valueScale[80])}checkIsNeedToMakeHorizontally(e){return r.f[2]++,r.s[8]++,r.b[0][0]++,this.slider.classList.contains("goby-slider_state_vertical")&&(r.b[0][1]++,!e)}checkIsNeedToMakeVertical(e){return r.f[3]++,r.s[9]++,r.b[1][0]++,!this.slider.classList.contains("goby-slider_state_vertical")&&(r.b[1][1]++,e)}changePlane(e){r.f[4]++;const{isStep:A,isVertical:n,requests:t}=(r.s[10]++,e);switch(r.s[15]++,!0){case this.checkIsNeedToMakeVertical(n):r.b[3][0]++,r.s[16]++,this.slider.classList.toggle("goby-slider_state_vertical"),r.s[17]++,this.slider.style.top=this.slider.offsetWidth/2+"px",r.s[18]++,this.sliderWrapper.style.height=`${this.slider.offsetWidth}px`,r.s[19]++;break;case this.checkIsNeedToMakeHorizontally(n):r.b[3][1]++,r.s[20]++,this.slider.classList.toggle("goby-slider_state_vertical"),r.s[21]++,this.slider.style.top="",r.s[22]++,this.sliderWrapper.style.height="",r.s[23]++;break;default:r.b[3][2]++,r.s[24]++}r.s[25]++,r.f[5]++,r.s[11]++,t.needDataForScale={name:"",value:"true"},r.s[12]++,t.needDataForStartPosition={name:"",value:"true"},r.s[13]++,A?(r.b[2][0]++,r.s[14]++,t.needStepWidth={name:"",value:"true"}):r.b[2][1]++}}},587:(e,A)=>{"use strict";var n,t,l,i,s,o,r=(n="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\ValuesScale\\ValuesScale.ts",t="c07e79f00153e6d0b2d48cae61e4efbc1a0d9320",l=new(0,function(){}.constructor)("return this")(),s={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\ValuesScale\\ValuesScale.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:0},end:{line:3,column:29}},2:{start:{line:6,column:8},end:{line:6,column:62}},3:{start:{line:7,column:8},end:{line:7,column:62}},4:{start:{line:8,column:8},end:{line:8,column:59}},5:{start:{line:9,column:8},end:{line:9,column:59}},6:{start:{line:10,column:8},end:{line:10,column:59}},7:{start:{line:11,column:8},end:{line:11,column:59}},8:{start:{line:14,column:24},end:{line:14,column:54}},9:{start:{line:15,column:8},end:{line:15,column:91}},10:{start:{line:16,column:8},end:{line:16,column:23}},11:{start:{line:19,column:8},end:{line:26,column:20}},12:{start:{line:29,column:46},end:{line:29,column:111}},13:{start:{line:29,column:59},end:{line:29,column:111}},14:{start:{line:30,column:39},end:{line:30,column:141}},15:{start:{line:30,column:65},end:{line:30,column:141}},16:{start:{line:31,column:8},end:{line:31,column:80}},17:{start:{line:32,column:8},end:{line:32,column:81}},18:{start:{line:33,column:8},end:{line:33,column:68}},19:{start:{line:34,column:8},end:{line:34,column:68}},20:{start:{line:35,column:8},end:{line:35,column:68}},21:{start:{line:36,column:8},end:{line:36,column:68}},22:{start:{line:39,column:8},end:{line:45,column:29}},23:{start:{line:48,column:8},end:{line:54,column:28}},24:{start:{line:57,column:30},end:{line:64,column:9}},25:{start:{line:58,column:12},end:{line:58,column:80}},26:{start:{line:59,column:12},end:{line:59,column:80}},27:{start:{line:60,column:12},end:{line:60,column:75}},28:{start:{line:61,column:12},end:{line:61,column:75}},29:{start:{line:62,column:12},end:{line:62,column:75}},30:{start:{line:63,column:12},end:{line:63,column:75}},31:{start:{line:65,column:38},end:{line:66,column:61}},32:{start:{line:67,column:8},end:{line:68,column:28}},33:{start:{line:68,column:12},end:{line:68,column:28}},34:{start:{line:71,column:30},end:{line:78,column:9}},35:{start:{line:72,column:12},end:{line:72,column:48}},36:{start:{line:73,column:12},end:{line:73,column:48}},37:{start:{line:74,column:12},end:{line:74,column:43}},38:{start:{line:75,column:12},end:{line:75,column:43}},39:{start:{line:76,column:12},end:{line:76,column:43}},40:{start:{line:77,column:12},end:{line:77,column:43}},41:{start:{line:79,column:8},end:{line:84,column:9}},42:{start:{line:80,column:12},end:{line:80,column:34}},43:{start:{line:83,column:12},end:{line:83,column:42}},44:{start:{line:87,column:0},end:{line:87,column:34}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:18},end:{line:12,column:5}},line:5},1:{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:40},end:{line:17,column:5}},line:13},2:{name:"(anonymous_2)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:30},end:{line:27,column:5}},line:18},3:{name:"(anonymous_3)",decl:{start:{line:28,column:4},end:{line:28,column:5}},loc:{start:{line:28,column:44},end:{line:37,column:5}},line:28},4:{name:"(anonymous_4)",decl:{start:{line:29,column:46},end:{line:29,column:47}},loc:{start:{line:29,column:59},end:{line:29,column:111}},line:29},5:{name:"(anonymous_5)",decl:{start:{line:30,column:39},end:{line:30,column:40}},loc:{start:{line:30,column:65},end:{line:30,column:141}},line:30},6:{name:"(anonymous_6)",decl:{start:{line:38,column:4},end:{line:38,column:5}},loc:{start:{line:38,column:46},end:{line:46,column:5}},line:38},7:{name:"(anonymous_7)",decl:{start:{line:47,column:4},end:{line:47,column:5}},loc:{start:{line:47,column:42},end:{line:55,column:5}},line:47},8:{name:"(anonymous_8)",decl:{start:{line:56,column:4},end:{line:56,column:5}},loc:{start:{line:56,column:28},end:{line:69,column:5}},line:56},9:{name:"(anonymous_9)",decl:{start:{line:57,column:30},end:{line:57,column:31}},loc:{start:{line:57,column:36},end:{line:64,column:9}},line:57},10:{name:"(anonymous_10)",decl:{start:{line:70,column:4},end:{line:70,column:5}},loc:{start:{line:70,column:33},end:{line:85,column:5}},line:70},11:{name:"(anonymous_11)",decl:{start:{line:71,column:30},end:{line:71,column:31}},loc:{start:{line:71,column:41},end:{line:78,column:9}},line:71}},branchMap:{0:{loc:{start:{line:39,column:15},end:{line:45,column:28}},type:"binary-expr",locations:[{start:{line:39,column:16},end:{line:39,column:85}},{start:{line:40,column:16},end:{line:40,column:85}},{start:{line:41,column:16},end:{line:41,column:80}},{start:{line:42,column:16},end:{line:42,column:80}},{start:{line:43,column:16},end:{line:43,column:80}},{start:{line:44,column:16},end:{line:44,column:80}},{start:{line:45,column:16},end:{line:45,column:27}}],line:39},1:{loc:{start:{line:48,column:15},end:{line:54,column:27}},type:"binary-expr",locations:[{start:{line:48,column:16},end:{line:48,column:86}},{start:{line:49,column:16},end:{line:49,column:86}},{start:{line:50,column:16},end:{line:50,column:81}},{start:{line:51,column:16},end:{line:51,column:81}},{start:{line:52,column:16},end:{line:52,column:81}},{start:{line:53,column:16},end:{line:53,column:81}},{start:{line:54,column:16},end:{line:54,column:26}}],line:48},2:{loc:{start:{line:65,column:38},end:{line:66,column:61}},type:"binary-expr",locations:[{start:{line:65,column:38},end:{line:65,column:80}},{start:{line:66,column:15},end:{line:66,column:61}}],line:65},3:{loc:{start:{line:67,column:8},end:{line:68,column:28}},type:"if",locations:[{start:{line:67,column:8},end:{line:68,column:28}},{start:{line:67,column:8},end:{line:68,column:28}}],line:67},4:{loc:{start:{line:79,column:8},end:{line:84,column:9}},type:"if",locations:[{start:{line:79,column:8},end:{line:84,column:9}},{start:{line:79,column:8},end:{line:84,column:9}}],line:79}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0},b:{0:[0,0,0,0,0,0,0],1:[0,0,0,0,0,0,0],2:[0,0],3:[0,0],4:[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\ValuesScale\\ValuesScale.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\ValuesScale\\ValuesScale.ts"],names:[],mappings:"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",sourcesContent:["import { DataForValueScale } from '../../Model/types';\r\nimport { IValuesScale } from './interfaces';\r\n\r\nexport class ValuesScale implements IValuesScale {\r\n  readonly minValue: HTMLSpanElement;\r\n\r\n  readonly maxValue: HTMLSpanElement;\r\n\r\n  readonly 20: HTMLSpanElement;\r\n\r\n  readonly 40: HTMLSpanElement;\r\n\r\n  readonly 60: HTMLSpanElement;\r\n\r\n  readonly 80: HTMLSpanElement;\r\n\r\n  constructor() {\r\n    this.minValue = ValuesScale.createElement('type_min');\r\n    this.maxValue = ValuesScale.createElement('type_max');\r\n    this[20] = ValuesScale.createElement('percent_20');\r\n    this[40] = ValuesScale.createElement('percent_40');\r\n    this[60] = ValuesScale.createElement('percent_60');\r\n    this[80] = ValuesScale.createElement('percent_80');\r\n  }\r\n\r\n  private static createElement(classModifier: string): HTMLSpanElement {\r\n    const element: HTMLSpanElement = document.createElement('span');\r\n\r\n    element.classList.add('goby-slider__value', `goby-slider__value_${classModifier}`);\r\n\r\n    return element;\r\n  }\r\n\r\n  public refreshValueScale(values: DataForValueScale): void {\r\n    ({\r\n      min: this.minValue.innerText,\r\n      max: this.maxValue.innerText,\r\n      20: this[20].innerText,\r\n      40: this[40].innerText,\r\n      60: this[60].innerText,\r\n      80: this[80].innerText,\r\n    } = values);\r\n  }\r\n\r\n  public centersValues(sliderWidth: number, handleWidth: number): void {\r\n    const calculateExtremeValuePosition = (element: HTMLSpanElement): string => `${\r\n      0 - ((element.offsetWidth - handleWidth) / 2)\r\n    }px`;\r\n    const calculateValuePosition = (coefficient: number, element: HTMLSpanElement): string => `${\r\n      sliderWidth * coefficient - ((element.offsetWidth - handleWidth) / 2)\r\n    }px`;\r\n\r\n    this.minValue.style.left = calculateExtremeValuePosition(this.minValue);\r\n    this.maxValue.style.right = calculateExtremeValuePosition(this.maxValue);\r\n    this[20].style.left = calculateValuePosition(0.2, this[20]);\r\n    this[40].style.left = calculateValuePosition(0.4, this[40]);\r\n    this[60].style.left = calculateValuePosition(0.6, this[60]);\r\n    this[80].style.left = calculateValuePosition(0.8, this[80]);\r\n  }\r\n\r\n  private checkIsNeedToMakeHorizontally(isVertical: boolean): boolean {\r\n    return (this.minValue.classList.contains('goby-slider__value_state_vertical'))\r\n      && (this.maxValue.classList.contains('goby-slider__value_state_vertical'))\r\n      && (this[20].classList.contains('goby-slider__value_state_vertical'))\r\n      && (this[40].classList.contains('goby-slider__value_state_vertical'))\r\n      && (this[60].classList.contains('goby-slider__value_state_vertical'))\r\n      && (this[80].classList.contains('goby-slider__value_state_vertical'))\r\n      && (!isVertical);\r\n  }\r\n\r\n  private checkIsNeedToMakeVertical(isVertical: boolean): boolean {\r\n    return (!this.minValue.classList.contains('goby-slider__value_state_vertical'))\r\n      && (!this.maxValue.classList.contains('goby-slider__value_state_vertical'))\r\n      && (!this[20].classList.contains('goby-slider__value_state_vertical'))\r\n      && (!this[40].classList.contains('goby-slider__value_state_vertical'))\r\n      && (!this[60].classList.contains('goby-slider__value_state_vertical'))\r\n      && (!this[80].classList.contains('goby-slider__value_state_vertical'))\r\n      && (isVertical);\r\n  }\r\n\r\n  public changePlane(isVertical: boolean): void {\r\n    const changeClasses = (): void => {\r\n      this.minValue.classList.toggle('goby-slider__value_state_vertical');\r\n      this.maxValue.classList.toggle('goby-slider__value_state_vertical');\r\n      this[20].classList.toggle('goby-slider__value_state_vertical');\r\n      this[40].classList.toggle('goby-slider__value_state_vertical');\r\n      this[60].classList.toggle('goby-slider__value_state_vertical');\r\n      this[80].classList.toggle('goby-slider__value_state_vertical');\r\n    };\r\n\r\n    const isNeedToChangeClasses = this.checkIsNeedToMakeVertical(isVertical)\r\n      || this.checkIsNeedToMakeHorizontally(isVertical);\r\n\r\n    if (isNeedToChangeClasses) changeClasses();\r\n  }\r\n\r\n  public hideValueScale(isValueScale: boolean): void {\r\n    const changeDisplay = (value: string): void => {\r\n      this.minValue.style.display = value;\r\n      this.maxValue.style.display = value;\r\n      this[20].style.display = value;\r\n      this[40].style.display = value;\r\n      this[60].style.display = value;\r\n      this[80].style.display = value;\r\n    };\r\n\r\n    if (!isValueScale) {\r\n      changeDisplay('none');\r\n    } else {\r\n      changeDisplay('inline-block');\r\n    }\r\n  }\r\n}\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(o=l[i="__coverage__"]||(l[i]={}))[n]&&o[n].hash===t?o[n]:(s.hash=t,o[n]=s));r.s[0]++,Object.defineProperty(A,"__esModule",{value:!0}),r.s[1]++,A.ValuesScale=void 0;class a{constructor(){r.f[0]++,r.s[2]++,this.minValue=a.createElement("type_min"),r.s[3]++,this.maxValue=a.createElement("type_max"),r.s[4]++,this[20]=a.createElement("percent_20"),r.s[5]++,this[40]=a.createElement("percent_40"),r.s[6]++,this[60]=a.createElement("percent_60"),r.s[7]++,this[80]=a.createElement("percent_80")}static createElement(e){r.f[1]++;const A=(r.s[8]++,document.createElement("span"));return r.s[9]++,A.classList.add("goby-slider__value",`goby-slider__value_${e}`),r.s[10]++,A}refreshValueScale(e){r.f[2]++,r.s[11]++,({min:this.minValue.innerText,max:this.maxValue.innerText,20:this[20].innerText,40:this[40].innerText,60:this[60].innerText,80:this[80].innerText}=e)}centersValues(e,A){r.f[3]++,r.s[12]++;const n=e=>(r.f[4]++,r.s[13]++,0-(e.offsetWidth-A)/2+"px");r.s[14]++;const t=(n,t)=>(r.f[5]++,r.s[15]++,e*n-(t.offsetWidth-A)/2+"px");r.s[16]++,this.minValue.style.left=n(this.minValue),r.s[17]++,this.maxValue.style.right=n(this.maxValue),r.s[18]++,this[20].style.left=t(.2,this[20]),r.s[19]++,this[40].style.left=t(.4,this[40]),r.s[20]++,this[60].style.left=t(.6,this[60]),r.s[21]++,this[80].style.left=t(.8,this[80])}checkIsNeedToMakeHorizontally(e){return r.f[6]++,r.s[22]++,r.b[0][0]++,this.minValue.classList.contains("goby-slider__value_state_vertical")&&(r.b[0][1]++,this.maxValue.classList.contains("goby-slider__value_state_vertical"))&&(r.b[0][2]++,this[20].classList.contains("goby-slider__value_state_vertical"))&&(r.b[0][3]++,this[40].classList.contains("goby-slider__value_state_vertical"))&&(r.b[0][4]++,this[60].classList.contains("goby-slider__value_state_vertical"))&&(r.b[0][5]++,this[80].classList.contains("goby-slider__value_state_vertical"))&&(r.b[0][6]++,!e)}checkIsNeedToMakeVertical(e){return r.f[7]++,r.s[23]++,r.b[1][0]++,!(this.minValue.classList.contains("goby-slider__value_state_vertical")||(r.b[1][1]++,this.maxValue.classList.contains("goby-slider__value_state_vertical"))||(r.b[1][2]++,this[20].classList.contains("goby-slider__value_state_vertical"))||(r.b[1][3]++,this[40].classList.contains("goby-slider__value_state_vertical"))||(r.b[1][4]++,this[60].classList.contains("goby-slider__value_state_vertical"))||(r.b[1][5]++,this[80].classList.contains("goby-slider__value_state_vertical")))&&(r.b[1][6]++,e)}changePlane(e){r.f[8]++,r.s[24]++;const A=()=>{r.f[9]++,r.s[25]++,this.minValue.classList.toggle("goby-slider__value_state_vertical"),r.s[26]++,this.maxValue.classList.toggle("goby-slider__value_state_vertical"),r.s[27]++,this[20].classList.toggle("goby-slider__value_state_vertical"),r.s[28]++,this[40].classList.toggle("goby-slider__value_state_vertical"),r.s[29]++,this[60].classList.toggle("goby-slider__value_state_vertical"),r.s[30]++,this[80].classList.toggle("goby-slider__value_state_vertical")},n=(r.s[31]++,r.b[2][0]++,this.checkIsNeedToMakeVertical(e)||(r.b[2][1]++,this.checkIsNeedToMakeHorizontally(e)));r.s[32]++,n?(r.b[3][0]++,r.s[33]++,A()):r.b[3][1]++}hideValueScale(e){r.f[10]++,r.s[34]++;const A=e=>{r.f[11]++,r.s[35]++,this.minValue.style.display=e,r.s[36]++,this.maxValue.style.display=e,r.s[37]++,this[20].style.display=e,r.s[38]++,this[40].style.display=e,r.s[39]++,this[60].style.display=e,r.s[40]++,this[80].style.display=e};r.s[41]++,e?(r.b[4][1]++,r.s[43]++,A("inline-block")):(r.b[4][0]++,r.s[42]++,A("none"))}}r.s[44]++,A.ValuesScale=a},913:function(e,A,n){"use strict";var t,l,i,s,o,r,a=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\View.ts",l="7a5f213b43de3c4b29200e05bcb8322ebdde09d8",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\View.ts",statementMap:{0:{start:{line:2,column:17},end:{line:7,column:1}},1:{start:{line:3,column:12},end:{line:3,column:28}},2:{start:{line:3,column:34},end:{line:3,column:125}},3:{start:{line:4,column:4},end:{line:5,column:150}},4:{start:{line:4,column:79},end:{line:4,column:131}},5:{start:{line:5,column:9},end:{line:5,column:150}},6:{start:{line:5,column:58},end:{line:5,column:150}},7:{start:{line:5,column:81},end:{line:5,column:150}},8:{start:{line:6,column:4},end:{line:6,column:66}},9:{start:{line:8,column:0},end:{line:8,column:62}},10:{start:{line:9,column:0},end:{line:9,column:22}},11:{start:{line:10,column:29},end:{line:10,column:58}},12:{start:{line:11,column:17},end:{line:11,column:43}},13:{start:{line:12,column:18},end:{line:12,column:46}},14:{start:{line:13,column:19},end:{line:13,column:49}},15:{start:{line:14,column:27},end:{line:14,column:73}},16:{start:{line:15,column:22},end:{line:15,column:58}},17:{start:{line:16,column:19},end:{line:16,column:49}},18:{start:{line:17,column:11},end:{line:274,column:1}},19:{start:{line:19,column:8},end:{line:26,column:10}},20:{start:{line:27,column:8},end:{line:27,column:29}},21:{start:{line:28,column:8},end:{line:28,column:44}},22:{start:{line:29,column:8},end:{line:29,column:47}},23:{start:{line:30,column:8},end:{line:30,column:66}},24:{start:{line:31,column:8},end:{line:31,column:59}},25:{start:{line:32,column:8},end:{line:32,column:50}},26:{start:{line:33,column:8},end:{line:33,column:38}},27:{start:{line:34,column:8},end:{line:40,column:11}},28:{start:{line:43,column:8},end:{line:48,column:11}},29:{start:{line:49,column:8},end:{line:49,column:54}},30:{start:{line:53,column:8},end:{line:53,column:40}},31:{start:{line:54,column:8},end:{line:59,column:9}},32:{start:{line:55,column:12},end:{line:55,column:168}},33:{start:{line:58,column:12},end:{line:58,column:81}},34:{start:{line:62,column:8},end:{line:63,column:59}},35:{start:{line:66,column:8},end:{line:66,column:30}},36:{start:{line:67,column:8},end:{line:68,column:36}},37:{start:{line:68,column:12},end:{line:68,column:36}},38:{start:{line:69,column:8},end:{line:69,column:79}},39:{start:{line:70,column:8},end:{line:70,column:87}},40:{start:{line:71,column:8},end:{line:72,column:80}},41:{start:{line:72,column:12},end:{line:72,column:80}},42:{start:{line:73,column:8},end:{line:80,column:11}},43:{start:{line:83,column:8},end:{line:84,column:70}},44:{start:{line:84,column:12},end:{line:84,column:70}},45:{start:{line:85,column:8},end:{line:86,column:67}},46:{start:{line:86,column:12},end:{line:86,column:67}},47:{start:{line:87,column:8},end:{line:88,column:77}},48:{start:{line:88,column:12},end:{line:88,column:77}},49:{start:{line:89,column:8},end:{line:90,column:75}},50:{start:{line:90,column:12},end:{line:90,column:75}},51:{start:{line:91,column:8},end:{line:92,column:72}},52:{start:{line:92,column:12},end:{line:92,column:72}},53:{start:{line:95,column:8},end:{line:103,column:9}},54:{start:{line:96,column:12},end:{line:100,column:15}},55:{start:{line:101,column:12},end:{line:101,column:55}},56:{start:{line:102,column:12},end:{line:102,column:59}},57:{start:{line:104,column:8},end:{line:115,column:9}},58:{start:{line:105,column:12},end:{line:109,column:15}},59:{start:{line:110,column:12},end:{line:113,column:15}},60:{start:{line:114,column:12},end:{line:114,column:66}},61:{start:{line:116,column:8},end:{line:117,column:75}},62:{start:{line:117,column:12},end:{line:117,column:75}},63:{start:{line:118,column:8},end:{line:119,column:76}},64:{start:{line:119,column:12},end:{line:119,column:76}},65:{start:{line:120,column:8},end:{line:122,column:9}},66:{start:{line:121,column:12},end:{line:121,column:44}},67:{start:{line:125,column:33},end:{line:125,column:87}},68:{start:{line:126,column:35},end:{line:126,column:39}},69:{start:{line:127,column:8},end:{line:133,column:9}},70:{start:{line:128,column:12},end:{line:132,column:15}},71:{start:{line:134,column:37},end:{line:134,column:88}},72:{start:{line:135,column:8},end:{line:136,column:50}},73:{start:{line:136,column:12},end:{line:136,column:50}},74:{start:{line:139,column:8},end:{line:141,column:11}},75:{start:{line:140,column:12},end:{line:140,column:77}},76:{start:{line:142,column:8},end:{line:142,column:102}},77:{start:{line:143,column:8},end:{line:143,column:108}},78:{start:{line:144,column:8},end:{line:144,column:118}},79:{start:{line:145,column:8},end:{line:145,column:116}},80:{start:{line:146,column:8},end:{line:146,column:112}},81:{start:{line:147,column:8},end:{line:149,column:11}},82:{start:{line:148,column:12},end:{line:148,column:79}},83:{start:{line:150,column:8},end:{line:152,column:11}},84:{start:{line:151,column:12},end:{line:151,column:79}},85:{start:{line:153,column:8},end:{line:153,column:104}},86:{start:{line:154,column:8},end:{line:156,column:11}},87:{start:{line:155,column:12},end:{line:155,column:73}},88:{start:{line:157,column:8},end:{line:157,column:81}},89:{start:{line:158,column:8},end:{line:158,column:67}},90:{start:{line:161,column:23},end:{line:161,column:35}},91:{start:{line:162,column:8},end:{line:168,column:11}},92:{start:{line:171,column:24},end:{line:171,column:36}},93:{start:{line:172,column:8},end:{line:172,column:97}},94:{start:{line:175,column:24},end:{line:175,column:36}},95:{start:{line:176,column:8},end:{line:176,column:52}},96:{start:{line:177,column:8},end:{line:181,column:11}},97:{start:{line:182,column:8},end:{line:185,column:11}},98:{start:{line:186,column:8},end:{line:186,column:62}},99:{start:{line:189,column:24},end:{line:189,column:36}},100:{start:{line:190,column:8},end:{line:190,column:54}},101:{start:{line:191,column:8},end:{line:195,column:11}},102:{start:{line:196,column:8},end:{line:196,column:62}},103:{start:{line:197,column:8},end:{line:197,column:66}},104:{start:{line:200,column:24},end:{line:200,column:36}},105:{start:{line:201,column:8},end:{line:201,column:56}},106:{start:{line:202,column:8},end:{line:202,column:71}},107:{start:{line:205,column:24},end:{line:205,column:36}},108:{start:{line:206,column:8},end:{line:206,column:59}},109:{start:{line:207,column:8},end:{line:207,column:72}},110:{start:{line:210,column:24},end:{line:210,column:36}},111:{start:{line:212,column:8},end:{line:217,column:9}},112:{start:{line:213,column:12},end:{line:213,column:28}},113:{start:{line:216,column:12},end:{line:216,column:26}},114:{start:{line:218,column:8},end:{line:218,column:91}},115:{start:{line:221,column:24},end:{line:221,column:36}},116:{start:{line:222,column:8},end:{line:222,column:56}},117:{start:{line:223,column:8},end:{line:229,column:9}},118:{start:{line:224,column:12},end:{line:224,column:64}},119:{start:{line:225,column:12},end:{line:225,column:44}},120:{start:{line:228,column:12},end:{line:228,column:80}},121:{start:{line:232,column:24},end:{line:232,column:36}},122:{start:{line:234,column:8},end:{line:239,column:9}},123:{start:{line:235,column:12},end:{line:235,column:27}},124:{start:{line:238,column:12},end:{line:238,column:27}},125:{start:{line:240,column:8},end:{line:240,column:101}},126:{start:{line:243,column:24},end:{line:243,column:36}},127:{start:{line:244,column:8},end:{line:244,column:53}},128:{start:{line:245,column:8},end:{line:245,column:87}},129:{start:{line:248,column:32},end:{line:248,column:110}},130:{start:{line:249,column:36},end:{line:249,column:140}},131:{start:{line:250,column:33},end:{line:250,column:172}},132:{start:{line:251,column:8},end:{line:252,column:19}},133:{start:{line:252,column:12},end:{line:252,column:19}},134:{start:{line:253,column:31},end:{line:253,column:98}},135:{start:{line:254,column:29},end:{line:258,column:10}},136:{start:{line:259,column:8},end:{line:259,column:60}},137:{start:{line:260,column:31},end:{line:260,column:146}},138:{start:{line:261,column:8},end:{line:265,column:11}},139:{start:{line:266,column:8},end:{line:266,column:49}},140:{start:{line:269,column:8},end:{line:269,column:79}},141:{start:{line:270,column:8},end:{line:270,column:87}},142:{start:{line:271,column:8},end:{line:272,column:80}},143:{start:{line:272,column:12},end:{line:272,column:80}},144:{start:{line:275,column:0},end:{line:277,column:9}},145:{start:{line:278,column:0},end:{line:278,column:20}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:46},end:{line:2,column:47}},loc:{start:{line:2,column:87},end:{line:7,column:1}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:34},end:{line:41,column:5}},line:18},2:{name:"(anonymous_2)",decl:{start:{line:42,column:4},end:{line:42,column:5}},loc:{start:{line:42,column:21},end:{line:50,column:5}},line:42},3:{name:"(anonymous_3)",decl:{start:{line:51,column:4},end:{line:51,column:5}},loc:{start:{line:51,column:23},end:{line:60,column:5}},line:51},4:{name:"(anonymous_4)",decl:{start:{line:61,column:4},end:{line:61,column:5}},loc:{start:{line:61,column:26},end:{line:64,column:5}},line:61},5:{name:"(anonymous_5)",decl:{start:{line:65,column:4},end:{line:65,column:5}},loc:{start:{line:65,column:26},end:{line:81,column:5}},line:65},6:{name:"(anonymous_6)",decl:{start:{line:82,column:4},end:{line:82,column:5}},loc:{start:{line:82,column:31},end:{line:93,column:5}},line:82},7:{name:"(anonymous_7)",decl:{start:{line:94,column:4},end:{line:94,column:5}},loc:{start:{line:94,column:24},end:{line:123,column:5}},line:94},8:{name:"(anonymous_8)",decl:{start:{line:124,column:4},end:{line:124,column:5}},loc:{start:{line:124,column:35},end:{line:137,column:5}},line:124},9:{name:"(anonymous_9)",decl:{start:{line:138,column:4},end:{line:138,column:5}},loc:{start:{line:138,column:25},end:{line:159,column:5}},line:138},10:{name:"(anonymous_10)",decl:{start:{line:139,column:48},end:{line:139,column:49}},loc:{start:{line:139,column:64},end:{line:141,column:9}},line:139},11:{name:"(anonymous_11)",decl:{start:{line:147,column:99},end:{line:147,column:100}},loc:{start:{line:147,column:115},end:{line:149,column:9}},line:147},12:{name:"(anonymous_12)",decl:{start:{line:150,column:107},end:{line:150,column:108}},loc:{start:{line:150,column:123},end:{line:152,column:9}},line:150},13:{name:"(anonymous_13)",decl:{start:{line:154,column:65},end:{line:154,column:66}},loc:{start:{line:154,column:77},end:{line:156,column:9}},line:154},14:{name:"(anonymous_14)",decl:{start:{line:160,column:4},end:{line:160,column:5}},loc:{start:{line:160,column:29},end:{line:169,column:5}},line:160},15:{name:"(anonymous_15)",decl:{start:{line:170,column:4},end:{line:170,column:5}},loc:{start:{line:170,column:33},end:{line:173,column:5}},line:170},16:{name:"(anonymous_16)",decl:{start:{line:174,column:4},end:{line:174,column:5}},loc:{start:{line:174,column:32},end:{line:187,column:5}},line:174},17:{name:"(anonymous_17)",decl:{start:{line:188,column:4},end:{line:188,column:5}},loc:{start:{line:188,column:35},end:{line:198,column:5}},line:188},18:{name:"(anonymous_18)",decl:{start:{line:199,column:4},end:{line:199,column:5}},loc:{start:{line:199,column:40},end:{line:203,column:5}},line:199},19:{name:"(anonymous_19)",decl:{start:{line:204,column:4},end:{line:204,column:5}},loc:{start:{line:204,column:36},end:{line:208,column:5}},line:204},20:{name:"(anonymous_20)",decl:{start:{line:209,column:4},end:{line:209,column:5}},loc:{start:{line:209,column:34},end:{line:219,column:5}},line:209},21:{name:"(anonymous_21)",decl:{start:{line:220,column:4},end:{line:220,column:5}},loc:{start:{line:220,column:33},end:{line:230,column:5}},line:220},22:{name:"(anonymous_22)",decl:{start:{line:231,column:4},end:{line:231,column:5}},loc:{start:{line:231,column:34},end:{line:241,column:5}},line:231},23:{name:"(anonymous_23)",decl:{start:{line:242,column:4},end:{line:242,column:5}},loc:{start:{line:242,column:37},end:{line:246,column:5}},line:242},24:{name:"(anonymous_24)",decl:{start:{line:247,column:4},end:{line:247,column:5}},loc:{start:{line:247,column:29},end:{line:267,column:5}},line:247},25:{name:"(anonymous_25)",decl:{start:{line:268,column:4},end:{line:268,column:5}},loc:{start:{line:268,column:25},end:{line:273,column:5}},line:268}},branchMap:{0:{loc:{start:{line:2,column:17},end:{line:7,column:1}},type:"binary-expr",locations:[{start:{line:2,column:18},end:{line:2,column:22}},{start:{line:2,column:26},end:{line:2,column:41}},{start:{line:2,column:46},end:{line:7,column:1}}],line:2},1:{loc:{start:{line:3,column:34},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:42},end:{line:3,column:48}},{start:{line:3,column:51},end:{line:3,column:125}}],line:3},2:{loc:{start:{line:3,column:51},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:67},end:{line:3,column:118}},{start:{line:3,column:121},end:{line:3,column:125}}],line:3},3:{loc:{start:{line:4,column:4},end:{line:5,column:150}},type:"if",locations:[{start:{line:4,column:4},end:{line:5,column:150}},{start:{line:4,column:4},end:{line:5,column:150}}],line:4},4:{loc:{start:{line:4,column:8},end:{line:4,column:77}},type:"binary-expr",locations:[{start:{line:4,column:8},end:{line:4,column:35}},{start:{line:4,column:39},end:{line:4,column:77}}],line:4},5:{loc:{start:{line:5,column:58},end:{line:5,column:150}},type:"if",locations:[{start:{line:5,column:58},end:{line:5,column:150}},{start:{line:5,column:58},end:{line:5,column:150}}],line:5},6:{loc:{start:{line:5,column:85},end:{line:5,column:149}},type:"binary-expr",locations:[{start:{line:5,column:86},end:{line:5,column:143}},{start:{line:5,column:148},end:{line:5,column:149}}],line:5},7:{loc:{start:{line:5,column:86},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:94},end:{line:5,column:98}},{start:{line:5,column:101},end:{line:5,column:143}}],line:5},8:{loc:{start:{line:5,column:101},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:109},end:{line:5,column:126}},{start:{line:5,column:129},end:{line:5,column:143}}],line:5},9:{loc:{start:{line:6,column:11},end:{line:6,column:62}},type:"binary-expr",locations:[{start:{line:6,column:11},end:{line:6,column:16}},{start:{line:6,column:20},end:{line:6,column:21}},{start:{line:6,column:25},end:{line:6,column:62}}],line:6},10:{loc:{start:{line:54,column:8},end:{line:59,column:9}},type:"if",locations:[{start:{line:54,column:8},end:{line:59,column:9}},{start:{line:54,column:8},end:{line:59,column:9}}],line:54},11:{loc:{start:{line:55,column:12},end:{line:55,column:167}},type:"cond-expr",locations:[{start:{line:55,column:99},end:{line:55,column:105}},{start:{line:55,column:108},end:{line:55,column:167}}],line:55},12:{loc:{start:{line:55,column:12},end:{line:55,column:96}},type:"binary-expr",locations:[{start:{line:55,column:12},end:{line:55,column:79}},{start:{line:55,column:83},end:{line:55,column:96}}],line:55},13:{loc:{start:{line:62,column:15},end:{line:63,column:58}},type:"binary-expr",locations:[{start:{line:62,column:15},end:{line:62,column:79}},{start:{line:63,column:15},end:{line:63,column:58}}],line:62},14:{loc:{start:{line:67,column:8},end:{line:68,column:36}},type:"if",locations:[{start:{line:67,column:8},end:{line:68,column:36}},{start:{line:67,column:8},end:{line:68,column:36}}],line:67},15:{loc:{start:{line:71,column:8},end:{line:72,column:80}},type:"if",locations:[{start:{line:71,column:8},end:{line:72,column:80}},{start:{line:71,column:8},end:{line:72,column:80}}],line:71},16:{loc:{start:{line:83,column:8},end:{line:84,column:70}},type:"if",locations:[{start:{line:83,column:8},end:{line:84,column:70}},{start:{line:83,column:8},end:{line:84,column:70}}],line:83},17:{loc:{start:{line:85,column:8},end:{line:86,column:67}},type:"if",locations:[{start:{line:85,column:8},end:{line:86,column:67}},{start:{line:85,column:8},end:{line:86,column:67}}],line:85},18:{loc:{start:{line:87,column:8},end:{line:88,column:77}},type:"if",locations:[{start:{line:87,column:8},end:{line:88,column:77}},{start:{line:87,column:8},end:{line:88,column:77}}],line:87},19:{loc:{start:{line:89,column:8},end:{line:90,column:75}},type:"if",locations:[{start:{line:89,column:8},end:{line:90,column:75}},{start:{line:89,column:8},end:{line:90,column:75}}],line:89},20:{loc:{start:{line:91,column:8},end:{line:92,column:72}},type:"if",locations:[{start:{line:91,column:8},end:{line:92,column:72}},{start:{line:91,column:8},end:{line:92,column:72}}],line:91},21:{loc:{start:{line:95,column:8},end:{line:103,column:9}},type:"if",locations:[{start:{line:95,column:8},end:{line:103,column:9}},{start:{line:95,column:8},end:{line:103,column:9}}],line:95},22:{loc:{start:{line:104,column:8},end:{line:115,column:9}},type:"if",locations:[{start:{line:104,column:8},end:{line:115,column:9}},{start:{line:104,column:8},end:{line:115,column:9}}],line:104},23:{loc:{start:{line:116,column:8},end:{line:117,column:75}},type:"if",locations:[{start:{line:116,column:8},end:{line:117,column:75}},{start:{line:116,column:8},end:{line:117,column:75}}],line:116},24:{loc:{start:{line:118,column:8},end:{line:119,column:76}},type:"if",locations:[{start:{line:118,column:8},end:{line:119,column:76}},{start:{line:118,column:8},end:{line:119,column:76}}],line:118},25:{loc:{start:{line:120,column:8},end:{line:122,column:9}},type:"if",locations:[{start:{line:120,column:8},end:{line:122,column:9}},{start:{line:120,column:8},end:{line:122,column:9}}],line:120},26:{loc:{start:{line:125,column:33},end:{line:125,column:87}},type:"binary-expr",locations:[{start:{line:125,column:33},end:{line:125,column:58}},{start:{line:125,column:62},end:{line:125,column:87}}],line:125},27:{loc:{start:{line:127,column:8},end:{line:133,column:9}},type:"if",locations:[{start:{line:127,column:8},end:{line:133,column:9}},{start:{line:127,column:8},end:{line:133,column:9}}],line:127},28:{loc:{start:{line:134,column:37},end:{line:134,column:88}},type:"binary-expr",locations:[{start:{line:134,column:37},end:{line:134,column:57}},{start:{line:134,column:61},end:{line:134,column:88}}],line:134},29:{loc:{start:{line:135,column:8},end:{line:136,column:50}},type:"if",locations:[{start:{line:135,column:8},end:{line:136,column:50}},{start:{line:135,column:8},end:{line:136,column:50}}],line:135},30:{loc:{start:{line:212,column:8},end:{line:217,column:9}},type:"if",locations:[{start:{line:212,column:8},end:{line:217,column:9}},{start:{line:212,column:8},end:{line:217,column:9}}],line:212},31:{loc:{start:{line:223,column:8},end:{line:229,column:9}},type:"if",locations:[{start:{line:223,column:8},end:{line:229,column:9}},{start:{line:223,column:8},end:{line:229,column:9}}],line:223},32:{loc:{start:{line:234,column:8},end:{line:239,column:9}},type:"if",locations:[{start:{line:234,column:8},end:{line:239,column:9}},{start:{line:234,column:8},end:{line:239,column:9}}],line:234},33:{loc:{start:{line:248,column:32},end:{line:248,column:110}},type:"binary-expr",locations:[{start:{line:248,column:32},end:{line:248,column:71}},{start:{line:248,column:75},end:{line:248,column:110}}],line:248},34:{loc:{start:{line:251,column:8},end:{line:252,column:19}},type:"if",locations:[{start:{line:251,column:8},end:{line:252,column:19}},{start:{line:251,column:8},end:{line:252,column:19}}],line:251},35:{loc:{start:{line:253,column:31},end:{line:253,column:98}},type:"cond-expr",locations:[{start:{line:253,column:61},end:{line:253,column:77}},{start:{line:253,column:80},end:{line:253,column:98}}],line:253},36:{loc:{start:{line:271,column:8},end:{line:272,column:80}},type:"if",locations:[{start:{line:271,column:8},end:{line:272,column:80}},{start:{line:271,column:8},end:{line:272,column:80}}],line:271}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0,87:0,88:0,89:0,90:0,91:0,92:0,93:0,94:0,95:0,96:0,97:0,98:0,99:0,100:0,101:0,102:0,103:0,104:0,105:0,106:0,107:0,108:0,109:0,110:0,111:0,112:0,113:0,114:0,115:0,116:0,117:0,118:0,119:0,120:0,121:0,122:0,123:0,124:0,125:0,126:0,127:0,128:0,129:0,130:0,131:0,132:0,133:0,134:0,135:0,136:0,137:0,138:0,139:0,140:0,141:0,142:0,143:0,144:0,145:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0},b:{0:[0,0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0],16:[0,0],17:[0,0],18:[0,0],19:[0,0],20:[0,0],21:[0,0],22:[0,0],23:[0,0],24:[0,0],25:[0,0],26:[0,0],27:[0,0],28:[0,0],29:[0,0],30:[0,0],31:[0,0],32:[0,0],33:[0,0],34:[0,0],35:[0,0],36:[0,0]},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\View.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\View\\View.ts"],names:[],mappings:"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",sourcesContent:["import autobind from 'autobind-decorator';\r\nimport { Slider } from './Slider/Slider';\r\nimport { Handles } from './Handles/Handles';\r\nimport { Movement } from './Movement/Movement';\r\nimport { SelectedInterval } from './SelectedInterval/SelectedInterval';\r\nimport { ValuesScale } from './ValuesScale/ValuesScale';\r\nimport { SideMenu } from './SideMenu/SideMenu';\r\nimport {\r\n  RefreshData,\r\n  BasicViewSettings,\r\n  DataRequestToModel,\r\n  TargetsForViewUpdate,\r\n} from './types';\r\n\r\n@autobind\r\nexport class View {\r\n  readonly target: HTMLElement;\r\n\r\n  readonly slider: Slider;\r\n\r\n  readonly handles: Handles;\r\n\r\n  readonly movement: Movement;\r\n\r\n  readonly interval: SelectedInterval;\r\n\r\n  readonly valuesScale: ValuesScale;\r\n\r\n  readonly sideMenu: SideMenu;\r\n\r\n  public basicSettings: BasicViewSettings;\r\n\r\n  public dataRequestToModel: DataRequestToModel = {\r\n    needDataForScale: { name: '', value: '' },\r\n    needDataForStartPosition: { name: '', value: '' },\r\n    needStepWidth: { name: '', value: '' },\r\n    needApplyValueFromScale: { name: '', value: '' },\r\n    needApplyNewValue: { name: '', value: '' },\r\n    needChangeSliderValuesRange: { name: '', value: '' },\r\n  };\r\n\r\n  constructor(settings: BasicViewSettings, target: HTMLElement) {\r\n    this.target = target;\r\n    this.slider = new Slider();\r\n    this.handles = new Handles();\r\n    this.interval = new SelectedInterval();\r\n    this.valuesScale = new ValuesScale();\r\n    this.sideMenu = new SideMenu();\r\n    this.basicSettings = settings;\r\n    this.movement = new Movement({\r\n      slider: this.slider.slider,\r\n      fromHandle: this.handles.fromHandle,\r\n      toHandle: this.handles.toHandle,\r\n      interval: this.interval.interval,\r\n      basicSettings: this.basicSettings,\r\n    });\r\n  }\r\n\r\n  private addSliderToDOM(): void {\r\n    this.slider.collectSlider({\r\n      from: this.handles.fromHandle,\r\n      to: this.handles.toHandle,\r\n      interval: this.interval.interval,\r\n      valueScale: this.valuesScale,\r\n    });\r\n    this.target.append(this.slider.sliderWrapper);\r\n  }\r\n\r\n  private addSideMenuToDOM(): void {\r\n    this.sideMenu.collectSideMenu();\r\n\r\n    if (typeof this.basicSettings.sideMenu === 'string') {\r\n      document.querySelector(this.basicSettings.sideMenu)?.append(this.sideMenu.sideMenuElements.sideMenuContainer!);\r\n    } else {\r\n      this.target.append(this.sideMenu.sideMenuElements.sideMenuContainer!);\r\n    }\r\n  }\r\n\r\n  private checkIsStepRequired(): boolean {\r\n    return Object.prototype.hasOwnProperty.call(this.basicSettings, 'step')\r\n      && typeof this.basicSettings.step === 'number';\r\n  }\r\n\r\n  public prepareSliderForUse(): void {\r\n    this.addSliderToDOM();\r\n\r\n    if (this.basicSettings.sideMenu) this.addSideMenuToDOM();\r\n\r\n    this.dataRequestToModel.needDataForScale = { name: '', value: 'true' };\r\n    this.dataRequestToModel.needDataForStartPosition = { name: '', value: 'true' };\r\n\r\n    if (this.checkIsStepRequired()) this.dataRequestToModel.needStepWidth = { name: '', value: 'true' };\r\n\r\n    this.updateView({\r\n      vertical: this.basicSettings.vertical,\r\n      double: this.basicSettings.double,\r\n      sideMenu: this.basicSettings.sideMenu,\r\n      handlesValues: this.basicSettings.handlesValues,\r\n      valueScale: this.basicSettings.valueScale,\r\n      integer: this.basicSettings.integer,\r\n    });\r\n  }\r\n\r\n  private turnOnMenuToggles(targets: TargetsForViewUpdate): void {\r\n    if (targets.vertical) this.sideMenu.sideMenuElements.planeToggle!.checked = true;\r\n    if (targets.double) this.sideMenu.sideMenuElements.toToggle!.checked = true;\r\n    if (targets.handlesValues) this.sideMenu.sideMenuElements.handleValuesToggle!.checked = true;\r\n    if (targets.valueScale) this.sideMenu.sideMenuElements.valueScaleToggle!.checked = true;\r\n    if (targets.integer) this.sideMenu.sideMenuElements.integerToggle!.checked = true;\r\n  }\r\n\r\n  public updateView(targets: TargetsForViewUpdate): void {\r\n    if (targets.vertical) {\r\n      this.slider.changePlane({\r\n        isVertical: targets.vertical,\r\n        isStep: this.checkIsStepRequired(),\r\n        requests: this.dataRequestToModel,\r\n      });\r\n      this.handles.changePlane(targets.vertical);\r\n      this.valuesScale.changePlane(targets.vertical);\r\n    }\r\n    if (!targets.double) {\r\n      this.handles.controlHandlesDisplay({\r\n        isDouble: this.basicSettings.double,\r\n        positions: this.movement.positions,\r\n        sliderWidth: this.slider.slider.offsetWidth,\r\n      });\r\n      this.interval.hideSelectedInterval({\r\n        isDouble: this.basicSettings.double,\r\n        handleWidth: this.handles.fromHandle.offsetWidth,\r\n      });\r\n      this.sideMenu.hideToValues(this.basicSettings.double);\r\n    }\r\n    if (!targets.valueScale) this.valuesScale.hideValueScale(this.basicSettings.valueScale);\r\n    if (!targets.handlesValues) this.handles.hideHandleValues(this.basicSettings.handlesValues);\r\n    if (targets.sideMenu) {\r\n      this.turnOnMenuToggles(targets);\r\n    }\r\n  }\r\n\r\n  public refreshAllComponents(settings: RefreshData): void {\r\n    const isTargetNotRange = settings.target !== 'min' && settings.target !== 'max';\r\n    let handlesRefreshResult: boolean = true;\r\n\r\n    if (isTargetNotRange) {\r\n      handlesRefreshResult = this.handles.refreshValues(settings, {\r\n        positions: this.movement.positions,\r\n        isDouble: this.basicSettings.double,\r\n        sliderWidth: this.slider.slider.offsetWidth,\r\n      });\r\n    }\r\n\r\n    const isNeedSideMenuUpdate = handlesRefreshResult && this.basicSettings.sideMenu;\r\n    if (isNeedSideMenuUpdate) this.sideMenu.refreshValues(settings);\r\n  }\r\n\r\n  public bindEventListeners(): void {\r\n    Object.values(this.valuesScale).forEach((scaleValue: HTMLSpanElement): void => {\r\n      scaleValue.addEventListener('click', this.handleScaleValueClick);\r\n    });\r\n    this.sideMenu.sideMenuElements.toToggle!.addEventListener('change', this.handleToToggleChange);\r\n    this.sideMenu.sideMenuElements.planeToggle!.addEventListener('change', this.handlePlaneToggleChange);\r\n    this.sideMenu.sideMenuElements.valueScaleToggle!.addEventListener('change', this.handleValueScaleToggleChange);\r\n    this.sideMenu.sideMenuElements.handleValuesToggle!.addEventListener('change', this.handleHandleValuesChange);\r\n    this.sideMenu.sideMenuElements.integerToggle!.addEventListener('change', this.handleIntegerToggleChange);\r\n    [this.sideMenu.sideMenuElements.fromInput, this.sideMenu.sideMenuElements.toInput].forEach(\r\n      (valueInput: HTMLInputElement | undefined): void => {\r\n        valueInput!.addEventListener('change', this.handleValueInputChange);\r\n      },\r\n    );\r\n    [this.sideMenu.sideMenuElements.minimumInput, this.sideMenu.sideMenuElements.maximumInput].forEach(\r\n      (rangeInput: HTMLInputElement | undefined): void => {\r\n        rangeInput!.addEventListener('change', this.handleRangeInputChange);\r\n      },\r\n    );\r\n    this.sideMenu.sideMenuElements.stepInput!.addEventListener('change', this.handleStepInputChange);\r\n    [this.handles.fromHandle, this.handles.toHandle].forEach((handle: HTMLSpanElement):void => {\r\n      handle.addEventListener('mousedown', this.handleHandleClick);\r\n    });\r\n    this.slider.slider.addEventListener('mousedown', this.handleSliderClick);\r\n    window.addEventListener('resize', this.handleWindowResize);\r\n  }\r\n\r\n  private handleHandleClick(event: MouseEvent): void {\r\n    const target: HTMLSpanElement = event.target as HTMLSpanElement;\r\n    this.movement.handleListener({\r\n      eventInfo: {\r\n        target,\r\n        x: event.clientX,\r\n        y: event.clientY,\r\n      },\r\n    });\r\n  }\r\n\r\n  private handleScaleValueClick(event: Event): void {\r\n    const element: HTMLSpanElement = event.target as HTMLSpanElement;\r\n    this.dataRequestToModel.needApplyValueFromScale = { name: '', value: element.innerText };\r\n  }\r\n\r\n  private handleToToggleChange(event: Event): void {\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n\r\n    this.basicSettings.double = element.checked;\r\n    this.handles.controlHandlesDisplay({\r\n      isDouble: this.basicSettings.double,\r\n      positions: this.movement.positions,\r\n      sliderWidth: this.slider.slider.offsetWidth,\r\n    });\r\n    this.interval.hideSelectedInterval({\r\n      isDouble: this.basicSettings.double,\r\n      handleWidth: this.handles.fromHandle.offsetWidth,\r\n    });\r\n    this.sideMenu.hideToValues(this.basicSettings.double);\r\n  }\r\n\r\n  private handlePlaneToggleChange(event: Event): void {\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n\r\n    this.basicSettings.vertical = element.checked;\r\n    this.slider.changePlane({\r\n      isVertical: this.basicSettings.vertical,\r\n      isStep: this.checkIsStepRequired(),\r\n      requests: this.dataRequestToModel,\r\n    });\r\n    this.handles.changePlane(this.basicSettings.vertical);\r\n    this.valuesScale.changePlane(this.basicSettings.vertical);\r\n  }\r\n\r\n  private handleValueScaleToggleChange(event: Event): void {\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n\r\n    this.basicSettings.valueScale = element.checked;\r\n    this.valuesScale.hideValueScale(this.basicSettings.valueScale);\r\n  }\r\n\r\n  private handleHandleValuesChange(event: Event): void {\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n\r\n    this.basicSettings.handlesValues = element.checked;\r\n    this.handles.hideHandleValues(this.basicSettings.handlesValues);\r\n  }\r\n\r\n  private handleValueInputChange(event: Event): void {\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n    let target: string;\r\n\r\n    if (element === this.sideMenu.sideMenuElements.fromInput) {\r\n      target = 'from';\r\n    } else {\r\n      target = 'to';\r\n    }\r\n\r\n    this.dataRequestToModel.needApplyNewValue = { name: target, value: element.value };\r\n  }\r\n\r\n  private handleStepInputChange(event: Event): void {\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n\r\n    this.basicSettings.step = Number(element.value);\r\n    if (element.value === '0') {\r\n      this.sideMenu.sideMenuElements.stepInput!.value = '';\r\n      this.basicSettings.step = false;\r\n    } else {\r\n      this.dataRequestToModel.needStepWidth = { name: '', value: 'true' };\r\n    }\r\n  }\r\n\r\n  private handleRangeInputChange(event: Event): void {\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n    let target: string;\r\n\r\n    if (element === this.sideMenu.sideMenuElements.minimumInput) {\r\n      target = 'min';\r\n    } else {\r\n      target = 'max';\r\n    }\r\n\r\n    this.dataRequestToModel.needChangeSliderValuesRange = { name: target, value: element.value };\r\n  }\r\n\r\n  private handleIntegerToggleChange(event: Event): void {\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n    this.basicSettings.integer = element.checked;\r\n    this.dataRequestToModel.needDataForStartPosition = { name: '', value: 'true' };\r\n  }\r\n\r\n  private handleSliderClick(event: MouseEvent): void {\r\n    const isNotSliderBody = event.target !== this.interval.interval && event.target !== this.slider.slider;\r\n    const horizontalPosition: number = (\r\n      event.clientX - this.slider.slider.getBoundingClientRect().x - (this.handles.fromHandle.offsetWidth / 2)\r\n    );\r\n    const verticalPosition: number = this.slider.slider.offsetWidth - (\r\n      event.clientY - this.slider.slider.getBoundingClientRect().y + (this.handles.fromHandle.offsetWidth / 2)\r\n    );\r\n    if (isNotSliderBody) return;\r\n\r\n    const targetPosition: number = this.basicSettings.vertical ? verticalPosition : horizontalPosition;\r\n    const targetHandle: HTMLSpanElement = this.handles.selectsHandleToMove({\r\n      targetPosition,\r\n      positions: this.movement.positions,\r\n      isDouble: this.basicSettings.double,\r\n    });\r\n    this.movement.dataForMovement.target = targetHandle;\r\n    const correctedValue: number = this.movement.correctsImpossiblePosition(\r\n      this.slider.slider.offsetWidth - targetHandle.offsetWidth,\r\n      targetPosition,\r\n    );\r\n    this.handles.acceptNewPosition({\r\n      target: targetHandle,\r\n      value: correctedValue,\r\n      positions: this.movement.positions,\r\n    });\r\n    this.movement.correctsIntervalPosition();\r\n  }\r\n\r\n  private handleWindowResize(): void {\r\n    this.dataRequestToModel.needDataForScale = { name: '', value: 'true' };\r\n    this.dataRequestToModel.needDataForStartPosition = { name: '', value: 'true' };\r\n    if (this.checkIsStepRequired()) this.dataRequestToModel.needStepWidth = { name: '', value: 'true' };\r\n  }\r\n}\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(r=i[s="__coverage__"]||(i[s]={}))[t]&&r[t].hash===l?r[t]:(o.hash=l,r[t]=o)),C=(a.s[0]++,a.b[0][0]++,this&&(a.b[0][1]++,this.__decorate)||(a.b[0][2]++,function(e,A,n,t){a.f[0]++;var l,i=(a.s[1]++,arguments.length),s=(a.s[2]++,i<3?(a.b[1][0]++,A):(a.b[1][1]++,null===t?(a.b[2][0]++,t=Object.getOwnPropertyDescriptor(A,n)):(a.b[2][1]++,t)));if(a.s[3]++,a.b[4][0]++,"object"==typeof Reflect&&(a.b[4][1]++,"function"==typeof Reflect.decorate))a.b[3][0]++,a.s[4]++,s=Reflect.decorate(e,A,n,t);else{a.b[3][1]++,a.s[5]++;for(var o=e.length-1;o>=0;o--)a.s[6]++,(l=e[o])?(a.b[5][0]++,a.s[7]++,a.b[6][0]++,s=(i<3?(a.b[7][0]++,l(s)):(a.b[7][1]++,i>3?(a.b[8][0]++,l(A,n,s)):(a.b[8][1]++,l(A,n))))||(a.b[6][1]++,s)):a.b[5][1]++}return a.s[8]++,a.b[9][0]++,i>3&&(a.b[9][1]++,s)&&(a.b[9][2]++,Object.defineProperty(A,n,s)),s}));a.s[9]++,Object.defineProperty(A,"__esModule",{value:!0}),a.s[10]++,A.View=void 0;const u=(a.s[11]++,n(572)),c=(a.s[12]++,n(148)),m=(a.s[13]++,n(263)),d=(a.s[14]++,n(330)),h=(a.s[15]++,n(414)),p=(a.s[16]++,n(587)),I=(a.s[17]++,n(235));a.s[18]++;let f=class{constructor(e,A){a.f[1]++,a.s[19]++,this.dataRequestToModel={needDataForScale:{name:"",value:""},needDataForStartPosition:{name:"",value:""},needStepWidth:{name:"",value:""},needApplyValueFromScale:{name:"",value:""},needApplyNewValue:{name:"",value:""},needChangeSliderValuesRange:{name:"",value:""}},a.s[20]++,this.target=A,a.s[21]++,this.slider=new c.Slider,a.s[22]++,this.handles=new m.Handles,a.s[23]++,this.interval=new h.SelectedInterval,a.s[24]++,this.valuesScale=new p.ValuesScale,a.s[25]++,this.sideMenu=new I.SideMenu,a.s[26]++,this.basicSettings=e,a.s[27]++,this.movement=new d.Movement({slider:this.slider.slider,fromHandle:this.handles.fromHandle,toHandle:this.handles.toHandle,interval:this.interval.interval,basicSettings:this.basicSettings})}addSliderToDOM(){a.f[2]++,a.s[28]++,this.slider.collectSlider({from:this.handles.fromHandle,to:this.handles.toHandle,interval:this.interval.interval,valueScale:this.valuesScale}),a.s[29]++,this.target.append(this.slider.sliderWrapper)}addSideMenuToDOM(){var e;a.f[3]++,a.s[30]++,this.sideMenu.collectSideMenu(),a.s[31]++,"string"==typeof this.basicSettings.sideMenu?(a.b[10][0]++,a.s[32]++,a.b[12][0]++,null===(e=document.querySelector(this.basicSettings.sideMenu))||(a.b[12][1]++,void 0===e)?a.b[11][0]++:(a.b[11][1]++,e.append(this.sideMenu.sideMenuElements.sideMenuContainer))):(a.b[10][1]++,a.s[33]++,this.target.append(this.sideMenu.sideMenuElements.sideMenuContainer))}checkIsStepRequired(){return a.f[4]++,a.s[34]++,a.b[13][0]++,Object.prototype.hasOwnProperty.call(this.basicSettings,"step")&&(a.b[13][1]++,"number"==typeof this.basicSettings.step)}prepareSliderForUse(){a.f[5]++,a.s[35]++,this.addSliderToDOM(),a.s[36]++,this.basicSettings.sideMenu?(a.b[14][0]++,a.s[37]++,this.addSideMenuToDOM()):a.b[14][1]++,a.s[38]++,this.dataRequestToModel.needDataForScale={name:"",value:"true"},a.s[39]++,this.dataRequestToModel.needDataForStartPosition={name:"",value:"true"},a.s[40]++,this.checkIsStepRequired()?(a.b[15][0]++,a.s[41]++,this.dataRequestToModel.needStepWidth={name:"",value:"true"}):a.b[15][1]++,a.s[42]++,this.updateView({vertical:this.basicSettings.vertical,double:this.basicSettings.double,sideMenu:this.basicSettings.sideMenu,handlesValues:this.basicSettings.handlesValues,valueScale:this.basicSettings.valueScale,integer:this.basicSettings.integer})}turnOnMenuToggles(e){a.f[6]++,a.s[43]++,e.vertical?(a.b[16][0]++,a.s[44]++,this.sideMenu.sideMenuElements.planeToggle.checked=!0):a.b[16][1]++,a.s[45]++,e.double?(a.b[17][0]++,a.s[46]++,this.sideMenu.sideMenuElements.toToggle.checked=!0):a.b[17][1]++,a.s[47]++,e.handlesValues?(a.b[18][0]++,a.s[48]++,this.sideMenu.sideMenuElements.handleValuesToggle.checked=!0):a.b[18][1]++,a.s[49]++,e.valueScale?(a.b[19][0]++,a.s[50]++,this.sideMenu.sideMenuElements.valueScaleToggle.checked=!0):a.b[19][1]++,a.s[51]++,e.integer?(a.b[20][0]++,a.s[52]++,this.sideMenu.sideMenuElements.integerToggle.checked=!0):a.b[20][1]++}updateView(e){a.f[7]++,a.s[53]++,e.vertical?(a.b[21][0]++,a.s[54]++,this.slider.changePlane({isVertical:e.vertical,isStep:this.checkIsStepRequired(),requests:this.dataRequestToModel}),a.s[55]++,this.handles.changePlane(e.vertical),a.s[56]++,this.valuesScale.changePlane(e.vertical)):a.b[21][1]++,a.s[57]++,e.double?a.b[22][1]++:(a.b[22][0]++,a.s[58]++,this.handles.controlHandlesDisplay({isDouble:this.basicSettings.double,positions:this.movement.positions,sliderWidth:this.slider.slider.offsetWidth}),a.s[59]++,this.interval.hideSelectedInterval({isDouble:this.basicSettings.double,handleWidth:this.handles.fromHandle.offsetWidth}),a.s[60]++,this.sideMenu.hideToValues(this.basicSettings.double)),a.s[61]++,e.valueScale?a.b[23][1]++:(a.b[23][0]++,a.s[62]++,this.valuesScale.hideValueScale(this.basicSettings.valueScale)),a.s[63]++,e.handlesValues?a.b[24][1]++:(a.b[24][0]++,a.s[64]++,this.handles.hideHandleValues(this.basicSettings.handlesValues)),a.s[65]++,e.sideMenu?(a.b[25][0]++,a.s[66]++,this.turnOnMenuToggles(e)):a.b[25][1]++}refreshAllComponents(e){a.f[8]++;const A=(a.s[67]++,a.b[26][0]++,"min"!==e.target&&(a.b[26][1]++,"max"!==e.target));let n=(a.s[68]++,!0);a.s[69]++,A?(a.b[27][0]++,a.s[70]++,n=this.handles.refreshValues(e,{positions:this.movement.positions,isDouble:this.basicSettings.double,sliderWidth:this.slider.slider.offsetWidth})):a.b[27][1]++;const t=(a.s[71]++,a.b[28][0]++,n&&(a.b[28][1]++,this.basicSettings.sideMenu));a.s[72]++,t?(a.b[29][0]++,a.s[73]++,this.sideMenu.refreshValues(e)):a.b[29][1]++}bindEventListeners(){a.f[9]++,a.s[74]++,Object.values(this.valuesScale).forEach((e=>{a.f[10]++,a.s[75]++,e.addEventListener("click",this.handleScaleValueClick)})),a.s[76]++,this.sideMenu.sideMenuElements.toToggle.addEventListener("change",this.handleToToggleChange),a.s[77]++,this.sideMenu.sideMenuElements.planeToggle.addEventListener("change",this.handlePlaneToggleChange),a.s[78]++,this.sideMenu.sideMenuElements.valueScaleToggle.addEventListener("change",this.handleValueScaleToggleChange),a.s[79]++,this.sideMenu.sideMenuElements.handleValuesToggle.addEventListener("change",this.handleHandleValuesChange),a.s[80]++,this.sideMenu.sideMenuElements.integerToggle.addEventListener("change",this.handleIntegerToggleChange),a.s[81]++,[this.sideMenu.sideMenuElements.fromInput,this.sideMenu.sideMenuElements.toInput].forEach((e=>{a.f[11]++,a.s[82]++,e.addEventListener("change",this.handleValueInputChange)})),a.s[83]++,[this.sideMenu.sideMenuElements.minimumInput,this.sideMenu.sideMenuElements.maximumInput].forEach((e=>{a.f[12]++,a.s[84]++,e.addEventListener("change",this.handleRangeInputChange)})),a.s[85]++,this.sideMenu.sideMenuElements.stepInput.addEventListener("change",this.handleStepInputChange),a.s[86]++,[this.handles.fromHandle,this.handles.toHandle].forEach((e=>{a.f[13]++,a.s[87]++,e.addEventListener("mousedown",this.handleHandleClick)})),a.s[88]++,this.slider.slider.addEventListener("mousedown",this.handleSliderClick),a.s[89]++,window.addEventListener("resize",this.handleWindowResize)}handleHandleClick(e){a.f[14]++;const A=(a.s[90]++,e.target);a.s[91]++,this.movement.handleListener({eventInfo:{target:A,x:e.clientX,y:e.clientY}})}handleScaleValueClick(e){a.f[15]++;const A=(a.s[92]++,e.target);a.s[93]++,this.dataRequestToModel.needApplyValueFromScale={name:"",value:A.innerText}}handleToToggleChange(e){a.f[16]++;const A=(a.s[94]++,e.target);a.s[95]++,this.basicSettings.double=A.checked,a.s[96]++,this.handles.controlHandlesDisplay({isDouble:this.basicSettings.double,positions:this.movement.positions,sliderWidth:this.slider.slider.offsetWidth}),a.s[97]++,this.interval.hideSelectedInterval({isDouble:this.basicSettings.double,handleWidth:this.handles.fromHandle.offsetWidth}),a.s[98]++,this.sideMenu.hideToValues(this.basicSettings.double)}handlePlaneToggleChange(e){a.f[17]++;const A=(a.s[99]++,e.target);a.s[100]++,this.basicSettings.vertical=A.checked,a.s[101]++,this.slider.changePlane({isVertical:this.basicSettings.vertical,isStep:this.checkIsStepRequired(),requests:this.dataRequestToModel}),a.s[102]++,this.handles.changePlane(this.basicSettings.vertical),a.s[103]++,this.valuesScale.changePlane(this.basicSettings.vertical)}handleValueScaleToggleChange(e){a.f[18]++;const A=(a.s[104]++,e.target);a.s[105]++,this.basicSettings.valueScale=A.checked,a.s[106]++,this.valuesScale.hideValueScale(this.basicSettings.valueScale)}handleHandleValuesChange(e){a.f[19]++;const A=(a.s[107]++,e.target);a.s[108]++,this.basicSettings.handlesValues=A.checked,a.s[109]++,this.handles.hideHandleValues(this.basicSettings.handlesValues)}handleValueInputChange(e){a.f[20]++;const A=(a.s[110]++,e.target);let n;a.s[111]++,A===this.sideMenu.sideMenuElements.fromInput?(a.b[30][0]++,a.s[112]++,n="from"):(a.b[30][1]++,a.s[113]++,n="to"),a.s[114]++,this.dataRequestToModel.needApplyNewValue={name:n,value:A.value}}handleStepInputChange(e){a.f[21]++;const A=(a.s[115]++,e.target);a.s[116]++,this.basicSettings.step=Number(A.value),a.s[117]++,"0"===A.value?(a.b[31][0]++,a.s[118]++,this.sideMenu.sideMenuElements.stepInput.value="",a.s[119]++,this.basicSettings.step=!1):(a.b[31][1]++,a.s[120]++,this.dataRequestToModel.needStepWidth={name:"",value:"true"})}handleRangeInputChange(e){a.f[22]++;const A=(a.s[121]++,e.target);let n;a.s[122]++,A===this.sideMenu.sideMenuElements.minimumInput?(a.b[32][0]++,a.s[123]++,n="min"):(a.b[32][1]++,a.s[124]++,n="max"),a.s[125]++,this.dataRequestToModel.needChangeSliderValuesRange={name:n,value:A.value}}handleIntegerToggleChange(e){a.f[23]++;const A=(a.s[126]++,e.target);a.s[127]++,this.basicSettings.integer=A.checked,a.s[128]++,this.dataRequestToModel.needDataForStartPosition={name:"",value:"true"}}handleSliderClick(e){a.f[24]++;const A=(a.s[129]++,a.b[33][0]++,e.target!==this.interval.interval&&(a.b[33][1]++,e.target!==this.slider.slider)),n=(a.s[130]++,e.clientX-this.slider.slider.getBoundingClientRect().x-this.handles.fromHandle.offsetWidth/2),t=(a.s[131]++,this.slider.slider.offsetWidth-(e.clientY-this.slider.slider.getBoundingClientRect().y+this.handles.fromHandle.offsetWidth/2));if(a.s[132]++,A)return a.b[34][0]++,void a.s[133]++;a.b[34][1]++;const l=(a.s[134]++,this.basicSettings.vertical?(a.b[35][0]++,t):(a.b[35][1]++,n)),i=(a.s[135]++,this.handles.selectsHandleToMove({targetPosition:l,positions:this.movement.positions,isDouble:this.basicSettings.double}));a.s[136]++,this.movement.dataForMovement.target=i;const s=(a.s[137]++,this.movement.correctsImpossiblePosition(this.slider.slider.offsetWidth-i.offsetWidth,l));a.s[138]++,this.handles.acceptNewPosition({target:i,value:s,positions:this.movement.positions}),a.s[139]++,this.movement.correctsIntervalPosition()}handleWindowResize(){a.f[25]++,a.s[140]++,this.dataRequestToModel.needDataForScale={name:"",value:"true"},a.s[141]++,this.dataRequestToModel.needDataForStartPosition={name:"",value:"true"},a.s[142]++,this.checkIsStepRequired()?(a.b[36][0]++,a.s[143]++,this.dataRequestToModel.needStepWidth={name:"",value:"true"}):a.b[36][1]++}};a.s[144]++,f=C([u.default],f),a.s[145]++,A.View=f},309:(e,A)=>{"use strict";var n,t,l,i,s,o,r=(n="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\common\\defaultSettings.ts",t="4bf6aa71ae0426ff9399d5f366210573f856d73a",l=new(0,function(){}.constructor)("return this")(),s={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\common\\defaultSettings.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:0},end:{line:3,column:30}},2:{start:{line:4,column:21},end:{line:16,column:1}},3:{start:{line:17,column:0},end:{line:17,column:36}}},fnMap:{},branchMap:{},s:{0:0,1:0,2:0,3:0},f:{},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\common\\defaultSettings.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\common\\defaultSettings.ts"],names:[],mappings:";;;AAEA,MAAM,YAAY,GAAkB;IAClC,QAAQ,EAAE,IAAI;IACd,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,KAAK;IACV,MAAM,EAAE,KAAK;IACb,aAAa,EAAE,KAAK;IACpB,QAAQ,EAAE,KAAK;IACf,IAAI,EAAE,KAAK;IACX,UAAU,EAAE,IAAI;IAChB,IAAI,EAAE,GAAG;IACT,EAAE,EAAE,KAAK;IACT,OAAO,EAAE,IAAI;CACd,CAAC;AAEO,oCAAY",sourcesContent:["import { SliderOptions } from '../types';\r\n\r\nconst gobyDefaults: SliderOptions = {\r\n  sideMenu: true,\r\n  min: '0',\r\n  max: '100',\r\n  double: false,\r\n  handlesValues: false,\r\n  vertical: false,\r\n  step: false,\r\n  valueScale: true,\r\n  from: '0',\r\n  to: '100',\r\n  integer: true,\r\n};\r\n\r\nexport { gobyDefaults };\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(o=l[i="__coverage__"]||(l[i]={}))[n]&&o[n].hash===t?o[n]:(s.hash=t,o[n]=s));r.s[0]++,Object.defineProperty(A,"__esModule",{value:!0}),r.s[1]++,A.gobyDefaults=void 0;const a=(r.s[2]++,{sideMenu:!0,min:"0",max:"100",double:!1,handlesValues:!1,vertical:!1,step:!1,valueScale:!0,from:"0",to:"100",integer:!0});r.s[3]++,A.gobyDefaults=a},90:(e,A,n)=>{"use strict";var t,l,i,s,o,r,a=n(755),C=(t="C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\slider.ts",l="ffeb49b7eeb9fa114069b3d91170762669db2128",i=new(0,function(){}.constructor)("return this")(),o={path:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\slider.ts",statementMap:{0:{start:{line:2,column:0},end:{line:2,column:62}},1:{start:{line:3,column:16},end:{line:3,column:40}},2:{start:{line:4,column:15},end:{line:4,column:37}},3:{start:{line:5,column:20},end:{line:5,column:52}},4:{start:{line:6,column:26},end:{line:6,column:61}},5:{start:{line:7,column:19},end:{line:7,column:31}},6:{start:{line:10,column:8},end:{line:10,column:31}},7:{start:{line:11,column:8},end:{line:11,column:77}},8:{start:{line:12,column:8},end:{line:12,column:54}},9:{start:{line:15,column:22},end:{line:15,column:48}},10:{start:{line:16,column:21},end:{line:16,column:54}},11:{start:{line:17,column:26},end:{line:17,column:64}},12:{start:{line:18,column:8},end:{line:18,column:31}},13:{start:{line:19,column:8},end:{line:19,column:35}},14:{start:{line:20,column:8},end:{line:20,column:34}},15:{start:{line:23,column:0},end:{line:27,column:2}},16:{start:{line:24,column:4},end:{line:26,column:7}},17:{start:{line:25,column:8},end:{line:25,column:79}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:9,column:4},end:{line:9,column:5}},loc:{start:{line:9,column:34},end:{line:13,column:5}},line:9},1:{name:"(anonymous_1)",decl:{start:{line:14,column:4},end:{line:14,column:5}},loc:{start:{line:14,column:40},end:{line:21,column:5}},line:14},2:{name:"gobySlider",decl:{start:{line:23,column:28},end:{line:23,column:38}},loc:{start:{line:23,column:55},end:{line:27,column:1}},line:23},3:{name:"(anonymous_3)",decl:{start:{line:24,column:21},end:{line:24,column:22}},loc:{start:{line:24,column:27},end:{line:26,column:5}},line:24}},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0},f:{0:0,1:0,2:0,3:0},b:{},inputSourceMap:{version:3,file:"C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\slider.ts",sourceRoot:"",sources:["C:\\Users\\stasf\\Desktop\\Front\\Task-4\\src\\plugin\\slider.ts"],names:[],mappings:";;AAAA,yCAAsC;AACtC,sCAAmC;AACnC,qDAAkD;AAMlD,8DAAwD;AAExD,MAAM,UAAU,GAAG,YAAY,CAAC;AAEhC,MAAM,MAAM;IAKV,YAAY,OAAoB,EAAE,OAAsB;QACtD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC,EAAE,EAAE,8BAAY,EAAE,OAAO,CAAC,CAAC;QAEnD,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAChD,CAAC;IAEO,MAAM,CAAC,UAAU,CAAC,OAAoB,EAAE,OAAsB;QACpE,MAAM,KAAK,GAAU,IAAI,aAAK,CAAC,OAAO,CAAC,CAAC;QACxC,MAAM,IAAI,GAAS,IAAI,WAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC9C,MAAM,SAAS,GAAc,IAAI,qBAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAExD,SAAS,CAAC,UAAU,EAAE,CAAC;QACvB,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;CACF;AAED,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,GAAG,SAAS,UAAU,CAAC,cAA6B;IAClE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;QACpB,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,UAAU,EAAE,EAAE,IAAI,MAAM,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC,CAAC;IACzE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC",sourcesContent:["import { Model } from './Model/Model';\r\nimport { View } from './View/View';\r\nimport { Presenter } from './Presenter/Presenter';\r\nimport {\r\n  PluginInfo,\r\n  SliderOptions,\r\n} from './types';\r\nimport { IPlugin } from './interfaces';\r\nimport { gobyDefaults } from './common/defaultSettings';\r\n\r\nconst pluginName = 'gobySlider';\r\n\r\nclass Plugin implements IPlugin {\r\n  readonly element: HTMLElement;\r\n\r\n  readonly options: SliderOptions;\r\n\r\n  constructor(element: HTMLElement, options: SliderOptions) {\r\n    this.element = element;\r\n    this.options = $.extend({}, gobyDefaults, options);\r\n\r\n    Plugin.initialize(this.element, this.options);\r\n  }\r\n\r\n  private static initialize(element: HTMLElement, options: SliderOptions): void {\r\n    const model: Model = new Model(options);\r\n    const view: View = new View(options, element);\r\n    const presenter: Presenter = new Presenter(view, model);\r\n\r\n    presenter.initialize();\r\n    view.prepareSliderForUse();\r\n    view.bindEventListeners();\r\n  }\r\n}\r\n\r\n$.fn[pluginName] = function gobySlider(sliderSettings: SliderOptions): PluginInfo {\r\n  return this.each(() => {\r\n    $.data(this, `plugin_${pluginName}`, new Plugin(this, sliderSettings));\r\n  });\r\n};\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(r=i[s="__coverage__"]||(i[s]={}))[t]&&r[t].hash===l?r[t]:(o.hash=l,r[t]=o));C.s[0]++;const u=(C.s[1]++,n(367)),c=(C.s[2]++,n(913)),m=(C.s[3]++,n(694)),d=(C.s[4]++,n(309)),h=(C.s[5]++,"gobySlider");class p{constructor(e,A){C.f[0]++,C.s[6]++,this.element=e,C.s[7]++,this.options=a.extend({},d.gobyDefaults,A),C.s[8]++,p.initialize(this.element,this.options)}static initialize(e,A){C.f[1]++;const n=(C.s[9]++,new u.Model(A)),t=(C.s[10]++,new c.View(A,e)),l=(C.s[11]++,new m.Presenter(t,n));C.s[12]++,l.initialize(),C.s[13]++,t.prepareSliderForUse(),C.s[14]++,t.bindEventListeners()}}C.s[15]++,a.fn[h]=function(e){return C.f[2]++,C.s[16]++,this.each((()=>{C.f[3]++,C.s[17]++,a.data(this,`plugin_${h}`,new p(this,e))}))}},755:function(e,A){var n;!function(A,n){"use strict";"object"==typeof e.exports?e.exports=A.document?n(A,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(A)}("undefined"!=typeof window?window:this,(function(t,l){"use strict";var i=[],s=Object.getPrototypeOf,o=i.slice,r=i.flat?function(e){return i.flat.call(e)}:function(e){return i.concat.apply([],e)},a=i.push,C=i.indexOf,u={},c=u.toString,m=u.hasOwnProperty,d=m.toString,h=d.call(Object),p={},I=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},f=function(e){return null!=e&&e===e.window},E=t.document,g={type:!0,src:!0,nonce:!0,noModule:!0};function v(e,A,n){var t,l,i=(n=n||E).createElement("script");if(i.text=e,A)for(t in g)(l=A[t]||A.getAttribute&&A.getAttribute(t))&&i.setAttribute(t,l);n.head.appendChild(i).parentNode.removeChild(i)}function M(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?u[c.call(e)]||"object":typeof e}var B="3.6.0",b=function(e,A){return new b.fn.init(e,A)};function y(e){var A=!!e&&"length"in e&&e.length,n=M(e);return!I(e)&&!f(e)&&("array"===n||0===A||"number"==typeof A&&A>0&&A-1 in e)}b.fn=b.prototype={jquery:B,constructor:b,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var A=b.merge(this.constructor(),e);return A.prevObject=this,A},each:function(e){return b.each(this,e)},map:function(e){return this.pushStack(b.map(this,(function(A,n){return e.call(A,n,A)})))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(b.grep(this,(function(e,A){return(A+1)%2})))},odd:function(){return this.pushStack(b.grep(this,(function(e,A){return A%2})))},eq:function(e){var A=this.length,n=+e+(e<0?A:0);return this.pushStack(n>=0&&n<A?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:a,sort:i.sort,splice:i.splice},b.extend=b.fn.extend=function(){var e,A,n,t,l,i,s=arguments[0]||{},o=1,r=arguments.length,a=!1;for("boolean"==typeof s&&(a=s,s=arguments[o]||{},o++),"object"==typeof s||I(s)||(s={}),o===r&&(s=this,o--);o<r;o++)if(null!=(e=arguments[o]))for(A in e)t=e[A],"__proto__"!==A&&s!==t&&(a&&t&&(b.isPlainObject(t)||(l=Array.isArray(t)))?(n=s[A],i=l&&!Array.isArray(n)?[]:l||b.isPlainObject(n)?n:{},l=!1,s[A]=b.extend(a,i,t)):void 0!==t&&(s[A]=t));return s},b.extend({expando:"jQuery"+(B+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var A,n;return!(!e||"[object Object]"!==c.call(e))&&(!(A=s(e))||"function"==typeof(n=m.call(A,"constructor")&&A.constructor)&&d.call(n)===h)},isEmptyObject:function(e){var A;for(A in e)return!1;return!0},globalEval:function(e,A,n){v(e,{nonce:A&&A.nonce},n)},each:function(e,A){var n,t=0;if(y(e))for(n=e.length;t<n&&!1!==A.call(e[t],t,e[t]);t++);else for(t in e)if(!1===A.call(e[t],t,e[t]))break;return e},makeArray:function(e,A){var n=A||[];return null!=e&&(y(Object(e))?b.merge(n,"string"==typeof e?[e]:e):a.call(n,e)),n},inArray:function(e,A,n){return null==A?-1:C.call(A,e,n)},merge:function(e,A){for(var n=+A.length,t=0,l=e.length;t<n;t++)e[l++]=A[t];return e.length=l,e},grep:function(e,A,n){for(var t=[],l=0,i=e.length,s=!n;l<i;l++)!A(e[l],l)!==s&&t.push(e[l]);return t},map:function(e,A,n){var t,l,i=0,s=[];if(y(e))for(t=e.length;i<t;i++)null!=(l=A(e[i],i,n))&&s.push(l);else for(i in e)null!=(l=A(e[i],i,n))&&s.push(l);return r(s)},guid:1,support:p}),"function"==typeof Symbol&&(b.fn[Symbol.iterator]=i[Symbol.iterator]),b.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,A){u["[object "+A+"]"]=A.toLowerCase()}));var S=function(e){var A,n,t,l,i,s,o,r,a,C,u,c,m,d,h,p,I,f,E,g="sizzle"+1*new Date,v=e.document,M=0,B=0,b=re(),y=re(),S=re(),Q=re(),G=function(e,A){return e===A&&(u=!0),0},W={}.hasOwnProperty,x=[],T=x.pop,O=x.push,w=x.push,K=x.slice,D=function(e,A){for(var n=0,t=e.length;n<t;n++)if(e[n]===A)return n;return-1},_="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",k="[\\x20\\t\\r\\n\\f]",Y="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",V="\\[[\\x20\\t\\r\\n\\f]*("+Y+")(?:"+k+"*([*^$|!~]?=)"+k+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+Y+"))|)"+k+"*\\]",N=":("+Y+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+V+")*)|.*)\\)|)",H=new RegExp(k+"+","g"),F=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),P=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),L=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),U=new RegExp(k+"|>"),j=new RegExp(N),R=new RegExp("^"+Y+"$"),q={ID:new RegExp("^#("+Y+")"),CLASS:new RegExp("^\\.("+Y+")"),TAG:new RegExp("^("+Y+"|[*])"),ATTR:new RegExp("^"+V),PSEUDO:new RegExp("^"+N),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+_+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},z=/HTML$/i,$=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,Ae=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),ne=function(e,A){var n="0x"+e.slice(1)-65536;return A||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,le=function(e,A){return A?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){c()},se=ge((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{w.apply(x=K.call(v.childNodes),v.childNodes),x[v.childNodes.length].nodeType}catch(e){w={apply:x.length?function(e,A){O.apply(e,K.call(A))}:function(e,A){for(var n=e.length,t=0;e[n++]=A[t++];);e.length=n-1}}}function oe(e,A,t,l){var i,o,a,C,u,d,I,f=A&&A.ownerDocument,v=A?A.nodeType:9;if(t=t||[],"string"!=typeof e||!e||1!==v&&9!==v&&11!==v)return t;if(!l&&(c(A),A=A||m,h)){if(11!==v&&(u=Z.exec(e)))if(i=u[1]){if(9===v){if(!(a=A.getElementById(i)))return t;if(a.id===i)return t.push(a),t}else if(f&&(a=f.getElementById(i))&&E(A,a)&&a.id===i)return t.push(a),t}else{if(u[2])return w.apply(t,A.getElementsByTagName(e)),t;if((i=u[3])&&n.getElementsByClassName&&A.getElementsByClassName)return w.apply(t,A.getElementsByClassName(i)),t}if(n.qsa&&!Q[e+" "]&&(!p||!p.test(e))&&(1!==v||"object"!==A.nodeName.toLowerCase())){if(I=e,f=A,1===v&&(U.test(e)||L.test(e))){for((f=ee.test(e)&&Ie(A.parentNode)||A)===A&&n.scope||((C=A.getAttribute("id"))?C=C.replace(te,le):A.setAttribute("id",C=g)),o=(d=s(e)).length;o--;)d[o]=(C?"#"+C:":scope")+" "+Ee(d[o]);I=d.join(",")}try{return w.apply(t,f.querySelectorAll(I)),t}catch(A){Q(e,!0)}finally{C===g&&A.removeAttribute("id")}}}return r(e.replace(F,"$1"),A,t,l)}function re(){var e=[];return function A(n,l){return e.push(n+" ")>t.cacheLength&&delete A[e.shift()],A[n+" "]=l}}function ae(e){return e[g]=!0,e}function Ce(e){var A=m.createElement("fieldset");try{return!!e(A)}catch(e){return!1}finally{A.parentNode&&A.parentNode.removeChild(A),A=null}}function ue(e,A){for(var n=e.split("|"),l=n.length;l--;)t.attrHandle[n[l]]=A}function ce(e,A){var n=A&&e,t=n&&1===e.nodeType&&1===A.nodeType&&e.sourceIndex-A.sourceIndex;if(t)return t;if(n)for(;n=n.nextSibling;)if(n===A)return-1;return e?1:-1}function me(e){return function(A){return"input"===A.nodeName.toLowerCase()&&A.type===e}}function de(e){return function(A){var n=A.nodeName.toLowerCase();return("input"===n||"button"===n)&&A.type===e}}function he(e){return function(A){return"form"in A?A.parentNode&&!1===A.disabled?"label"in A?"label"in A.parentNode?A.parentNode.disabled===e:A.disabled===e:A.isDisabled===e||A.isDisabled!==!e&&se(A)===e:A.disabled===e:"label"in A&&A.disabled===e}}function pe(e){return ae((function(A){return A=+A,ae((function(n,t){for(var l,i=e([],n.length,A),s=i.length;s--;)n[l=i[s]]&&(n[l]=!(t[l]=n[l]))}))}))}function Ie(e){return e&&void 0!==e.getElementsByTagName&&e}for(A in n=oe.support={},i=oe.isXML=function(e){var A=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!z.test(A||n&&n.nodeName||"HTML")},c=oe.setDocument=function(e){var A,l,s=e?e.ownerDocument||e:v;return s!=m&&9===s.nodeType&&s.documentElement?(d=(m=s).documentElement,h=!i(m),v!=m&&(l=m.defaultView)&&l.top!==l&&(l.addEventListener?l.addEventListener("unload",ie,!1):l.attachEvent&&l.attachEvent("onunload",ie)),n.scope=Ce((function(e){return d.appendChild(e).appendChild(m.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=Ce((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=Ce((function(e){return e.appendChild(m.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=J.test(m.getElementsByClassName),n.getById=Ce((function(e){return d.appendChild(e).id=g,!m.getElementsByName||!m.getElementsByName(g).length})),n.getById?(t.filter.ID=function(e){var A=e.replace(Ae,ne);return function(e){return e.getAttribute("id")===A}},t.find.ID=function(e,A){if(void 0!==A.getElementById&&h){var n=A.getElementById(e);return n?[n]:[]}}):(t.filter.ID=function(e){var A=e.replace(Ae,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===A}},t.find.ID=function(e,A){if(void 0!==A.getElementById&&h){var n,t,l,i=A.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(l=A.getElementsByName(e),t=0;i=l[t++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),t.find.TAG=n.getElementsByTagName?function(e,A){return void 0!==A.getElementsByTagName?A.getElementsByTagName(e):n.qsa?A.querySelectorAll(e):void 0}:function(e,A){var n,t=[],l=0,i=A.getElementsByTagName(e);if("*"===e){for(;n=i[l++];)1===n.nodeType&&t.push(n);return t}return i},t.find.CLASS=n.getElementsByClassName&&function(e,A){if(void 0!==A.getElementsByClassName&&h)return A.getElementsByClassName(e)},I=[],p=[],(n.qsa=J.test(m.querySelectorAll))&&(Ce((function(e){var A;d.appendChild(e).innerHTML="<a id='"+g+"'></a><select id='"+g+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&p.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll("[selected]").length||p.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+_+")"),e.querySelectorAll("[id~="+g+"-]").length||p.push("~="),(A=m.createElement("input")).setAttribute("name",""),e.appendChild(A),e.querySelectorAll("[name='']").length||p.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll(":checked").length||p.push(":checked"),e.querySelectorAll("a#"+g+"+*").length||p.push(".#.+[+~]"),e.querySelectorAll("\\\f"),p.push("[\\r\\n\\f]")})),Ce((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var A=m.createElement("input");A.setAttribute("type","hidden"),e.appendChild(A).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&p.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&p.push(":enabled",":disabled"),d.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&p.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),p.push(",.*:")}))),(n.matchesSelector=J.test(f=d.matches||d.webkitMatchesSelector||d.mozMatchesSelector||d.oMatchesSelector||d.msMatchesSelector))&&Ce((function(e){n.disconnectedMatch=f.call(e,"*"),f.call(e,"[s!='']:x"),I.push("!=",N)})),p=p.length&&new RegExp(p.join("|")),I=I.length&&new RegExp(I.join("|")),A=J.test(d.compareDocumentPosition),E=A||J.test(d.contains)?function(e,A){var n=9===e.nodeType?e.documentElement:e,t=A&&A.parentNode;return e===t||!(!t||1!==t.nodeType||!(n.contains?n.contains(t):e.compareDocumentPosition&&16&e.compareDocumentPosition(t)))}:function(e,A){if(A)for(;A=A.parentNode;)if(A===e)return!0;return!1},G=A?function(e,A){if(e===A)return u=!0,0;var t=!e.compareDocumentPosition-!A.compareDocumentPosition;return t||(1&(t=(e.ownerDocument||e)==(A.ownerDocument||A)?e.compareDocumentPosition(A):1)||!n.sortDetached&&A.compareDocumentPosition(e)===t?e==m||e.ownerDocument==v&&E(v,e)?-1:A==m||A.ownerDocument==v&&E(v,A)?1:C?D(C,e)-D(C,A):0:4&t?-1:1)}:function(e,A){if(e===A)return u=!0,0;var n,t=0,l=e.parentNode,i=A.parentNode,s=[e],o=[A];if(!l||!i)return e==m?-1:A==m?1:l?-1:i?1:C?D(C,e)-D(C,A):0;if(l===i)return ce(e,A);for(n=e;n=n.parentNode;)s.unshift(n);for(n=A;n=n.parentNode;)o.unshift(n);for(;s[t]===o[t];)t++;return t?ce(s[t],o[t]):s[t]==v?-1:o[t]==v?1:0},m):m},oe.matches=function(e,A){return oe(e,null,null,A)},oe.matchesSelector=function(e,A){if(c(e),n.matchesSelector&&h&&!Q[A+" "]&&(!I||!I.test(A))&&(!p||!p.test(A)))try{var t=f.call(e,A);if(t||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return t}catch(e){Q(A,!0)}return oe(A,m,null,[e]).length>0},oe.contains=function(e,A){return(e.ownerDocument||e)!=m&&c(e),E(e,A)},oe.attr=function(e,A){(e.ownerDocument||e)!=m&&c(e);var l=t.attrHandle[A.toLowerCase()],i=l&&W.call(t.attrHandle,A.toLowerCase())?l(e,A,!h):void 0;return void 0!==i?i:n.attributes||!h?e.getAttribute(A):(i=e.getAttributeNode(A))&&i.specified?i.value:null},oe.escape=function(e){return(e+"").replace(te,le)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var A,t=[],l=0,i=0;if(u=!n.detectDuplicates,C=!n.sortStable&&e.slice(0),e.sort(G),u){for(;A=e[i++];)A===e[i]&&(l=t.push(i));for(;l--;)e.splice(t[l],1)}return C=null,e},l=oe.getText=function(e){var A,n="",t=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=l(e)}else if(3===i||4===i)return e.nodeValue}else for(;A=e[t++];)n+=l(A);return n},t=oe.selectors={cacheLength:50,createPseudo:ae,match:q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Ae,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(Ae,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var A,n=!e[6]&&e[2];return q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&j.test(n)&&(A=s(n,!0))&&(A=n.indexOf(")",n.length-A)-n.length)&&(e[0]=e[0].slice(0,A),e[2]=n.slice(0,A)),e.slice(0,3))}},filter:{TAG:function(e){var A=e.replace(Ae,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===A}},CLASS:function(e){var A=b[e+" "];return A||(A=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+e+"("+k+"|$)"))&&b(e,(function(e){return A.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,A,n){return function(t){var l=oe.attr(t,e);return null==l?"!="===A:!A||(l+="","="===A?l===n:"!="===A?l!==n:"^="===A?n&&0===l.indexOf(n):"*="===A?n&&l.indexOf(n)>-1:"$="===A?n&&l.slice(-n.length)===n:"~="===A?(" "+l.replace(H," ")+" ").indexOf(n)>-1:"|="===A&&(l===n||l.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,A,n,t,l){var i="nth"!==e.slice(0,3),s="last"!==e.slice(-4),o="of-type"===A;return 1===t&&0===l?function(e){return!!e.parentNode}:function(A,n,r){var a,C,u,c,m,d,h=i!==s?"nextSibling":"previousSibling",p=A.parentNode,I=o&&A.nodeName.toLowerCase(),f=!r&&!o,E=!1;if(p){if(i){for(;h;){for(c=A;c=c[h];)if(o?c.nodeName.toLowerCase()===I:1===c.nodeType)return!1;d=h="only"===e&&!d&&"nextSibling"}return!0}if(d=[s?p.firstChild:p.lastChild],s&&f){for(E=(m=(a=(C=(u=(c=p)[g]||(c[g]={}))[c.uniqueID]||(u[c.uniqueID]={}))[e]||[])[0]===M&&a[1])&&a[2],c=m&&p.childNodes[m];c=++m&&c&&c[h]||(E=m=0)||d.pop();)if(1===c.nodeType&&++E&&c===A){C[e]=[M,m,E];break}}else if(f&&(E=m=(a=(C=(u=(c=A)[g]||(c[g]={}))[c.uniqueID]||(u[c.uniqueID]={}))[e]||[])[0]===M&&a[1]),!1===E)for(;(c=++m&&c&&c[h]||(E=m=0)||d.pop())&&((o?c.nodeName.toLowerCase()!==I:1!==c.nodeType)||!++E||(f&&((C=(u=c[g]||(c[g]={}))[c.uniqueID]||(u[c.uniqueID]={}))[e]=[M,E]),c!==A)););return(E-=l)===t||E%t==0&&E/t>=0}}},PSEUDO:function(e,A){var n,l=t.pseudos[e]||t.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return l[g]?l(A):l.length>1?(n=[e,e,"",A],t.setFilters.hasOwnProperty(e.toLowerCase())?ae((function(e,n){for(var t,i=l(e,A),s=i.length;s--;)e[t=D(e,i[s])]=!(n[t]=i[s])})):function(e){return l(e,0,n)}):l}},pseudos:{not:ae((function(e){var A=[],n=[],t=o(e.replace(F,"$1"));return t[g]?ae((function(e,A,n,l){for(var i,s=t(e,null,l,[]),o=e.length;o--;)(i=s[o])&&(e[o]=!(A[o]=i))})):function(e,l,i){return A[0]=e,t(A,null,i,n),A[0]=null,!n.pop()}})),has:ae((function(e){return function(A){return oe(e,A).length>0}})),contains:ae((function(e){return e=e.replace(Ae,ne),function(A){return(A.textContent||l(A)).indexOf(e)>-1}})),lang:ae((function(e){return R.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(Ae,ne).toLowerCase(),function(A){var n;do{if(n=h?A.lang:A.getAttribute("xml:lang")||A.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((A=A.parentNode)&&1===A.nodeType);return!1}})),target:function(A){var n=e.location&&e.location.hash;return n&&n.slice(1)===A.id},root:function(e){return e===d},focus:function(e){return e===m.activeElement&&(!m.hasFocus||m.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:he(!1),disabled:he(!0),checked:function(e){var A=e.nodeName.toLowerCase();return"input"===A&&!!e.checked||"option"===A&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!t.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return $.test(e.nodeName)},button:function(e){var A=e.nodeName.toLowerCase();return"input"===A&&"button"===e.type||"button"===A},text:function(e){var A;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(A=e.getAttribute("type"))||"text"===A.toLowerCase())},first:pe((function(){return[0]})),last:pe((function(e,A){return[A-1]})),eq:pe((function(e,A,n){return[n<0?n+A:n]})),even:pe((function(e,A){for(var n=0;n<A;n+=2)e.push(n);return e})),odd:pe((function(e,A){for(var n=1;n<A;n+=2)e.push(n);return e})),lt:pe((function(e,A,n){for(var t=n<0?n+A:n>A?A:n;--t>=0;)e.push(t);return e})),gt:pe((function(e,A,n){for(var t=n<0?n+A:n;++t<A;)e.push(t);return e}))}},t.pseudos.nth=t.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})t.pseudos[A]=me(A);for(A in{submit:!0,reset:!0})t.pseudos[A]=de(A);function fe(){}function Ee(e){for(var A=0,n=e.length,t="";A<n;A++)t+=e[A].value;return t}function ge(e,A,n){var t=A.dir,l=A.next,i=l||t,s=n&&"parentNode"===i,o=B++;return A.first?function(A,n,l){for(;A=A[t];)if(1===A.nodeType||s)return e(A,n,l);return!1}:function(A,n,r){var a,C,u,c=[M,o];if(r){for(;A=A[t];)if((1===A.nodeType||s)&&e(A,n,r))return!0}else for(;A=A[t];)if(1===A.nodeType||s)if(C=(u=A[g]||(A[g]={}))[A.uniqueID]||(u[A.uniqueID]={}),l&&l===A.nodeName.toLowerCase())A=A[t]||A;else{if((a=C[i])&&a[0]===M&&a[1]===o)return c[2]=a[2];if(C[i]=c,c[2]=e(A,n,r))return!0}return!1}}function ve(e){return e.length>1?function(A,n,t){for(var l=e.length;l--;)if(!e[l](A,n,t))return!1;return!0}:e[0]}function Me(e,A,n,t,l){for(var i,s=[],o=0,r=e.length,a=null!=A;o<r;o++)(i=e[o])&&(n&&!n(i,t,l)||(s.push(i),a&&A.push(o)));return s}function Be(e,A,n,t,l,i){return t&&!t[g]&&(t=Be(t)),l&&!l[g]&&(l=Be(l,i)),ae((function(i,s,o,r){var a,C,u,c=[],m=[],d=s.length,h=i||function(e,A,n){for(var t=0,l=A.length;t<l;t++)oe(e,A[t],n);return n}(A||"*",o.nodeType?[o]:o,[]),p=!e||!i&&A?h:Me(h,c,e,o,r),I=n?l||(i?e:d||t)?[]:s:p;if(n&&n(p,I,o,r),t)for(a=Me(I,m),t(a,[],o,r),C=a.length;C--;)(u=a[C])&&(I[m[C]]=!(p[m[C]]=u));if(i){if(l||e){if(l){for(a=[],C=I.length;C--;)(u=I[C])&&a.push(p[C]=u);l(null,I=[],a,r)}for(C=I.length;C--;)(u=I[C])&&(a=l?D(i,u):c[C])>-1&&(i[a]=!(s[a]=u))}}else I=Me(I===s?I.splice(d,I.length):I),l?l(null,s,I,r):w.apply(s,I)}))}function be(e){for(var A,n,l,i=e.length,s=t.relative[e[0].type],o=s||t.relative[" "],r=s?1:0,C=ge((function(e){return e===A}),o,!0),u=ge((function(e){return D(A,e)>-1}),o,!0),c=[function(e,n,t){var l=!s&&(t||n!==a)||((A=n).nodeType?C(e,n,t):u(e,n,t));return A=null,l}];r<i;r++)if(n=t.relative[e[r].type])c=[ge(ve(c),n)];else{if((n=t.filter[e[r].type].apply(null,e[r].matches))[g]){for(l=++r;l<i&&!t.relative[e[l].type];l++);return Be(r>1&&ve(c),r>1&&Ee(e.slice(0,r-1).concat({value:" "===e[r-2].type?"*":""})).replace(F,"$1"),n,r<l&&be(e.slice(r,l)),l<i&&be(e=e.slice(l)),l<i&&Ee(e))}c.push(n)}return ve(c)}return fe.prototype=t.filters=t.pseudos,t.setFilters=new fe,s=oe.tokenize=function(e,A){var n,l,i,s,o,r,a,C=y[e+" "];if(C)return A?0:C.slice(0);for(o=e,r=[],a=t.preFilter;o;){for(s in n&&!(l=P.exec(o))||(l&&(o=o.slice(l[0].length)||o),r.push(i=[])),n=!1,(l=L.exec(o))&&(n=l.shift(),i.push({value:n,type:l[0].replace(F," ")}),o=o.slice(n.length)),t.filter)!(l=q[s].exec(o))||a[s]&&!(l=a[s](l))||(n=l.shift(),i.push({value:n,type:s,matches:l}),o=o.slice(n.length));if(!n)break}return A?o.length:o?oe.error(e):y(e,r).slice(0)},o=oe.compile=function(e,A){var n,l=[],i=[],o=S[e+" "];if(!o){for(A||(A=s(e)),n=A.length;n--;)(o=be(A[n]))[g]?l.push(o):i.push(o);o=S(e,function(e,A){var n=A.length>0,l=e.length>0,i=function(i,s,o,r,C){var u,d,p,I=0,f="0",E=i&&[],g=[],v=a,B=i||l&&t.find.TAG("*",C),b=M+=null==v?1:Math.random()||.1,y=B.length;for(C&&(a=s==m||s||C);f!==y&&null!=(u=B[f]);f++){if(l&&u){for(d=0,s||u.ownerDocument==m||(c(u),o=!h);p=e[d++];)if(p(u,s||m,o)){r.push(u);break}C&&(M=b)}n&&((u=!p&&u)&&I--,i&&E.push(u))}if(I+=f,n&&f!==I){for(d=0;p=A[d++];)p(E,g,s,o);if(i){if(I>0)for(;f--;)E[f]||g[f]||(g[f]=T.call(r));g=Me(g)}w.apply(r,g),C&&!i&&g.length>0&&I+A.length>1&&oe.uniqueSort(r)}return C&&(M=b,a=v),E};return n?ae(i):i}(i,l)),o.selector=e}return o},r=oe.select=function(e,A,n,l){var i,r,a,C,u,c="function"==typeof e&&e,m=!l&&s(e=c.selector||e);if(n=n||[],1===m.length){if((r=m[0]=m[0].slice(0)).length>2&&"ID"===(a=r[0]).type&&9===A.nodeType&&h&&t.relative[r[1].type]){if(!(A=(t.find.ID(a.matches[0].replace(Ae,ne),A)||[])[0]))return n;c&&(A=A.parentNode),e=e.slice(r.shift().value.length)}for(i=q.needsContext.test(e)?0:r.length;i--&&(a=r[i],!t.relative[C=a.type]);)if((u=t.find[C])&&(l=u(a.matches[0].replace(Ae,ne),ee.test(r[0].type)&&Ie(A.parentNode)||A))){if(r.splice(i,1),!(e=l.length&&Ee(r)))return w.apply(n,l),n;break}}return(c||o(e,m))(l,A,!h,n,!A||ee.test(e)&&Ie(A.parentNode)||A),n},n.sortStable=g.split("").sort(G).join("")===g,n.detectDuplicates=!!u,c(),n.sortDetached=Ce((function(e){return 1&e.compareDocumentPosition(m.createElement("fieldset"))})),Ce((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||ue("type|href|height|width",(function(e,A,n){if(!n)return e.getAttribute(A,"type"===A.toLowerCase()?1:2)})),n.attributes&&Ce((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||ue("value",(function(e,A,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),Ce((function(e){return null==e.getAttribute("disabled")}))||ue(_,(function(e,A,n){var t;if(!n)return!0===e[A]?A.toLowerCase():(t=e.getAttributeNode(A))&&t.specified?t.value:null})),oe}(t);b.find=S,b.expr=S.selectors,b.expr[":"]=b.expr.pseudos,b.uniqueSort=b.unique=S.uniqueSort,b.text=S.getText,b.isXMLDoc=S.isXML,b.contains=S.contains,b.escapeSelector=S.escape;var Q=function(e,A,n){for(var t=[],l=void 0!==n;(e=e[A])&&9!==e.nodeType;)if(1===e.nodeType){if(l&&b(e).is(n))break;t.push(e)}return t},G=function(e,A){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==A&&n.push(e);return n},W=b.expr.match.needsContext;function x(e,A){return e.nodeName&&e.nodeName.toLowerCase()===A.toLowerCase()}var T=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function O(e,A,n){return I(A)?b.grep(e,(function(e,t){return!!A.call(e,t,e)!==n})):A.nodeType?b.grep(e,(function(e){return e===A!==n})):"string"!=typeof A?b.grep(e,(function(e){return C.call(A,e)>-1!==n})):b.filter(A,e,n)}b.filter=function(e,A,n){var t=A[0];return n&&(e=":not("+e+")"),1===A.length&&1===t.nodeType?b.find.matchesSelector(t,e)?[t]:[]:b.find.matches(e,b.grep(A,(function(e){return 1===e.nodeType})))},b.fn.extend({find:function(e){var A,n,t=this.length,l=this;if("string"!=typeof e)return this.pushStack(b(e).filter((function(){for(A=0;A<t;A++)if(b.contains(l[A],this))return!0})));for(n=this.pushStack([]),A=0;A<t;A++)b.find(e,l[A],n);return t>1?b.uniqueSort(n):n},filter:function(e){return this.pushStack(O(this,e||[],!1))},not:function(e){return this.pushStack(O(this,e||[],!0))},is:function(e){return!!O(this,"string"==typeof e&&W.test(e)?b(e):e||[],!1).length}});var w,K=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(b.fn.init=function(e,A,n){var t,l;if(!e)return this;if(n=n||w,"string"==typeof e){if(!(t="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:K.exec(e))||!t[1]&&A)return!A||A.jquery?(A||n).find(e):this.constructor(A).find(e);if(t[1]){if(A=A instanceof b?A[0]:A,b.merge(this,b.parseHTML(t[1],A&&A.nodeType?A.ownerDocument||A:E,!0)),T.test(t[1])&&b.isPlainObject(A))for(t in A)I(this[t])?this[t](A[t]):this.attr(t,A[t]);return this}return(l=E.getElementById(t[2]))&&(this[0]=l,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):I(e)?void 0!==n.ready?n.ready(e):e(b):b.makeArray(e,this)}).prototype=b.fn,w=b(E);var D=/^(?:parents|prev(?:Until|All))/,_={children:!0,contents:!0,next:!0,prev:!0};function k(e,A){for(;(e=e[A])&&1!==e.nodeType;);return e}b.fn.extend({has:function(e){var A=b(e,this),n=A.length;return this.filter((function(){for(var e=0;e<n;e++)if(b.contains(this,A[e]))return!0}))},closest:function(e,A){var n,t=0,l=this.length,i=[],s="string"!=typeof e&&b(e);if(!W.test(e))for(;t<l;t++)for(n=this[t];n&&n!==A;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&b.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?b.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?C.call(b(e),this[0]):C.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,A){return this.pushStack(b.uniqueSort(b.merge(this.get(),b(e,A))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),b.each({parent:function(e){var A=e.parentNode;return A&&11!==A.nodeType?A:null},parents:function(e){return Q(e,"parentNode")},parentsUntil:function(e,A,n){return Q(e,"parentNode",n)},next:function(e){return k(e,"nextSibling")},prev:function(e){return k(e,"previousSibling")},nextAll:function(e){return Q(e,"nextSibling")},prevAll:function(e){return Q(e,"previousSibling")},nextUntil:function(e,A,n){return Q(e,"nextSibling",n)},prevUntil:function(e,A,n){return Q(e,"previousSibling",n)},siblings:function(e){return G((e.parentNode||{}).firstChild,e)},children:function(e){return G(e.firstChild)},contents:function(e){return null!=e.contentDocument&&s(e.contentDocument)?e.contentDocument:(x(e,"template")&&(e=e.content||e),b.merge([],e.childNodes))}},(function(e,A){b.fn[e]=function(n,t){var l=b.map(this,A,n);return"Until"!==e.slice(-5)&&(t=n),t&&"string"==typeof t&&(l=b.filter(t,l)),this.length>1&&(_[e]||b.uniqueSort(l),D.test(e)&&l.reverse()),this.pushStack(l)}}));var Y=/[^\x20\t\r\n\f]+/g;function V(e){return e}function N(e){throw e}function H(e,A,n,t){var l;try{e&&I(l=e.promise)?l.call(e).done(A).fail(n):e&&I(l=e.then)?l.call(e,A,n):A.apply(void 0,[e].slice(t))}catch(e){n.apply(void 0,[e])}}b.Callbacks=function(e){e="string"==typeof e?function(e){var A={};return b.each(e.match(Y)||[],(function(e,n){A[n]=!0})),A}(e):b.extend({},e);var A,n,t,l,i=[],s=[],o=-1,r=function(){for(l=l||e.once,t=A=!0;s.length;o=-1)for(n=s.shift();++o<i.length;)!1===i[o].apply(n[0],n[1])&&e.stopOnFalse&&(o=i.length,n=!1);e.memory||(n=!1),A=!1,l&&(i=n?[]:"")},a={add:function(){return i&&(n&&!A&&(o=i.length-1,s.push(n)),function A(n){b.each(n,(function(n,t){I(t)?e.unique&&a.has(t)||i.push(t):t&&t.length&&"string"!==M(t)&&A(t)}))}(arguments),n&&!A&&r()),this},remove:function(){return b.each(arguments,(function(e,A){for(var n;(n=b.inArray(A,i,n))>-1;)i.splice(n,1),n<=o&&o--})),this},has:function(e){return e?b.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return l=s=[],i=n="",this},disabled:function(){return!i},lock:function(){return l=s=[],n||A||(i=n=""),this},locked:function(){return!!l},fireWith:function(e,n){return l||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),A||r()),this},fire:function(){return a.fireWith(this,arguments),this},fired:function(){return!!t}};return a},b.extend({Deferred:function(e){var A=[["notify","progress",b.Callbacks("memory"),b.Callbacks("memory"),2],["resolve","done",b.Callbacks("once memory"),b.Callbacks("once memory"),0,"resolved"],["reject","fail",b.Callbacks("once memory"),b.Callbacks("once memory"),1,"rejected"]],n="pending",l={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return l.then(null,e)},pipe:function(){var e=arguments;return b.Deferred((function(n){b.each(A,(function(A,t){var l=I(e[t[4]])&&e[t[4]];i[t[1]]((function(){var e=l&&l.apply(this,arguments);e&&I(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[t[0]+"With"](this,l?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,l){var i=0;function s(e,A,n,l){return function(){var o=this,r=arguments,a=function(){var t,a;if(!(e<i)){if((t=n.apply(o,r))===A.promise())throw new TypeError("Thenable self-resolution");a=t&&("object"==typeof t||"function"==typeof t)&&t.then,I(a)?l?a.call(t,s(i,A,V,l),s(i,A,N,l)):(i++,a.call(t,s(i,A,V,l),s(i,A,N,l),s(i,A,V,A.notifyWith))):(n!==V&&(o=void 0,r=[t]),(l||A.resolveWith)(o,r))}},C=l?a:function(){try{a()}catch(t){b.Deferred.exceptionHook&&b.Deferred.exceptionHook(t,C.stackTrace),e+1>=i&&(n!==N&&(o=void 0,r=[t]),A.rejectWith(o,r))}};e?C():(b.Deferred.getStackHook&&(C.stackTrace=b.Deferred.getStackHook()),t.setTimeout(C))}}return b.Deferred((function(t){A[0][3].add(s(0,t,I(l)?l:V,t.notifyWith)),A[1][3].add(s(0,t,I(e)?e:V)),A[2][3].add(s(0,t,I(n)?n:N))})).promise()},promise:function(e){return null!=e?b.extend(e,l):l}},i={};return b.each(A,(function(e,t){var s=t[2],o=t[5];l[t[1]]=s.add,o&&s.add((function(){n=o}),A[3-e][2].disable,A[3-e][3].disable,A[0][2].lock,A[0][3].lock),s.add(t[3].fire),i[t[0]]=function(){return i[t[0]+"With"](this===i?void 0:this,arguments),this},i[t[0]+"With"]=s.fireWith})),l.promise(i),e&&e.call(i,i),i},when:function(e){var A=arguments.length,n=A,t=Array(n),l=o.call(arguments),i=b.Deferred(),s=function(e){return function(n){t[e]=this,l[e]=arguments.length>1?o.call(arguments):n,--A||i.resolveWith(t,l)}};if(A<=1&&(H(e,i.done(s(n)).resolve,i.reject,!A),"pending"===i.state()||I(l[n]&&l[n].then)))return i.then();for(;n--;)H(l[n],s(n),i.reject);return i.promise()}});var F=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;b.Deferred.exceptionHook=function(e,A){t.console&&t.console.warn&&e&&F.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,A)},b.readyException=function(e){t.setTimeout((function(){throw e}))};var P=b.Deferred();function L(){E.removeEventListener("DOMContentLoaded",L),t.removeEventListener("load",L),b.ready()}b.fn.ready=function(e){return P.then(e).catch((function(e){b.readyException(e)})),this},b.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--b.readyWait:b.isReady)||(b.isReady=!0,!0!==e&&--b.readyWait>0||P.resolveWith(E,[b]))}}),b.ready.then=P.then,"complete"===E.readyState||"loading"!==E.readyState&&!E.documentElement.doScroll?t.setTimeout(b.ready):(E.addEventListener("DOMContentLoaded",L),t.addEventListener("load",L));var U=function(e,A,n,t,l,i,s){var o=0,r=e.length,a=null==n;if("object"===M(n))for(o in l=!0,n)U(e,A,o,n[o],!0,i,s);else if(void 0!==t&&(l=!0,I(t)||(s=!0),a&&(s?(A.call(e,t),A=null):(a=A,A=function(e,A,n){return a.call(b(e),n)})),A))for(;o<r;o++)A(e[o],n,s?t:t.call(e[o],o,A(e[o],n)));return l?e:a?A.call(e):r?A(e[0],n):i},j=/^-ms-/,R=/-([a-z])/g;function q(e,A){return A.toUpperCase()}function z(e){return e.replace(j,"ms-").replace(R,q)}var $=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function X(){this.expando=b.expando+X.uid++}X.uid=1,X.prototype={cache:function(e){var A=e[this.expando];return A||(A={},$(e)&&(e.nodeType?e[this.expando]=A:Object.defineProperty(e,this.expando,{value:A,configurable:!0}))),A},set:function(e,A,n){var t,l=this.cache(e);if("string"==typeof A)l[z(A)]=n;else for(t in A)l[z(t)]=A[t];return l},get:function(e,A){return void 0===A?this.cache(e):e[this.expando]&&e[this.expando][z(A)]},access:function(e,A,n){return void 0===A||A&&"string"==typeof A&&void 0===n?this.get(e,A):(this.set(e,A,n),void 0!==n?n:A)},remove:function(e,A){var n,t=e[this.expando];if(void 0!==t){if(void 0!==A){n=(A=Array.isArray(A)?A.map(z):(A=z(A))in t?[A]:A.match(Y)||[]).length;for(;n--;)delete t[A[n]]}(void 0===A||b.isEmptyObject(t))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var A=e[this.expando];return void 0!==A&&!b.isEmptyObject(A)}};var J=new X,Z=new X,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ae=/[A-Z]/g;function ne(e,A,n){var t;if(void 0===n&&1===e.nodeType)if(t="data-"+A.replace(Ae,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(t))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,A,n)}else n=void 0;return n}b.extend({hasData:function(e){return Z.hasData(e)||J.hasData(e)},data:function(e,A,n){return Z.access(e,A,n)},removeData:function(e,A){Z.remove(e,A)},_data:function(e,A,n){return J.access(e,A,n)},_removeData:function(e,A){J.remove(e,A)}}),b.fn.extend({data:function(e,A){var n,t,l,i=this[0],s=i&&i.attributes;if(void 0===e){if(this.length&&(l=Z.get(i),1===i.nodeType&&!J.get(i,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(t=s[n].name).indexOf("data-")&&(t=z(t.slice(5)),ne(i,t,l[t]));J.set(i,"hasDataAttrs",!0)}return l}return"object"==typeof e?this.each((function(){Z.set(this,e)})):U(this,(function(A){var n;if(i&&void 0===A)return void 0!==(n=Z.get(i,e))||void 0!==(n=ne(i,e))?n:void 0;this.each((function(){Z.set(this,e,A)}))}),null,A,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Z.remove(this,e)}))}}),b.extend({queue:function(e,A,n){var t;if(e)return A=(A||"fx")+"queue",t=J.get(e,A),n&&(!t||Array.isArray(n)?t=J.access(e,A,b.makeArray(n)):t.push(n)),t||[]},dequeue:function(e,A){A=A||"fx";var n=b.queue(e,A),t=n.length,l=n.shift(),i=b._queueHooks(e,A);"inprogress"===l&&(l=n.shift(),t--),l&&("fx"===A&&n.unshift("inprogress"),delete i.stop,l.call(e,(function(){b.dequeue(e,A)}),i)),!t&&i&&i.empty.fire()},_queueHooks:function(e,A){var n=A+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:b.Callbacks("once memory").add((function(){J.remove(e,[A+"queue",n])}))})}}),b.fn.extend({queue:function(e,A){var n=2;return"string"!=typeof e&&(A=e,e="fx",n--),arguments.length<n?b.queue(this[0],e):void 0===A?this:this.each((function(){var n=b.queue(this,e,A);b._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&b.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){b.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,A){var n,t=1,l=b.Deferred(),i=this,s=this.length,o=function(){--t||l.resolveWith(i,[i])};for("string"!=typeof e&&(A=e,e=void 0),e=e||"fx";s--;)(n=J.get(i[s],e+"queueHooks"))&&n.empty&&(t++,n.empty.add(o));return o(),l.promise(A)}});var te=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,le=new RegExp("^(?:([+-])=|)("+te+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],se=E.documentElement,oe=function(e){return b.contains(e.ownerDocument,e)},re={composed:!0};se.getRootNode&&(oe=function(e){return b.contains(e.ownerDocument,e)||e.getRootNode(re)===e.ownerDocument});var ae=function(e,A){return"none"===(e=A||e).style.display||""===e.style.display&&oe(e)&&"none"===b.css(e,"display")};function Ce(e,A,n,t){var l,i,s=20,o=t?function(){return t.cur()}:function(){return b.css(e,A,"")},r=o(),a=n&&n[3]||(b.cssNumber[A]?"":"px"),C=e.nodeType&&(b.cssNumber[A]||"px"!==a&&+r)&&le.exec(b.css(e,A));if(C&&C[3]!==a){for(r/=2,a=a||C[3],C=+r||1;s--;)b.style(e,A,C+a),(1-i)*(1-(i=o()/r||.5))<=0&&(s=0),C/=i;C*=2,b.style(e,A,C+a),n=n||[]}return n&&(C=+C||+r||0,l=n[1]?C+(n[1]+1)*n[2]:+n[2],t&&(t.unit=a,t.start=C,t.end=l)),l}var ue={};function ce(e){var A,n=e.ownerDocument,t=e.nodeName,l=ue[t];return l||(A=n.body.appendChild(n.createElement(t)),l=b.css(A,"display"),A.parentNode.removeChild(A),"none"===l&&(l="block"),ue[t]=l,l)}function me(e,A){for(var n,t,l=[],i=0,s=e.length;i<s;i++)(t=e[i]).style&&(n=t.style.display,A?("none"===n&&(l[i]=J.get(t,"display")||null,l[i]||(t.style.display="")),""===t.style.display&&ae(t)&&(l[i]=ce(t))):"none"!==n&&(l[i]="none",J.set(t,"display",n)));for(i=0;i<s;i++)null!=l[i]&&(e[i].style.display=l[i]);return e}b.fn.extend({show:function(){return me(this,!0)},hide:function(){return me(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ae(this)?b(this).show():b(this).hide()}))}});var de,he,pe=/^(?:checkbox|radio)$/i,Ie=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,fe=/^$|^module$|\/(?:java|ecma)script/i;de=E.createDocumentFragment().appendChild(E.createElement("div")),(he=E.createElement("input")).setAttribute("type","radio"),he.setAttribute("checked","checked"),he.setAttribute("name","t"),de.appendChild(he),p.checkClone=de.cloneNode(!0).cloneNode(!0).lastChild.checked,de.innerHTML="<textarea>x</textarea>",p.noCloneChecked=!!de.cloneNode(!0).lastChild.defaultValue,de.innerHTML="<option></option>",p.option=!!de.lastChild;var Ee={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,A){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(A||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(A||"*"):[],void 0===A||A&&x(e,A)?b.merge([e],n):n}function ve(e,A){for(var n=0,t=e.length;n<t;n++)J.set(e[n],"globalEval",!A||J.get(A[n],"globalEval"))}Ee.tbody=Ee.tfoot=Ee.colgroup=Ee.caption=Ee.thead,Ee.th=Ee.td,p.option||(Ee.optgroup=Ee.option=[1,"<select multiple='multiple'>","</select>"]);var Me=/<|&#?\w+;/;function Be(e,A,n,t,l){for(var i,s,o,r,a,C,u=A.createDocumentFragment(),c=[],m=0,d=e.length;m<d;m++)if((i=e[m])||0===i)if("object"===M(i))b.merge(c,i.nodeType?[i]:i);else if(Me.test(i)){for(s=s||u.appendChild(A.createElement("div")),o=(Ie.exec(i)||["",""])[1].toLowerCase(),r=Ee[o]||Ee._default,s.innerHTML=r[1]+b.htmlPrefilter(i)+r[2],C=r[0];C--;)s=s.lastChild;b.merge(c,s.childNodes),(s=u.firstChild).textContent=""}else c.push(A.createTextNode(i));for(u.textContent="",m=0;i=c[m++];)if(t&&b.inArray(i,t)>-1)l&&l.push(i);else if(a=oe(i),s=ge(u.appendChild(i),"script"),a&&ve(s),n)for(C=0;i=s[C++];)fe.test(i.type||"")&&n.push(i);return u}var be=/^([^.]*)(?:\.(.+)|)/;function ye(){return!0}function Se(){return!1}function Qe(e,A){return e===function(){try{return E.activeElement}catch(e){}}()==("focus"===A)}function Ge(e,A,n,t,l,i){var s,o;if("object"==typeof A){for(o in"string"!=typeof n&&(t=t||n,n=void 0),A)Ge(e,o,n,t,A[o],i);return e}if(null==t&&null==l?(l=n,t=n=void 0):null==l&&("string"==typeof n?(l=t,t=void 0):(l=t,t=n,n=void 0)),!1===l)l=Se;else if(!l)return e;return 1===i&&(s=l,l=function(e){return b().off(e),s.apply(this,arguments)},l.guid=s.guid||(s.guid=b.guid++)),e.each((function(){b.event.add(this,A,l,t,n)}))}function We(e,A,n){n?(J.set(e,A,!1),b.event.add(e,A,{namespace:!1,handler:function(e){var t,l,i=J.get(this,A);if(1&e.isTrigger&&this[A]){if(i.length)(b.event.special[A]||{}).delegateType&&e.stopPropagation();else if(i=o.call(arguments),J.set(this,A,i),t=n(this,A),this[A](),i!==(l=J.get(this,A))||t?J.set(this,A,!1):l={},i!==l)return e.stopImmediatePropagation(),e.preventDefault(),l&&l.value}else i.length&&(J.set(this,A,{value:b.event.trigger(b.extend(i[0],b.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===J.get(e,A)&&b.event.add(e,A,ye)}b.event={global:{},add:function(e,A,n,t,l){var i,s,o,r,a,C,u,c,m,d,h,p=J.get(e);if($(e))for(n.handler&&(n=(i=n).handler,l=i.selector),l&&b.find.matchesSelector(se,l),n.guid||(n.guid=b.guid++),(r=p.events)||(r=p.events=Object.create(null)),(s=p.handle)||(s=p.handle=function(A){return void 0!==b&&b.event.triggered!==A.type?b.event.dispatch.apply(e,arguments):void 0}),a=(A=(A||"").match(Y)||[""]).length;a--;)m=h=(o=be.exec(A[a])||[])[1],d=(o[2]||"").split(".").sort(),m&&(u=b.event.special[m]||{},m=(l?u.delegateType:u.bindType)||m,u=b.event.special[m]||{},C=b.extend({type:m,origType:h,data:t,handler:n,guid:n.guid,selector:l,needsContext:l&&b.expr.match.needsContext.test(l),namespace:d.join(".")},i),(c=r[m])||((c=r[m]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(e,t,d,s)||e.addEventListener&&e.addEventListener(m,s)),u.add&&(u.add.call(e,C),C.handler.guid||(C.handler.guid=n.guid)),l?c.splice(c.delegateCount++,0,C):c.push(C),b.event.global[m]=!0)},remove:function(e,A,n,t,l){var i,s,o,r,a,C,u,c,m,d,h,p=J.hasData(e)&&J.get(e);if(p&&(r=p.events)){for(a=(A=(A||"").match(Y)||[""]).length;a--;)if(m=h=(o=be.exec(A[a])||[])[1],d=(o[2]||"").split(".").sort(),m){for(u=b.event.special[m]||{},c=r[m=(t?u.delegateType:u.bindType)||m]||[],o=o[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=i=c.length;i--;)C=c[i],!l&&h!==C.origType||n&&n.guid!==C.guid||o&&!o.test(C.namespace)||t&&t!==C.selector&&("**"!==t||!C.selector)||(c.splice(i,1),C.selector&&c.delegateCount--,u.remove&&u.remove.call(e,C));s&&!c.length&&(u.teardown&&!1!==u.teardown.call(e,d,p.handle)||b.removeEvent(e,m,p.handle),delete r[m])}else for(m in r)b.event.remove(e,m+A[a],n,t,!0);b.isEmptyObject(r)&&J.remove(e,"handle events")}},dispatch:function(e){var A,n,t,l,i,s,o=new Array(arguments.length),r=b.event.fix(e),a=(J.get(this,"events")||Object.create(null))[r.type]||[],C=b.event.special[r.type]||{};for(o[0]=r,A=1;A<arguments.length;A++)o[A]=arguments[A];if(r.delegateTarget=this,!C.preDispatch||!1!==C.preDispatch.call(this,r)){for(s=b.event.handlers.call(this,r,a),A=0;(l=s[A++])&&!r.isPropagationStopped();)for(r.currentTarget=l.elem,n=0;(i=l.handlers[n++])&&!r.isImmediatePropagationStopped();)r.rnamespace&&!1!==i.namespace&&!r.rnamespace.test(i.namespace)||(r.handleObj=i,r.data=i.data,void 0!==(t=((b.event.special[i.origType]||{}).handle||i.handler).apply(l.elem,o))&&!1===(r.result=t)&&(r.preventDefault(),r.stopPropagation()));return C.postDispatch&&C.postDispatch.call(this,r),r.result}},handlers:function(e,A){var n,t,l,i,s,o=[],r=A.delegateCount,a=e.target;if(r&&a.nodeType&&!("click"===e.type&&e.button>=1))for(;a!==this;a=a.parentNode||this)if(1===a.nodeType&&("click"!==e.type||!0!==a.disabled)){for(i=[],s={},n=0;n<r;n++)void 0===s[l=(t=A[n]).selector+" "]&&(s[l]=t.needsContext?b(l,this).index(a)>-1:b.find(l,this,null,[a]).length),s[l]&&i.push(t);i.length&&o.push({elem:a,handlers:i})}return a=this,r<A.length&&o.push({elem:a,handlers:A.slice(r)}),o},addProp:function(e,A){Object.defineProperty(b.Event.prototype,e,{enumerable:!0,configurable:!0,get:I(A)?function(){if(this.originalEvent)return A(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(A){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:A})}})},fix:function(e){return e[b.expando]?e:new b.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var A=this||e;return pe.test(A.type)&&A.click&&x(A,"input")&&We(A,"click",ye),!1},trigger:function(e){var A=this||e;return pe.test(A.type)&&A.click&&x(A,"input")&&We(A,"click"),!0},_default:function(e){var A=e.target;return pe.test(A.type)&&A.click&&x(A,"input")&&J.get(A,"click")||x(A,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},b.removeEvent=function(e,A,n){e.removeEventListener&&e.removeEventListener(A,n)},b.Event=function(e,A){if(!(this instanceof b.Event))return new b.Event(e,A);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ye:Se,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,A&&b.extend(this,A),this.timeStamp=e&&e.timeStamp||Date.now(),this[b.expando]=!0},b.Event.prototype={constructor:b.Event,isDefaultPrevented:Se,isPropagationStopped:Se,isImmediatePropagationStopped:Se,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ye,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ye,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ye,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},b.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},b.event.addProp),b.each({focus:"focusin",blur:"focusout"},(function(e,A){b.event.special[e]={setup:function(){return We(this,e,Qe),!1},trigger:function(){return We(this,e),!0},_default:function(){return!0},delegateType:A}})),b.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,A){b.event.special[e]={delegateType:A,bindType:A,handle:function(e){var n,t=this,l=e.relatedTarget,i=e.handleObj;return l&&(l===t||b.contains(t,l))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=A),n}}})),b.fn.extend({on:function(e,A,n,t){return Ge(this,e,A,n,t)},one:function(e,A,n,t){return Ge(this,e,A,n,t,1)},off:function(e,A,n){var t,l;if(e&&e.preventDefault&&e.handleObj)return t=e.handleObj,b(e.delegateTarget).off(t.namespace?t.origType+"."+t.namespace:t.origType,t.selector,t.handler),this;if("object"==typeof e){for(l in e)this.off(l,A,e[l]);return this}return!1!==A&&"function"!=typeof A||(n=A,A=void 0),!1===n&&(n=Se),this.each((function(){b.event.remove(this,e,n,A)}))}});var xe=/<script|<style|<link/i,Te=/checked\s*(?:[^=]|=\s*.checked.)/i,Oe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function we(e,A){return x(e,"table")&&x(11!==A.nodeType?A:A.firstChild,"tr")&&b(e).children("tbody")[0]||e}function Ke(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function De(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function _e(e,A){var n,t,l,i,s,o;if(1===A.nodeType){if(J.hasData(e)&&(o=J.get(e).events))for(l in J.remove(A,"handle events"),o)for(n=0,t=o[l].length;n<t;n++)b.event.add(A,l,o[l][n]);Z.hasData(e)&&(i=Z.access(e),s=b.extend({},i),Z.set(A,s))}}function ke(e,A){var n=A.nodeName.toLowerCase();"input"===n&&pe.test(e.type)?A.checked=e.checked:"input"!==n&&"textarea"!==n||(A.defaultValue=e.defaultValue)}function Ye(e,A,n,t){A=r(A);var l,i,s,o,a,C,u=0,c=e.length,m=c-1,d=A[0],h=I(d);if(h||c>1&&"string"==typeof d&&!p.checkClone&&Te.test(d))return e.each((function(l){var i=e.eq(l);h&&(A[0]=d.call(this,l,i.html())),Ye(i,A,n,t)}));if(c&&(i=(l=Be(A,e[0].ownerDocument,!1,e,t)).firstChild,1===l.childNodes.length&&(l=i),i||t)){for(o=(s=b.map(ge(l,"script"),Ke)).length;u<c;u++)a=l,u!==m&&(a=b.clone(a,!0,!0),o&&b.merge(s,ge(a,"script"))),n.call(e[u],a,u);if(o)for(C=s[s.length-1].ownerDocument,b.map(s,De),u=0;u<o;u++)a=s[u],fe.test(a.type||"")&&!J.access(a,"globalEval")&&b.contains(C,a)&&(a.src&&"module"!==(a.type||"").toLowerCase()?b._evalUrl&&!a.noModule&&b._evalUrl(a.src,{nonce:a.nonce||a.getAttribute("nonce")},C):v(a.textContent.replace(Oe,""),a,C))}return e}function Ve(e,A,n){for(var t,l=A?b.filter(A,e):e,i=0;null!=(t=l[i]);i++)n||1!==t.nodeType||b.cleanData(ge(t)),t.parentNode&&(n&&oe(t)&&ve(ge(t,"script")),t.parentNode.removeChild(t));return e}b.extend({htmlPrefilter:function(e){return e},clone:function(e,A,n){var t,l,i,s,o=e.cloneNode(!0),r=oe(e);if(!(p.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||b.isXMLDoc(e)))for(s=ge(o),t=0,l=(i=ge(e)).length;t<l;t++)ke(i[t],s[t]);if(A)if(n)for(i=i||ge(e),s=s||ge(o),t=0,l=i.length;t<l;t++)_e(i[t],s[t]);else _e(e,o);return(s=ge(o,"script")).length>0&&ve(s,!r&&ge(e,"script")),o},cleanData:function(e){for(var A,n,t,l=b.event.special,i=0;void 0!==(n=e[i]);i++)if($(n)){if(A=n[J.expando]){if(A.events)for(t in A.events)l[t]?b.event.remove(n,t):b.removeEvent(n,t,A.handle);n[J.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),b.fn.extend({detach:function(e){return Ve(this,e,!0)},remove:function(e){return Ve(this,e)},text:function(e){return U(this,(function(e){return void 0===e?b.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Ye(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||we(this,e).appendChild(e)}))},prepend:function(){return Ye(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var A=we(this,e);A.insertBefore(e,A.firstChild)}}))},before:function(){return Ye(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Ye(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,A=0;null!=(e=this[A]);A++)1===e.nodeType&&(b.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,A){return e=null!=e&&e,A=null==A?e:A,this.map((function(){return b.clone(this,e,A)}))},html:function(e){return U(this,(function(e){var A=this[0]||{},n=0,t=this.length;if(void 0===e&&1===A.nodeType)return A.innerHTML;if("string"==typeof e&&!xe.test(e)&&!Ee[(Ie.exec(e)||["",""])[1].toLowerCase()]){e=b.htmlPrefilter(e);try{for(;n<t;n++)1===(A=this[n]||{}).nodeType&&(b.cleanData(ge(A,!1)),A.innerHTML=e);A=0}catch(e){}}A&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Ye(this,arguments,(function(A){var n=this.parentNode;b.inArray(this,e)<0&&(b.cleanData(ge(this)),n&&n.replaceChild(A,this))}),e)}}),b.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,A){b.fn[e]=function(e){for(var n,t=[],l=b(e),i=l.length-1,s=0;s<=i;s++)n=s===i?this:this.clone(!0),b(l[s])[A](n),a.apply(t,n.get());return this.pushStack(t)}}));var Ne=new RegExp("^("+te+")(?!px)[a-z%]+$","i"),He=function(e){var A=e.ownerDocument.defaultView;return A&&A.opener||(A=t),A.getComputedStyle(e)},Fe=function(e,A,n){var t,l,i={};for(l in A)i[l]=e.style[l],e.style[l]=A[l];for(l in t=n.call(e),A)e.style[l]=i[l];return t},Pe=new RegExp(ie.join("|"),"i");function Le(e,A,n){var t,l,i,s,o=e.style;return(n=n||He(e))&&(""!==(s=n.getPropertyValue(A)||n[A])||oe(e)||(s=b.style(e,A)),!p.pixelBoxStyles()&&Ne.test(s)&&Pe.test(A)&&(t=o.width,l=o.minWidth,i=o.maxWidth,o.minWidth=o.maxWidth=o.width=s,s=n.width,o.width=t,o.minWidth=l,o.maxWidth=i)),void 0!==s?s+"":s}function Ue(e,A){return{get:function(){if(!e())return(this.get=A).apply(this,arguments);delete this.get}}}!function(){function e(){if(C){a.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",C.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",se.appendChild(a).appendChild(C);var e=t.getComputedStyle(C);n="1%"!==e.top,r=12===A(e.marginLeft),C.style.right="60%",s=36===A(e.right),l=36===A(e.width),C.style.position="absolute",i=12===A(C.offsetWidth/3),se.removeChild(a),C=null}}function A(e){return Math.round(parseFloat(e))}var n,l,i,s,o,r,a=E.createElement("div"),C=E.createElement("div");C.style&&(C.style.backgroundClip="content-box",C.cloneNode(!0).style.backgroundClip="",p.clearCloneStyle="content-box"===C.style.backgroundClip,b.extend(p,{boxSizingReliable:function(){return e(),l},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),r},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,A,n,l;return null==o&&(e=E.createElement("table"),A=E.createElement("tr"),n=E.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",A.style.cssText="border:1px solid",A.style.height="1px",n.style.height="9px",n.style.display="block",se.appendChild(e).appendChild(A).appendChild(n),l=t.getComputedStyle(A),o=parseInt(l.height,10)+parseInt(l.borderTopWidth,10)+parseInt(l.borderBottomWidth,10)===A.offsetHeight,se.removeChild(e)),o}}))}();var je=["Webkit","Moz","ms"],Re=E.createElement("div").style,qe={};function ze(e){var A=b.cssProps[e]||qe[e];return A||(e in Re?e:qe[e]=function(e){for(var A=e[0].toUpperCase()+e.slice(1),n=je.length;n--;)if((e=je[n]+A)in Re)return e}(e)||e)}var $e=/^(none|table(?!-c[ea]).+)/,Xe=/^--/,Je={position:"absolute",visibility:"hidden",display:"block"},Ze={letterSpacing:"0",fontWeight:"400"};function eA(e,A,n){var t=le.exec(A);return t?Math.max(0,t[2]-(n||0))+(t[3]||"px"):A}function AA(e,A,n,t,l,i){var s="width"===A?1:0,o=0,r=0;if(n===(t?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(r+=b.css(e,n+ie[s],!0,l)),t?("content"===n&&(r-=b.css(e,"padding"+ie[s],!0,l)),"margin"!==n&&(r-=b.css(e,"border"+ie[s]+"Width",!0,l))):(r+=b.css(e,"padding"+ie[s],!0,l),"padding"!==n?r+=b.css(e,"border"+ie[s]+"Width",!0,l):o+=b.css(e,"border"+ie[s]+"Width",!0,l));return!t&&i>=0&&(r+=Math.max(0,Math.ceil(e["offset"+A[0].toUpperCase()+A.slice(1)]-i-r-o-.5))||0),r}function nA(e,A,n){var t=He(e),l=(!p.boxSizingReliable()||n)&&"border-box"===b.css(e,"boxSizing",!1,t),i=l,s=Le(e,A,t),o="offset"+A[0].toUpperCase()+A.slice(1);if(Ne.test(s)){if(!n)return s;s="auto"}return(!p.boxSizingReliable()&&l||!p.reliableTrDimensions()&&x(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===b.css(e,"display",!1,t))&&e.getClientRects().length&&(l="border-box"===b.css(e,"boxSizing",!1,t),(i=o in e)&&(s=e[o])),(s=parseFloat(s)||0)+AA(e,A,n||(l?"border":"content"),i,t,s)+"px"}function tA(e,A,n,t,l){return new tA.prototype.init(e,A,n,t,l)}b.extend({cssHooks:{opacity:{get:function(e,A){if(A){var n=Le(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,A,n,t){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var l,i,s,o=z(A),r=Xe.test(A),a=e.style;if(r||(A=ze(o)),s=b.cssHooks[A]||b.cssHooks[o],void 0===n)return s&&"get"in s&&void 0!==(l=s.get(e,!1,t))?l:a[A];"string"===(i=typeof n)&&(l=le.exec(n))&&l[1]&&(n=Ce(e,A,l),i="number"),null!=n&&n==n&&("number"!==i||r||(n+=l&&l[3]||(b.cssNumber[o]?"":"px")),p.clearCloneStyle||""!==n||0!==A.indexOf("background")||(a[A]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,t))||(r?a.setProperty(A,n):a[A]=n))}},css:function(e,A,n,t){var l,i,s,o=z(A);return Xe.test(A)||(A=ze(o)),(s=b.cssHooks[A]||b.cssHooks[o])&&"get"in s&&(l=s.get(e,!0,n)),void 0===l&&(l=Le(e,A,t)),"normal"===l&&A in Ze&&(l=Ze[A]),""===n||n?(i=parseFloat(l),!0===n||isFinite(i)?i||0:l):l}}),b.each(["height","width"],(function(e,A){b.cssHooks[A]={get:function(e,n,t){if(n)return!$e.test(b.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?nA(e,A,t):Fe(e,Je,(function(){return nA(e,A,t)}))},set:function(e,n,t){var l,i=He(e),s=!p.scrollboxSize()&&"absolute"===i.position,o=(s||t)&&"border-box"===b.css(e,"boxSizing",!1,i),r=t?AA(e,A,t,o,i):0;return o&&s&&(r-=Math.ceil(e["offset"+A[0].toUpperCase()+A.slice(1)]-parseFloat(i[A])-AA(e,A,"border",!1,i)-.5)),r&&(l=le.exec(n))&&"px"!==(l[3]||"px")&&(e.style[A]=n,n=b.css(e,A)),eA(0,n,r)}}})),b.cssHooks.marginLeft=Ue(p.reliableMarginLeft,(function(e,A){if(A)return(parseFloat(Le(e,"marginLeft"))||e.getBoundingClientRect().left-Fe(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),b.each({margin:"",padding:"",border:"Width"},(function(e,A){b.cssHooks[e+A]={expand:function(n){for(var t=0,l={},i="string"==typeof n?n.split(" "):[n];t<4;t++)l[e+ie[t]+A]=i[t]||i[t-2]||i[0];return l}},"margin"!==e&&(b.cssHooks[e+A].set=eA)})),b.fn.extend({css:function(e,A){return U(this,(function(e,A,n){var t,l,i={},s=0;if(Array.isArray(A)){for(t=He(e),l=A.length;s<l;s++)i[A[s]]=b.css(e,A[s],!1,t);return i}return void 0!==n?b.style(e,A,n):b.css(e,A)}),e,A,arguments.length>1)}}),b.Tween=tA,tA.prototype={constructor:tA,init:function(e,A,n,t,l,i){this.elem=e,this.prop=n,this.easing=l||b.easing._default,this.options=A,this.start=this.now=this.cur(),this.end=t,this.unit=i||(b.cssNumber[n]?"":"px")},cur:function(){var e=tA.propHooks[this.prop];return e&&e.get?e.get(this):tA.propHooks._default.get(this)},run:function(e){var A,n=tA.propHooks[this.prop];return this.options.duration?this.pos=A=b.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=A=e,this.now=(this.end-this.start)*A+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):tA.propHooks._default.set(this),this}},tA.prototype.init.prototype=tA.prototype,tA.propHooks={_default:{get:function(e){var A;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(A=b.css(e.elem,e.prop,""))&&"auto"!==A?A:0},set:function(e){b.fx.step[e.prop]?b.fx.step[e.prop](e):1!==e.elem.nodeType||!b.cssHooks[e.prop]&&null==e.elem.style[ze(e.prop)]?e.elem[e.prop]=e.now:b.style(e.elem,e.prop,e.now+e.unit)}}},tA.propHooks.scrollTop=tA.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},b.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},b.fx=tA.prototype.init,b.fx.step={};var lA,iA,sA=/^(?:toggle|show|hide)$/,oA=/queueHooks$/;function rA(){iA&&(!1===E.hidden&&t.requestAnimationFrame?t.requestAnimationFrame(rA):t.setTimeout(rA,b.fx.interval),b.fx.tick())}function aA(){return t.setTimeout((function(){lA=void 0})),lA=Date.now()}function CA(e,A){var n,t=0,l={height:e};for(A=A?1:0;t<4;t+=2-A)l["margin"+(n=ie[t])]=l["padding"+n]=e;return A&&(l.opacity=l.width=e),l}function uA(e,A,n){for(var t,l=(cA.tweeners[A]||[]).concat(cA.tweeners["*"]),i=0,s=l.length;i<s;i++)if(t=l[i].call(n,A,e))return t}function cA(e,A,n){var t,l,i=0,s=cA.prefilters.length,o=b.Deferred().always((function(){delete r.elem})),r=function(){if(l)return!1;for(var A=lA||aA(),n=Math.max(0,a.startTime+a.duration-A),t=1-(n/a.duration||0),i=0,s=a.tweens.length;i<s;i++)a.tweens[i].run(t);return o.notifyWith(e,[a,t,n]),t<1&&s?n:(s||o.notifyWith(e,[a,1,0]),o.resolveWith(e,[a]),!1)},a=o.promise({elem:e,props:b.extend({},A),opts:b.extend(!0,{specialEasing:{},easing:b.easing._default},n),originalProperties:A,originalOptions:n,startTime:lA||aA(),duration:n.duration,tweens:[],createTween:function(A,n){var t=b.Tween(e,a.opts,A,n,a.opts.specialEasing[A]||a.opts.easing);return a.tweens.push(t),t},stop:function(A){var n=0,t=A?a.tweens.length:0;if(l)return this;for(l=!0;n<t;n++)a.tweens[n].run(1);return A?(o.notifyWith(e,[a,1,0]),o.resolveWith(e,[a,A])):o.rejectWith(e,[a,A]),this}}),C=a.props;for(!function(e,A){var n,t,l,i,s;for(n in e)if(l=A[t=z(n)],i=e[n],Array.isArray(i)&&(l=i[1],i=e[n]=i[0]),n!==t&&(e[t]=i,delete e[n]),(s=b.cssHooks[t])&&"expand"in s)for(n in i=s.expand(i),delete e[t],i)n in e||(e[n]=i[n],A[n]=l);else A[t]=l}(C,a.opts.specialEasing);i<s;i++)if(t=cA.prefilters[i].call(a,e,C,a.opts))return I(t.stop)&&(b._queueHooks(a.elem,a.opts.queue).stop=t.stop.bind(t)),t;return b.map(C,uA,a),I(a.opts.start)&&a.opts.start.call(e,a),a.progress(a.opts.progress).done(a.opts.done,a.opts.complete).fail(a.opts.fail).always(a.opts.always),b.fx.timer(b.extend(r,{elem:e,anim:a,queue:a.opts.queue})),a}b.Animation=b.extend(cA,{tweeners:{"*":[function(e,A){var n=this.createTween(e,A);return Ce(n.elem,e,le.exec(A),n),n}]},tweener:function(e,A){I(e)?(A=e,e=["*"]):e=e.match(Y);for(var n,t=0,l=e.length;t<l;t++)n=e[t],cA.tweeners[n]=cA.tweeners[n]||[],cA.tweeners[n].unshift(A)},prefilters:[function(e,A,n){var t,l,i,s,o,r,a,C,u="width"in A||"height"in A,c=this,m={},d=e.style,h=e.nodeType&&ae(e),p=J.get(e,"fxshow");for(t in n.queue||(null==(s=b._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,o=s.empty.fire,s.empty.fire=function(){s.unqueued||o()}),s.unqueued++,c.always((function(){c.always((function(){s.unqueued--,b.queue(e,"fx").length||s.empty.fire()}))}))),A)if(l=A[t],sA.test(l)){if(delete A[t],i=i||"toggle"===l,l===(h?"hide":"show")){if("show"!==l||!p||void 0===p[t])continue;h=!0}m[t]=p&&p[t]||b.style(e,t)}if((r=!b.isEmptyObject(A))||!b.isEmptyObject(m))for(t in u&&1===e.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],null==(a=p&&p.display)&&(a=J.get(e,"display")),"none"===(C=b.css(e,"display"))&&(a?C=a:(me([e],!0),a=e.style.display||a,C=b.css(e,"display"),me([e]))),("inline"===C||"inline-block"===C&&null!=a)&&"none"===b.css(e,"float")&&(r||(c.done((function(){d.display=a})),null==a&&(C=d.display,a="none"===C?"":C)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",c.always((function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}))),r=!1,m)r||(p?"hidden"in p&&(h=p.hidden):p=J.access(e,"fxshow",{display:a}),i&&(p.hidden=!h),h&&me([e],!0),c.done((function(){for(t in h||me([e]),J.remove(e,"fxshow"),m)b.style(e,t,m[t])}))),r=uA(h?p[t]:0,t,c),t in p||(p[t]=r.start,h&&(r.end=r.start,r.start=0))}],prefilter:function(e,A){A?cA.prefilters.unshift(e):cA.prefilters.push(e)}}),b.speed=function(e,A,n){var t=e&&"object"==typeof e?b.extend({},e):{complete:n||!n&&A||I(e)&&e,duration:e,easing:n&&A||A&&!I(A)&&A};return b.fx.off?t.duration=0:"number"!=typeof t.duration&&(t.duration in b.fx.speeds?t.duration=b.fx.speeds[t.duration]:t.duration=b.fx.speeds._default),null!=t.queue&&!0!==t.queue||(t.queue="fx"),t.old=t.complete,t.complete=function(){I(t.old)&&t.old.call(this),t.queue&&b.dequeue(this,t.queue)},t},b.fn.extend({fadeTo:function(e,A,n,t){return this.filter(ae).css("opacity",0).show().end().animate({opacity:A},e,n,t)},animate:function(e,A,n,t){var l=b.isEmptyObject(e),i=b.speed(A,n,t),s=function(){var A=cA(this,b.extend({},e),i);(l||J.get(this,"finish"))&&A.stop(!0)};return s.finish=s,l||!1===i.queue?this.each(s):this.queue(i.queue,s)},stop:function(e,A,n){var t=function(e){var A=e.stop;delete e.stop,A(n)};return"string"!=typeof e&&(n=A,A=e,e=void 0),A&&this.queue(e||"fx",[]),this.each((function(){var A=!0,l=null!=e&&e+"queueHooks",i=b.timers,s=J.get(this);if(l)s[l]&&s[l].stop&&t(s[l]);else for(l in s)s[l]&&s[l].stop&&oA.test(l)&&t(s[l]);for(l=i.length;l--;)i[l].elem!==this||null!=e&&i[l].queue!==e||(i[l].anim.stop(n),A=!1,i.splice(l,1));!A&&n||b.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var A,n=J.get(this),t=n[e+"queue"],l=n[e+"queueHooks"],i=b.timers,s=t?t.length:0;for(n.finish=!0,b.queue(this,e,[]),l&&l.stop&&l.stop.call(this,!0),A=i.length;A--;)i[A].elem===this&&i[A].queue===e&&(i[A].anim.stop(!0),i.splice(A,1));for(A=0;A<s;A++)t[A]&&t[A].finish&&t[A].finish.call(this);delete n.finish}))}}),b.each(["toggle","show","hide"],(function(e,A){var n=b.fn[A];b.fn[A]=function(e,t,l){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(CA(A,!0),e,t,l)}})),b.each({slideDown:CA("show"),slideUp:CA("hide"),slideToggle:CA("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,A){b.fn[e]=function(e,n,t){return this.animate(A,e,n,t)}})),b.timers=[],b.fx.tick=function(){var e,A=0,n=b.timers;for(lA=Date.now();A<n.length;A++)(e=n[A])()||n[A]!==e||n.splice(A--,1);n.length||b.fx.stop(),lA=void 0},b.fx.timer=function(e){b.timers.push(e),b.fx.start()},b.fx.interval=13,b.fx.start=function(){iA||(iA=!0,rA())},b.fx.stop=function(){iA=null},b.fx.speeds={slow:600,fast:200,_default:400},b.fn.delay=function(e,A){return e=b.fx&&b.fx.speeds[e]||e,A=A||"fx",this.queue(A,(function(A,n){var l=t.setTimeout(A,e);n.stop=function(){t.clearTimeout(l)}}))},function(){var e=E.createElement("input"),A=E.createElement("select").appendChild(E.createElement("option"));e.type="checkbox",p.checkOn=""!==e.value,p.optSelected=A.selected,(e=E.createElement("input")).value="t",e.type="radio",p.radioValue="t"===e.value}();var mA,dA=b.expr.attrHandle;b.fn.extend({attr:function(e,A){return U(this,b.attr,e,A,arguments.length>1)},removeAttr:function(e){return this.each((function(){b.removeAttr(this,e)}))}}),b.extend({attr:function(e,A,n){var t,l,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?b.prop(e,A,n):(1===i&&b.isXMLDoc(e)||(l=b.attrHooks[A.toLowerCase()]||(b.expr.match.bool.test(A)?mA:void 0)),void 0!==n?null===n?void b.removeAttr(e,A):l&&"set"in l&&void 0!==(t=l.set(e,n,A))?t:(e.setAttribute(A,n+""),n):l&&"get"in l&&null!==(t=l.get(e,A))?t:null==(t=b.find.attr(e,A))?void 0:t)},attrHooks:{type:{set:function(e,A){if(!p.radioValue&&"radio"===A&&x(e,"input")){var n=e.value;return e.setAttribute("type",A),n&&(e.value=n),A}}}},removeAttr:function(e,A){var n,t=0,l=A&&A.match(Y);if(l&&1===e.nodeType)for(;n=l[t++];)e.removeAttribute(n)}}),mA={set:function(e,A,n){return!1===A?b.removeAttr(e,n):e.setAttribute(n,n),n}},b.each(b.expr.match.bool.source.match(/\w+/g),(function(e,A){var n=dA[A]||b.find.attr;dA[A]=function(e,A,t){var l,i,s=A.toLowerCase();return t||(i=dA[s],dA[s]=l,l=null!=n(e,A,t)?s:null,dA[s]=i),l}}));var hA=/^(?:input|select|textarea|button)$/i,pA=/^(?:a|area)$/i;function IA(e){return(e.match(Y)||[]).join(" ")}function fA(e){return e.getAttribute&&e.getAttribute("class")||""}function EA(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(Y)||[]}b.fn.extend({prop:function(e,A){return U(this,b.prop,e,A,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[b.propFix[e]||e]}))}}),b.extend({prop:function(e,A,n){var t,l,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&b.isXMLDoc(e)||(A=b.propFix[A]||A,l=b.propHooks[A]),void 0!==n?l&&"set"in l&&void 0!==(t=l.set(e,n,A))?t:e[A]=n:l&&"get"in l&&null!==(t=l.get(e,A))?t:e[A]},propHooks:{tabIndex:{get:function(e){var A=b.find.attr(e,"tabindex");return A?parseInt(A,10):hA.test(e.nodeName)||pA.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),p.optSelected||(b.propHooks.selected={get:function(e){var A=e.parentNode;return A&&A.parentNode&&A.parentNode.selectedIndex,null},set:function(e){var A=e.parentNode;A&&(A.selectedIndex,A.parentNode&&A.parentNode.selectedIndex)}}),b.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){b.propFix[this.toLowerCase()]=this})),b.fn.extend({addClass:function(e){var A,n,t,l,i,s,o,r=0;if(I(e))return this.each((function(A){b(this).addClass(e.call(this,A,fA(this)))}));if((A=EA(e)).length)for(;n=this[r++];)if(l=fA(n),t=1===n.nodeType&&" "+IA(l)+" "){for(s=0;i=A[s++];)t.indexOf(" "+i+" ")<0&&(t+=i+" ");l!==(o=IA(t))&&n.setAttribute("class",o)}return this},removeClass:function(e){var A,n,t,l,i,s,o,r=0;if(I(e))return this.each((function(A){b(this).removeClass(e.call(this,A,fA(this)))}));if(!arguments.length)return this.attr("class","");if((A=EA(e)).length)for(;n=this[r++];)if(l=fA(n),t=1===n.nodeType&&" "+IA(l)+" "){for(s=0;i=A[s++];)for(;t.indexOf(" "+i+" ")>-1;)t=t.replace(" "+i+" "," ");l!==(o=IA(t))&&n.setAttribute("class",o)}return this},toggleClass:function(e,A){var n=typeof e,t="string"===n||Array.isArray(e);return"boolean"==typeof A&&t?A?this.addClass(e):this.removeClass(e):I(e)?this.each((function(n){b(this).toggleClass(e.call(this,n,fA(this),A),A)})):this.each((function(){var A,l,i,s;if(t)for(l=0,i=b(this),s=EA(e);A=s[l++];)i.hasClass(A)?i.removeClass(A):i.addClass(A);else void 0!==e&&"boolean"!==n||((A=fA(this))&&J.set(this,"__className__",A),this.setAttribute&&this.setAttribute("class",A||!1===e?"":J.get(this,"__className__")||""))}))},hasClass:function(e){var A,n,t=0;for(A=" "+e+" ";n=this[t++];)if(1===n.nodeType&&(" "+IA(fA(n))+" ").indexOf(A)>-1)return!0;return!1}});var gA=/\r/g;b.fn.extend({val:function(e){var A,n,t,l=this[0];return arguments.length?(t=I(e),this.each((function(n){var l;1===this.nodeType&&(null==(l=t?e.call(this,n,b(this).val()):e)?l="":"number"==typeof l?l+="":Array.isArray(l)&&(l=b.map(l,(function(e){return null==e?"":e+""}))),(A=b.valHooks[this.type]||b.valHooks[this.nodeName.toLowerCase()])&&"set"in A&&void 0!==A.set(this,l,"value")||(this.value=l))}))):l?(A=b.valHooks[l.type]||b.valHooks[l.nodeName.toLowerCase()])&&"get"in A&&void 0!==(n=A.get(l,"value"))?n:"string"==typeof(n=l.value)?n.replace(gA,""):null==n?"":n:void 0}}),b.extend({valHooks:{option:{get:function(e){var A=b.find.attr(e,"value");return null!=A?A:IA(b.text(e))}},select:{get:function(e){var A,n,t,l=e.options,i=e.selectedIndex,s="select-one"===e.type,o=s?null:[],r=s?i+1:l.length;for(t=i<0?r:s?i:0;t<r;t++)if(((n=l[t]).selected||t===i)&&!n.disabled&&(!n.parentNode.disabled||!x(n.parentNode,"optgroup"))){if(A=b(n).val(),s)return A;o.push(A)}return o},set:function(e,A){for(var n,t,l=e.options,i=b.makeArray(A),s=l.length;s--;)((t=l[s]).selected=b.inArray(b.valHooks.option.get(t),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),b.each(["radio","checkbox"],(function(){b.valHooks[this]={set:function(e,A){if(Array.isArray(A))return e.checked=b.inArray(b(e).val(),A)>-1}},p.checkOn||(b.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),p.focusin="onfocusin"in t;var vA=/^(?:focusinfocus|focusoutblur)$/,MA=function(e){e.stopPropagation()};b.extend(b.event,{trigger:function(e,A,n,l){var i,s,o,r,a,C,u,c,d=[n||E],h=m.call(e,"type")?e.type:e,p=m.call(e,"namespace")?e.namespace.split("."):[];if(s=c=o=n=n||E,3!==n.nodeType&&8!==n.nodeType&&!vA.test(h+b.event.triggered)&&(h.indexOf(".")>-1&&(p=h.split("."),h=p.shift(),p.sort()),a=h.indexOf(":")<0&&"on"+h,(e=e[b.expando]?e:new b.Event(h,"object"==typeof e&&e)).isTrigger=l?2:3,e.namespace=p.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),A=null==A?[e]:b.makeArray(A,[e]),u=b.event.special[h]||{},l||!u.trigger||!1!==u.trigger.apply(n,A))){if(!l&&!u.noBubble&&!f(n)){for(r=u.delegateType||h,vA.test(r+h)||(s=s.parentNode);s;s=s.parentNode)d.push(s),o=s;o===(n.ownerDocument||E)&&d.push(o.defaultView||o.parentWindow||t)}for(i=0;(s=d[i++])&&!e.isPropagationStopped();)c=s,e.type=i>1?r:u.bindType||h,(C=(J.get(s,"events")||Object.create(null))[e.type]&&J.get(s,"handle"))&&C.apply(s,A),(C=a&&s[a])&&C.apply&&$(s)&&(e.result=C.apply(s,A),!1===e.result&&e.preventDefault());return e.type=h,l||e.isDefaultPrevented()||u._default&&!1!==u._default.apply(d.pop(),A)||!$(n)||a&&I(n[h])&&!f(n)&&((o=n[a])&&(n[a]=null),b.event.triggered=h,e.isPropagationStopped()&&c.addEventListener(h,MA),n[h](),e.isPropagationStopped()&&c.removeEventListener(h,MA),b.event.triggered=void 0,o&&(n[a]=o)),e.result}},simulate:function(e,A,n){var t=b.extend(new b.Event,n,{type:e,isSimulated:!0});b.event.trigger(t,null,A)}}),b.fn.extend({trigger:function(e,A){return this.each((function(){b.event.trigger(e,A,this)}))},triggerHandler:function(e,A){var n=this[0];if(n)return b.event.trigger(e,A,n,!0)}}),p.focusin||b.each({focus:"focusin",blur:"focusout"},(function(e,A){var n=function(e){b.event.simulate(A,e.target,b.event.fix(e))};b.event.special[A]={setup:function(){var t=this.ownerDocument||this.document||this,l=J.access(t,A);l||t.addEventListener(e,n,!0),J.access(t,A,(l||0)+1)},teardown:function(){var t=this.ownerDocument||this.document||this,l=J.access(t,A)-1;l?J.access(t,A,l):(t.removeEventListener(e,n,!0),J.remove(t,A))}}}));var BA=t.location,bA={guid:Date.now()},yA=/\?/;b.parseXML=function(e){var A,n;if(!e||"string"!=typeof e)return null;try{A=(new t.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=A&&A.getElementsByTagName("parsererror")[0],A&&!n||b.error("Invalid XML: "+(n?b.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),A};var SA=/\[\]$/,QA=/\r?\n/g,GA=/^(?:submit|button|image|reset|file)$/i,WA=/^(?:input|select|textarea|keygen)/i;function xA(e,A,n,t){var l;if(Array.isArray(A))b.each(A,(function(A,l){n||SA.test(e)?t(e,l):xA(e+"["+("object"==typeof l&&null!=l?A:"")+"]",l,n,t)}));else if(n||"object"!==M(A))t(e,A);else for(l in A)xA(e+"["+l+"]",A[l],n,t)}b.param=function(e,A){var n,t=[],l=function(e,A){var n=I(A)?A():A;t[t.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!b.isPlainObject(e))b.each(e,(function(){l(this.name,this.value)}));else for(n in e)xA(n,e[n],A,l);return t.join("&")},b.fn.extend({serialize:function(){return b.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=b.prop(this,"elements");return e?b.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!b(this).is(":disabled")&&WA.test(this.nodeName)&&!GA.test(e)&&(this.checked||!pe.test(e))})).map((function(e,A){var n=b(this).val();return null==n?null:Array.isArray(n)?b.map(n,(function(e){return{name:A.name,value:e.replace(QA,"\r\n")}})):{name:A.name,value:n.replace(QA,"\r\n")}})).get()}});var TA=/%20/g,OA=/#.*$/,wA=/([?&])_=[^&]*/,KA=/^(.*?):[ \t]*([^\r\n]*)$/gm,DA=/^(?:GET|HEAD)$/,_A=/^\/\//,kA={},YA={},VA="*/".concat("*"),NA=E.createElement("a");function HA(e){return function(A,n){"string"!=typeof A&&(n=A,A="*");var t,l=0,i=A.toLowerCase().match(Y)||[];if(I(n))for(;t=i[l++];)"+"===t[0]?(t=t.slice(1)||"*",(e[t]=e[t]||[]).unshift(n)):(e[t]=e[t]||[]).push(n)}}function FA(e,A,n,t){var l={},i=e===YA;function s(o){var r;return l[o]=!0,b.each(e[o]||[],(function(e,o){var a=o(A,n,t);return"string"!=typeof a||i||l[a]?i?!(r=a):void 0:(A.dataTypes.unshift(a),s(a),!1)})),r}return s(A.dataTypes[0])||!l["*"]&&s("*")}function PA(e,A){var n,t,l=b.ajaxSettings.flatOptions||{};for(n in A)void 0!==A[n]&&((l[n]?e:t||(t={}))[n]=A[n]);return t&&b.extend(!0,e,t),e}NA.href=BA.href,b.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:BA.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(BA.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":VA,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":b.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,A){return A?PA(PA(e,b.ajaxSettings),A):PA(b.ajaxSettings,e)},ajaxPrefilter:HA(kA),ajaxTransport:HA(YA),ajax:function(e,A){"object"==typeof e&&(A=e,e=void 0),A=A||{};var n,l,i,s,o,r,a,C,u,c,m=b.ajaxSetup({},A),d=m.context||m,h=m.context&&(d.nodeType||d.jquery)?b(d):b.event,p=b.Deferred(),I=b.Callbacks("once memory"),f=m.statusCode||{},g={},v={},M="canceled",B={readyState:0,getResponseHeader:function(e){var A;if(a){if(!s)for(s={};A=KA.exec(i);)s[A[1].toLowerCase()+" "]=(s[A[1].toLowerCase()+" "]||[]).concat(A[2]);A=s[e.toLowerCase()+" "]}return null==A?null:A.join(", ")},getAllResponseHeaders:function(){return a?i:null},setRequestHeader:function(e,A){return null==a&&(e=v[e.toLowerCase()]=v[e.toLowerCase()]||e,g[e]=A),this},overrideMimeType:function(e){return null==a&&(m.mimeType=e),this},statusCode:function(e){var A;if(e)if(a)B.always(e[B.status]);else for(A in e)f[A]=[f[A],e[A]];return this},abort:function(e){var A=e||M;return n&&n.abort(A),y(0,A),this}};if(p.promise(B),m.url=((e||m.url||BA.href)+"").replace(_A,BA.protocol+"//"),m.type=A.method||A.type||m.method||m.type,m.dataTypes=(m.dataType||"*").toLowerCase().match(Y)||[""],null==m.crossDomain){r=E.createElement("a");try{r.href=m.url,r.href=r.href,m.crossDomain=NA.protocol+"//"+NA.host!=r.protocol+"//"+r.host}catch(e){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=b.param(m.data,m.traditional)),FA(kA,m,A,B),a)return B;for(u in(C=b.event&&m.global)&&0==b.active++&&b.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!DA.test(m.type),l=m.url.replace(OA,""),m.hasContent?m.data&&m.processData&&0===(m.contentType||"").indexOf("application/x-www-form-urlencoded")&&(m.data=m.data.replace(TA,"+")):(c=m.url.slice(l.length),m.data&&(m.processData||"string"==typeof m.data)&&(l+=(yA.test(l)?"&":"?")+m.data,delete m.data),!1===m.cache&&(l=l.replace(wA,"$1"),c=(yA.test(l)?"&":"?")+"_="+bA.guid+++c),m.url=l+c),m.ifModified&&(b.lastModified[l]&&B.setRequestHeader("If-Modified-Since",b.lastModified[l]),b.etag[l]&&B.setRequestHeader("If-None-Match",b.etag[l])),(m.data&&m.hasContent&&!1!==m.contentType||A.contentType)&&B.setRequestHeader("Content-Type",m.contentType),B.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+VA+"; q=0.01":""):m.accepts["*"]),m.headers)B.setRequestHeader(u,m.headers[u]);if(m.beforeSend&&(!1===m.beforeSend.call(d,B,m)||a))return B.abort();if(M="abort",I.add(m.complete),B.done(m.success),B.fail(m.error),n=FA(YA,m,A,B)){if(B.readyState=1,C&&h.trigger("ajaxSend",[B,m]),a)return B;m.async&&m.timeout>0&&(o=t.setTimeout((function(){B.abort("timeout")}),m.timeout));try{a=!1,n.send(g,y)}catch(e){if(a)throw e;y(-1,e)}}else y(-1,"No Transport");function y(e,A,s,r){var u,c,E,g,v,M=A;a||(a=!0,o&&t.clearTimeout(o),n=void 0,i=r||"",B.readyState=e>0?4:0,u=e>=200&&e<300||304===e,s&&(g=function(e,A,n){for(var t,l,i,s,o=e.contents,r=e.dataTypes;"*"===r[0];)r.shift(),void 0===t&&(t=e.mimeType||A.getResponseHeader("Content-Type"));if(t)for(l in o)if(o[l]&&o[l].test(t)){r.unshift(l);break}if(r[0]in n)i=r[0];else{for(l in n){if(!r[0]||e.converters[l+" "+r[0]]){i=l;break}s||(s=l)}i=i||s}if(i)return i!==r[0]&&r.unshift(i),n[i]}(m,B,s)),!u&&b.inArray("script",m.dataTypes)>-1&&b.inArray("json",m.dataTypes)<0&&(m.converters["text script"]=function(){}),g=function(e,A,n,t){var l,i,s,o,r,a={},C=e.dataTypes.slice();if(C[1])for(s in e.converters)a[s.toLowerCase()]=e.converters[s];for(i=C.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=A),!r&&t&&e.dataFilter&&(A=e.dataFilter(A,e.dataType)),r=i,i=C.shift())if("*"===i)i=r;else if("*"!==r&&r!==i){if(!(s=a[r+" "+i]||a["* "+i]))for(l in a)if((o=l.split(" "))[1]===i&&(s=a[r+" "+o[0]]||a["* "+o[0]])){!0===s?s=a[l]:!0!==a[l]&&(i=o[0],C.unshift(o[1]));break}if(!0!==s)if(s&&e.throws)A=s(A);else try{A=s(A)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+r+" to "+i}}}return{state:"success",data:A}}(m,g,B,u),u?(m.ifModified&&((v=B.getResponseHeader("Last-Modified"))&&(b.lastModified[l]=v),(v=B.getResponseHeader("etag"))&&(b.etag[l]=v)),204===e||"HEAD"===m.type?M="nocontent":304===e?M="notmodified":(M=g.state,c=g.data,u=!(E=g.error))):(E=M,!e&&M||(M="error",e<0&&(e=0))),B.status=e,B.statusText=(A||M)+"",u?p.resolveWith(d,[c,M,B]):p.rejectWith(d,[B,M,E]),B.statusCode(f),f=void 0,C&&h.trigger(u?"ajaxSuccess":"ajaxError",[B,m,u?c:E]),I.fireWith(d,[B,M]),C&&(h.trigger("ajaxComplete",[B,m]),--b.active||b.event.trigger("ajaxStop")))}return B},getJSON:function(e,A,n){return b.get(e,A,n,"json")},getScript:function(e,A){return b.get(e,void 0,A,"script")}}),b.each(["get","post"],(function(e,A){b[A]=function(e,n,t,l){return I(n)&&(l=l||t,t=n,n=void 0),b.ajax(b.extend({url:e,type:A,dataType:l,data:n,success:t},b.isPlainObject(e)&&e))}})),b.ajaxPrefilter((function(e){var A;for(A in e.headers)"content-type"===A.toLowerCase()&&(e.contentType=e.headers[A]||"")})),b._evalUrl=function(e,A,n){return b.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){b.globalEval(e,A,n)}})},b.fn.extend({wrapAll:function(e){var A;return this[0]&&(I(e)&&(e=e.call(this[0])),A=b(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&A.insertBefore(this[0]),A.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return I(e)?this.each((function(A){b(this).wrapInner(e.call(this,A))})):this.each((function(){var A=b(this),n=A.contents();n.length?n.wrapAll(e):A.append(e)}))},wrap:function(e){var A=I(e);return this.each((function(n){b(this).wrapAll(A?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){b(this).replaceWith(this.childNodes)})),this}}),b.expr.pseudos.hidden=function(e){return!b.expr.pseudos.visible(e)},b.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},b.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(e){}};var LA={0:200,1223:204},UA=b.ajaxSettings.xhr();p.cors=!!UA&&"withCredentials"in UA,p.ajax=UA=!!UA,b.ajaxTransport((function(e){var A,n;if(p.cors||UA&&!e.crossDomain)return{send:function(l,i){var s,o=e.xhr();if(o.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)o[s]=e.xhrFields[s];for(s in e.mimeType&&o.overrideMimeType&&o.overrideMimeType(e.mimeType),e.crossDomain||l["X-Requested-With"]||(l["X-Requested-With"]="XMLHttpRequest"),l)o.setRequestHeader(s,l[s]);A=function(e){return function(){A&&(A=n=o.onload=o.onerror=o.onabort=o.ontimeout=o.onreadystatechange=null,"abort"===e?o.abort():"error"===e?"number"!=typeof o.status?i(0,"error"):i(o.status,o.statusText):i(LA[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=A(),n=o.onerror=o.ontimeout=A("error"),void 0!==o.onabort?o.onabort=n:o.onreadystatechange=function(){4===o.readyState&&t.setTimeout((function(){A&&n()}))},A=A("abort");try{o.send(e.hasContent&&e.data||null)}catch(e){if(A)throw e}},abort:function(){A&&A()}}})),b.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),b.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return b.globalEval(e),e}}}),b.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),b.ajaxTransport("script",(function(e){var A,n;if(e.crossDomain||e.scriptAttrs)return{send:function(t,l){A=b("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){A.remove(),n=null,e&&l("error"===e.type?404:200,e.type)}),E.head.appendChild(A[0])},abort:function(){n&&n()}}}));var jA,RA=[],qA=/(=)\?(?=&|$)|\?\?/;b.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=RA.pop()||b.expando+"_"+bA.guid++;return this[e]=!0,e}}),b.ajaxPrefilter("json jsonp",(function(e,A,n){var l,i,s,o=!1!==e.jsonp&&(qA.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&qA.test(e.data)&&"data");if(o||"jsonp"===e.dataTypes[0])return l=e.jsonpCallback=I(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,o?e[o]=e[o].replace(qA,"$1"+l):!1!==e.jsonp&&(e.url+=(yA.test(e.url)?"&":"?")+e.jsonp+"="+l),e.converters["script json"]=function(){return s||b.error(l+" was not called"),s[0]},e.dataTypes[0]="json",i=t[l],t[l]=function(){s=arguments},n.always((function(){void 0===i?b(t).removeProp(l):t[l]=i,e[l]&&(e.jsonpCallback=A.jsonpCallback,RA.push(l)),s&&I(i)&&i(s[0]),s=i=void 0})),"script"})),p.createHTMLDocument=((jA=E.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===jA.childNodes.length),b.parseHTML=function(e,A,n){return"string"!=typeof e?[]:("boolean"==typeof A&&(n=A,A=!1),A||(p.createHTMLDocument?((t=(A=E.implementation.createHTMLDocument("")).createElement("base")).href=E.location.href,A.head.appendChild(t)):A=E),i=!n&&[],(l=T.exec(e))?[A.createElement(l[1])]:(l=Be([e],A,i),i&&i.length&&b(i).remove(),b.merge([],l.childNodes)));var t,l,i},b.fn.load=function(e,A,n){var t,l,i,s=this,o=e.indexOf(" ");return o>-1&&(t=IA(e.slice(o)),e=e.slice(0,o)),I(A)?(n=A,A=void 0):A&&"object"==typeof A&&(l="POST"),s.length>0&&b.ajax({url:e,type:l||"GET",dataType:"html",data:A}).done((function(e){i=arguments,s.html(t?b("<div>").append(b.parseHTML(e)).find(t):e)})).always(n&&function(e,A){s.each((function(){n.apply(this,i||[e.responseText,A,e])}))}),this},b.expr.pseudos.animated=function(e){return b.grep(b.timers,(function(A){return e===A.elem})).length},b.offset={setOffset:function(e,A,n){var t,l,i,s,o,r,a=b.css(e,"position"),C=b(e),u={};"static"===a&&(e.style.position="relative"),o=C.offset(),i=b.css(e,"top"),r=b.css(e,"left"),("absolute"===a||"fixed"===a)&&(i+r).indexOf("auto")>-1?(s=(t=C.position()).top,l=t.left):(s=parseFloat(i)||0,l=parseFloat(r)||0),I(A)&&(A=A.call(e,n,b.extend({},o))),null!=A.top&&(u.top=A.top-o.top+s),null!=A.left&&(u.left=A.left-o.left+l),"using"in A?A.using.call(e,u):C.css(u)}},b.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(A){b.offset.setOffset(this,e,A)}));var A,n,t=this[0];return t?t.getClientRects().length?(A=t.getBoundingClientRect(),n=t.ownerDocument.defaultView,{top:A.top+n.pageYOffset,left:A.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,A,n,t=this[0],l={top:0,left:0};if("fixed"===b.css(t,"position"))A=t.getBoundingClientRect();else{for(A=this.offset(),n=t.ownerDocument,e=t.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===b.css(e,"position");)e=e.parentNode;e&&e!==t&&1===e.nodeType&&((l=b(e).offset()).top+=b.css(e,"borderTopWidth",!0),l.left+=b.css(e,"borderLeftWidth",!0))}return{top:A.top-l.top-b.css(t,"marginTop",!0),left:A.left-l.left-b.css(t,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===b.css(e,"position");)e=e.offsetParent;return e||se}))}}),b.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,A){var n="pageYOffset"===A;b.fn[e]=function(t){return U(this,(function(e,t,l){var i;if(f(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===l)return i?i[A]:e[t];i?i.scrollTo(n?i.pageXOffset:l,n?l:i.pageYOffset):e[t]=l}),e,t,arguments.length)}})),b.each(["top","left"],(function(e,A){b.cssHooks[A]=Ue(p.pixelPosition,(function(e,n){if(n)return n=Le(e,A),Ne.test(n)?b(e).position()[A]+"px":n}))})),b.each({Height:"height",Width:"width"},(function(e,A){b.each({padding:"inner"+e,content:A,"":"outer"+e},(function(n,t){b.fn[t]=function(l,i){var s=arguments.length&&(n||"boolean"!=typeof l),o=n||(!0===l||!0===i?"margin":"border");return U(this,(function(A,n,l){var i;return f(A)?0===t.indexOf("outer")?A["inner"+e]:A.document.documentElement["client"+e]:9===A.nodeType?(i=A.documentElement,Math.max(A.body["scroll"+e],i["scroll"+e],A.body["offset"+e],i["offset"+e],i["client"+e])):void 0===l?b.css(A,n,o):b.style(A,n,l,o)}),A,s?l:void 0,s)}}))})),b.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,A){b.fn[A]=function(e){return this.on(A,e)}})),b.fn.extend({bind:function(e,A,n){return this.on(e,null,A,n)},unbind:function(e,A){return this.off(e,null,A)},delegate:function(e,A,n,t){return this.on(A,e,n,t)},undelegate:function(e,A,n){return 1===arguments.length?this.off(e,"**"):this.off(A,e||"**",n)},hover:function(e,A){return this.mouseenter(e).mouseleave(A||e)}}),b.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,A){b.fn[A]=function(e,n){return arguments.length>0?this.on(A,null,e,n):this.trigger(A)}}));var zA=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;b.proxy=function(e,A){var n,t,l;if("string"==typeof A&&(n=e[A],A=e,e=n),I(e))return t=o.call(arguments,2),l=function(){return e.apply(A||this,t.concat(o.call(arguments)))},l.guid=e.guid=e.guid||b.guid++,l},b.holdReady=function(e){e?b.readyWait++:b.ready(!0)},b.isArray=Array.isArray,b.parseJSON=JSON.parse,b.nodeName=x,b.isFunction=I,b.isWindow=f,b.camelCase=z,b.type=M,b.now=Date.now,b.isNumeric=function(e){var A=b.type(e);return("number"===A||"string"===A)&&!isNaN(e-parseFloat(e))},b.trim=function(e){return null==e?"":(e+"").replace(zA,"")},void 0===(n=function(){return b}.apply(A,[]))||(e.exports=n);var $A=t.jQuery,XA=t.$;return b.noConflict=function(e){return t.$===b&&(t.$=XA),e&&t.jQuery===b&&(t.jQuery=$A),b},void 0===l&&(t.jQuery=t.$=b),b}))}},e=>{var A;A=90,e(e.s=A)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,